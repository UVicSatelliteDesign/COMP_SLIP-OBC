
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         00006404  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080066f4  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006754  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  080067b4  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  080067b4  00008758  2**0
=======
  1 .text         00009074  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08009314  08009314  0000a314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093bc  080093bc  0000a3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093c4  080093c4  0000a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080093c8  080093c8  0000a3c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080093cc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  080093e0  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08009440  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fdc  240000d4  080094a0  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240050b0  080094a0  0000c0b0  2**0
>>>>>>> dev
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002210a  00000000  00000000  0000b102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f16  00000000  00000000  0002d20c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001798  00000000  00000000  00031128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000122f  00000000  00000000  000328c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 16 .debug_macro  000372c3  00000000  00000000  0002405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f1a  00000000  00000000  0005b322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e13e  00000000  00000000  0006f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd37a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  001cd3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001d14dc  2**0
=======
 16 .debug_macro  0000494f  00000000  00000000  00033aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c4fc  00000000  00000000  0003843e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001689cf  00000000  00000000  0005493a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bd309  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063d4  00000000  00000000  001bd34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001c3720  2**0
>>>>>>> dev
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

<<<<<<< HEAD
08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006684 	.word	0x08006684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006684 	.word	0x08006684

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
=======
080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080092fc 	.word	0x080092fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	080092fc 	.word	0x080092fc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
>>>>>>> dev
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
<<<<<<< HEAD
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
=======
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
>>>>>>> dev
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 8000608:	f000 fce8 	bl	8000fdc <HAL_Init>
=======
 80005d6:	f000 fd2f 	bl	8001038 <HAL_Init>
>>>>>>> dev
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 800060c:	f000 f80a 	bl	8000624 <SystemClock_Config>
=======
 80005da:	f000 f839 	bl	8000650 <SystemClock_Config>
>>>>>>> dev
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8000610:	f000 f952 	bl	80008b8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f886 	bl	8000724 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f8d0 	bl	80007bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061c:	f000 f91a 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>
=======
 80005de:	f000 f981 	bl	80008e4 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e2:	f000 f8b5 	bl	8000750 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f8ff 	bl	80007e8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ea:	f000 f949 	bl	8000880 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
>>>>>>> dev

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ee:	f006 f87f 	bl	80066f0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f2:	4a10      	ldr	r2, [pc, #64]	@ (8000634 <main+0x64>)
 80005f4:	2100      	movs	r1, #0
 80005f6:	4810      	ldr	r0, [pc, #64]	@ (8000638 <main+0x68>)
 80005f8:	f006 f8c4 	bl	8006784 <osThreadNew>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4a0f      	ldr	r2, [pc, #60]	@ (800063c <main+0x6c>)
 8000600:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(obc_notifications, "OBC Notifications", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 8000602:	2300      	movs	r3, #0
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2301      	movs	r3, #1
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2280      	movs	r2, #128	@ 0x80
 800060e:	490c      	ldr	r1, [pc, #48]	@ (8000640 <main+0x70>)
 8000610:	480c      	ldr	r0, [pc, #48]	@ (8000644 <main+0x74>)
 8000612:	f006 ffa7 	bl	8007564 <xTaskCreate>

  xTaskCreate(ttc_notifications, "TTC Notifications", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 8000616:	2300      	movs	r3, #0
 8000618:	9301      	str	r3, [sp, #4]
 800061a:	2302      	movs	r3, #2
 800061c:	9300      	str	r3, [sp, #0]
 800061e:	2300      	movs	r3, #0
 8000620:	2280      	movs	r2, #128	@ 0x80
 8000622:	4909      	ldr	r1, [pc, #36]	@ (8000648 <main+0x78>)
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <main+0x7c>)
 8000626:	f006 ff9d 	bl	8007564 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800062a:	f006 f885 	bl	8006738 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
<<<<<<< HEAD
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x1c>

08000624 <SystemClock_Config>:
=======
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0x5e>
 8000632:	bf00      	nop
 8000634:	08009360 	.word	0x08009360
 8000638:	08000a9d 	.word	0x08000a9d
 800063c:	24000750 	.word	0x24000750
 8000640:	08009320 	.word	0x08009320
 8000644:	08000ab9 	.word	0x08000ab9
 8000648:	08009334 	.word	0x08009334
 800064c:	08000fd1 	.word	0x08000fd1

08000650 <SystemClock_Config>:
>>>>>>> dev
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	@ 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062e:	224c      	movs	r2, #76	@ 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fff9 	bl	800662a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fff3 	bl	800662a <memset>
=======
 8000650:	b580      	push	{r7, lr}
 8000652:	b09c      	sub	sp, #112	@ 0x70
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800065a:	224c      	movs	r2, #76	@ 0x4c
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f008 fe12 	bl	8009288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2220      	movs	r2, #32
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f008 fe0c 	bl	8009288 <memset>
>>>>>>> dev

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
<<<<<<< HEAD
 8000644:	2002      	movs	r0, #2
 8000646:	f001 fdb1 	bl	80021ac <HAL_PWREx_ConfigSupply>
=======
 8000670:	2002      	movs	r0, #2
 8000672:	f001 fdc9 	bl	8002208 <HAL_PWREx_ConfigSupply>
>>>>>>> dev

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
<<<<<<< HEAD
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b33      	ldr	r3, [pc, #204]	@ (800071c <SystemClock_Config+0xf8>)
 8000650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000652:	4a32      	ldr	r2, [pc, #200]	@ (800071c <SystemClock_Config+0xf8>)
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <SystemClock_Config+0xf8>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <SystemClock_Config+0xfc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a2c      	ldr	r2, [pc, #176]	@ (8000720 <SystemClock_Config+0xfc>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <SystemClock_Config+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <SystemClock_Config+0xfc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x5e>
=======
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b33      	ldr	r3, [pc, #204]	@ (8000748 <SystemClock_Config+0xf8>)
 800067c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800067e:	4a32      	ldr	r2, [pc, #200]	@ (8000748 <SystemClock_Config+0xf8>)
 8000680:	f023 0301 	bic.w	r3, r3, #1
 8000684:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000686:	4b30      	ldr	r3, [pc, #192]	@ (8000748 <SystemClock_Config+0xf8>)
 8000688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800068a:	f003 0301 	and.w	r3, r3, #1
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b2e      	ldr	r3, [pc, #184]	@ (800074c <SystemClock_Config+0xfc>)
 8000692:	699b      	ldr	r3, [r3, #24]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000698:	4a2c      	ldr	r2, [pc, #176]	@ (800074c <SystemClock_Config+0xfc>)
 800069a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	@ (800074c <SystemClock_Config+0xfc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006ac:	bf00      	nop
 80006ae:	4b27      	ldr	r3, [pc, #156]	@ (800074c <SystemClock_Config+0xfc>)
 80006b0:	699b      	ldr	r3, [r3, #24]
 80006b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006ba:	d1f8      	bne.n	80006ae <SystemClock_Config+0x5e>
>>>>>>> dev

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
<<<<<<< HEAD
 8000690:	2303      	movs	r3, #3
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800069a:	2301      	movs	r3, #1
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	@ 0x40
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006be:	230c      	movs	r3, #12
 80006c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fdb6 	bl	8002240 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006da:	f000 f9c9 	bl	8000a70 <Error_Handler>
=======
 80006bc:	2303      	movs	r3, #3
 80006be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2340      	movs	r3, #64	@ 0x40
 80006cc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006d6:	2301      	movs	r3, #1
 80006d8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006da:	2318      	movs	r3, #24
 80006dc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006e2:	2304      	movs	r3, #4
 80006e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ea:	230c      	movs	r3, #12
 80006ec:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006ee:	2300      	movs	r3, #0
 80006f0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fdce 	bl	800229c <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000706:	f000 f9d1 	bl	8000aac <Error_Handler>
>>>>>>> dev
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 80006de:	233f      	movs	r3, #63	@ 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f002 f9f6 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800070e:	f000 f9af 	bl	8000a70 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3770      	adds	r7, #112	@ 0x70
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58000400 	.word	0x58000400
 8000720:	58024800 	.word	0x58024800

08000724 <MX_ETH_Init>:
=======
 800070a:	233f      	movs	r3, #63	@ 0x3f
 800070c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800072a:	1d3b      	adds	r3, r7, #4
 800072c:	2101      	movs	r1, #1
 800072e:	4618      	mov	r0, r3
 8000730:	f002 fa0e 	bl	8002b50 <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800073a:	f000 f9b7 	bl	8000aac <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3770      	adds	r7, #112	@ 0x70
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	58000400 	.word	0x58000400
 800074c:	58024800 	.word	0x58024800

08000750 <MX_ETH_Init>:
>>>>>>> dev
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
<<<<<<< HEAD
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
=======
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
>>>>>>> dev
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
<<<<<<< HEAD
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <MX_ETH_Init+0x80>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <MX_ETH_Init+0x84>)
 800072c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <MX_ETH_Init+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_ETH_Init+0x88>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <MX_ETH_Init+0x88>)
 800073c:	22e1      	movs	r2, #225	@ 0xe1
 800073e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_ETH_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_ETH_Init+0x88>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_ETH_Init+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000754:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_ETH_Init+0x88>)
 8000756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_ETH_Init+0x80>)
 800075a:	2201      	movs	r2, #1
 800075c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000760:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_ETH_Init+0x8c>)
 8000762:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_ETH_Init+0x90>)
 8000768:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_ETH_Init+0x80>)
 800076c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000770:	615a      	str	r2, [r3, #20]
=======
 8000754:	4b1e      	ldr	r3, [pc, #120]	@ (80007d0 <MX_ETH_Init+0x80>)
 8000756:	4a1f      	ldr	r2, [pc, #124]	@ (80007d4 <MX_ETH_Init+0x84>)
 8000758:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800075a:	4b1f      	ldr	r3, [pc, #124]	@ (80007d8 <MX_ETH_Init+0x88>)
 800075c:	2200      	movs	r2, #0
 800075e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000760:	4b1d      	ldr	r3, [pc, #116]	@ (80007d8 <MX_ETH_Init+0x88>)
 8000762:	2280      	movs	r2, #128	@ 0x80
 8000764:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000766:	4b1c      	ldr	r3, [pc, #112]	@ (80007d8 <MX_ETH_Init+0x88>)
 8000768:	22e1      	movs	r2, #225	@ 0xe1
 800076a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800076c:	4b1a      	ldr	r3, [pc, #104]	@ (80007d8 <MX_ETH_Init+0x88>)
 800076e:	2200      	movs	r2, #0
 8000770:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000772:	4b19      	ldr	r3, [pc, #100]	@ (80007d8 <MX_ETH_Init+0x88>)
 8000774:	2200      	movs	r2, #0
 8000776:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000778:	4b17      	ldr	r3, [pc, #92]	@ (80007d8 <MX_ETH_Init+0x88>)
 800077a:	2200      	movs	r2, #0
 800077c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800077e:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <MX_ETH_Init+0x80>)
 8000780:	4a15      	ldr	r2, [pc, #84]	@ (80007d8 <MX_ETH_Init+0x88>)
 8000782:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000784:	4b12      	ldr	r3, [pc, #72]	@ (80007d0 <MX_ETH_Init+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_ETH_Init+0x80>)
 800078c:	4a13      	ldr	r2, [pc, #76]	@ (80007dc <MX_ETH_Init+0x8c>)
 800078e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <MX_ETH_Init+0x80>)
 8000792:	4a13      	ldr	r2, [pc, #76]	@ (80007e0 <MX_ETH_Init+0x90>)
 8000794:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_ETH_Init+0x80>)
 8000798:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800079c:	615a      	str	r2, [r3, #20]
>>>>>>> dev

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
<<<<<<< HEAD
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000774:	f000 fdec 	bl	8001350 <HAL_ETH_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 f977 	bl	8000a70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000782:	2238      	movs	r2, #56	@ 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_ETH_Init+0x94>)
 8000788:	f005 ff4f 	bl	800662a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_ETH_Init+0x94>)
 800078e:	2221      	movs	r2, #33	@ 0x21
 8000790:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_ETH_Init+0x94>)
 8000794:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000798:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_ETH_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
=======
 800079e:	480c      	ldr	r0, [pc, #48]	@ (80007d0 <MX_ETH_Init+0x80>)
 80007a0:	f000 fe04 	bl	80013ac <HAL_ETH_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007aa:	f000 f97f 	bl	8000aac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007ae:	2238      	movs	r2, #56	@ 0x38
 80007b0:	2100      	movs	r1, #0
 80007b2:	480c      	ldr	r0, [pc, #48]	@ (80007e4 <MX_ETH_Init+0x94>)
 80007b4:	f008 fd68 	bl	8009288 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007b8:	4b0a      	ldr	r3, [pc, #40]	@ (80007e4 <MX_ETH_Init+0x94>)
 80007ba:	2221      	movs	r2, #33	@ 0x21
 80007bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007be:	4b09      	ldr	r3, [pc, #36]	@ (80007e4 <MX_ETH_Init+0x94>)
 80007c0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007c6:	4b07      	ldr	r3, [pc, #28]	@ (80007e4 <MX_ETH_Init+0x94>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
>>>>>>> dev
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
<<<<<<< HEAD
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000124 	.word	0x24000124
 80007a8:	40028000 	.word	0x40028000
 80007ac:	2400074c 	.word	0x2400074c
 80007b0:	24000070 	.word	0x24000070
 80007b4:	24000010 	.word	0x24000010
 80007b8:	240000ec 	.word	0x240000ec

080007bc <MX_USART3_UART_Init>:
=======
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	24000128 	.word	0x24000128
 80007d4:	40028000 	.word	0x40028000
 80007d8:	24000754 	.word	0x24000754
 80007dc:	24000074 	.word	0x24000074
 80007e0:	24000014 	.word	0x24000014
 80007e4:	240000f0 	.word	0x240000f0

080007e8 <MX_USART3_UART_Init>:
>>>>>>> dev
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
<<<<<<< HEAD
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
=======
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
<<<<<<< HEAD
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <MX_USART3_UART_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000806:	f004 fb2d 	bl	8004e64 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f92e 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000818:	f005 fb35 	bl	8005e86 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f925 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <MX_USART3_UART_Init+0x90>)
 800082a:	f005 fb6a 	bl	8005f02 <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f91c 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_USART3_UART_Init+0x90>)
 800083a:	f005 faeb 	bl	8005e14 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f914 	bl	8000a70 <Error_Handler>
=======
 80007ec:	4b22      	ldr	r3, [pc, #136]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007ee:	4a23      	ldr	r2, [pc, #140]	@ (800087c <MX_USART3_UART_Init+0x94>)
 80007f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007f2:	4b21      	ldr	r3, [pc, #132]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000800:	4b1d      	ldr	r3, [pc, #116]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000802:	2200      	movs	r2, #0
 8000804:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000806:	4b1c      	ldr	r3, [pc, #112]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800080c:	4b1a      	ldr	r3, [pc, #104]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800080e:	220c      	movs	r2, #12
 8000810:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000814:	2200      	movs	r2, #0
 8000816:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000818:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800081a:	2200      	movs	r2, #0
 800081c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b14      	ldr	r3, [pc, #80]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000832:	f004 fb45 	bl	8004ec0 <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800083c:	f000 f936 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000844:	f005 fb4d 	bl	8005ee2 <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800084e:	f000 f92d 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000856:	f005 fb82 	bl	8005f5e <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000860:	f000 f924 	bl	8000aac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	@ (8000878 <MX_USART3_UART_Init+0x90>)
 8000866:	f005 fb03 	bl	8005e70 <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000870:	f000 f91c 	bl	8000aac <Error_Handler>
>>>>>>> dev
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
<<<<<<< HEAD
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240001d4 	.word	0x240001d4
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_FS_PCD_Init>:
=======
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	240001d8 	.word	0x240001d8
 800087c:	40004800 	.word	0x40004800

08000880 <MX_USB_OTG_FS_PCD_Init>:
>>>>>>> dev
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
<<<<<<< HEAD
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
=======
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
<<<<<<< HEAD
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800085c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	2209      	movs	r2, #9
 8000862:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000866:	2202      	movs	r2, #2
 8000868:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000872:	2202      	movs	r2, #2
 8000874:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000878:	2201      	movs	r2, #1
 800087a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088a:	2201      	movs	r2, #1
 800088c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000890:	2201      	movs	r2, #1
 8000892:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089c:	f001 fb55 	bl	8001f4a <HAL_PCD_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008a6:	f000 f8e3 	bl	8000a70 <Error_Handler>
=======
 8000884:	4b15      	ldr	r3, [pc, #84]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000886:	4a16      	ldr	r2, [pc, #88]	@ (80008e0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000888:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800088a:	4b14      	ldr	r3, [pc, #80]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088c:	2209      	movs	r2, #9
 800088e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000890:	4b12      	ldr	r3, [pc, #72]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000892:	2202      	movs	r2, #2
 8000894:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000896:	4b11      	ldr	r3, [pc, #68]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000898:	2200      	movs	r2, #0
 800089a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800089c:	4b0f      	ldr	r3, [pc, #60]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089e:	2202      	movs	r2, #2
 80008a0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008a4:	2201      	movs	r2, #1
 80008a6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008bc:	2201      	movs	r2, #1
 80008be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008c8:	f001 fb6d 	bl	8001fa6 <HAL_PCD_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008d2:	f000 f8eb 	bl	8000aac <Error_Handler>
>>>>>>> dev
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
<<<<<<< HEAD
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000268 	.word	0x24000268
 80008b4:	40080000 	.word	0x40080000

080008b8 <MX_GPIO_Init>:
=======
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2400026c 	.word	0x2400026c
 80008e0:	40080000 	.word	0x40080000

080008e4 <MX_GPIO_Init>:
>>>>>>> dev
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
=======
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
>>>>>>> dev
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
<<<<<<< HEAD
 80008ce:	4b62      	ldr	r3, [pc, #392]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a60      	ldr	r2, [pc, #384]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b5e      	ldr	r3, [pc, #376]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a59      	ldr	r2, [pc, #356]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b56      	ldr	r3, [pc, #344]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b53      	ldr	r3, [pc, #332]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a51      	ldr	r2, [pc, #324]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b4b      	ldr	r3, [pc, #300]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b47      	ldr	r3, [pc, #284]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b44      	ldr	r3, [pc, #272]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a42      	ldr	r2, [pc, #264]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000964:	4b3c      	ldr	r3, [pc, #240]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009a6:	482d      	ldr	r0, [pc, #180]	@ (8000a5c <MX_GPIO_Init+0x1a4>)
 80009a8:	f001 fab6 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b2:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <MX_GPIO_Init+0x1a8>)
 80009b4:	f001 fab0 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <MX_GPIO_Init+0x1ac>)
 80009be:	f001 faab 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4824      	ldr	r0, [pc, #144]	@ (8000a68 <MX_GPIO_Init+0x1b0>)
 80009d8:	f001 f8ee 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009dc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <MX_GPIO_Init+0x1a4>)
 80009f6:	f001 f8df 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <MX_GPIO_Init+0x1a8>)
 8000a14:	f001 f8d0 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_GPIO_Init+0x1b4>)
 8000a2e:	f001 f8c3 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <MX_GPIO_Init+0x1ac>)
 8000a4a:	f001 f8b5 	bl	8001bb8 <HAL_GPIO_Init>
=======
 80008fa:	4b62      	ldr	r3, [pc, #392]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	4a60      	ldr	r2, [pc, #384]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000902:	f043 0304 	orr.w	r3, r3, #4
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	f003 0304 	and.w	r3, r3, #4
 8000914:	61bb      	str	r3, [r7, #24]
 8000916:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000918:	4b5a      	ldr	r3, [pc, #360]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	4a59      	ldr	r2, [pc, #356]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000928:	4b56      	ldr	r3, [pc, #344]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b53      	ldr	r3, [pc, #332]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a51      	ldr	r2, [pc, #324]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800093e:	f043 0301 	orr.w	r3, r3, #1
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b4f      	ldr	r3, [pc, #316]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0301 	and.w	r3, r3, #1
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b4b      	ldr	r3, [pc, #300]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	4a4a      	ldr	r2, [pc, #296]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800095c:	f043 0302 	orr.w	r3, r3, #2
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000964:	4b47      	ldr	r3, [pc, #284]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	f003 0302 	and.w	r3, r3, #2
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000972:	4b44      	ldr	r3, [pc, #272]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a42      	ldr	r2, [pc, #264]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 800097a:	f043 0308 	orr.w	r3, r3, #8
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b40      	ldr	r3, [pc, #256]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000990:	4b3c      	ldr	r3, [pc, #240]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000992:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000996:	4a3b      	ldr	r2, [pc, #236]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 8000998:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800099c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a0:	4b38      	ldr	r3, [pc, #224]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 80009a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009aa:	607b      	str	r3, [r7, #4]
 80009ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	4b35      	ldr	r3, [pc, #212]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 80009b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b4:	4a33      	ldr	r2, [pc, #204]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 80009b6:	f043 0310 	orr.w	r3, r3, #16
 80009ba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009be:	4b31      	ldr	r3, [pc, #196]	@ (8000a84 <MX_GPIO_Init+0x1a0>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c4:	f003 0310 	and.w	r3, r3, #16
 80009c8:	603b      	str	r3, [r7, #0]
 80009ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009cc:	2200      	movs	r2, #0
 80009ce:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009d2:	482d      	ldr	r0, [pc, #180]	@ (8000a88 <MX_GPIO_Init+0x1a4>)
 80009d4:	f001 face 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009d8:	2200      	movs	r2, #0
 80009da:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009de:	482b      	ldr	r0, [pc, #172]	@ (8000a8c <MX_GPIO_Init+0x1a8>)
 80009e0:	f001 fac8 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2102      	movs	r1, #2
 80009e8:	4829      	ldr	r0, [pc, #164]	@ (8000a90 <MX_GPIO_Init+0x1ac>)
 80009ea:	f001 fac3 	bl	8001f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f4:	2300      	movs	r3, #0
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4824      	ldr	r0, [pc, #144]	@ (8000a94 <MX_GPIO_Init+0x1b0>)
 8000a04:	f001 f906 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a08:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <MX_GPIO_Init+0x1a4>)
 8000a22:	f001 f8f7 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 031c 	add.w	r3, r7, #28
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <MX_GPIO_Init+0x1a8>)
 8000a40:	f001 f8e8 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a44:	2380      	movs	r3, #128	@ 0x80
 8000a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a48:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	4619      	mov	r1, r3
 8000a58:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <MX_GPIO_Init+0x1b4>)
 8000a5a:	f001 f8db 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a62:	2301      	movs	r3, #1
 8000a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a6e:	f107 031c 	add.w	r3, r7, #28
 8000a72:	4619      	mov	r1, r3
 8000a74:	4806      	ldr	r0, [pc, #24]	@ (8000a90 <MX_GPIO_Init+0x1ac>)
 8000a76:	f001 f8cd 	bl	8001c14 <HAL_GPIO_Init>
>>>>>>> dev

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
<<<<<<< HEAD
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020400 	.word	0x58020400
 8000a60:	58020c00 	.word	0x58020c00
 8000a64:	58021000 	.word	0x58021000
 8000a68:	58020800 	.word	0x58020800
 8000a6c:	58021800 	.word	0x58021800

08000a70 <Error_Handler>:
=======
 8000a7a:	bf00      	nop
 8000a7c:	3730      	adds	r7, #48	@ 0x30
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	58024400 	.word	0x58024400
 8000a88:	58020400 	.word	0x58020400
 8000a8c:	58020c00 	.word	0x58020c00
 8000a90:	58021000 	.word	0x58021000
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58021800 	.word	0x58021800

08000a9c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f005 feff 	bl	80068a8 <osDelay>
 8000aaa:	e7fb      	b.n	8000aa4 <StartDefaultTask+0x8>

08000aac <Error_Handler>:
>>>>>>> dev
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
=======
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
>>>>>>> dev
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
<<<<<<< HEAD
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
=======
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
>>>>>>> dev
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
<<<<<<< HEAD
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
=======
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <Error_Handler+0x8>

08000ab8 <obc_notifications>:
#include "obc.h"
#include "cmsis_os.h"

void obc_notifications(void *vpParameters) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
    uint32_t received_notification;
    
    while (1) {
        // Non-blocking check for notifications with a 0ms timeout
        received_notification = ulTaskNotifyTake(pdFALSE, 0);
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f007 fba6 	bl	8008214 <ulTaskNotifyTake>
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	e7f9      	b.n	8000ac0 <obc_notifications+0x8>

08000acc <HAL_MspInit>:
>>>>>>> dev
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
=======
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
>>>>>>> dev

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x30>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a88:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x30>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x30>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
=======
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ad4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ada:	f043 0302 	orr.w	r3, r3, #2
 8000ade:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ae2:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <HAL_MspInit+0x38>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae8:	f003 0302 	and.w	r3, r3, #2
 8000aec:	607b      	str	r3, [r7, #4]
 8000aee:	687b      	ldr	r3, [r7, #4]

>>>>>>> dev
  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af0:	2200      	movs	r2, #0
 8000af2:	210f      	movs	r1, #15
 8000af4:	f06f 0001 	mvn.w	r0, #1
 8000af8:	f000 fc31 	bl	800135e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	58024400 	.word	0x58024400

08000ab0 <HAL_ETH_MspInit>:
=======
 8000afc:	bf00      	nop
 8000afe:	3708      	adds	r7, #8
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	58024400 	.word	0x58024400

08000b08 <HAL_ETH_MspInit>:
>>>>>>> dev
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
<<<<<<< HEAD
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a59      	ldr	r2, [pc, #356]	@ (8000c34 <HAL_ETH_MspInit+0x184>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f040 80ab 	bne.w	8000c2a <HAL_ETH_MspInit+0x17a>
=======
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b08e      	sub	sp, #56	@ 0x38
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a59      	ldr	r2, [pc, #356]	@ (8000c8c <HAL_ETH_MspInit+0x184>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	f040 80ab 	bne.w	8000c82 <HAL_ETH_MspInit+0x17a>
>>>>>>> dev
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
<<<<<<< HEAD
 8000ad4:	4b58      	ldr	r3, [pc, #352]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ada:	4a57      	ldr	r2, [pc, #348]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae4:	4b54      	ldr	r3, [pc, #336]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aee:	623b      	str	r3, [r7, #32]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000af2:	4b51      	ldr	r3, [pc, #324]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af8:	4a4f      	ldr	r2, [pc, #316]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000afe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b02:	4b4d      	ldr	r3, [pc, #308]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b10:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b16:	4a48      	ldr	r2, [pc, #288]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b20:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b42      	ldr	r3, [pc, #264]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a40      	ldr	r2, [pc, #256]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a39      	ldr	r2, [pc, #228]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b36      	ldr	r3, [pc, #216]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a31      	ldr	r2, [pc, #196]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
=======
 8000b2c:	4b58      	ldr	r3, [pc, #352]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b2e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b32:	4a57      	ldr	r2, [pc, #348]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b34:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b38:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b3c:	4b54      	ldr	r3, [pc, #336]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b46:	623b      	str	r3, [r7, #32]
 8000b48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b4a:	4b51      	ldr	r3, [pc, #324]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b50:	4a4f      	ldr	r2, [pc, #316]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b56:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b5a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b68:	4b49      	ldr	r3, [pc, #292]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b6a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b6e:	4a48      	ldr	r2, [pc, #288]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b74:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b78:	4b45      	ldr	r3, [pc, #276]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b86:	4b42      	ldr	r3, [pc, #264]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8c:	4a40      	ldr	r2, [pc, #256]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b8e:	f043 0304 	orr.w	r3, r3, #4
 8000b92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b96:	4b3e      	ldr	r3, [pc, #248]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	4b3a      	ldr	r3, [pc, #232]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000baa:	4a39      	ldr	r2, [pc, #228]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bb4:	4b36      	ldr	r3, [pc, #216]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	4b33      	ldr	r3, [pc, #204]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a31      	ldr	r2, [pc, #196]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000be0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a2a      	ldr	r2, [pc, #168]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000be8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b27      	ldr	r3, [pc, #156]	@ (8000c90 <HAL_ETH_MspInit+0x188>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bfa:	60bb      	str	r3, [r7, #8]
 8000bfc:	68bb      	ldr	r3, [r7, #8]
>>>>>>> dev
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
<<<<<<< HEAD
 8000ba6:	2332      	movs	r3, #50	@ 0x32
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481e      	ldr	r0, [pc, #120]	@ (8000c3c <HAL_ETH_MspInit+0x18c>)
 8000bc2:	f000 fff9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bc6:	2386      	movs	r3, #134	@ 0x86
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd6:	230b      	movs	r3, #11
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <HAL_ETH_MspInit+0x190>)
 8000be2:	f000 ffe9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <HAL_ETH_MspInit+0x194>)
 8000c04:	f000 ffd8 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c08:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <HAL_ETH_MspInit+0x198>)
 8000c26:	f000 ffc7 	bl	8001bb8 <HAL_GPIO_Init>
=======
 8000bfe:	2332      	movs	r3, #50	@ 0x32
 8000c00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c02:	2302      	movs	r3, #2
 8000c04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c0e:	230b      	movs	r3, #11
 8000c10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c16:	4619      	mov	r1, r3
 8000c18:	481e      	ldr	r0, [pc, #120]	@ (8000c94 <HAL_ETH_MspInit+0x18c>)
 8000c1a:	f000 fffb 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c1e:	2386      	movs	r3, #134	@ 0x86
 8000c20:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c22:	2302      	movs	r3, #2
 8000c24:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c26:	2300      	movs	r3, #0
 8000c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c2e:	230b      	movs	r3, #11
 8000c30:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c36:	4619      	mov	r1, r3
 8000c38:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <HAL_ETH_MspInit+0x190>)
 8000c3a:	f000 ffeb 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c44:	2302      	movs	r3, #2
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c50:	230b      	movs	r3, #11
 8000c52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	@ (8000c9c <HAL_ETH_MspInit+0x194>)
 8000c5c:	f000 ffda 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c60:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c72:	230b      	movs	r3, #11
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4808      	ldr	r0, [pc, #32]	@ (8000ca0 <HAL_ETH_MspInit+0x198>)
 8000c7e:	f000 ffc9 	bl	8001c14 <HAL_GPIO_Init>
>>>>>>> dev
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	@ 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40028000 	.word	0x40028000
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020800 	.word	0x58020800
 8000c40:	58020000 	.word	0x58020000
 8000c44:	58020400 	.word	0x58020400
 8000c48:	58021800 	.word	0x58021800

08000c4c <HAL_UART_MspInit>:
=======
 8000c82:	bf00      	nop
 8000c84:	3738      	adds	r7, #56	@ 0x38
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40028000 	.word	0x40028000
 8000c90:	58024400 	.word	0x58024400
 8000c94:	58020800 	.word	0x58020800
 8000c98:	58020000 	.word	0x58020000
 8000c9c:	58020400 	.word	0x58020400
 8000ca0:	58021800 	.word	0x58021800

08000ca4 <HAL_UART_MspInit>:
>>>>>>> dev
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
<<<<<<< HEAD
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	22c0      	movs	r2, #192	@ 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fcdc 	bl	800662a <memset>
  if(huart->Instance==USART3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d146      	bne.n	8000d0a <HAL_UART_MspInit+0xbe>
=======
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
 8000cba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	22c0      	movs	r2, #192	@ 0xc0
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f008 fadf 	bl	8009288 <memset>
  if(huart->Instance==USART3)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a27      	ldr	r2, [pc, #156]	@ (8000d6c <HAL_UART_MspInit+0xc8>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d146      	bne.n	8000d62 <HAL_UART_MspInit+0xbe>
>>>>>>> dev

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
<<<<<<< HEAD
 8000c7c:	f04f 0202 	mov.w	r2, #2
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 faba 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9e:	f7ff fee7 	bl	8000a70 <Error_Handler>
=======
 8000cd4:	f04f 0202 	mov.w	r2, #2
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	4618      	mov	r0, r3
 8000cec:	f002 fabc 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cf6:	f7ff fed9 	bl	8000aac <Error_Handler>
>>>>>>> dev
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
<<<<<<< HEAD
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000caa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
=======
 8000cfa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000cfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d00:	4a1b      	ldr	r2, [pc, #108]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d02:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d06:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d18:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a14      	ldr	r2, [pc, #80]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b11      	ldr	r3, [pc, #68]	@ (8000d70 <HAL_UART_MspInit+0xcc>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f003 0308 	and.w	r3, r3, #8
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
>>>>>>> dev
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
<<<<<<< HEAD
 8000cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_UART_MspInit+0xd0>)
 8000d06:	f000 ff57 	bl	8001bb8 <HAL_GPIO_Init>
=======
 8000d36:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d44:	2300      	movs	r3, #0
 8000d46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d50:	2307      	movs	r3, #7
 8000d52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d56:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4805      	ldr	r0, [pc, #20]	@ (8000d74 <HAL_UART_MspInit+0xd0>)
 8000d5e:	f000 ff59 	bl	8001c14 <HAL_GPIO_Init>
>>>>>>> dev
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000d0a:	bf00      	nop
 8000d0c:	37e8      	adds	r7, #232	@ 0xe8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40004800 	.word	0x40004800
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020c00 	.word	0x58020c00

08000d20 <HAL_PCD_MspInit>:
=======
 8000d62:	bf00      	nop
 8000d64:	37e8      	adds	r7, #232	@ 0xe8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40004800 	.word	0x40004800
 8000d70:	58024400 	.word	0x58024400
 8000d74:	58020c00 	.word	0x58020c00

08000d78 <HAL_PCD_MspInit>:
>>>>>>> dev
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
<<<<<<< HEAD
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0ba      	sub	sp, #232	@ 0xe8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	22c0      	movs	r2, #192	@ 0xc0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fc72 	bl	800662a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <HAL_PCD_MspInit+0xec>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d159      	bne.n	8000e04 <HAL_PCD_MspInit+0xe4>
=======
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	22c0      	movs	r2, #192	@ 0xc0
 8000d96:	2100      	movs	r1, #0
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f008 fa75 	bl	8009288 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a30      	ldr	r2, [pc, #192]	@ (8000e64 <HAL_PCD_MspInit+0xec>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d159      	bne.n	8000e5c <HAL_PCD_MspInit+0xe4>
>>>>>>> dev

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
<<<<<<< HEAD
 8000d50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fa4f 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d74:	f7ff fe7c 	bl	8000a70 <Error_Handler>
=======
 8000da8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000dac:	f04f 0300 	mov.w	r3, #0
 8000db0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000db4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000db8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dbc:	f107 0310 	add.w	r3, r7, #16
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 fa51 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000dcc:	f7ff fe6e 	bl	8000aac <Error_Handler>
>>>>>>> dev
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
<<<<<<< HEAD
 8000d78:	f001 fa52 	bl	8002220 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8c:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
=======
 8000dd0:	f001 fa54 	bl	800227c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b24      	ldr	r3, [pc, #144]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a23      	ldr	r2, [pc, #140]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b20      	ldr	r3, [pc, #128]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
>>>>>>> dev
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
<<<<<<< HEAD
 8000d9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000db4:	230a      	movs	r3, #10
 8000db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4814      	ldr	r0, [pc, #80]	@ (8000e14 <HAL_PCD_MspInit+0xf4>)
 8000dc2:	f000 fef9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <HAL_PCD_MspInit+0xf4>)
 8000de2:	f000 fee9 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
=======
 8000df2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000df6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2300      	movs	r3, #0
 8000e08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e0c:	230a      	movs	r3, #10
 8000e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4814      	ldr	r0, [pc, #80]	@ (8000e6c <HAL_PCD_MspInit+0xf4>)
 8000e1a:	f000 fefb 	bl	8001c14 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e26:	2300      	movs	r3, #0
 8000e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e32:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e36:	4619      	mov	r1, r3
 8000e38:	480c      	ldr	r0, [pc, #48]	@ (8000e6c <HAL_PCD_MspInit+0xf4>)
 8000e3a:	f000 feeb 	bl	8001c14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000e40:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e44:	4a08      	ldr	r2, [pc, #32]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000e4a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e4e:	4b06      	ldr	r3, [pc, #24]	@ (8000e68 <HAL_PCD_MspInit+0xf0>)
 8000e50:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e58:	60bb      	str	r3, [r7, #8]
 8000e5a:	68bb      	ldr	r3, [r7, #8]
>>>>>>> dev
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
<<<<<<< HEAD
 8000e04:	bf00      	nop
 8000e06:	37e8      	adds	r7, #232	@ 0xe8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40080000 	.word	0x40080000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020000 	.word	0x58020000

08000e18 <NMI_Handler>:
=======
 8000e5c:	bf00      	nop
 8000e5e:	37e8      	adds	r7, #232	@ 0xe8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40080000 	.word	0x40080000
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	58020000 	.word	0x58020000

08000e70 <NMI_Handler>:
>>>>>>> dev
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
=======
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
<<<<<<< HEAD
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:
=======
 8000e74:	bf00      	nop
 8000e76:	e7fd      	b.n	8000e74 <NMI_Handler+0x4>

08000e78 <HardFault_Handler>:
>>>>>>> dev

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
=======
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:
=======
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:
>>>>>>> dev

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
=======
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:
=======
 8000e84:	bf00      	nop
 8000e86:	e7fd      	b.n	8000e84 <MemManage_Handler+0x4>

08000e88 <BusFault_Handler>:
>>>>>>> dev

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
=======
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:
=======
 8000e8c:	bf00      	nop
 8000e8e:	e7fd      	b.n	8000e8c <BusFault_Handler+0x4>

08000e90 <UsageFault_Handler>:
>>>>>>> dev

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
=======
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:
=======
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <UsageFault_Handler+0x4>

08000e98 <DebugMon_Handler>:
>>>>>>> dev

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0
=======
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
>>>>>>> dev

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:
=======
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <SysTick_Handler>:
>>>>>>> dev

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
=======
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	af00      	add	r7, sp, #0
>>>>>>> dev
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8000e6e:	f000 f927 	bl	80010c0 <HAL_IncTick>
=======
 8000eaa:	f000 f937 	bl	800111c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000eae:	f007 f923 	bl	80080f8 <xTaskGetSchedulerState>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d001      	beq.n	8000ebc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000eb8:	f007 ff66 	bl	8008d88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
>>>>>>> dev
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <SystemInit>:
=======
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}

08000ec0 <SystemInit>:
>>>>>>> dev
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
<<<<<<< HEAD
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
=======
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
>>>>>>> dev
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
<<<<<<< HEAD
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <SystemInit+0xe4>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e82:	4a36      	ldr	r2, [pc, #216]	@ (8000f5c <SystemInit+0xe4>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
=======
 8000ec4:	4b37      	ldr	r3, [pc, #220]	@ (8000fa4 <SystemInit+0xe4>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eca:	4a36      	ldr	r2, [pc, #216]	@ (8000fa4 <SystemInit+0xe4>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
>>>>>>> dev
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
<<<<<<< HEAD
 8000e8c:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <SystemInit+0xe8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 030f 	and.w	r3, r3, #15
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d807      	bhi.n	8000ea8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e98:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <SystemInit+0xe8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 030f 	bic.w	r3, r3, #15
 8000ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f60 <SystemInit+0xe8>)
 8000ea2:	f043 0307 	orr.w	r3, r3, #7
 8000ea6:	6013      	str	r3, [r2, #0]
=======
 8000ed4:	4b34      	ldr	r3, [pc, #208]	@ (8000fa8 <SystemInit+0xe8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f003 030f 	and.w	r3, r3, #15
 8000edc:	2b06      	cmp	r3, #6
 8000ede:	d807      	bhi.n	8000ef0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ee0:	4b31      	ldr	r3, [pc, #196]	@ (8000fa8 <SystemInit+0xe8>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 030f 	bic.w	r3, r3, #15
 8000ee8:	4a2f      	ldr	r2, [pc, #188]	@ (8000fa8 <SystemInit+0xe8>)
 8000eea:	f043 0307 	orr.w	r3, r3, #7
 8000eee:	6013      	str	r3, [r2, #0]
>>>>>>> dev
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
<<<<<<< HEAD
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <SystemInit+0xec>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a2d      	ldr	r2, [pc, #180]	@ (8000f64 <SystemInit+0xec>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <SystemInit+0xec>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <SystemInit+0xec>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4929      	ldr	r1, [pc, #164]	@ (8000f64 <SystemInit+0xec>)
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <SystemInit+0xf0>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <SystemInit+0xe8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <SystemInit+0xe8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <SystemInit+0xe8>)
 8000edc:	f043 0307 	orr.w	r3, r3, #7
 8000ee0:	6013      	str	r3, [r2, #0]
=======
 8000ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8000fac <SystemInit+0xec>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8000fac <SystemInit+0xec>)
 8000ef6:	f043 0301 	orr.w	r3, r3, #1
 8000efa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000efc:	4b2b      	ldr	r3, [pc, #172]	@ (8000fac <SystemInit+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000f02:	4b2a      	ldr	r3, [pc, #168]	@ (8000fac <SystemInit+0xec>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4929      	ldr	r1, [pc, #164]	@ (8000fac <SystemInit+0xec>)
 8000f08:	4b29      	ldr	r3, [pc, #164]	@ (8000fb0 <SystemInit+0xf0>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f0e:	4b26      	ldr	r3, [pc, #152]	@ (8000fa8 <SystemInit+0xe8>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f003 0308 	and.w	r3, r3, #8
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d007      	beq.n	8000f2a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f1a:	4b23      	ldr	r3, [pc, #140]	@ (8000fa8 <SystemInit+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f023 030f 	bic.w	r3, r3, #15
 8000f22:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <SystemInit+0xe8>)
 8000f24:	f043 0307 	orr.w	r3, r3, #7
 8000f28:	6013      	str	r3, [r2, #0]
>>>>>>> dev
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
<<<<<<< HEAD
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <SystemInit+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <SystemInit+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <SystemInit+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
=======
 8000f2a:	4b20      	ldr	r3, [pc, #128]	@ (8000fac <SystemInit+0xec>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000f30:	4b1e      	ldr	r3, [pc, #120]	@ (8000fac <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000f36:	4b1d      	ldr	r3, [pc, #116]	@ (8000fac <SystemInit+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	621a      	str	r2, [r3, #32]
>>>>>>> dev

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
<<<<<<< HEAD
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <SystemInit+0xec>)
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <SystemInit+0xf4>)
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <SystemInit+0xec>)
 8000efc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <SystemInit+0xf8>)
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <SystemInit+0xec>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <SystemInit+0xfc>)
 8000f04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <SystemInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <SystemInit+0xec>)
 8000f0e:	4a19      	ldr	r2, [pc, #100]	@ (8000f74 <SystemInit+0xfc>)
 8000f10:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8000f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000fac <SystemInit+0xec>)
 8000f3e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fb4 <SystemInit+0xf4>)
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000f42:	4b1a      	ldr	r3, [pc, #104]	@ (8000fac <SystemInit+0xec>)
 8000f44:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb8 <SystemInit+0xf8>)
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f48:	4b18      	ldr	r3, [pc, #96]	@ (8000fac <SystemInit+0xec>)
 8000f4a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fbc <SystemInit+0xfc>)
 8000f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f4e:	4b17      	ldr	r3, [pc, #92]	@ (8000fac <SystemInit+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f54:	4b15      	ldr	r3, [pc, #84]	@ (8000fac <SystemInit+0xec>)
 8000f56:	4a19      	ldr	r2, [pc, #100]	@ (8000fbc <SystemInit+0xfc>)
 8000f58:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> dev

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
<<<<<<< HEAD
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <SystemInit+0xec>)
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <SystemInit+0xfc>)
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <SystemInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <SystemInit+0xec>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60
=======
 8000f5a:	4b14      	ldr	r3, [pc, #80]	@ (8000fac <SystemInit+0xec>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f60:	4b12      	ldr	r3, [pc, #72]	@ (8000fac <SystemInit+0xec>)
 8000f62:	4a16      	ldr	r2, [pc, #88]	@ (8000fbc <SystemInit+0xfc>)
 8000f64:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f66:	4b11      	ldr	r3, [pc, #68]	@ (8000fac <SystemInit+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000fac <SystemInit+0xec>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0e      	ldr	r2, [pc, #56]	@ (8000fac <SystemInit+0xec>)
 8000f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f76:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f78:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <SystemInit+0xec>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	661a      	str	r2, [r3, #96]	@ 0x60
>>>>>>> dev

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
<<<<<<< HEAD
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <SystemInit+0x100>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <SystemInit+0x104>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f42:	d202      	bcs.n	8000f4a <SystemInit+0xd2>
=======
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <SystemInit+0x100>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	4b10      	ldr	r3, [pc, #64]	@ (8000fc4 <SystemInit+0x104>)
 8000f84:	4013      	ands	r3, r2
 8000f86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f8a:	d202      	bcs.n	8000f92 <SystemInit+0xd2>
>>>>>>> dev
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
<<<<<<< HEAD
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <SystemInit+0x108>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
=======
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <SystemInit+0x108>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
>>>>>>> dev
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
<<<<<<< HEAD
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <SystemInit+0x10c>)
 8000f4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f50:	601a      	str	r2, [r3, #0]
=======
 8000f92:	4b0e      	ldr	r3, [pc, #56]	@ (8000fcc <SystemInit+0x10c>)
 8000f94:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f98:	601a      	str	r2, [r3, #0]
>>>>>>> dev
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
<<<<<<< HEAD
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	52002000 	.word	0x52002000
 8000f64:	58024400 	.word	0x58024400
 8000f68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f6c:	02020200 	.word	0x02020200
 8000f70:	01ff0000 	.word	0x01ff0000
 8000f74:	01010280 	.word	0x01010280
 8000f78:	5c001000 	.word	0x5c001000
 8000f7c:	ffff0000 	.word	0xffff0000
 8000f80:	51008108 	.word	0x51008108
 8000f84:	52004000 	.word	0x52004000

08000f88 <Reset_Handler>:
=======
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	52002000 	.word	0x52002000
 8000fac:	58024400 	.word	0x58024400
 8000fb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000fb4:	02020200 	.word	0x02020200
 8000fb8:	01ff0000 	.word	0x01ff0000
 8000fbc:	01010280 	.word	0x01010280
 8000fc0:	5c001000 	.word	0x5c001000
 8000fc4:	ffff0000 	.word	0xffff0000
 8000fc8:	51008108 	.word	0x51008108
 8000fcc:	52004000 	.word	0x52004000

08000fd0 <ttc_notifications>:
#include "ttc.h"
#include "obc.h"
#include "cmsis_os.h"

void ttc_notifications(void *vpParameters) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    uint32_t received_notification;
    
    while (1) {
        // Non-blocking check for notifications with a 0ms timeout
        received_notification = ulTaskNotifyTake(pdFALSE, 0);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f007 f91a 	bl	8008214 <ulTaskNotifyTake>
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	e7f9      	b.n	8000fd8 <ttc_notifications+0x8>

08000fe4 <Reset_Handler>:
>>>>>>> dev

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
<<<<<<< HEAD
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f8c:	f7ff ff74 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f005 fb41 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fb23 	bl	8000604 <main>
  bx  lr
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fcc:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8000fd0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fd4:	24000758 	.word	0x24000758

08000fd8 <ADC3_IRQHandler>:
=======
 8000fe4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800101c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fe8:	f7ff ff6a 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fec:	480c      	ldr	r0, [pc, #48]	@ (8001020 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fee:	490d      	ldr	r1, [pc, #52]	@ (8001024 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	@ (8001028 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ff2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ff4:	e002      	b.n	8000ffc <LoopCopyDataInit>

08000ff6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ff6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ff8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ffa:	3304      	adds	r3, #4

08000ffc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ffc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ffe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001000:	d3f9      	bcc.n	8000ff6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001004:	4c0a      	ldr	r4, [pc, #40]	@ (8001030 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001006:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001008:	e001      	b.n	800100e <LoopFillZerobss>

0800100a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800100a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800100c:	3204      	adds	r2, #4

0800100e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800100e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001010:	d3fb      	bcc.n	800100a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001012:	f008 f941 	bl	8009298 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001016:	f7ff fadb 	bl	80005d0 <main>
  bx  lr
 800101a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800101c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001020:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001024:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001028:	080093cc 	.word	0x080093cc
  ldr r2, =_sbss
 800102c:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8001030:	240050b0 	.word	0x240050b0

08001034 <ADC3_IRQHandler>:
>>>>>>> dev
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8000fd8:	e7fe      	b.n	8000fd8 <ADC3_IRQHandler>
	...

08000fdc <HAL_Init>:
=======
 8001034:	e7fe      	b.n	8001034 <ADC3_IRQHandler>
	...

08001038 <HAL_Init>:
>>>>>>> dev
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
=======
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
>>>>>>> dev
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 f982 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>
=======
 800103e:	2003      	movs	r0, #3
 8001040:	f000 f982 	bl	8001348 <HAL_NVIC_SetPriorityGrouping>
>>>>>>> dev

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< HEAD
 8000fe8:	f001 ff3a 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	4913      	ldr	r1, [pc, #76]	@ (8001048 <HAL_Init+0x6c>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	607b      	str	r3, [r7, #4]
=======
 8001044:	f001 ff3a 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8001048:	4602      	mov	r2, r0
 800104a:	4b15      	ldr	r3, [pc, #84]	@ (80010a0 <HAL_Init+0x68>)
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	0a1b      	lsrs	r3, r3, #8
 8001050:	f003 030f 	and.w	r3, r3, #15
 8001054:	4913      	ldr	r1, [pc, #76]	@ (80010a4 <HAL_Init+0x6c>)
 8001056:	5ccb      	ldrb	r3, [r1, r3]
 8001058:	f003 031f 	and.w	r3, r3, #31
 800105c:	fa22 f303 	lsr.w	r3, r2, r3
 8001060:	607b      	str	r3, [r7, #4]
>>>>>>> dev
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_Init+0x68>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	4a0e      	ldr	r2, [pc, #56]	@ (8001048 <HAL_Init+0x6c>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x70>)
 800101e:	6013      	str	r3, [r2, #0]
=======
 8001062:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <HAL_Init+0x68>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 030f 	and.w	r3, r3, #15
 800106a:	4a0e      	ldr	r2, [pc, #56]	@ (80010a4 <HAL_Init+0x6c>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	f003 031f 	and.w	r3, r3, #31
 8001072:	687a      	ldr	r2, [r7, #4]
 8001074:	fa22 f303 	lsr.w	r3, r2, r3
 8001078:	4a0b      	ldr	r2, [pc, #44]	@ (80010a8 <HAL_Init+0x70>)
 800107a:	6013      	str	r3, [r2, #0]
>>>>>>> dev
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< HEAD
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <HAL_Init+0x74>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
=======
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <HAL_Init+0x74>)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6013      	str	r3, [r2, #0]
>>>>>>> dev
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
<<<<<<< HEAD
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f814 	bl	8001054 <HAL_InitTick>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e002      	b.n	800103c <HAL_Init+0x60>
=======
 8001082:	200f      	movs	r0, #15
 8001084:	f000 f814 	bl	80010b0 <HAL_InitTick>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800108e:	2301      	movs	r3, #1
 8001090:	e002      	b.n	8001098 <HAL_Init+0x60>
>>>>>>> dev
  }

  /* Init the low level hardware */
  HAL_MspInit();
<<<<<<< HEAD
 8001036:	f7ff fd21 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58024400 	.word	0x58024400
 8001048:	0800669c 	.word	0x0800669c
 800104c:	24000004 	.word	0x24000004
 8001050:	24000000 	.word	0x24000000

08001054 <HAL_InitTick>:
=======
 8001092:	f7ff fd1b 	bl	8000acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	58024400 	.word	0x58024400
 80010a4:	08009384 	.word	0x08009384
 80010a8:	24000004 	.word	0x24000004
 80010ac:	24000000 	.word	0x24000000

080010b0 <HAL_InitTick>:
>>>>>>> dev
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e021      	b.n	80010ac <HAL_InitTick+0x58>
=======
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010b8:	4b15      	ldr	r3, [pc, #84]	@ (8001110 <HAL_InitTick+0x60>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d101      	bne.n	80010c4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e021      	b.n	8001108 <HAL_InitTick+0x58>
>>>>>>> dev
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
<<<<<<< HEAD
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_InitTick+0x64>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_InitTick+0x60>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f959 	bl	8001336 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x58>
=======
 80010c4:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <HAL_InitTick+0x64>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <HAL_InitTick+0x60>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f959 	bl	8001392 <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x58>
>>>>>>> dev
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f931 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <HAL_InitTick+0x68>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
=======
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010f8:	f000 f931 	bl	800135e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	@ (8001118 <HAL_InitTick+0x68>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
>>>>>>> dev
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2400000c 	.word	0x2400000c
 80010b8:	24000000 	.word	0x24000000
 80010bc:	24000008 	.word	0x24000008

080010c0 <HAL_IncTick>:
=======
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	2400000c 	.word	0x2400000c
 8001114:	24000000 	.word	0x24000000
 8001118:	24000008 	.word	0x24000008

0800111c <HAL_IncTick>:
>>>>>>> dev
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000754 	.word	0x24000754

080010e8 <HAL_GetTick>:
=======
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	@ (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	@ (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	@ (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c
 8001140:	2400075c 	.word	0x2400075c

08001144 <HAL_GetTick>:
>>>>>>> dev
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	24000754 	.word	0x24000754

08001100 <HAL_Delay>:
=======
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	@ (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2400075c 	.word	0x2400075c

0800115c <HAL_Delay>:
>>>>>>> dev
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2400000c 	.word	0x2400000c

08001148 <HAL_GetREVID>:
=======
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001164:	f7ff ffee 	bl	8001144 <HAL_GetTick>
 8001168:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001174:	d005      	beq.n	8001182 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001176:	4b0a      	ldr	r3, [pc, #40]	@ (80011a0 <HAL_Delay+0x44>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001182:	bf00      	nop
 8001184:	f7ff ffde 	bl	8001144 <HAL_GetTick>
 8001188:	4602      	mov	r2, r0
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	1ad3      	subs	r3, r2, r3
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	429a      	cmp	r2, r3
 8001192:	d8f7      	bhi.n	8001184 <HAL_Delay+0x28>
  {
  }
}
 8001194:	bf00      	nop
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2400000c 	.word	0x2400000c

080011a4 <HAL_GetREVID>:
>>>>>>> dev
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
<<<<<<< HEAD
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetREVID+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0c1b      	lsrs	r3, r3, #16
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	5c001000 	.word	0x5c001000

08001160 <HAL_SYSCFG_ETHInterfaceSelect>:
=======
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <HAL_GetREVID+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	0c1b      	lsrs	r3, r3, #16
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	5c001000 	.word	0x5c001000

080011bc <HAL_SYSCFG_ETHInterfaceSelect>:
>>>>>>> dev
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
<<<<<<< HEAD
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
=======
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
<<<<<<< HEAD
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001170:	4904      	ldr	r1, [pc, #16]	@ (8001184 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58000400 	.word	0x58000400

08001188 <__NVIC_SetPriorityGrouping>:
=======
 80011c4:	4b06      	ldr	r3, [pc, #24]	@ (80011e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80011cc:	4904      	ldr	r1, [pc, #16]	@ (80011e0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	604b      	str	r3, [r1, #4]
}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	58000400 	.word	0x58000400

080011e4 <__NVIC_SetPriorityGrouping>:
>>>>>>> dev
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
=======
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
>>>>>>> dev
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_SetPriority>:
=======
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_SetPriority>:
>>>>>>> dev
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
=======
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	6039      	str	r1, [r7, #0]
 8001252:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001254:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001258:	2b00      	cmp	r3, #0
 800125a:	db0a      	blt.n	8001272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	b2da      	uxtb	r2, r3
 8001260:	490c      	ldr	r1, [pc, #48]	@ (8001294 <__NVIC_SetPriority+0x4c>)
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	0112      	lsls	r2, r2, #4
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	440b      	add	r3, r1
 800126c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
>>>>>>> dev
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
=======
 8001270:	e00a      	b.n	8001288 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	b2da      	uxtb	r2, r3
 8001276:	4908      	ldr	r1, [pc, #32]	@ (8001298 <__NVIC_SetPriority+0x50>)
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	3b04      	subs	r3, #4
 8001280:	0112      	lsls	r2, r2, #4
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	440b      	add	r3, r1
 8001286:	761a      	strb	r2, [r3, #24]
}
 8001288:	bf00      	nop
 800128a:	370c      	adds	r7, #12
 800128c:	46bd      	mov	sp, r7
 800128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001292:	4770      	bx	lr
 8001294:	e000e100 	.word	0xe000e100
 8001298:	e000ed00 	.word	0xe000ed00

0800129c <NVIC_EncodePriority>:
>>>>>>> dev
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
=======
 800129c:	b480      	push	{r7}
 800129e:	b089      	sub	sp, #36	@ 0x24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	61fb      	str	r3, [r7, #28]
>>>>>>> dev
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
=======
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	f1c3 0307 	rsb	r3, r3, #7
 80012b6:	2b04      	cmp	r3, #4
 80012b8:	bf28      	it	cs
 80012ba:	2304      	movcs	r3, #4
 80012bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	3304      	adds	r3, #4
 80012c2:	2b06      	cmp	r3, #6
 80012c4:	d902      	bls.n	80012cc <NVIC_EncodePriority+0x30>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	3b03      	subs	r3, #3
 80012ca:	e000      	b.n	80012ce <NVIC_EncodePriority+0x32>
 80012cc:	2300      	movs	r3, #0
 80012ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43da      	mvns	r2, r3
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43d9      	mvns	r1, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f4:	4313      	orrs	r3, r2
         );
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
	...

08001304 <SysTick_Config>:
>>>>>>> dev
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
=======
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	3b01      	subs	r3, #1
 8001310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001314:	d301      	bcc.n	800131a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001316:	2301      	movs	r3, #1
 8001318:	e00f      	b.n	800133a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131a:	4a0a      	ldr	r2, [pc, #40]	@ (8001344 <SysTick_Config+0x40>)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001322:	210f      	movs	r1, #15
 8001324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001328:	f7ff ff8e 	bl	8001248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800132c:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <SysTick_Config+0x40>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001332:	4b04      	ldr	r3, [pc, #16]	@ (8001344 <SysTick_Config+0x40>)
 8001334:	2207      	movs	r2, #7
 8001336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	e000e010 	.word	0xe000e010

08001348 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> dev
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
=======
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff47 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
=======
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f7ff ff47 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <HAL_NVIC_SetPriority>:
>>>>>>> dev
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]
=======
 800135e:	b580      	push	{r7, lr}
 8001360:	b086      	sub	sp, #24
 8001362:	af00      	add	r7, sp, #0
 8001364:	4603      	mov	r3, r0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	81fb      	strh	r3, [r7, #14]
>>>>>>> dev

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8001310:	f7ff ff5e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
=======
 800136c:	f7ff ff5e 	bl	800122c <__NVIC_GetPriorityGrouping>
 8001370:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	68b9      	ldr	r1, [r7, #8]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff ff90 	bl	800129c <NVIC_EncodePriority>
 800137c:	4602      	mov	r2, r0
 800137e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001382:	4611      	mov	r1, r2
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff ff5f 	bl	8001248 <__NVIC_SetPriority>
}
 800138a:	bf00      	nop
 800138c:	3718      	adds	r7, #24
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
>>>>>>> dev
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb2 	bl	80012a8 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ETH_Init>:
=======
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb2 	bl	8001304 <SysTick_Config>
 80013a0:	4603      	mov	r3, r0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
	...

080013ac <HAL_ETH_Init>:
>>>>>>> dev
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0e3      	b.n	800152a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2223      	movs	r2, #35	@ 0x23
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
=======
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e0e3      	b.n	8001586 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d106      	bne.n	80013d6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2223      	movs	r2, #35	@ 0x23
 80013cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
>>>>>>> dev

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
<<<<<<< HEAD
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fb9b 	bl	8000ab0 <HAL_ETH_MspInit>
=======
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f7ff fb99 	bl	8000b08 <HAL_ETH_MspInit>
>>>>>>> dev

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 800137a:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 800137c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001380:	4a6c      	ldr	r2, [pc, #432]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 800138c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7a1b      	ldrb	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fedd 	bl	8001160 <HAL_SYSCFG_ETHInterfaceSelect>
 80013a6:	e003      	b.n	80013b0 <HAL_ETH_Init+0x60>
=======
 80013d6:	4b6e      	ldr	r3, [pc, #440]	@ (8001590 <HAL_ETH_Init+0x1e4>)
 80013d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013dc:	4a6c      	ldr	r2, [pc, #432]	@ (8001590 <HAL_ETH_Init+0x1e4>)
 80013de:	f043 0302 	orr.w	r3, r3, #2
 80013e2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013e6:	4b6a      	ldr	r3, [pc, #424]	@ (8001590 <HAL_ETH_Init+0x1e4>)
 80013e8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	60bb      	str	r3, [r7, #8]
 80013f2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7a1b      	ldrb	r3, [r3, #8]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d103      	bne.n	8001404 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013fc:	2000      	movs	r0, #0
 80013fe:	f7ff fedd 	bl	80011bc <HAL_SYSCFG_ETHInterfaceSelect>
 8001402:	e003      	b.n	800140c <HAL_ETH_Init+0x60>
>>>>>>> dev
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
<<<<<<< HEAD
 80013a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013ac:	f7ff fed8 	bl	8001160 <HAL_SYSCFG_ETHInterfaceSelect>
=======
 8001404:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001408:	f7ff fed8 	bl	80011bc <HAL_SYSCFG_ETHInterfaceSelect>
>>>>>>> dev
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
<<<<<<< HEAD
 80013b0:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <HAL_ETH_Init+0x1e8>)
 80013b2:	685b      	ldr	r3, [r3, #4]
=======
 800140c:	4b61      	ldr	r3, [pc, #388]	@ (8001594 <HAL_ETH_Init+0x1e8>)
 800140e:	685b      	ldr	r3, [r3, #4]
>>>>>>> dev

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
<<<<<<< HEAD
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff fe8c 	bl	80010e8 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013d2:	e011      	b.n	80013f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d4:	f7ff fe88 	bl	80010e8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013e2:	d909      	bls.n	80013f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22e0      	movs	r2, #224	@ 0xe0
 80013f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e098      	b.n	800152a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_ETH_Init+0x84>
=======
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6812      	ldr	r2, [r2, #0]
 800141e:	f043 0301 	orr.w	r3, r3, #1
 8001422:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001426:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001428:	f7ff fe8c 	bl	8001144 <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800142e:	e011      	b.n	8001454 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001430:	f7ff fe88 	bl	8001144 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800143e:	d909      	bls.n	8001454 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2204      	movs	r2, #4
 8001444:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	22e0      	movs	r2, #224	@ 0xe0
 800144c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001450:	2301      	movs	r3, #1
 8001452:	e098      	b.n	8001586 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0301 	and.w	r3, r3, #1
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1e4      	bne.n	8001430 <HAL_ETH_Init+0x84>
>>>>>>> dev
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
<<<<<<< HEAD
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f89e 	bl	800154c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001410:	f001 fea0 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8001414:	4603      	mov	r3, r0
 8001416:	4a49      	ldr	r2, [pc, #292]	@ (800153c <HAL_ETH_Init+0x1ec>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9a      	lsrs	r2, r3, #18
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3a01      	subs	r2, #1
 8001424:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fa81 	bl	8001930 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001436:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800143a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	22e0      	movs	r2, #224	@ 0xe0
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e05d      	b.n	800152a <HAL_ETH_Init+0x1da>
=======
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f89e 	bl	80015a8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800146c:	f001 fea0 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8001470:	4603      	mov	r3, r0
 8001472:	4a49      	ldr	r2, [pc, #292]	@ (8001598 <HAL_ETH_Init+0x1ec>)
 8001474:	fba2 2303 	umull	r2, r3, r2, r3
 8001478:	0c9a      	lsrs	r2, r3, #18
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	3a01      	subs	r2, #1
 8001480:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 fa81 	bl	800198c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001492:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001496:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6812      	ldr	r2, [r2, #0]
 800149e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80014a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014a6:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d009      	beq.n	80014ca <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	22e0      	movs	r2, #224	@ 0xe0
 80014c2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e05d      	b.n	8001586 <HAL_ETH_Init+0x1da>
>>>>>>> dev
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
<<<<<<< HEAD
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001476:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <HAL_ETH_Init+0x1f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6952      	ldr	r2, [r2, #20]
 8001482:	0051      	lsls	r1, r2, #1
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800148e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
=======
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014d2:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80014d6:	4b31      	ldr	r3, [pc, #196]	@ (800159c <HAL_ETH_Init+0x1f0>)
 80014d8:	4013      	ands	r3, r2
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	6952      	ldr	r2, [r2, #20]
 80014de:	0051      	lsls	r1, r2, #1
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80014ea:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
>>>>>>> dev
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
<<<<<<< HEAD
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fae9 	bl	8001a6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fb2f 	bl	8001afc <ETH_DMARxDescListInit>
=======
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 fae9 	bl	8001ac6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f000 fb2f 	bl	8001b58 <ETH_DMARxDescListInit>
>>>>>>> dev

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
<<<<<<< HEAD
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	3305      	adds	r3, #5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021a      	lsls	r2, r3, #8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	3303      	adds	r3, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	061a      	lsls	r2, r3, #24
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	3302      	adds	r3, #2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_ETH_Init+0x1f4>)
 80014fe:	430b      	orrs	r3, r1
 8001500:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
=======
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3305      	adds	r3, #5
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	021a      	lsls	r2, r3, #8
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	3304      	adds	r3, #4
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	3303      	adds	r3, #3
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	3302      	adds	r3, #2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	041b      	lsls	r3, r3, #16
 800152c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	3301      	adds	r3, #1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001538:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001546:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001548:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b11      	ldr	r3, [pc, #68]	@ (80015a0 <HAL_ETH_Init+0x1f4>)
 800155a:	430b      	orrs	r3, r1
 800155c:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
>>>>>>> dev
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
<<<<<<< HEAD
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_ETH_Init+0x1f8>)
 8001512:	430b      	orrs	r3, r1
 8001514:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2210      	movs	r2, #16
 8001524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	58024400 	.word	0x58024400
 8001538:	58000400 	.word	0x58000400
 800153c:	431bde83 	.word	0x431bde83
 8001540:	ffff8001 	.word	0xffff8001
 8001544:	0c020060 	.word	0x0c020060
 8001548:	0c20c000 	.word	0x0c20c000

0800154c <HAL_ETH_SetMDIOClockRange>:
=======
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b0d      	ldr	r3, [pc, #52]	@ (80015a4 <HAL_ETH_Init+0x1f8>)
 800156e:	430b      	orrs	r3, r1
 8001570:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2210      	movs	r2, #16
 8001580:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	58024400 	.word	0x58024400
 8001594:	58000400 	.word	0x58000400
 8001598:	431bde83 	.word	0x431bde83
 800159c:	ffff8001 	.word	0xffff8001
 80015a0:	0c020060 	.word	0x0c020060
 80015a4:	0c20c000 	.word	0x0c20c000

080015a8 <HAL_ETH_SetMDIOClockRange>:
>>>>>>> dev
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
=======
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b084      	sub	sp, #16
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
<<<<<<< HEAD
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800155c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001564:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001566:	f001 fdf5 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 800156a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d804      	bhi.n	800157e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e022      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d204      	bcs.n	8001590 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e019      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d915      	bls.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
=======
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015b8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015c0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80015c2:	f001 fdf5 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 80015c6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4a1a      	ldr	r2, [pc, #104]	@ (8001634 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d804      	bhi.n	80015da <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	e022      	b.n	8001620 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	4a16      	ldr	r2, [pc, #88]	@ (8001638 <HAL_ETH_SetMDIOClockRange+0x90>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d204      	bcs.n	80015ec <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	e019      	b.n	8001620 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	4a13      	ldr	r2, [pc, #76]	@ (800163c <HAL_ETH_SetMDIOClockRange+0x94>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	d915      	bls.n	8001620 <HAL_ETH_SetMDIOClockRange+0x78>
>>>>>>> dev
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
<<<<<<< HEAD
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d804      	bhi.n	80015aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e00c      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d804      	bhi.n	80015bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e003      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
=======
 80015f4:	68bb      	ldr	r3, [r7, #8]
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <HAL_ETH_SetMDIOClockRange+0x98>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d804      	bhi.n	8001606 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e00c      	b.n	8001620 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	4a0e      	ldr	r2, [pc, #56]	@ (8001644 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d804      	bhi.n	8001618 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e003      	b.n	8001620 <HAL_ETH_SetMDIOClockRange+0x78>
>>>>>>> dev
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
<<<<<<< HEAD
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015c2:	60fb      	str	r3, [r7, #12]
=======
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800161e:	60fb      	str	r3, [r7, #12]
>>>>>>> dev
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
<<<<<<< HEAD
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	02160ebf 	.word	0x02160ebf
 80015dc:	03938700 	.word	0x03938700
 80015e0:	05f5e0ff 	.word	0x05f5e0ff
 80015e4:	08f0d17f 	.word	0x08f0d17f
 80015e8:	0ee6b27f 	.word	0x0ee6b27f

080015ec <ETH_SetMACConfig>:
=======
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800162a:	bf00      	nop
 800162c:	3710      	adds	r7, #16
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	02160ebf 	.word	0x02160ebf
 8001638:	03938700 	.word	0x03938700
 800163c:	05f5e0ff 	.word	0x05f5e0ff
 8001640:	08f0d17f 	.word	0x08f0d17f
 8001644:	0ee6b27f 	.word	0x0ee6b27f

08001648 <ETH_SetMACConfig>:
>>>>>>> dev
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
<<<<<<< HEAD
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
=======
 8001648:	b480      	push	{r7}
 800164a:	b085      	sub	sp, #20
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
>>>>>>> dev
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
<<<<<<< HEAD
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b5b      	ldrb	r3, [r3, #13]
 8001614:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7b9b      	ldrb	r3, [r3, #14]
 800161c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800161e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7bdb      	ldrb	r3, [r3, #15]
 8001624:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001626:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	7c12      	ldrb	r2, [r2, #16]
 800162c:	2a00      	cmp	r2, #0
 800162e:	d102      	bne.n	8001636 <ETH_SetMACConfig+0x4a>
 8001630:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x4c>
 8001636:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001638:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	7c52      	ldrb	r2, [r2, #17]
 800163e:	2a00      	cmp	r2, #0
 8001640:	d102      	bne.n	8001648 <ETH_SetMACConfig+0x5c>
 8001642:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001646:	e000      	b.n	800164a <ETH_SetMACConfig+0x5e>
 8001648:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800164a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	7c9b      	ldrb	r3, [r3, #18]
 8001650:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001652:	431a      	orrs	r2, r3
               macconf->Speed |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001658:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7f1b      	ldrb	r3, [r3, #28]
 8001664:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7f5b      	ldrb	r3, [r3, #29]
 800166c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800166e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	7f92      	ldrb	r2, [r2, #30]
 8001674:	2a00      	cmp	r2, #0
 8001676:	d102      	bne.n	800167e <ETH_SetMACConfig+0x92>
 8001678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0x94>
 800167e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	7fdb      	ldrb	r3, [r3, #31]
 8001686:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001690:	2a00      	cmp	r2, #0
 8001692:	d102      	bne.n	800169a <ETH_SetMACConfig+0xae>
 8001694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001698:	e000      	b.n	800169c <ETH_SetMACConfig+0xb0>
 800169a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800169c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b56      	ldr	r3, [pc, #344]	@ (8001818 <ETH_SetMACConfig+0x22c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d102      	bne.n	80016fe <ETH_SetMACConfig+0x112>
 80016f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fc:	e000      	b.n	8001700 <ETH_SetMACConfig+0x114>
 80016fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001700:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <ETH_SetMACConfig+0x230>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001724:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <ETH_SetMACConfig+0x234>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	68f9      	ldr	r1, [r7, #12]
 800173e:	430b      	orrs	r3, r1
 8001740:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001748:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800174e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001756:	2a00      	cmp	r2, #0
 8001758:	d101      	bne.n	800175e <ETH_SetMACConfig+0x172>
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	e000      	b.n	8001760 <ETH_SetMACConfig+0x174>
 800175e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001760:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001766:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001772:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001788:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001790:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	f023 0103 	bic.w	r1, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
=======
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800165a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	791b      	ldrb	r3, [r3, #4]
 8001660:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001662:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	7b1b      	ldrb	r3, [r3, #12]
 8001668:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800166a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	7b5b      	ldrb	r3, [r3, #13]
 8001670:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001672:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	7b9b      	ldrb	r3, [r3, #14]
 8001678:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800167a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	7bdb      	ldrb	r3, [r3, #15]
 8001680:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001682:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	7c12      	ldrb	r2, [r2, #16]
 8001688:	2a00      	cmp	r2, #0
 800168a:	d102      	bne.n	8001692 <ETH_SetMACConfig+0x4a>
 800168c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001690:	e000      	b.n	8001694 <ETH_SetMACConfig+0x4c>
 8001692:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001694:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	7c52      	ldrb	r2, [r2, #17]
 800169a:	2a00      	cmp	r2, #0
 800169c:	d102      	bne.n	80016a4 <ETH_SetMACConfig+0x5c>
 800169e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a2:	e000      	b.n	80016a6 <ETH_SetMACConfig+0x5e>
 80016a4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80016a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	7c9b      	ldrb	r3, [r3, #18]
 80016ac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80016ae:	431a      	orrs	r2, r3
               macconf->Speed |
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80016b4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80016ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	7f1b      	ldrb	r3, [r3, #28]
 80016c0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80016c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	7f5b      	ldrb	r3, [r3, #29]
 80016c8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80016ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	7f92      	ldrb	r2, [r2, #30]
 80016d0:	2a00      	cmp	r2, #0
 80016d2:	d102      	bne.n	80016da <ETH_SetMACConfig+0x92>
 80016d4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016d8:	e000      	b.n	80016dc <ETH_SetMACConfig+0x94>
 80016da:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80016dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	7fdb      	ldrb	r3, [r3, #31]
 80016e2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80016e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	f892 2020 	ldrb.w	r2, [r2, #32]
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d102      	bne.n	80016f6 <ETH_SetMACConfig+0xae>
 80016f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80016f4:	e000      	b.n	80016f8 <ETH_SetMACConfig+0xb0>
 80016f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80016f8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001706:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001708:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 800170e:	4313      	orrs	r3, r2
 8001710:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b56      	ldr	r3, [pc, #344]	@ (8001874 <ETH_SetMACConfig+0x22c>)
 800171a:	4013      	ands	r3, r2
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	68f9      	ldr	r1, [r7, #12]
 8001722:	430b      	orrs	r3, r1
 8001724:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800172a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001732:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001734:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800173c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800173e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001746:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001748:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001750:	2a00      	cmp	r2, #0
 8001752:	d102      	bne.n	800175a <ETH_SetMACConfig+0x112>
 8001754:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001758:	e000      	b.n	800175c <ETH_SetMACConfig+0x114>
 800175a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800175c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001762:	4313      	orrs	r3, r2
 8001764:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4b42      	ldr	r3, [pc, #264]	@ (8001878 <ETH_SetMACConfig+0x230>)
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	430b      	orrs	r3, r1
 8001778:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001780:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001786:	4313      	orrs	r3, r2
 8001788:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	4b3a      	ldr	r3, [pc, #232]	@ (800187c <ETH_SetMACConfig+0x234>)
 8001792:	4013      	ands	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	6812      	ldr	r2, [r2, #0]
 8001798:	68f9      	ldr	r1, [r7, #12]
 800179a:	430b      	orrs	r3, r1
 800179c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80017a4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017aa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80017ac:	683a      	ldr	r2, [r7, #0]
 80017ae:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80017b2:	2a00      	cmp	r2, #0
 80017b4:	d101      	bne.n	80017ba <ETH_SetMACConfig+0x172>
 80017b6:	2280      	movs	r2, #128	@ 0x80
 80017b8:	e000      	b.n	80017bc <ETH_SetMACConfig+0x174>
 80017ba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80017bc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017c2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80017c4:	4313      	orrs	r3, r2
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80017ce:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6812      	ldr	r2, [r2, #0]
 80017d8:	68f9      	ldr	r1, [r7, #12]
 80017da:	430b      	orrs	r3, r1
 80017dc:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80017e4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80017ec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80017ee:	4313      	orrs	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017fa:	f023 0103 	bic.w	r1, r3, #3
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	430a      	orrs	r2, r1
 8001806:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
>>>>>>> dev

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
<<<<<<< HEAD
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d101      	bne.n	80017da <ETH_SetMACConfig+0x1ee>
 80017d6:	2240      	movs	r2, #64	@ 0x40
 80017d8:	e000      	b.n	80017dc <ETH_SetMACConfig+0x1f0>
 80017da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	430a      	orrs	r2, r1
 8001808:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	00048083 	.word	0x00048083
 800181c:	c0f88000 	.word	0xc0f88000
 8001820:	fffffef0 	.word	0xfffffef0

08001824 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
=======
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001812:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001828:	683a      	ldr	r2, [r7, #0]
 800182a:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 800182e:	2a00      	cmp	r2, #0
 8001830:	d101      	bne.n	8001836 <ETH_SetMACConfig+0x1ee>
 8001832:	2240      	movs	r2, #64	@ 0x40
 8001834:	e000      	b.n	8001838 <ETH_SetMACConfig+0x1f0>
 8001836:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001838:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001840:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001842:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800184a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800184c:	4313      	orrs	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001858:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	430a      	orrs	r2, r1
 8001864:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	00048083 	.word	0x00048083
 8001878:	c0f88000 	.word	0xc0f88000
 800187c:	fffffef0 	.word	0xfffffef0

08001880 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
>>>>>>> dev
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
<<<<<<< HEAD
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <ETH_SetDMAConfig+0xf8>)
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b1b      	ldrb	r3, [r3, #12]
 800185c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <ETH_SetDMAConfig+0xfc>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	430b      	orrs	r3, r1
 8001878:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800187c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	7b5b      	ldrb	r3, [r3, #13]
 8001882:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001894:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <ETH_SetDMAConfig+0x100>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7d1b      	ldrb	r3, [r3, #20]
 80018b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7f5b      	ldrb	r3, [r3, #29]
 80018bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <ETH_SetDMAConfig+0x104>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	430b      	orrs	r3, r1
 80018da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
 80018e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <ETH_SetDMAConfig+0x108>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	430b      	orrs	r3, r1
 8001908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	ffff87fd 	.word	0xffff87fd
 8001920:	ffff2ffe 	.word	0xffff2ffe
 8001924:	fffec000 	.word	0xfffec000
 8001928:	ffc0efef 	.word	0xffc0efef
 800192c:	7fc0ffff 	.word	0x7fc0ffff

08001930 <ETH_MACDMAConfig>:
=======
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <ETH_SetDMAConfig+0xf8>)
 8001896:	4013      	ands	r3, r2
 8001898:	683a      	ldr	r2, [r7, #0]
 800189a:	6811      	ldr	r1, [r2, #0]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018b2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	7b1b      	ldrb	r3, [r3, #12]
 80018b8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80018ba:	4313      	orrs	r3, r2
 80018bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	4b2c      	ldr	r3, [pc, #176]	@ (800197c <ETH_SetDMAConfig+0xfc>)
 80018ca:	4013      	ands	r3, r2
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	68f9      	ldr	r1, [r7, #12]
 80018d2:	430b      	orrs	r3, r1
 80018d4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	7b5b      	ldrb	r3, [r3, #13]
 80018de:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f0:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <ETH_SetDMAConfig+0x100>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	430b      	orrs	r3, r1
 8001900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001904:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7d1b      	ldrb	r3, [r3, #20]
 8001910:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001912:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7f5b      	ldrb	r3, [r3, #29]
 8001918:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001926:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <ETH_SetDMAConfig+0x104>)
 800192c:	4013      	ands	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	68f9      	ldr	r1, [r7, #12]
 8001934:	430b      	orrs	r3, r1
 8001936:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800193a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	7f1b      	ldrb	r3, [r3, #28]
 8001942:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001948:	4313      	orrs	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001954:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <ETH_SetDMAConfig+0x108>)
 800195a:	4013      	ands	r3, r2
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	6812      	ldr	r2, [r2, #0]
 8001960:	68f9      	ldr	r1, [r7, #12]
 8001962:	430b      	orrs	r3, r1
 8001964:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001968:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 800196c:	bf00      	nop
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	ffff87fd 	.word	0xffff87fd
 800197c:	ffff2ffe 	.word	0xffff2ffe
 8001980:	fffec000 	.word	0xfffec000
 8001984:	ffc0efef 	.word	0xffc0efef
 8001988:	7fc0ffff 	.word	0x7fc0ffff

0800198c <ETH_MACDMAConfig>:
>>>>>>> dev
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 8001930:	b580      	push	{r7, lr}
 8001932:	b0a4      	sub	sp, #144	@ 0x90
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
=======
 800198c:	b580      	push	{r7, lr}
 800198e:	b0a4      	sub	sp, #144	@ 0x90
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
<<<<<<< HEAD
 8001938:	2301      	movs	r3, #1
 800193a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800193e:	2300      	movs	r3, #0
 8001940:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800194e:	2301      	movs	r3, #1
 8001950:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800195a:	2301      	movs	r3, #1
 800195c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800196c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001970:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001978:	2300      	movs	r3, #0
 800197a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001988:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800198c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019aa:	2300      	movs	r3, #0
 80019ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019b2:	2300      	movs	r3, #0
 80019b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019c8:	2320      	movs	r3, #32
 80019ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fde6 	bl	80015ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fee1 	bl	8001824 <ETH_SetDMAConfig>
}
 8001a62:	bf00      	nop
 8001a64:	3790      	adds	r7, #144	@ 0x90
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ETH_DMATxDescListInit>:
=======
 8001994:	2301      	movs	r3, #1
 8001996:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800199a:	2300      	movs	r3, #0
 800199c:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80019aa:	2301      	movs	r3, #1
 80019ac:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80019b0:	2301      	movs	r3, #1
 80019b2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80019c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019cc:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80019d4:	2300      	movs	r3, #0
 80019d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80019d8:	2300      	movs	r3, #0
 80019da:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80019e4:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80019e8:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80019f0:	2300      	movs	r3, #0
 80019f2:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 80019f4:	2301      	movs	r3, #1
 80019f6:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001a06:	2300      	movs	r3, #0
 8001a08:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001a24:	2320      	movs	r3, #32
 8001a26:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001a36:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001a3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001a3c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a40:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001a54:	2300      	movs	r3, #0
 8001a56:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a66:	2300      	movs	r3, #0
 8001a68:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a74:	4619      	mov	r1, r3
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff fde6 	bl	8001648 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a80:	2301      	movs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a84:	2300      	movs	r3, #0
 8001a86:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a96:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001aa0:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001aa4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001aac:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7ff fee1 	bl	8001880 <ETH_SetDMAConfig>
}
 8001abe:	bf00      	nop
 8001ac0:	3790      	adds	r7, #144	@ 0x90
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <ETH_DMATxDescListInit>:
>>>>>>> dev
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
=======
 8001ac6:	b480      	push	{r7}
 8001ac8:	b085      	sub	sp, #20
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
<<<<<<< HEAD
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e01d      	b.n	8001ab4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	3206      	adds	r2, #6
 8001aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d9de      	bls.n	8001a78 <ETH_DMATxDescListInit+0xe>
=======
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	e01d      	b.n	8001b10 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68d9      	ldr	r1, [r3, #12]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	4613      	mov	r3, r2
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	4413      	add	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	440b      	add	r3, r1
 8001ae4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2200      	movs	r2, #0
 8001af0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2200      	movs	r2, #0
 8001af6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001afe:	68b9      	ldr	r1, [r7, #8]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68fa      	ldr	r2, [r7, #12]
 8001b04:	3206      	adds	r2, #6
 8001b06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d9de      	bls.n	8001ad4 <ETH_DMATxDescListInit+0xe>
>>>>>>> dev

  }

  heth->TxDescList.CurTxDesc = 0;
<<<<<<< HEAD
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <ETH_DMARxDescListInit>:
=======
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b24:	461a      	mov	r2, r3
 8001b26:	2303      	movs	r3, #3
 8001b28:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b38:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	68da      	ldr	r2, [r3, #12]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b48:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001b4c:	bf00      	nop
 8001b4e:	3714      	adds	r7, #20
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr

08001b58 <ETH_DMARxDescListInit>:
>>>>>>> dev
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
<<<<<<< HEAD
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
=======
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
<<<<<<< HEAD
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e023      	b.n	8001b52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	3212      	adds	r2, #18
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d9d8      	bls.n	8001b0a <ETH_DMARxDescListInit+0xe>
=======
 8001b60:	2300      	movs	r3, #0
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	e023      	b.n	8001bae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6919      	ldr	r1, [r3, #16]
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	005b      	lsls	r3, r3, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	440b      	add	r3, r1
 8001b76:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	2200      	movs	r2, #0
 8001b82:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b9c:	68b9      	ldr	r1, [r7, #8]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	3212      	adds	r2, #18
 8001ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	3301      	adds	r3, #1
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	d9d8      	bls.n	8001b66 <ETH_DMARxDescListInit+0xe>
>>>>>>> dev

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
<<<<<<< HEAD
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2303      	movs	r3, #3
 8001b82:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b92:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_GPIO_Init>:
=======
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bda:	461a      	mov	r2, r3
 8001bdc:	2303      	movs	r3, #3
 8001bde:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bee:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	691b      	ldr	r3, [r3, #16]
 8001bf6:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c02:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GPIO_Init>:
>>>>>>> dev
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
=======
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
>>>>>>> dev
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
<<<<<<< HEAD
 8001bc6:	4b89      	ldr	r3, [pc, #548]	@ (8001dec <HAL_GPIO_Init+0x234>)
 8001bc8:	617b      	str	r3, [r7, #20]
=======
 8001c22:	4b89      	ldr	r3, [pc, #548]	@ (8001e48 <HAL_GPIO_Init+0x234>)
 8001c24:	617b      	str	r3, [r7, #20]
>>>>>>> dev
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
<<<<<<< HEAD
 8001bca:	e194      	b.n	8001ef6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8186 	beq.w	8001ef0 <HAL_GPIO_Init+0x338>
=======
 8001c26:	e194      	b.n	8001f52 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	2101      	movs	r1, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	4013      	ands	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8186 	beq.w	8001f4c <HAL_GPIO_Init+0x338>
>>>>>>> dev
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
<<<<<<< HEAD
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x44>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa6>
=======
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d005      	beq.n	8001c58 <HAL_GPIO_Init+0x44>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d130      	bne.n	8001cba <HAL_GPIO_Init+0xa6>
>>>>>>> dev
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
<<<<<<< HEAD
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xe2>
=======
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2203      	movs	r2, #3
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	69ba      	ldr	r2, [r7, #24]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8e:	2201      	movs	r2, #1
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	43db      	mvns	r3, r3
 8001c98:	69ba      	ldr	r2, [r7, #24]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	091b      	lsrs	r3, r3, #4
 8001ca4:	f003 0201 	and.w	r2, r3, #1
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 0303 	and.w	r3, r3, #3
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	d017      	beq.n	8001cf6 <HAL_GPIO_Init+0xe2>
>>>>>>> dev
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	60da      	str	r2, [r3, #12]
=======
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	2203      	movs	r2, #3
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	689a      	ldr	r2, [r3, #8]
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	60da      	str	r2, [r3, #12]
>>>>>>> dev
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
<<<<<<< HEAD
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x136>
=======
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d123      	bne.n	8001d4a <HAL_GPIO_Init+0x136>
>>>>>>> dev
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	08da      	lsrs	r2, r3, #3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	3208      	adds	r2, #8
 8001d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	220f      	movs	r2, #15
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	691a      	ldr	r2, [r3, #16]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	08da      	lsrs	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	3208      	adds	r2, #8
 8001d44:	69b9      	ldr	r1, [r7, #24]
 8001d46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> dev
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]
=======
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	005b      	lsls	r3, r3, #1
 8001d54:	2203      	movs	r2, #3
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 0203 	and.w	r2, r3, #3
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	601a      	str	r2, [r3, #0]
>>>>>>> dev

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
<<<<<<< HEAD
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80e0 	beq.w	8001ef0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d36:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d40:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4e:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <HAL_GPIO_Init+0x23c>)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_GPIO_Init+0x240>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d052      	beq.n	8001e20 <HAL_GPIO_Init+0x268>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dfc <HAL_GPIO_Init+0x244>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1e      	ldr	r2, [pc, #120]	@ (8001e00 <HAL_GPIO_Init+0x248>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02b      	beq.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_GPIO_Init+0x24c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_GPIO_Init+0x250>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_GPIO_Init+0x254>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <HAL_GPIO_Init+0x258>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_GPIO_Init+0x25c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_GPIO_Init+0x260>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_GPIO_Init+0x264>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x20e>
 8001dc2:	2309      	movs	r3, #9
 8001dc4:	e02d      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	e02b      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dca:	2308      	movs	r3, #8
 8001dcc:	e029      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e027      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e025      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	e023      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e021      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dde:	2303      	movs	r3, #3
 8001de0:	e01f      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e01d      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01b      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dea:	bf00      	nop
 8001dec:	58000080 	.word	0x58000080
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58000400 	.word	0x58000400
 8001df8:	58020000 	.word	0x58020000
 8001dfc:	58020400 	.word	0x58020400
 8001e00:	58020800 	.word	0x58020800
 8001e04:	58020c00 	.word	0x58020c00
 8001e08:	58021000 	.word	0x58021000
 8001e0c:	58021400 	.word	0x58021400
 8001e10:	58021800 	.word	0x58021800
 8001e14:	58021c00 	.word	0x58021c00
 8001e18:	58022000 	.word	0x58022000
 8001e1c:	58022400 	.word	0x58022400
 8001e20:	2300      	movs	r3, #0
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e32:	4938      	ldr	r1, [pc, #224]	@ (8001f14 <HAL_GPIO_Init+0x35c>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]
=======
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	f000 80e0 	beq.w	8001f4c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e4c <HAL_GPIO_Init+0x238>)
 8001d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d92:	4a2e      	ldr	r2, [pc, #184]	@ (8001e4c <HAL_GPIO_Init+0x238>)
 8001d94:	f043 0302 	orr.w	r3, r3, #2
 8001d98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <HAL_GPIO_Init+0x238>)
 8001d9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001daa:	4a29      	ldr	r2, [pc, #164]	@ (8001e50 <HAL_GPIO_Init+0x23c>)
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	3302      	adds	r3, #2
 8001db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0303 	and.w	r3, r3, #3
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	220f      	movs	r2, #15
 8001dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc6:	43db      	mvns	r3, r3
 8001dc8:	69ba      	ldr	r2, [r7, #24]
 8001dca:	4013      	ands	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a20      	ldr	r2, [pc, #128]	@ (8001e54 <HAL_GPIO_Init+0x240>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d052      	beq.n	8001e7c <HAL_GPIO_Init+0x268>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e58 <HAL_GPIO_Init+0x244>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d031      	beq.n	8001e42 <HAL_GPIO_Init+0x22e>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1e      	ldr	r2, [pc, #120]	@ (8001e5c <HAL_GPIO_Init+0x248>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d02b      	beq.n	8001e3e <HAL_GPIO_Init+0x22a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e60 <HAL_GPIO_Init+0x24c>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x226>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_GPIO_Init+0x250>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x222>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a1b      	ldr	r2, [pc, #108]	@ (8001e68 <HAL_GPIO_Init+0x254>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x21e>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a1a      	ldr	r2, [pc, #104]	@ (8001e6c <HAL_GPIO_Init+0x258>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a19      	ldr	r2, [pc, #100]	@ (8001e70 <HAL_GPIO_Init+0x25c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a18      	ldr	r2, [pc, #96]	@ (8001e74 <HAL_GPIO_Init+0x260>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x212>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_GPIO_Init+0x264>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x20e>
 8001e1e:	2309      	movs	r3, #9
 8001e20:	e02d      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e22:	230a      	movs	r3, #10
 8001e24:	e02b      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e26:	2308      	movs	r3, #8
 8001e28:	e029      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	e027      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e2e:	2306      	movs	r3, #6
 8001e30:	e025      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e023      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e021      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e01f      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e01d      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e01b      	b.n	8001e7e <HAL_GPIO_Init+0x26a>
 8001e46:	bf00      	nop
 8001e48:	58000080 	.word	0x58000080
 8001e4c:	58024400 	.word	0x58024400
 8001e50:	58000400 	.word	0x58000400
 8001e54:	58020000 	.word	0x58020000
 8001e58:	58020400 	.word	0x58020400
 8001e5c:	58020800 	.word	0x58020800
 8001e60:	58020c00 	.word	0x58020c00
 8001e64:	58021000 	.word	0x58021000
 8001e68:	58021400 	.word	0x58021400
 8001e6c:	58021800 	.word	0x58021800
 8001e70:	58021c00 	.word	0x58021c00
 8001e74:	58022000 	.word	0x58022000
 8001e78:	58022400 	.word	0x58022400
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	69fa      	ldr	r2, [r7, #28]
 8001e80:	f002 0203 	and.w	r2, r2, #3
 8001e84:	0092      	lsls	r2, r2, #2
 8001e86:	4093      	lsls	r3, r2
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e8e:	4938      	ldr	r1, [pc, #224]	@ (8001f70 <HAL_GPIO_Init+0x35c>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea4:	693b      	ldr	r3, [r7, #16]
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ec2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ef0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	43db      	mvns	r3, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	601a      	str	r2, [r3, #0]
>>>>>>> dev
      }
    }

    position++;
<<<<<<< HEAD
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae63 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	@ 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	58000400 	.word	0x58000400

08001f18 <HAL_GPIO_WritePin>:
=======
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	3301      	adds	r3, #1
 8001f50:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	fa22 f303 	lsr.w	r3, r2, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f47f ae63 	bne.w	8001c28 <HAL_GPIO_Init+0x14>
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	3724      	adds	r7, #36	@ 0x24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6e:	4770      	bx	lr
 8001f70:	58000400 	.word	0x58000400

08001f74 <HAL_GPIO_WritePin>:
>>>>>>> dev
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
=======
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
 8001f80:	4613      	mov	r3, r2
 8001f82:	707b      	strb	r3, [r7, #1]
>>>>>>> dev
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
=======
 8001f84:	787b      	ldrb	r3, [r7, #1]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f8a:	887a      	ldrh	r2, [r7, #2]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	619a      	str	r2, [r3, #24]
>>>>>>> dev
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
<<<<<<< HEAD
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_PCD_Init>:
=======
 8001f90:	e003      	b.n	8001f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f92:	887b      	ldrh	r3, [r7, #2]
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	619a      	str	r2, [r3, #24]
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_PCD_Init>:
>>>>>>> dev
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	6078      	str	r0, [r7, #4]
=======
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b086      	sub	sp, #24
 8001faa:	af02      	add	r7, sp, #8
 8001fac:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
<<<<<<< HEAD
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0fe      	b.n	800215a <HAL_PCD_Init+0x210>
=======
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0fe      	b.n	80021b6 <HAL_PCD_Init+0x210>
>>>>>>> dev
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
<<<<<<< HEAD
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
=======
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d106      	bne.n	8001fd2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
>>>>>>> dev

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
<<<<<<< HEAD
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fed5 	bl	8000d20 <HAL_PCD_MspInit>
=======
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7fe fed3 	bl	8000d78 <HAL_PCD_MspInit>
>>>>>>> dev
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
<<<<<<< HEAD
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8bc 	bl	8006100 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7c1a      	ldrb	r2, [r3, #16]
 8001f90:	f88d 2000 	strb.w	r2, [sp]
 8001f94:	3304      	adds	r3, #4
 8001f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f98:	f004 f840 	bl	800601c <USB_CoreInit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0d5      	b.n	800215a <HAL_PCD_Init+0x210>
=======
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2203      	movs	r2, #3
 8001fd6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f004 f8bc 	bl	800615c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6818      	ldr	r0, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7c1a      	ldrb	r2, [r3, #16]
 8001fec:	f88d 2000 	strb.w	r2, [sp]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ff4:	f004 f840 	bl	8006078 <USB_CoreInit>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2202      	movs	r2, #2
 8002002:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e0d5      	b.n	80021b6 <HAL_PCD_Init+0x210>
>>>>>>> dev
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
<<<<<<< HEAD
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f8b4 	bl	8006122 <USB_SetCurrentMode>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_PCD_Init+0x210>
=======
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f004 f8b4 	bl	800617e <USB_SetCurrentMode>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d005      	beq.n	8002028 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e0c6      	b.n	80021b6 <HAL_PCD_Init+0x210>
>>>>>>> dev
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
<<<<<<< HEAD
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e04a      	b.n	8002068 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3315      	adds	r3, #21
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b298      	uxth	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	332e      	adds	r3, #46	@ 0x2e
 800200e:	4602      	mov	r2, r0
 8002010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3318      	adds	r3, #24
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331c      	adds	r3, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3320      	adds	r3, #32
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3324      	adds	r3, #36	@ 0x24
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3af      	bcc.n	8001fd2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e044      	b.n	8002102 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3b5      	bcc.n	8002078 <HAL_PCD_Init+0x12e>
=======
 8002028:	2300      	movs	r3, #0
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	e04a      	b.n	80020c4 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800202e:	7bfa      	ldrb	r2, [r7, #15]
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	4413      	add	r3, r2
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	440b      	add	r3, r1
 800203c:	3315      	adds	r3, #21
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	3314      	adds	r3, #20
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	b298      	uxth	r0, r3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	440b      	add	r3, r1
 8002068:	332e      	adds	r3, #46	@ 0x2e
 800206a:	4602      	mov	r2, r0
 800206c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3318      	adds	r3, #24
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002082:	7bfa      	ldrb	r2, [r7, #15]
 8002084:	6879      	ldr	r1, [r7, #4]
 8002086:	4613      	mov	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	4413      	add	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	440b      	add	r3, r1
 8002090:	331c      	adds	r3, #28
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002096:	7bfa      	ldrb	r2, [r7, #15]
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	4413      	add	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	440b      	add	r3, r1
 80020a4:	3320      	adds	r3, #32
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	3324      	adds	r3, #36	@ 0x24
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020be:	7bfb      	ldrb	r3, [r7, #15]
 80020c0:	3301      	adds	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	791b      	ldrb	r3, [r3, #4]
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d3af      	bcc.n	800202e <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ce:	2300      	movs	r3, #0
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	e044      	b.n	800215e <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020d4:	7bfa      	ldrb	r2, [r7, #15]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	00db      	lsls	r3, r3, #3
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	6879      	ldr	r1, [r7, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	4413      	add	r3, r2
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	440b      	add	r3, r1
 80020f8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002100:	7bfa      	ldrb	r2, [r7, #15]
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	4413      	add	r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	4613      	mov	r3, r2
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	440b      	add	r3, r1
 8002124:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800212c:	7bfa      	ldrb	r2, [r7, #15]
 800212e:	6879      	ldr	r1, [r7, #4]
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	440b      	add	r3, r1
 800213a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	791b      	ldrb	r3, [r3, #4]
 8002162:	7bfa      	ldrb	r2, [r7, #15]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3b5      	bcc.n	80020d4 <HAL_PCD_Init+0x12e>
>>>>>>> dev
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
<<<<<<< HEAD
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	f88d 2000 	strb.w	r2, [sp]
 8002118:	3304      	adds	r3, #4
 800211a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211c:	f004 f84e 	bl	80061bc <USB_DevInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e013      	b.n	800215a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7b1b      	ldrb	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f80b 	bl	8002164 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fa09 	bl	800656a <USB_DevDisconnect>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_PCDEx_ActivateLPM>:
=======
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6818      	ldr	r0, [r3, #0]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7c1a      	ldrb	r2, [r3, #16]
 8002170:	f88d 2000 	strb.w	r2, [sp]
 8002174:	3304      	adds	r3, #4
 8002176:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002178:	f004 f84e 	bl	8006218 <USB_DevInit>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d005      	beq.n	800218e <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2202      	movs	r2, #2
 8002186:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e013      	b.n	80021b6 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7b1b      	ldrb	r3, [r3, #12]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d102      	bne.n	80021aa <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 f80b 	bl	80021c0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f004 fa09 	bl	80065c6 <USB_DevDisconnect>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_PCDEx_ActivateLPM>:
>>>>>>> dev
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
<<<<<<< HEAD
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002194:	4313      	orrs	r3, r2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	10000003 	.word	0x10000003

080021ac <HAL_PWREx_ConfigSupply>:
=======
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80021ee:	4b05      	ldr	r3, [pc, #20]	@ (8002204 <HAL_PCDEx_ActivateLPM+0x44>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021f6:	2300      	movs	r3, #0
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3714      	adds	r7, #20
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	10000003 	.word	0x10000003

08002208 <HAL_PWREx_ConfigSupply>:
>>>>>>> dev
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
<<<<<<< HEAD
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
=======
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
<<<<<<< HEAD
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00a      	beq.n	80021d6 <HAL_PWREx_ConfigSupply+0x2a>
=======
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_PWREx_ConfigSupply+0x70>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	f003 0304 	and.w	r3, r3, #4
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00a      	beq.n	8002232 <HAL_PWREx_ConfigSupply+0x2a>
>>>>>>> dev
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
<<<<<<< HEAD
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01f      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
=======
 800221c:	4b16      	ldr	r3, [pc, #88]	@ (8002278 <HAL_PWREx_ConfigSupply+0x70>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	687a      	ldr	r2, [r7, #4]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e01f      	b.n	800226e <HAL_PWREx_ConfigSupply+0x66>
>>>>>>> dev
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
<<<<<<< HEAD
 80021d2:	2300      	movs	r3, #0
 80021d4:	e01d      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
=======
 800222e:	2300      	movs	r3, #0
 8002230:	e01d      	b.n	800226e <HAL_PWREx_ConfigSupply+0x66>
>>>>>>> dev
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
<<<<<<< HEAD
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	490f      	ldr	r1, [pc, #60]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021e6:	f7fe ff7f 	bl	80010e8 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ec:	e009      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021ee:	f7fe ff7b 	bl	80010e8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021fc:	d901      	bls.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e007      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220e:	d1ee      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0x42>
=======
 8002232:	4b11      	ldr	r3, [pc, #68]	@ (8002278 <HAL_PWREx_ConfigSupply+0x70>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	f023 0207 	bic.w	r2, r3, #7
 800223a:	490f      	ldr	r1, [pc, #60]	@ (8002278 <HAL_PWREx_ConfigSupply+0x70>)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4313      	orrs	r3, r2
 8002240:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002242:	f7fe ff7f 	bl	8001144 <HAL_GetTick>
 8002246:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002248:	e009      	b.n	800225e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800224a:	f7fe ff7b 	bl	8001144 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002258:	d901      	bls.n	800225e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e007      	b.n	800226e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800225e:	4b06      	ldr	r3, [pc, #24]	@ (8002278 <HAL_PWREx_ConfigSupply+0x70>)
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002266:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800226a:	d1ee      	bne.n	800224a <HAL_PWREx_ConfigSupply+0x42>
>>>>>>> dev
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
<<<<<<< HEAD
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	58024800 	.word	0x58024800

08002220 <HAL_PWREx_EnableUSBVoltageDetector>:
=======
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	58024800 	.word	0x58024800

0800227c <HAL_PWREx_EnableUSBVoltageDetector>:
>>>>>>> dev
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
<<<<<<< HEAD
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	58024800 	.word	0x58024800

08002240 <HAL_RCC_OscConfig>:
=======
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	4a04      	ldr	r2, [pc, #16]	@ (8002298 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800228a:	60d3      	str	r3, [r2, #12]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	58024800 	.word	0x58024800

0800229c <HAL_RCC_OscConfig>:
>>>>>>> dev
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	@ 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
=======
 800229c:	b580      	push	{r7, lr}
 800229e:	b08c      	sub	sp, #48	@ 0x30
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f000 bc48 	b.w	8002ae4 <HAL_RCC_OscConfig+0x8a4>
=======
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	f000 bc48 	b.w	8002b40 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> dev
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8088 	beq.w	8002372 <HAL_RCC_OscConfig+0x132>
=======
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0301 	and.w	r3, r3, #1
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 8088 	beq.w	80023ce <HAL_RCC_OscConfig+0x132>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8002262:	4b99      	ldr	r3, [pc, #612]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800226c:	4b96      	ldr	r3, [pc, #600]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002274:	2b10      	cmp	r3, #16
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x48>
 8002278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227a:	2b18      	cmp	r3, #24
 800227c:	d111      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d06d      	beq.n	8002370 <HAL_RCC_OscConfig+0x130>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d169      	bne.n	8002370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f000 bc21 	b.w	8002ae4 <HAL_RCC_OscConfig+0x8a4>
=======
 80022be:	4b99      	ldr	r3, [pc, #612]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022c8:	4b96      	ldr	r3, [pc, #600]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80022ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80022ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d0:	2b10      	cmp	r3, #16
 80022d2:	d007      	beq.n	80022e4 <HAL_RCC_OscConfig+0x48>
 80022d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022d6:	2b18      	cmp	r3, #24
 80022d8:	d111      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
 80022da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d10c      	bne.n	80022fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e4:	4b8f      	ldr	r3, [pc, #572]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d06d      	beq.n	80023cc <HAL_RCC_OscConfig+0x130>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d169      	bne.n	80023cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	f000 bc21 	b.w	8002b40 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> dev
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x7a>
 80022ac:	4b86      	ldr	r3, [pc, #536]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a85      	ldr	r2, [pc, #532]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x9c>
 80022c2:	4b81      	ldr	r3, [pc, #516]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a80      	ldr	r2, [pc, #512]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7d      	ldr	r2, [pc, #500]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xc0>
 80022e6:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a77      	ldr	r2, [pc, #476]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b75      	ldr	r3, [pc, #468]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a74      	ldr	r2, [pc, #464]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 8002300:	4b71      	ldr	r3, [pc, #452]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a70      	ldr	r2, [pc, #448]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b6e      	ldr	r3, [pc, #440]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6d      	ldr	r2, [pc, #436]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fee2 	bl	80010e8 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fede 	bl	80010e8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e3d4      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800233a:	4b63      	ldr	r3, [pc, #396]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
=======
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x7a>
 8002308:	4b86      	ldr	r3, [pc, #536]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a85      	ldr	r2, [pc, #532]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800230e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	e02e      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x9c>
 800231e:	4b81      	ldr	r3, [pc, #516]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a80      	ldr	r2, [pc, #512]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002324:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002328:	6013      	str	r3, [r2, #0]
 800232a:	4b7e      	ldr	r3, [pc, #504]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7d      	ldr	r2, [pc, #500]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002330:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0xc0>
 8002342:	4b78      	ldr	r3, [pc, #480]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a77      	ldr	r2, [pc, #476]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b75      	ldr	r3, [pc, #468]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a74      	ldr	r2, [pc, #464]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0xd8>
 800235c:	4b71      	ldr	r3, [pc, #452]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a70      	ldr	r2, [pc, #448]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b6e      	ldr	r3, [pc, #440]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6d      	ldr	r2, [pc, #436]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d013      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fee2 	bl	8001144 <HAL_GetTick>
 8002380:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fede 	bl	8001144 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	@ 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e3d4      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002396:	4b63      	ldr	r3, [pc, #396]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f0      	beq.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e014      	b.n	80023ce <HAL_RCC_OscConfig+0x132>
>>>>>>> dev
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002348:	f7fe fece 	bl	80010e8 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe feca 	bl	80010e8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e3c0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002362:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x110>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
=======
 80023a4:	f7fe fece 	bl	8001144 <HAL_GetTick>
 80023a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023ac:	f7fe feca 	bl	8001144 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	@ 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e3c0      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80023be:	4b59      	ldr	r3, [pc, #356]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x110>
 80023ca:	e000      	b.n	80023ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	bf00      	nop
>>>>>>> dev
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80ca 	beq.w	8002514 <HAL_RCC_OscConfig+0x2d4>
=======
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	f000 80ca 	beq.w	8002570 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> dev
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8002380:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002388:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800238a:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_RCC_OscConfig+0x166>
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b18      	cmp	r3, #24
 800239a:	d156      	bne.n	800244a <HAL_RCC_OscConfig+0x20a>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d151      	bne.n	800244a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a6:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x17e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e392      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
=======
 80023dc:	4b51      	ldr	r3, [pc, #324]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80023e6:	4b4f      	ldr	r3, [pc, #316]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80023e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80023ec:	6a3b      	ldr	r3, [r7, #32]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d007      	beq.n	8002402 <HAL_RCC_OscConfig+0x166>
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2b18      	cmp	r3, #24
 80023f6:	d156      	bne.n	80024a6 <HAL_RCC_OscConfig+0x20a>
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d151      	bne.n	80024a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002402:	4b48      	ldr	r3, [pc, #288]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d005      	beq.n	800241a <HAL_RCC_OscConfig+0x17e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d101      	bne.n	800241a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e392      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> dev
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
<<<<<<< HEAD
 80023be:	4b42      	ldr	r3, [pc, #264]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0219 	bic.w	r2, r3, #25
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	493f      	ldr	r1, [pc, #252]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fe8a 	bl	80010e8 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe fe86 	bl	80010e8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e37c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x198>
=======
 800241a:	4b42      	ldr	r3, [pc, #264]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f023 0219 	bic.w	r2, r3, #25
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	493f      	ldr	r1, [pc, #252]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002428:	4313      	orrs	r3, r2
 800242a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fe8a 	bl	8001144 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7fe fe86 	bl	8001144 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e37c      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002446:	4b37      	ldr	r3, [pc, #220]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0304 	and.w	r3, r3, #4
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x198>
>>>>>>> dev
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 80023f6:	f7fe fea7 	bl	8001148 <HAL_GetREVID>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002400:	4293      	cmp	r3, r2
 8002402:	d817      	bhi.n	8002434 <HAL_RCC_OscConfig+0x1f4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b40      	cmp	r3, #64	@ 0x40
 800240a:	d108      	bne.n	800241e <HAL_RCC_OscConfig+0x1de>
 800240c:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002414:	4a2c      	ldr	r2, [pc, #176]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241c:	e07a      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	031b      	lsls	r3, r3, #12
 800242c:	4926      	ldr	r1, [pc, #152]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002432:	e06f      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	4921      	ldr	r1, [pc, #132]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e064      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
=======
 8002452:	f7fe fea7 	bl	80011a4 <HAL_GetREVID>
 8002456:	4603      	mov	r3, r0
 8002458:	f241 0203 	movw	r2, #4099	@ 0x1003
 800245c:	4293      	cmp	r3, r2
 800245e:	d817      	bhi.n	8002490 <HAL_RCC_OscConfig+0x1f4>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	2b40      	cmp	r3, #64	@ 0x40
 8002466:	d108      	bne.n	800247a <HAL_RCC_OscConfig+0x1de>
 8002468:	4b2e      	ldr	r3, [pc, #184]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002470:	4a2c      	ldr	r2, [pc, #176]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002472:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002476:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	e07a      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b2a      	ldr	r3, [pc, #168]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	031b      	lsls	r3, r3, #12
 8002488:	4926      	ldr	r1, [pc, #152]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800248e:	e06f      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b24      	ldr	r3, [pc, #144]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4921      	ldr	r1, [pc, #132]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024a4:	e064      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> dev
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
<<<<<<< HEAD
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d047      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0219 	bic.w	r2, r3, #25
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	491a      	ldr	r1, [pc, #104]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe40 	bl	80010e8 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fe3c 	bl	80010e8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e332      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x22c>
=======
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d047      	beq.n	800253e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f023 0219 	bic.w	r2, r3, #25
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	491a      	ldr	r1, [pc, #104]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fe40 	bl	8001144 <HAL_GetTick>
 80024c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7fe fe3c 	bl	8001144 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e332      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024da:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0x22c>
>>>>>>> dev
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 800248a:	f7fe fe5d 	bl	8001148 <HAL_GetREVID>
 800248e:	4603      	mov	r3, r0
 8002490:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002494:	4293      	cmp	r3, r2
 8002496:	d819      	bhi.n	80024cc <HAL_RCC_OscConfig+0x28c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0x272>
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ae:	6053      	str	r3, [r2, #4]
 80024b0:	e030      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 80024b2:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	031b      	lsls	r3, r3, #12
 80024c0:	4901      	ldr	r1, [pc, #4]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
 80024c6:	e025      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 80024c8:	58024400 	.word	0x58024400
 80024cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	4997      	ldr	r1, [pc, #604]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
=======
 80024e6:	f7fe fe5d 	bl	80011a4 <HAL_GetREVID>
 80024ea:	4603      	mov	r3, r0
 80024ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d819      	bhi.n	8002528 <HAL_RCC_OscConfig+0x28c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	2b40      	cmp	r3, #64	@ 0x40
 80024fa:	d108      	bne.n	800250e <HAL_RCC_OscConfig+0x272>
 80024fc:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002504:	4a07      	ldr	r2, [pc, #28]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800250a:	6053      	str	r3, [r2, #4]
 800250c:	e030      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
 800250e:	4b05      	ldr	r3, [pc, #20]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	031b      	lsls	r3, r3, #12
 800251c:	4901      	ldr	r1, [pc, #4]	@ (8002524 <HAL_RCC_OscConfig+0x288>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
 8002522:	e025      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
 8002524:	58024400 	.word	0x58024400
 8002528:	4b9a      	ldr	r3, [pc, #616]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	4997      	ldr	r1, [pc, #604]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e018      	b.n	8002570 <HAL_RCC_OscConfig+0x2d4>
>>>>>>> dev
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 80024e2:	4b95      	ldr	r3, [pc, #596]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a94      	ldr	r2, [pc, #592]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fdfb 	bl	80010e8 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fdf7 	bl	80010e8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e2ed      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002508:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2b6>
=======
 800253e:	4b95      	ldr	r3, [pc, #596]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a94      	ldr	r2, [pc, #592]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002544:	f023 0301 	bic.w	r3, r3, #1
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fe fdfb 	bl	8001144 <HAL_GetTick>
 800254e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7fe fdf7 	bl	8001144 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e2ed      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002564:	4b8b      	ldr	r3, [pc, #556]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x2b6>
>>>>>>> dev
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
<<<<<<< HEAD
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a9 	beq.w	8002674 <HAL_RCC_OscConfig+0x434>
=======
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0310 	and.w	r3, r3, #16
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a9 	beq.w	80026d0 <HAL_RCC_OscConfig+0x434>
>>>>>>> dev
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
<<<<<<< HEAD
 8002522:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800252c:	4b82      	ldr	r3, [pc, #520]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d007      	beq.n	8002548 <HAL_RCC_OscConfig+0x308>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b18      	cmp	r3, #24
 800253c:	d13a      	bne.n	80025b4 <HAL_RCC_OscConfig+0x374>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d135      	bne.n	80025b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002548:	4b7b      	ldr	r3, [pc, #492]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x320>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e2c1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
=======
 800257e:	4b85      	ldr	r3, [pc, #532]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002586:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002588:	4b82      	ldr	r3, [pc, #520]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800258c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	2b08      	cmp	r3, #8
 8002592:	d007      	beq.n	80025a4 <HAL_RCC_OscConfig+0x308>
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	2b18      	cmp	r3, #24
 8002598:	d13a      	bne.n	8002610 <HAL_RCC_OscConfig+0x374>
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d135      	bne.n	8002610 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d005      	beq.n	80025bc <HAL_RCC_OscConfig+0x320>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	69db      	ldr	r3, [r3, #28]
 80025b4:	2b80      	cmp	r3, #128	@ 0x80
 80025b6:	d001      	beq.n	80025bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e2c1      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> dev
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< HEAD
 8002560:	f7fe fdf2 	bl	8001148 <HAL_GetREVID>
 8002564:	4603      	mov	r3, r0
 8002566:	f241 0203 	movw	r2, #4099	@ 0x1003
 800256a:	4293      	cmp	r3, r2
 800256c:	d817      	bhi.n	800259e <HAL_RCC_OscConfig+0x35e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	2b20      	cmp	r3, #32
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x348>
 8002576:	4b70      	ldr	r3, [pc, #448]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800257e:	4a6e      	ldr	r2, [pc, #440]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002584:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002586:	e075      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002588:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	4968      	ldr	r1, [pc, #416]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800259c:	e06a      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259e:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	4962      	ldr	r1, [pc, #392]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b2:	e05f      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
=======
 80025bc:	f7fe fdf2 	bl	80011a4 <HAL_GetREVID>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025c6:	4293      	cmp	r3, r2
 80025c8:	d817      	bhi.n	80025fa <HAL_RCC_OscConfig+0x35e>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	2b20      	cmp	r3, #32
 80025d0:	d108      	bne.n	80025e4 <HAL_RCC_OscConfig+0x348>
 80025d2:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025da:	4a6e      	ldr	r2, [pc, #440]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025e2:	e075      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e4:	4b6b      	ldr	r3, [pc, #428]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	069b      	lsls	r3, r3, #26
 80025f2:	4968      	ldr	r1, [pc, #416]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025f8:	e06a      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025fa:	4b66      	ldr	r3, [pc, #408]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6a1b      	ldr	r3, [r3, #32]
 8002606:	061b      	lsls	r3, r3, #24
 8002608:	4962      	ldr	r1, [pc, #392]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800260e:	e05f      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
>>>>>>> dev
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
<<<<<<< HEAD
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d042      	beq.n	8002642 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd8e 	bl	80010e8 <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025d0:	f7fe fd8a 	bl	80010e8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e280      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e2:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x390>
=======
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d042      	beq.n	800269e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002618:	4b5e      	ldr	r3, [pc, #376]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a5d      	ldr	r2, [pc, #372]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002622:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002624:	f7fe fd8e 	bl	8001144 <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800262c:	f7fe fd8a 	bl	8001144 <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e280      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800263e:	4b55      	ldr	r3, [pc, #340]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d0f0      	beq.n	800262c <HAL_RCC_OscConfig+0x390>
>>>>>>> dev
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
<<<<<<< HEAD
 80025ee:	f7fe fdab 	bl	8001148 <HAL_GetREVID>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d817      	bhi.n	800262c <HAL_RCC_OscConfig+0x3ec>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	2b20      	cmp	r3, #32
 8002602:	d108      	bne.n	8002616 <HAL_RCC_OscConfig+0x3d6>
 8002604:	4b4c      	ldr	r3, [pc, #304]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002612:	6053      	str	r3, [r2, #4]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
 8002616:	4b48      	ldr	r3, [pc, #288]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	4944      	ldr	r1, [pc, #272]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e023      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
 800262c:	4b42      	ldr	r3, [pc, #264]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	493f      	ldr	r1, [pc, #252]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
=======
 800264a:	f7fe fdab 	bl	80011a4 <HAL_GetREVID>
 800264e:	4603      	mov	r3, r0
 8002650:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002654:	4293      	cmp	r3, r2
 8002656:	d817      	bhi.n	8002688 <HAL_RCC_OscConfig+0x3ec>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	2b20      	cmp	r3, #32
 800265e:	d108      	bne.n	8002672 <HAL_RCC_OscConfig+0x3d6>
 8002660:	4b4c      	ldr	r3, [pc, #304]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002668:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800266e:	6053      	str	r3, [r2, #4]
 8002670:	e02e      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
 8002672:	4b48      	ldr	r3, [pc, #288]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1b      	ldr	r3, [r3, #32]
 800267e:	069b      	lsls	r3, r3, #26
 8002680:	4944      	ldr	r1, [pc, #272]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002682:	4313      	orrs	r3, r2
 8002684:	604b      	str	r3, [r1, #4]
 8002686:	e023      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
 8002688:	4b42      	ldr	r3, [pc, #264]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1b      	ldr	r3, [r3, #32]
 8002694:	061b      	lsls	r3, r3, #24
 8002696:	493f      	ldr	r1, [pc, #252]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002698:	4313      	orrs	r3, r2
 800269a:	60cb      	str	r3, [r1, #12]
 800269c:	e018      	b.n	80026d0 <HAL_RCC_OscConfig+0x434>
>>>>>>> dev
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
<<<<<<< HEAD
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a3c      	ldr	r2, [pc, #240]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fd4b 	bl	80010e8 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002656:	f7fe fd47 	bl	80010e8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e23d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x416>
=======
 800269e:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a3c      	ldr	r2, [pc, #240]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80026a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80026a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fd4b 	bl	8001144 <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026b2:	f7fe fd47 	bl	8001144 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e23d      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80026c4:	4b33      	ldr	r3, [pc, #204]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1f0      	bne.n	80026b2 <HAL_RCC_OscConfig+0x416>
>>>>>>> dev
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d036      	beq.n	80026ee <HAL_RCC_OscConfig+0x4ae>
=======
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0308 	and.w	r3, r3, #8
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d036      	beq.n	800274a <HAL_RCC_OscConfig+0x4ae>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
<<<<<<< HEAD
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d019      	beq.n	80026bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fd28 	bl	80010e8 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fd24 	bl	80010e8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e21a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x45c>
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x4ae>
=======
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d019      	beq.n	8002718 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026e4:	4b2b      	ldr	r3, [pc, #172]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e8:	4a2a      	ldr	r2, [pc, #168]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	f043 0301 	orr.w	r3, r3, #1
 80026ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f0:	f7fe fd28 	bl	8001144 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f8:	f7fe fd24 	bl	8001144 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e21a      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800270a:	4b22      	ldr	r3, [pc, #136]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x45c>
 8002716:	e018      	b.n	800274a <HAL_RCC_OscConfig+0x4ae>
>>>>>>> dev
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 80026bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fd0e 	bl	80010e8 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fd0a 	bl	80010e8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e200      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x490>
=======
 8002718:	4b1e      	ldr	r3, [pc, #120]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800271a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800271c:	4a1d      	ldr	r2, [pc, #116]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 800271e:	f023 0301 	bic.w	r3, r3, #1
 8002722:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7fe fd0e 	bl	8001144 <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800272c:	f7fe fd0a 	bl	8001144 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e200      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800273e:	4b15      	ldr	r3, [pc, #84]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x490>
>>>>>>> dev
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
<<<<<<< HEAD
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d039      	beq.n	800276e <HAL_RCC_OscConfig+0x52e>
=======
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	2b00      	cmp	r3, #0
 8002754:	d039      	beq.n	80027ca <HAL_RCC_OscConfig+0x52e>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
<<<<<<< HEAD
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800270c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800270e:	f7fe fceb 	bl	80010e8 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002716:	f7fe fce7 	bl	80010e8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1dd      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x4d6>
 8002734:	e01b      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400
=======
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d01c      	beq.n	8002798 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800275e:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a0c      	ldr	r2, [pc, #48]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002768:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800276a:	f7fe fceb 	bl	8001144 <HAL_GetTick>
 800276e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002772:	f7fe fce7 	bl	8001144 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e1dd      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002784:	4b03      	ldr	r3, [pc, #12]	@ (8002794 <HAL_RCC_OscConfig+0x4f8>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x4d6>
 8002790:	e01b      	b.n	80027ca <HAL_RCC_OscConfig+0x52e>
 8002792:	bf00      	nop
 8002794:	58024400 	.word	0x58024400
>>>>>>> dev
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
<<<<<<< HEAD
 800273c:	4b9b      	ldr	r3, [pc, #620]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a9a      	ldr	r2, [pc, #616]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002746:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002748:	f7fe fcce 	bl	80010e8 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002750:	f7fe fcca 	bl	80010e8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1c0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002762:	4b92      	ldr	r3, [pc, #584]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x510>
=======
 8002798:	4b9b      	ldr	r3, [pc, #620]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a9a      	ldr	r2, [pc, #616]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800279e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027a2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80027a4:	f7fe fcce 	bl	8001144 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027ac:	f7fe fcca 	bl	8001144 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1c0      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80027be:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x510>
>>>>>>> dev
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8081 	beq.w	800287e <HAL_RCC_OscConfig+0x63e>
=======
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 8081 	beq.w	80028da <HAL_RCC_OscConfig+0x63e>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
<<<<<<< HEAD
 800277c:	4b8c      	ldr	r3, [pc, #560]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a8b      	ldr	r2, [pc, #556]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002788:	f7fe fcae 	bl	80010e8 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7fe fcaa 	bl	80010e8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1a0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a2:	4b83      	ldr	r3, [pc, #524]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x550>
=======
 80027d8:	4b8c      	ldr	r3, [pc, #560]	@ (8002a0c <HAL_RCC_OscConfig+0x770>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a8b      	ldr	r2, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x770>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027e4:	f7fe fcae 	bl	8001144 <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ec:	f7fe fcaa 	bl	8001144 <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b64      	cmp	r3, #100	@ 0x64
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e1a0      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	4b83      	ldr	r3, [pc, #524]	@ (8002a0c <HAL_RCC_OscConfig+0x770>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x550>
>>>>>>> dev
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x584>
 80027b6:	4b7d      	ldr	r3, [pc, #500]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	4a7c      	ldr	r2, [pc, #496]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c2:	e02d      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5a6>
 80027cc:	4b77      	ldr	r3, [pc, #476]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a76      	ldr	r2, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	4b74      	ldr	r3, [pc, #464]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4a73      	ldr	r2, [pc, #460]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x5c8>
 80027ee:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fa:	4b6c      	ldr	r3, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 8002808:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	4a67      	ldr	r2, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	@ 0x70
 8002814:	4b65      	ldr	r3, [pc, #404]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a64      	ldr	r2, [pc, #400]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fc5e 	bl	80010e8 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fc5a 	bl	80010e8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e14e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x5f0>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x63e>
=======
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d106      	bne.n	8002820 <HAL_RCC_OscConfig+0x584>
 8002812:	4b7d      	ldr	r3, [pc, #500]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002814:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002816:	4a7c      	ldr	r2, [pc, #496]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6713      	str	r3, [r2, #112]	@ 0x70
 800281e:	e02d      	b.n	800287c <HAL_RCC_OscConfig+0x5e0>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10c      	bne.n	8002842 <HAL_RCC_OscConfig+0x5a6>
 8002828:	4b77      	ldr	r3, [pc, #476]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800282a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282c:	4a76      	ldr	r2, [pc, #472]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800282e:	f023 0301 	bic.w	r3, r3, #1
 8002832:	6713      	str	r3, [r2, #112]	@ 0x70
 8002834:	4b74      	ldr	r3, [pc, #464]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002838:	4a73      	ldr	r2, [pc, #460]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800283a:	f023 0304 	bic.w	r3, r3, #4
 800283e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002840:	e01c      	b.n	800287c <HAL_RCC_OscConfig+0x5e0>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	2b05      	cmp	r3, #5
 8002848:	d10c      	bne.n	8002864 <HAL_RCC_OscConfig+0x5c8>
 800284a:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002850:	f043 0304 	orr.w	r3, r3, #4
 8002854:	6713      	str	r3, [r2, #112]	@ 0x70
 8002856:	4b6c      	ldr	r3, [pc, #432]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800285a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800285c:	f043 0301 	orr.w	r3, r3, #1
 8002860:	6713      	str	r3, [r2, #112]	@ 0x70
 8002862:	e00b      	b.n	800287c <HAL_RCC_OscConfig+0x5e0>
 8002864:	4b68      	ldr	r3, [pc, #416]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002868:	4a67      	ldr	r2, [pc, #412]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800286a:	f023 0301 	bic.w	r3, r3, #1
 800286e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002870:	4b65      	ldr	r3, [pc, #404]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002872:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002874:	4a64      	ldr	r2, [pc, #400]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002876:	f023 0304 	bic.w	r3, r3, #4
 800287a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d015      	beq.n	80028b0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7fe fc5e 	bl	8001144 <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288c:	f7fe fc5a 	bl	8001144 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e14e      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80028a2:	4b59      	ldr	r3, [pc, #356]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d0ee      	beq.n	800288c <HAL_RCC_OscConfig+0x5f0>
 80028ae:	e014      	b.n	80028da <HAL_RCC_OscConfig+0x63e>
>>>>>>> dev
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002854:	f7fe fc48 	bl	80010e8 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fc44 	bl	80010e8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e138      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002872:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x61c>
=======
 80028b0:	f7fe fc48 	bl	8001144 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fc44 	bl	8001144 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e138      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80028ce:	4b4e      	ldr	r3, [pc, #312]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028d2:	f003 0302 	and.w	r3, r3, #2
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1ee      	bne.n	80028b8 <HAL_RCC_OscConfig+0x61c>
>>>>>>> dev
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 812d 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002888:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002890:	2b18      	cmp	r3, #24
 8002892:	f000 80bd 	beq.w	8002a10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 809e 	bne.w	80029dc <HAL_RCC_OscConfig+0x79c>
=======
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f000 812d 	beq.w	8002b3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80028e4:	4b48      	ldr	r3, [pc, #288]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028ec:	2b18      	cmp	r3, #24
 80028ee:	f000 80bd 	beq.w	8002a6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f040 809e 	bne.w	8002a38 <HAL_RCC_OscConfig+0x79c>
>>>>>>> dev
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80028a0:	4b42      	ldr	r3, [pc, #264]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a41      	ldr	r2, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fc1c 	bl	80010e8 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fc18 	bl	80010e8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e10e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c6:	4b39      	ldr	r3, [pc, #228]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x674>
=======
 80028fc:	4b42      	ldr	r3, [pc, #264]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a41      	ldr	r2, [pc, #260]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002902:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002906:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002908:	f7fe fc1c 	bl	8001144 <HAL_GetTick>
 800290c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fe fc18 	bl	8001144 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e10e      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002922:	4b39      	ldr	r3, [pc, #228]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f0      	bne.n	8002910 <HAL_RCC_OscConfig+0x674>
>>>>>>> dev
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
<<<<<<< HEAD
 80028d2:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d6:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_RCC_OscConfig+0x774>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4931      	ldr	r1, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	3b01      	subs	r3, #1
 80028f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	3b01      	subs	r3, #1
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	b29b      	uxth	r3, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	3b01      	subs	r3, #1
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800291c:	4923      	ldr	r1, [pc, #140]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	@ 0x30
=======
 800292e:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002930:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002932:	4b37      	ldr	r3, [pc, #220]	@ (8002a10 <HAL_RCC_OscConfig+0x774>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800293e:	0112      	lsls	r2, r2, #4
 8002940:	430a      	orrs	r2, r1
 8002942:	4931      	ldr	r1, [pc, #196]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002944:	4313      	orrs	r3, r2
 8002946:	628b      	str	r3, [r1, #40]	@ 0x28
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294c:	3b01      	subs	r3, #1
 800294e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002956:	3b01      	subs	r3, #1
 8002958:	025b      	lsls	r3, r3, #9
 800295a:	b29b      	uxth	r3, r3
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	3b01      	subs	r3, #1
 8002964:	041b      	lsls	r3, r3, #16
 8002966:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800296a:	431a      	orrs	r2, r3
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002970:	3b01      	subs	r3, #1
 8002972:	061b      	lsls	r3, r3, #24
 8002974:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002978:	4923      	ldr	r1, [pc, #140]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800297a:	4313      	orrs	r3, r2
 800297c:	630b      	str	r3, [r1, #48]	@ 0x30
>>>>>>> dev
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
<<<<<<< HEAD
 8002922:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800292e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002932:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <HAL_RCC_OscConfig+0x778>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800293a:	00d2      	lsls	r2, r2, #3
 800293c:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	f023 020c 	bic.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	4917      	ldr	r1, [pc, #92]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f023 0202 	bic.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	4912      	ldr	r1, [pc, #72]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800299c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fba1 	bl	80010e8 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a8:	e011      	b.n	80029ce <HAL_RCC_OscConfig+0x78e>
 80029aa:	bf00      	nop
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58024800 	.word	0x58024800
 80029b4:	fffffc0c 	.word	0xfffffc0c
 80029b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fb94 	bl	80010e8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e08a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x77c>
 80029da:	e082      	b.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
=======
 800297e:	4b22      	ldr	r3, [pc, #136]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4a21      	ldr	r2, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800298a:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800298c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800298e:	4b21      	ldr	r3, [pc, #132]	@ (8002a14 <HAL_RCC_OscConfig+0x778>)
 8002990:	4013      	ands	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002996:	00d2      	lsls	r2, r2, #3
 8002998:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 800299a:	4313      	orrs	r3, r2
 800299c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a2:	f023 020c 	bic.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	4917      	ldr	r1, [pc, #92]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029b0:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	f023 0202 	bic.w	r2, r3, #2
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029bc:	4912      	ldr	r1, [pc, #72]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80029da:	4b0b      	ldr	r3, [pc, #44]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80029e6:	4b08      	ldr	r3, [pc, #32]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	4a07      	ldr	r2, [pc, #28]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a04      	ldr	r2, [pc, #16]	@ (8002a08 <HAL_RCC_OscConfig+0x76c>)
 80029f8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fe:	f7fe fba1 	bl	8001144 <HAL_GetTick>
 8002a02:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a04:	e011      	b.n	8002a2a <HAL_RCC_OscConfig+0x78e>
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	58024800 	.word	0x58024800
 8002a10:	fffffc0c 	.word	0xfffffc0c
 8002a14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a18:	f7fe fb94 	bl	8001144 <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e08a      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a2a:	4b47      	ldr	r3, [pc, #284]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d0f0      	beq.n	8002a18 <HAL_RCC_OscConfig+0x77c>
 8002a36:	e082      	b.n	8002b3e <HAL_RCC_OscConfig+0x8a2>
>>>>>>> dev
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80029dc:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a42      	ldr	r2, [pc, #264]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb7e 	bl	80010e8 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb7a 	bl	80010e8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e070      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x7b0>
 8002a0e:	e068      	b.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
=======
 8002a38:	4b43      	ldr	r3, [pc, #268]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fb7e 	bl	8001144 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fb7a 	bl	8001144 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e070      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a5e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x7b0>
 8002a6a:	e068      	b.n	8002b3e <HAL_RCC_OscConfig+0x8a2>
>>>>>>> dev
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
<<<<<<< HEAD
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a16:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d031      	beq.n	8002a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d12a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d122      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d11a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d111      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d108      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e02b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
=======
 8002a6c:	4b36      	ldr	r3, [pc, #216]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a72:	4b35      	ldr	r3, [pc, #212]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d031      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d12a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d122      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d11a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	0a5b      	lsrs	r3, r3, #9
 8002ab2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d111      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	0c1b      	lsrs	r3, r3, #16
 8002ac4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002acc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d108      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	0e1b      	lsrs	r3, r3, #24
 8002ad6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ade:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d001      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e02b      	b.n	8002b40 <HAL_RCC_OscConfig+0x8a4>
>>>>>>> dev
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
<<<<<<< HEAD
 8002a8c:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
=======
 8002ae8:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002aea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aec:	08db      	lsrs	r3, r3, #3
 8002aee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002af2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d01f      	beq.n	8002b3e <HAL_RCC_OscConfig+0x8a2>
>>>>>>> dev
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
<<<<<<< HEAD
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aae:	f7fe fb1b 	bl	80010e8 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ab4:	bf00      	nop
 8002ab6:	f7fe fb17 	bl	80010e8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d0f9      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x876>
=======
 8002afe:	4b12      	ldr	r3, [pc, #72]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b02:	4a11      	ldr	r2, [pc, #68]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b0a:	f7fe fb1b 	bl	8001144 <HAL_GetTick>
 8002b0e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002b10:	bf00      	nop
 8002b12:	f7fe fb17 	bl	8001144 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d0f9      	beq.n	8002b12 <HAL_RCC_OscConfig+0x876>
>>>>>>> dev
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
<<<<<<< HEAD
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_RCC_OscConfig+0x8b0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	4906      	ldr	r1, [pc, #24]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 8002b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b20:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b22:	4b0a      	ldr	r3, [pc, #40]	@ (8002b4c <HAL_RCC_OscConfig+0x8b0>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b2a:	00d2      	lsls	r2, r2, #3
 8002b2c:	4906      	ldr	r1, [pc, #24]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002b32:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b36:	4a04      	ldr	r2, [pc, #16]	@ (8002b48 <HAL_RCC_OscConfig+0x8ac>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> dev
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3730      	adds	r7, #48	@ 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	ffff0007 	.word	0xffff0007

08002af4 <HAL_RCC_ClockConfig>:
=======
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	3730      	adds	r7, #48	@ 0x30
 8002b44:	46bd      	mov	sp, r7
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	ffff0007 	.word	0xffff0007

08002b50 <HAL_RCC_ClockConfig>:
>>>>>>> dev
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
=======
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
>>>>>>> dev
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e19c      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
=======
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e19c      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
>>>>>>> dev
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002b08:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d910      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b87      	ldr	r3, [pc, #540]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 020f 	bic.w	r2, r3, #15
 8002b1e:	4985      	ldr	r1, [pc, #532]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
=======
 8002b64:	4b8a      	ldr	r3, [pc, #552]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d910      	bls.n	8002b94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b87      	ldr	r3, [pc, #540]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 020f 	bic.w	r2, r3, #15
 8002b7a:	4985      	ldr	r1, [pc, #532]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]
>>>>>>> dev

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002b26:	4b83      	ldr	r3, [pc, #524]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e184      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
=======
 8002b82:	4b83      	ldr	r3, [pc, #524]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 030f 	and.w	r3, r3, #15
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e184      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
>>>>>>> dev

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< HEAD
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	4b7b      	ldr	r3, [pc, #492]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b54:	4b78      	ldr	r3, [pc, #480]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4975      	ldr	r1, [pc, #468]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	618b      	str	r3, [r1, #24]
=======
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	691a      	ldr	r2, [r3, #16]
 8002ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bb0:	4b78      	ldr	r3, [pc, #480]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	691b      	ldr	r3, [r3, #16]
 8002bbc:	4975      	ldr	r1, [pc, #468]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	618b      	str	r3, [r1, #24]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b82:	4b6d      	ldr	r3, [pc, #436]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	496a      	ldr	r1, [pc, #424]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]
=======
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695a      	ldr	r2, [r3, #20]
 8002bd2:	4b70      	ldr	r3, [pc, #448]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	69db      	ldr	r3, [r3, #28]
 8002bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d908      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bde:	4b6d      	ldr	r3, [pc, #436]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	496a      	ldr	r1, [pc, #424]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61cb      	str	r3, [r1, #28]
>>>>>>> dev
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	495e      	ldr	r1, [pc, #376]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61cb      	str	r3, [r1, #28]
=======
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0310 	and.w	r3, r3, #16
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	699a      	ldr	r2, [r3, #24]
 8002c00:	4b64      	ldr	r3, [pc, #400]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c0c:	4b61      	ldr	r3, [pc, #388]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	495e      	ldr	r1, [pc, #376]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	61cb      	str	r3, [r1, #28]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< HEAD
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d908      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4953      	ldr	r1, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	620b      	str	r3, [r1, #32]
=======
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d010      	beq.n	8002c4c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69da      	ldr	r2, [r3, #28]
 8002c2e:	4b59      	ldr	r3, [pc, #356]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d908      	bls.n	8002c4c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c3a:	4b56      	ldr	r3, [pc, #344]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	69db      	ldr	r3, [r3, #28]
 8002c46:	4953      	ldr	r1, [pc, #332]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	620b      	str	r3, [r1, #32]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b4d      	ldr	r3, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x12a>
=======
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d908      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x12a>
>>>>>>> dev
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f023 020f 	bic.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4947      	ldr	r1, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	618b      	str	r3, [r1, #24]
=======
 8002c68:	4b4a      	ldr	r3, [pc, #296]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f023 020f 	bic.w	r2, r3, #15
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4947      	ldr	r1, [pc, #284]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	618b      	str	r3, [r1, #24]
>>>>>>> dev
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d055      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x1e2>
=======
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d055      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x1e2>
>>>>>>> dev
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
<<<<<<< HEAD
 8002c2a:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4940      	ldr	r1, [pc, #256]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	618b      	str	r3, [r1, #24]
=======
 8002c86:	4b43      	ldr	r3, [pc, #268]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c88:	699b      	ldr	r3, [r3, #24]
 8002c8a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4940      	ldr	r1, [pc, #256]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	618b      	str	r3, [r1, #24]
>>>>>>> dev
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c44:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0f6      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
=======
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ca0:	4b3c      	ldr	r3, [pc, #240]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d121      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e0f6      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
>>>>>>> dev
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
<<<<<<< HEAD
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5c:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d115      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0ea      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
=======
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d107      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cb8:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d115      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e0ea      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
>>>>>>> dev
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
<<<<<<< HEAD
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c74:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0de      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
=======
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d107      	bne.n	8002ce0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002cd0:	4b30      	ldr	r3, [pc, #192]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d109      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0de      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
>>>>>>> dev
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
<<<<<<< HEAD
 8002c84:	4b2c      	ldr	r3, [pc, #176]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d6      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f023 0207 	bic.w	r2, r3, #7
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4925      	ldr	r1, [pc, #148]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fa1f 	bl	80010e8 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f7fe fa1b 	bl	80010e8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0be      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d1eb      	bne.n	8002cae <HAL_RCC_ClockConfig+0x1ba>
=======
 8002ce0:	4b2c      	ldr	r3, [pc, #176]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e0d6      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002cf0:	4b28      	ldr	r3, [pc, #160]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f023 0207 	bic.w	r2, r3, #7
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4925      	ldr	r1, [pc, #148]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d02:	f7fe fa1f 	bl	8001144 <HAL_GetTick>
 8002d06:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d08:	e00a      	b.n	8002d20 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d0a:	f7fe fa1b 	bl	8001144 <HAL_GetTick>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d901      	bls.n	8002d20 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e0be      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d20:	4b1c      	ldr	r3, [pc, #112]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d1eb      	bne.n	8002d0a <HAL_RCC_ClockConfig+0x1ba>
>>>>>>> dev

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d208      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x210>
=======
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d010      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	4b14      	ldr	r3, [pc, #80]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d208      	bcs.n	8002d60 <HAL_RCC_ClockConfig+0x210>
>>>>>>> dev
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	618b      	str	r3, [r1, #24]
=======
 8002d4e:	4b11      	ldr	r3, [pc, #68]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	f023 020f 	bic.w	r2, r3, #15
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	490e      	ldr	r1, [pc, #56]	@ (8002d94 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	618b      	str	r3, [r1, #24]
>>>>>>> dev
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d214      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	4906      	ldr	r1, [pc, #24]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]
=======
 8002d60:	4b0b      	ldr	r3, [pc, #44]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	683a      	ldr	r2, [r7, #0]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d214      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d6e:	4b08      	ldr	r3, [pc, #32]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f023 020f 	bic.w	r2, r3, #15
 8002d76:	4906      	ldr	r1, [pc, #24]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
>>>>>>> dev

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8002d22:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e086      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
 8002d34:	52002000 	.word	0x52002000
 8002d38:	58024400 	.word	0x58024400
=======
 8002d7e:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d005      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e086      	b.n	8002e9e <HAL_RCC_ClockConfig+0x34e>
 8002d90:	52002000 	.word	0x52002000
 8002d94:	58024400 	.word	0x58024400
>>>>>>> dev
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
<<<<<<< HEAD
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d58:	4b3c      	ldr	r3, [pc, #240]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4939      	ldr	r1, [pc, #228]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	618b      	str	r3, [r1, #24]
=======
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	4b3f      	ldr	r3, [pc, #252]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d208      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002db4:	4b3c      	ldr	r3, [pc, #240]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4939      	ldr	r1, [pc, #228]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	618b      	str	r3, [r1, #24]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	4b34      	ldr	r3, [pc, #208]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d208      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d86:	4b31      	ldr	r3, [pc, #196]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	492e      	ldr	r1, [pc, #184]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]
=======
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	4b34      	ldr	r3, [pc, #208]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	69db      	ldr	r3, [r3, #28]
 8002dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d208      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002de2:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	492e      	ldr	r1, [pc, #184]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	61cb      	str	r3, [r1, #28]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b28      	ldr	r3, [pc, #160]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d208      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4922      	ldr	r1, [pc, #136]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61cb      	str	r3, [r1, #28]
=======
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0310 	and.w	r3, r3, #16
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d010      	beq.n	8002e22 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	699a      	ldr	r2, [r3, #24]
 8002e04:	4b28      	ldr	r3, [pc, #160]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e06:	69db      	ldr	r3, [r3, #28]
 8002e08:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d208      	bcs.n	8002e22 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e10:	4b25      	ldr	r3, [pc, #148]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4922      	ldr	r1, [pc, #136]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61cb      	str	r3, [r1, #28]
>>>>>>> dev
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
<<<<<<< HEAD
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d208      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4917      	ldr	r1, [pc, #92]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	620b      	str	r3, [r1, #32]
=======
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0320 	and.w	r3, r3, #32
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d010      	beq.n	8002e50 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69da      	ldr	r2, [r3, #28]
 8002e32:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d208      	bcs.n	8002e50 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e40:	6a1b      	ldr	r3, [r3, #32]
 8002e42:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	4917      	ldr	r1, [pc, #92]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	620b      	str	r3, [r1, #32]
>>>>>>> dev
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
<<<<<<< HEAD
 8002df4:	f000 f834 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4912      	ldr	r1, [pc, #72]	@ (8002e50 <HAL_RCC_ClockConfig+0x35c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	613b      	str	r3, [r7, #16]
=======
 8002e50:	f000 f834 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b14      	ldr	r3, [pc, #80]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 030f 	and.w	r3, r3, #15
 8002e60:	4912      	ldr	r1, [pc, #72]	@ (8002eac <HAL_RCC_ClockConfig+0x35c>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	613b      	str	r3, [r7, #16]
>>>>>>> dev
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e50 <HAL_RCC_ClockConfig+0x35c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x360>)
 8002e2a:	6013      	str	r3, [r2, #0]
=======
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <HAL_RCC_ClockConfig+0x358>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	4a0d      	ldr	r2, [pc, #52]	@ (8002eac <HAL_RCC_ClockConfig+0x35c>)
 8002e78:	5cd3      	ldrb	r3, [r2, r3]
 8002e7a:	f003 031f 	and.w	r3, r3, #31
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb0 <HAL_RCC_ClockConfig+0x360>)
 8002e86:	6013      	str	r3, [r2, #0]
>>>>>>> dev
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< HEAD
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x364>)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	6013      	str	r3, [r2, #0]
=======
 8002e88:	4a0a      	ldr	r2, [pc, #40]	@ (8002eb4 <HAL_RCC_ClockConfig+0x364>)
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	6013      	str	r3, [r2, #0]
>>>>>>> dev
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
<<<<<<< HEAD
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_ClockConfig+0x368>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f90c 	bl	8001054 <HAL_InitTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	0800669c 	.word	0x0800669c
 8002e54:	24000004 	.word	0x24000004
 8002e58:	24000000 	.word	0x24000000
 8002e5c:	24000008 	.word	0x24000008

08002e60 <HAL_RCC_GetSysClockFreq>:
=======
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb8 <HAL_RCC_ClockConfig+0x368>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7fe f90c 	bl	80010b0 <HAL_InitTick>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	58024400 	.word	0x58024400
 8002eac:	08009384 	.word	0x08009384
 8002eb0:	24000004 	.word	0x24000004
 8002eb4:	24000000 	.word	0x24000000
 8002eb8:	24000008 	.word	0x24000008

08002ebc <HAL_RCC_GetSysClockFreq>:
>>>>>>> dev
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
=======
 8002ebc:	b480      	push	{r7}
 8002ebe:	b089      	sub	sp, #36	@ 0x24
 8002ec0:	af00      	add	r7, sp, #0
>>>>>>> dev
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
<<<<<<< HEAD
 8002e66:	4bb3      	ldr	r3, [pc, #716]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	f200 8155 	bhi.w	800311e <HAL_RCC_GetSysClockFreq+0x2be>
 8002e74:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002ee1 	.word	0x08002ee1
 8002e80:	0800311f 	.word	0x0800311f
 8002e84:	0800311f 	.word	0x0800311f
 8002e88:	0800311f 	.word	0x0800311f
 8002e8c:	0800311f 	.word	0x0800311f
 8002e90:	0800311f 	.word	0x0800311f
 8002e94:	0800311f 	.word	0x0800311f
 8002e98:	0800311f 	.word	0x0800311f
 8002e9c:	08002f07 	.word	0x08002f07
 8002ea0:	0800311f 	.word	0x0800311f
 8002ea4:	0800311f 	.word	0x0800311f
 8002ea8:	0800311f 	.word	0x0800311f
 8002eac:	0800311f 	.word	0x0800311f
 8002eb0:	0800311f 	.word	0x0800311f
 8002eb4:	0800311f 	.word	0x0800311f
 8002eb8:	0800311f 	.word	0x0800311f
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	0800311f 	.word	0x0800311f
 8002ec4:	0800311f 	.word	0x0800311f
 8002ec8:	0800311f 	.word	0x0800311f
 8002ecc:	0800311f 	.word	0x0800311f
 8002ed0:	0800311f 	.word	0x0800311f
 8002ed4:	0800311f 	.word	0x0800311f
 8002ed8:	0800311f 	.word	0x0800311f
 8002edc:	08002f13 	.word	0x08002f13
=======
 8002ec2:	4bb3      	ldr	r3, [pc, #716]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002eca:	2b18      	cmp	r3, #24
 8002ecc:	f200 8155 	bhi.w	800317a <HAL_RCC_GetSysClockFreq+0x2be>
 8002ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed8 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed6:	bf00      	nop
 8002ed8:	08002f3d 	.word	0x08002f3d
 8002edc:	0800317b 	.word	0x0800317b
 8002ee0:	0800317b 	.word	0x0800317b
 8002ee4:	0800317b 	.word	0x0800317b
 8002ee8:	0800317b 	.word	0x0800317b
 8002eec:	0800317b 	.word	0x0800317b
 8002ef0:	0800317b 	.word	0x0800317b
 8002ef4:	0800317b 	.word	0x0800317b
 8002ef8:	08002f63 	.word	0x08002f63
 8002efc:	0800317b 	.word	0x0800317b
 8002f00:	0800317b 	.word	0x0800317b
 8002f04:	0800317b 	.word	0x0800317b
 8002f08:	0800317b 	.word	0x0800317b
 8002f0c:	0800317b 	.word	0x0800317b
 8002f10:	0800317b 	.word	0x0800317b
 8002f14:	0800317b 	.word	0x0800317b
 8002f18:	08002f69 	.word	0x08002f69
 8002f1c:	0800317b 	.word	0x0800317b
 8002f20:	0800317b 	.word	0x0800317b
 8002f24:	0800317b 	.word	0x0800317b
 8002f28:	0800317b 	.word	0x0800317b
 8002f2c:	0800317b 	.word	0x0800317b
 8002f30:	0800317b 	.word	0x0800317b
 8002f34:	0800317b 	.word	0x0800317b
 8002f38:	08002f6f 	.word	0x08002f6f
>>>>>>> dev
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8002ee0:	4b94      	ldr	r3, [pc, #592]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eec:	4b91      	ldr	r3, [pc, #580]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	4a90      	ldr	r2, [pc, #576]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	61bb      	str	r3, [r7, #24]
=======
 8002f3c:	4b94      	ldr	r3, [pc, #592]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d009      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f48:	4b91      	ldr	r3, [pc, #580]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	08db      	lsrs	r3, r3, #3
 8002f4e:	f003 0303 	and.w	r3, r3, #3
 8002f52:	4a90      	ldr	r2, [pc, #576]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f54:	fa22 f303 	lsr.w	r3, r2, r3
 8002f58:	61bb      	str	r3, [r7, #24]
>>>>>>> dev
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
<<<<<<< HEAD
 8002efe:	e111      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f00:	4b8d      	ldr	r3, [pc, #564]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f02:	61bb      	str	r3, [r7, #24]
      break;
 8002f04:	e10e      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f06:	4b8d      	ldr	r3, [pc, #564]	@ (800313c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f08:	61bb      	str	r3, [r7, #24]
      break;
 8002f0a:	e10b      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f0e:	61bb      	str	r3, [r7, #24]
      break;
 8002f10:	e108      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
=======
 8002f5a:	e111      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f5c:	4b8d      	ldr	r3, [pc, #564]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f5e:	61bb      	str	r3, [r7, #24]
      break;
 8002f60:	e10e      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f62:	4b8d      	ldr	r3, [pc, #564]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f64:	61bb      	str	r3, [r7, #24]
      break;
 8002f66:	e10b      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f68:	4b8c      	ldr	r3, [pc, #560]	@ (800319c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f6a:	61bb      	str	r3, [r7, #24]
      break;
 8002f6c:	e108      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
>>>>>>> dev
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 8002f12:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f1c:	4b85      	ldr	r3, [pc, #532]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f28:	4b82      	ldr	r3, [pc, #520]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f32:	4b80      	ldr	r3, [pc, #512]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80e1 	beq.w	8003118 <HAL_RCC_GetSysClockFreq+0x2b8>
=======
 8002f6e:	4b88      	ldr	r3, [pc, #544]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f78:	4b85      	ldr	r3, [pc, #532]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f7c:	091b      	lsrs	r3, r3, #4
 8002f7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f82:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f84:	4b82      	ldr	r3, [pc, #520]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f8e:	4b80      	ldr	r3, [pc, #512]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f90:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f92:	08db      	lsrs	r3, r3, #3
 8002f94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 80e1 	beq.w	8003174 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	f000 8083 	beq.w	80030c0 <HAL_RCC_GetSysClockFreq+0x204>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f200 80a1 	bhi.w	8003104 <HAL_RCC_GetSysClockFreq+0x248>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d003      	beq.n	8002fd0 <HAL_RCC_GetSysClockFreq+0x114>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d056      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002fce:	e099      	b.n	8003104 <HAL_RCC_GetSysClockFreq+0x248>
>>>>>>> dev
      {
        switch (pllsource)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f000 8083 	beq.w	8003064 <HAL_RCC_GetSysClockFreq+0x204>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f200 80a1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x114>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d056      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f72:	e099      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8002f74:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f80:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002faa:	4b62      	ldr	r3, [pc, #392]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd6:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8002fd0:	4b6f      	ldr	r3, [pc, #444]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0320 	and.w	r3, r3, #32
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d02d      	beq.n	8003038 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fdc:	4b6c      	ldr	r3, [pc, #432]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	08db      	lsrs	r3, r3, #3
 8002fe2:	f003 0303 	and.w	r3, r3, #3
 8002fe6:	4a6b      	ldr	r2, [pc, #428]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	ee07 3a90 	vmov	s15, r3
 8002ff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003006:	4b62      	ldr	r3, [pc, #392]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800300e:	ee07 3a90 	vmov	s15, r3
 8003012:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003016:	ed97 6a02 	vldr	s12, [r7, #8]
 800301a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800301e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003022:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003026:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800302a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800302e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003032:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> dev
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
<<<<<<< HEAD
 8002fda:	e087      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003002:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800301e:	e065      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800314c <HAL_RCC_GetSysClockFreq+0x2ec>
 800302e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003032:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003042:	ed97 6a02 	vldr	s12, [r7, #8]
 8003046:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800304a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003062:	e043      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003086:	ed97 6a02 	vldr	s12, [r7, #8]
 800308a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030a6:	e021      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800314c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	0a5b      	lsrs	r3, r3, #9
 80030f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f6:	3301      	adds	r3, #1
 80030f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003104:	edd7 6a07 	vldr	s13, [r7, #28]
 8003108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003110:	ee17 3a90 	vmov	r3, s15
 8003114:	61bb      	str	r3, [r7, #24]
=======
 8003036:	e087      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003042:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80031a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003046:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800304a:	4b51      	ldr	r3, [pc, #324]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003052:	ee07 3a90 	vmov	s15, r3
 8003056:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800305a:	ed97 6a02 	vldr	s12, [r7, #8]
 800305e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003062:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003066:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800306a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800306e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003076:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800307a:	e065      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003086:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800308a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800308e:	4b40      	ldr	r3, [pc, #256]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003092:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003096:	ee07 3a90 	vmov	s15, r3
 800309a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800309e:	ed97 6a02 	vldr	s12, [r7, #8]
 80030a2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030be:	e043      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ca:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80031ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b2f      	ldr	r3, [pc, #188]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003102:	e021      	b.n	8003148 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80031a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a02 	vldr	s12, [r7, #8]
 800312a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80031a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003146:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	0a5b      	lsrs	r3, r3, #9
 800314e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003152:	3301      	adds	r3, #1
 8003154:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003160:	edd7 6a07 	vldr	s13, [r7, #28]
 8003164:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003168:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316c:	ee17 3a90 	vmov	r3, s15
 8003170:	61bb      	str	r3, [r7, #24]
>>>>>>> dev
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
<<<<<<< HEAD
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
      break;
 800311c:	e002      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003120:	61bb      	str	r3, [r7, #24]
      break;
 8003122:	bf00      	nop
  }

  return sysclockfreq;
 8003124:	69bb      	ldr	r3, [r7, #24]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	58024400 	.word	0x58024400
 8003138:	03d09000 	.word	0x03d09000
 800313c:	003d0900 	.word	0x003d0900
 8003140:	007a1200 	.word	0x007a1200
 8003144:	46000000 	.word	0x46000000
 8003148:	4c742400 	.word	0x4c742400
 800314c:	4a742400 	.word	0x4a742400
 8003150:	4af42400 	.word	0x4af42400

08003154 <HAL_RCC_GetHCLKFreq>:
=======
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	61bb      	str	r3, [r7, #24]
      break;
 8003178:	e002      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800317a:	4b07      	ldr	r3, [pc, #28]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800317c:	61bb      	str	r3, [r7, #24]
      break;
 800317e:	bf00      	nop
  }

  return sysclockfreq;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400
 8003194:	03d09000 	.word	0x03d09000
 8003198:	003d0900 	.word	0x003d0900
 800319c:	007a1200 	.word	0x007a1200
 80031a0:	46000000 	.word	0x46000000
 80031a4:	4c742400 	.word	0x4c742400
 80031a8:	4a742400 	.word	0x4a742400
 80031ac:	4af42400 	.word	0x4af42400

080031b0 <HAL_RCC_GetHCLKFreq>:
>>>>>>> dev
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
<<<<<<< HEAD
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
=======
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
>>>>>>> dev
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
<<<<<<< HEAD
 800315a:	f7ff fe81 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490f      	ldr	r1, [pc, #60]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	607b      	str	r3, [r7, #4]
=======
 80031b6:	f7ff fe81 	bl	8002ebc <HAL_RCC_GetSysClockFreq>
 80031ba:	4602      	mov	r2, r0
 80031bc:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x50>)
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	490f      	ldr	r1, [pc, #60]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x54>)
 80031c8:	5ccb      	ldrb	r3, [r1, r3]
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	fa22 f303 	lsr.w	r3, r2, r3
 80031d2:	607b      	str	r3, [r7, #4]
>>>>>>> dev
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
<<<<<<< HEAD
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a07      	ldr	r2, [pc, #28]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003190:	6013      	str	r3, [r2, #0]
=======
 80031d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003200 <HAL_RCC_GetHCLKFreq+0x50>)
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	4a09      	ldr	r2, [pc, #36]	@ (8003204 <HAL_RCC_GetHCLKFreq+0x54>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	f003 031f 	and.w	r3, r3, #31
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ea:	4a07      	ldr	r2, [pc, #28]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x58>)
 80031ec:	6013      	str	r3, [r2, #0]
>>>>>>> dev
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
<<<<<<< HEAD
 8003192:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003198:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x58>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58024400 	.word	0x58024400
 80031a8:	0800669c 	.word	0x0800669c
 80031ac:	24000004 	.word	0x24000004
 80031b0:	24000000 	.word	0x24000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
=======
 80031ee:	4a07      	ldr	r2, [pc, #28]	@ (800320c <HAL_RCC_GetHCLKFreq+0x5c>)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <HAL_RCC_GetHCLKFreq+0x58>)
 80031f6:	681b      	ldr	r3, [r3, #0]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3708      	adds	r7, #8
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	58024400 	.word	0x58024400
 8003204:	08009384 	.word	0x08009384
 8003208:	24000004 	.word	0x24000004
 800320c:	24000000 	.word	0x24000000

08003210 <HAL_RCC_GetPCLK1Freq>:
>>>>>>> dev
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
<<<<<<< HEAD
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031b8:	f7ff ffcc 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
=======
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003214:	f7ff ffcc 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b06      	ldr	r3, [pc, #24]	@ (8003234 <HAL_RCC_GetPCLK1Freq+0x24>)
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4904      	ldr	r1, [pc, #16]	@ (8003238 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	f003 031f 	and.w	r3, r3, #31
 800322c:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> dev
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
<<<<<<< HEAD
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58024400 	.word	0x58024400
 80031dc:	0800669c 	.word	0x0800669c

080031e0 <HAL_RCC_GetPCLK2Freq>:
=======
 8003230:	4618      	mov	r0, r3
 8003232:	bd80      	pop	{r7, pc}
 8003234:	58024400 	.word	0x58024400
 8003238:	08009384 	.word	0x08009384

0800323c <HAL_RCC_GetPCLK2Freq>:
>>>>>>> dev
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
<<<<<<< HEAD
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031e4:	f7ff ffb6 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
=======
 800323c:	b580      	push	{r7, lr}
 800323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003240:	f7ff ffb6 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8003244:	4602      	mov	r2, r0
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	0a1b      	lsrs	r3, r3, #8
 800324c:	f003 0307 	and.w	r3, r3, #7
 8003250:	4904      	ldr	r1, [pc, #16]	@ (8003264 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003252:	5ccb      	ldrb	r3, [r1, r3]
 8003254:	f003 031f 	and.w	r3, r3, #31
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> dev
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
<<<<<<< HEAD
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400
 8003208:	0800669c 	.word	0x0800669c

0800320c <HAL_RCCEx_PeriphCLKConfig>:
=======
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	58024400 	.word	0x58024400
 8003264:	08009384 	.word	0x08009384

08003268 <HAL_RCCEx_PeriphCLKConfig>:
>>>>>>> dev
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
<<<<<<< HEAD
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b0ca      	sub	sp, #296	@ 0x128
 8003212:	af00      	add	r7, sp, #0
 8003214:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800326c:	b0ca      	sub	sp, #296	@ 0x128
 800326e:	af00      	add	r7, sp, #0
 8003270:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003274:	2300      	movs	r3, #0
 8003276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800327a:	2300      	movs	r3, #0
 800327c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
<<<<<<< HEAD
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003230:	2500      	movs	r5, #0
 8003232:	ea54 0305 	orrs.w	r3, r4, r5
 8003236:	d049      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003242:	d02f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003244:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003248:	d828      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324e:	d01a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003254:	d822      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325e:	d007      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003260:	e01c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
=======
 8003280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003288:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800328c:	2500      	movs	r5, #0
 800328e:	ea54 0305 	orrs.w	r3, r4, r5
 8003292:	d049      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003294:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003298:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800329a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800329e:	d02f      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80032a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80032a4:	d828      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032aa:	d01a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80032ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032b0:	d822      	bhi.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x56>
 80032b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032ba:	d007      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80032bc:	e01c      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x90>
>>>>>>> dev
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8003262:	4bb8      	ldr	r3, [pc, #736]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	4ab7      	ldr	r2, [pc, #732]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800326e:	e01a      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
=======
 80032be:	4bb8      	ldr	r3, [pc, #736]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	4ab7      	ldr	r2, [pc, #732]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032ca:	e01a      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
>>>>>>> dev

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	3308      	adds	r3, #8
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f001 fc8f 	bl	8004b9c <RCCEx_PLL2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003284:	e00f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	3328      	adds	r3, #40	@ 0x28
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fd36 	bl	8004d00 <RCCEx_PLL3_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
=======
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	3308      	adds	r3, #8
 80032d2:	2102      	movs	r1, #2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fc8f 	bl	8004bf8 <RCCEx_PLL2_Config>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032e0:	e00f      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	3328      	adds	r3, #40	@ 0x28
 80032e8:	2102      	movs	r1, #2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 fd36 	bl	8004d5c <RCCEx_PLL3_Config>
 80032f0:	4603      	mov	r3, r0
 80032f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80032f6:	e004      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
>>>>>>> dev
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032ae:	4ba5      	ldr	r3, [pc, #660]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032bc:	4aa1      	ldr	r2, [pc, #644]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
=======
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032fe:	e000      	b.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003300:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003302:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800330a:	4ba5      	ldr	r3, [pc, #660]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800330e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003312:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003316:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003318:	4aa1      	ldr	r2, [pc, #644]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331a:	430b      	orrs	r3, r1
 800331c:	6513      	str	r3, [r2, #80]	@ 0x50
 800331e:	e003      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80032c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003324:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
<<<<<<< HEAD
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032d8:	f04f 0900 	mov.w	r9, #0
 80032dc:	ea58 0309 	orrs.w	r3, r8, r9
 80032e0:	d047      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d82a      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003309 	.word	0x08003309
 80032f8:	08003317 	.word	0x08003317
 80032fc:	0800332d 	.word	0x0800332d
 8003300:	0800334b 	.word	0x0800334b
 8003304:	0800334b 	.word	0x0800334b
=======
 8003328:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003330:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003334:	f04f 0900 	mov.w	r9, #0
 8003338:	ea58 0309 	orrs.w	r3, r8, r9
 800333c:	d047      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800333e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003344:	2b04      	cmp	r3, #4
 8003346:	d82a      	bhi.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003348:	a201      	add	r2, pc, #4	@ (adr r2, 8003350 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800334a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334e:	bf00      	nop
 8003350:	08003365 	.word	0x08003365
 8003354:	08003373 	.word	0x08003373
 8003358:	08003389 	.word	0x08003389
 800335c:	080033a7 	.word	0x080033a7
 8003360:	080033a7 	.word	0x080033a7
>>>>>>> dev
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8003308:	4b8e      	ldr	r3, [pc, #568]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	4a8d      	ldr	r2, [pc, #564]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003314:	e01a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
=======
 8003364:	4b8e      	ldr	r3, [pc, #568]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	4a8d      	ldr	r2, [pc, #564]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003370:	e01a      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
>>>>>>> dev

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	3308      	adds	r3, #8
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fc3c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800332a:	e00f      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003330:	3328      	adds	r3, #40	@ 0x28
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fce3 	bl	8004d00 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
=======
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	3308      	adds	r3, #8
 8003378:	2100      	movs	r1, #0
 800337a:	4618      	mov	r0, r3
 800337c:	f001 fc3c 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003386:	e00f      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	3328      	adds	r3, #40	@ 0x28
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f001 fce3 	bl	8004d5c <RCCEx_PLL3_Config>
 8003396:	4603      	mov	r3, r0
 8003398:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800339c:	e004      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b7b      	ldr	r3, [pc, #492]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	f023 0107 	bic.w	r1, r3, #7
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	4a78      	ldr	r2, [pc, #480]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6513      	str	r3, [r2, #80]	@ 0x50
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
=======
 800339e:	2301      	movs	r3, #1
 80033a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033a4:	e000      	b.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80033a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033b0:	4b7b      	ldr	r3, [pc, #492]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b4:	f023 0107 	bic.w	r1, r3, #7
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033be:	4a78      	ldr	r2, [pc, #480]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033c0:	430b      	orrs	r3, r1
 80033c2:	6513      	str	r3, [r2, #80]	@ 0x50
 80033c4:	e003      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x166>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800336a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80033c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
<<<<<<< HEAD
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800337e:	f04f 0b00 	mov.w	fp, #0
 8003382:	ea5a 030b 	orrs.w	r3, sl, fp
 8003386:	d04c      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	d030      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003398:	d829      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800339a:	2bc0      	cmp	r3, #192	@ 0xc0
 800339c:	d02d      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800339e:	2bc0      	cmp	r3, #192	@ 0xc0
 80033a0:	d825      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d018      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d821      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d007      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033b2:	e01c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
=======
 80033ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80033da:	f04f 0b00 	mov.w	fp, #0
 80033de:	ea5a 030b 	orrs.w	r3, sl, fp
 80033e2:	d04c      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ee:	d030      	beq.n	8003452 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033f4:	d829      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80033f8:	d02d      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80033fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80033fc:	d825      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033fe:	2b80      	cmp	r3, #128	@ 0x80
 8003400:	d018      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003402:	2b80      	cmp	r3, #128	@ 0x80
 8003404:	d821      	bhi.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003406:	2b00      	cmp	r3, #0
 8003408:	d002      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800340a:	2b40      	cmp	r3, #64	@ 0x40
 800340c:	d007      	beq.n	800341e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800340e:	e01c      	b.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
>>>>>>> dev
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 80033b4:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4a62      	ldr	r2, [pc, #392]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033c0:	e01c      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
=======
 8003410:	4b63      	ldr	r3, [pc, #396]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003414:	4a62      	ldr	r2, [pc, #392]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800341a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800341c:	e01c      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
>>>>>>> dev

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	3308      	adds	r3, #8
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fbe6 	bl	8004b9c <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033d6:	e011      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	3328      	adds	r3, #40	@ 0x28
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fc8d 	bl	8004d00 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
=======
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003422:	3308      	adds	r3, #8
 8003424:	2100      	movs	r1, #0
 8003426:	4618      	mov	r0, r3
 8003428:	f001 fbe6 	bl	8004bf8 <RCCEx_PLL2_Config>
 800342c:	4603      	mov	r3, r0
 800342e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003432:	e011      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003438:	3328      	adds	r3, #40	@ 0x28
 800343a:	2100      	movs	r1, #0
 800343c:	4618      	mov	r0, r3
 800343e:	f001 fc8d 	bl	8004d5c <RCCEx_PLL3_Config>
 8003442:	4603      	mov	r3, r0
 8003444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003448:	e006      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003404:	4b4f      	ldr	r3, [pc, #316]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003408:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	4a4c      	ldr	r2, [pc, #304]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003414:	430b      	orrs	r3, r1
 8003416:	6513      	str	r3, [r2, #80]	@ 0x50
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x216>
=======
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003450:	e002      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003452:	bf00      	nop
 8003454:	e000      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003456:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003458:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800345c:	2b00      	cmp	r3, #0
 800345e:	d10a      	bne.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003460:	4b4f      	ldr	r3, [pc, #316]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003464:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	4a4c      	ldr	r2, [pc, #304]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003470:	430b      	orrs	r3, r1
 8003472:	6513      	str	r3, [r2, #80]	@ 0x50
 8003474:	e003      	b.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x216>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800341a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800347a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
<<<<<<< HEAD
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800342e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003438:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800343c:	460b      	mov	r3, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	d053      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800344a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800344e:	d035      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003450:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003454:	d82e      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003456:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800345a:	d031      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800345c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003460:	d828      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003466:	d01a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800346c:	d822      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003476:	d007      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003478:	e01c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
=======
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800348a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800348e:	2300      	movs	r3, #0
 8003490:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003494:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003498:	460b      	mov	r3, r1
 800349a:	4313      	orrs	r3, r2
 800349c:	d053      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034aa:	d035      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80034ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034b0:	d82e      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034b2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034b6:	d031      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80034b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80034bc:	d828      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c2:	d01a      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x292>
 80034c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034c8:	d822      	bhi.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80034ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034d2:	d007      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80034d4:	e01c      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
>>>>>>> dev
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 800347a:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	4a31      	ldr	r2, [pc, #196]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003486:	e01c      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
=======
 80034d6:	4b32      	ldr	r3, [pc, #200]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034da:	4a31      	ldr	r2, [pc, #196]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034e2:	e01c      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
>>>>>>> dev

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	3308      	adds	r3, #8
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fb83 	bl	8004b9c <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800349c:	e011      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3328      	adds	r3, #40	@ 0x28
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fc2a 	bl	8004d00 <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e006      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
=======
 80034e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e8:	3308      	adds	r3, #8
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f001 fb83 	bl	8004bf8 <RCCEx_PLL2_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80034f8:	e011      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fe:	3328      	adds	r3, #40	@ 0x28
 8003500:	2100      	movs	r1, #0
 8003502:	4618      	mov	r0, r3
 8003504:	f001 fc2a 	bl	8004d5c <RCCEx_PLL3_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800350e:	e006      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
>>>>>>> dev
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034bc:	bf00      	nop
 80034be:	e000      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034da:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
=======
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003516:	e002      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003518:	bf00      	nop
 800351a:	e000      	b.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800351c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800351e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003526:	4b1e      	ldr	r3, [pc, #120]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800352a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003536:	4a1a      	ldr	r2, [pc, #104]	@ (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	430b      	orrs	r3, r1
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	e003      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x2de>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
<<<<<<< HEAD
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003500:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d056      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003512:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003516:	d038      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800351c:	d831      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800351e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003522:	d034      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003524:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003528:	d82b      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800352a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352e:	d01d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003534:	d825      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800353a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003540:	e01f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
=======
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003552:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003556:	2300      	movs	r3, #0
 8003558:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800355c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003560:	460b      	mov	r3, r1
 8003562:	4313      	orrs	r3, r2
 8003564:	d056      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800356e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003572:	d038      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003574:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003578:	d831      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800357a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800357e:	d034      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003580:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003584:	d82b      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003586:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800358a:	d01d      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800358c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003590:	d825      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003596:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800359a:	d00a      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800359c:	e01f      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x376>
 800359e:	bf00      	nop
 80035a0:	58024400 	.word	0x58024400
>>>>>>> dev
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8003548:	4ba2      	ldr	r3, [pc, #648]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	4aa1      	ldr	r2, [pc, #644]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
=======
 80035a4:	4ba2      	ldr	r3, [pc, #648]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a8:	4aa1      	ldr	r2, [pc, #644]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035b0:	e01c      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x384>
>>>>>>> dev

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3308      	adds	r3, #8
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fb1c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800356a:	e011      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	3328      	adds	r3, #40	@ 0x28
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fbc3 	bl	8004d00 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
=======
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	3308      	adds	r3, #8
 80035b8:	2100      	movs	r1, #0
 80035ba:	4618      	mov	r0, r3
 80035bc:	f001 fb1c 	bl	8004bf8 <RCCEx_PLL2_Config>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035c6:	e011      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	3328      	adds	r3, #40	@ 0x28
 80035ce:	2100      	movs	r1, #0
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 fbc3 	bl	8004d5c <RCCEx_PLL3_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x384>
>>>>>>> dev
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003598:	4b8e      	ldr	r3, [pc, #568]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a8:	4a8a      	ldr	r2, [pc, #552]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d03a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	2b30      	cmp	r3, #48	@ 0x30
 80035e0:	d01f      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d819      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d00c      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d815      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d019      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d111      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4b77      	ldr	r3, [pc, #476]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	4a76      	ldr	r2, [pc, #472]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	3308      	adds	r3, #8
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fac5 	bl	8004b9c <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
=======
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x384>
>>>>>>> dev
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
<<<<<<< HEAD
 8003628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003630:	4b68      	ldr	r3, [pc, #416]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003634:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003640:	430b      	orrs	r3, r1
 8003642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x442>
=======
 80035ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10b      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80035f4:	4b8e      	ldr	r3, [pc, #568]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003604:	4a8a      	ldr	r2, [pc, #552]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003606:	430b      	orrs	r3, r1
 8003608:	6593      	str	r3, [r2, #88]	@ 0x58
 800360a:	e003      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800360c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800362a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	d03a      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363a:	2b30      	cmp	r3, #48	@ 0x30
 800363c:	d01f      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800363e:	2b30      	cmp	r3, #48	@ 0x30
 8003640:	d819      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003642:	2b20      	cmp	r3, #32
 8003644:	d00c      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003646:	2b20      	cmp	r3, #32
 8003648:	d815      	bhi.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d019      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800364e:	2b10      	cmp	r3, #16
 8003650:	d111      	bne.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003652:	4b77      	ldr	r3, [pc, #476]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003656:	4a76      	ldr	r2, [pc, #472]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003658:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800365e:	e011      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003664:	3308      	adds	r3, #8
 8003666:	2102      	movs	r1, #2
 8003668:	4618      	mov	r0, r3
 800366a:	f001 fac5 	bl	8004bf8 <RCCEx_PLL2_Config>
 800366e:	4603      	mov	r3, r0
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800368c:	4b68      	ldr	r3, [pc, #416]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800368e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003690:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800369a:	4a65      	ldr	r2, [pc, #404]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369c:	430b      	orrs	r3, r1
 800369e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036a0:	e003      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
<<<<<<< HEAD
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800365a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003664:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d051      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003678:	d035      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367e:	d82e      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003680:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003684:	d031      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003686:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800368a:	d828      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003690:	d01a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003696:	d822      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a0:	d007      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036a2:	e01c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
=======
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80036b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036ba:	2300      	movs	r3, #0
 80036bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036c0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4313      	orrs	r3, r2
 80036c8:	d051      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80036ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036d0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d4:	d035      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80036d6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036da:	d82e      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036dc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036e0:	d031      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80036e2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80036e6:	d828      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036ec:	d01a      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036f2:	d822      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d003      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036fc:	d007      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036fe:	e01c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
>>>>>>> dev
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 80036a4:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b0:	e01c      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	3308      	adds	r3, #8
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fa6e 	bl	8004b9c <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	3328      	adds	r3, #40	@ 0x28
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fb15 	bl	8004d00 <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
=======
 8003700:	4b4b      	ldr	r3, [pc, #300]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	4a4a      	ldr	r2, [pc, #296]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800370c:	e01c      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	3308      	adds	r3, #8
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fa6e 	bl	8004bf8 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	3328      	adds	r3, #40	@ 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fb15 	bl	8004d5c <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003738:	e006      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6513      	str	r3, [r2, #80]	@ 0x50
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x506>
=======
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003750:	4b37      	ldr	r3, [pc, #220]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	4a34      	ldr	r2, [pc, #208]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6513      	str	r3, [r2, #80]	@ 0x50
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x506>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
<<<<<<< HEAD
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800371e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003728:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d056      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373c:	d033      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800373e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003742:	d82c      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003748:	d02f      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800374a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374e:	d826      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003754:	d02b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800375a:	d820      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003760:	d012      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003766:	d81a      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d022      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d115      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
=======
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800377a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003784:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d056      	beq.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003798:	d033      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800379a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800379e:	d82c      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037a4:	d02f      	beq.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80037a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80037aa:	d826      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037ac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037b0:	d02b      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037b2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037b6:	d820      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037bc:	d012      	beq.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80037be:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037c2:	d81a      	bhi.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x592>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d022      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80037c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037cc:	d115      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x592>
>>>>>>> dev
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	3308      	adds	r3, #8
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fa0e 	bl	8004b9c <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003786:	e015      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	3328      	adds	r3, #40	@ 0x28
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fab5 	bl	8004d00 <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800379c:	e00a      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
=======
 80037ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d2:	3308      	adds	r3, #8
 80037d4:	2101      	movs	r1, #1
 80037d6:	4618      	mov	r0, r3
 80037d8:	f001 fa0e 	bl	8004bf8 <RCCEx_PLL2_Config>
 80037dc:	4603      	mov	r3, r0
 80037de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037e2:	e015      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e8:	3328      	adds	r3, #40	@ 0x28
 80037ea:	2101      	movs	r1, #1
 80037ec:	4618      	mov	r0, r3
 80037ee:	f001 fab5 	bl	8004d5c <RCCEx_PLL3_Config>
 80037f2:	4603      	mov	r3, r0
 80037f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80037f8:	e00a      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
>>>>>>> dev
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ca:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
=======
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003800:	e006      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003802:	bf00      	nop
 8003804:	e004      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003806:	bf00      	nop
 8003808:	e002      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800380a:	bf00      	nop
 800380c:	e000      	b.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800380e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10d      	bne.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800381c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003826:	4a02      	ldr	r2, [pc, #8]	@ (8003830 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6513      	str	r3, [r2, #80]	@ 0x50
 800382c:	e006      	b.n	800383c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800382e:	bf00      	nop
 8003830:	58024400 	.word	0x58024400
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003834:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003838:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
<<<<<<< HEAD
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d055      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380c:	d033      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d82c      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d02f      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381e:	d826      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003820:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003824:	d02b      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003826:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800382a:	d820      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d012      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003836:	d81a      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d022      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800383c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003840:	d115      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
=======
 800383c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003844:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800384c:	2300      	movs	r3, #0
 800384e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003852:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003856:	460b      	mov	r3, r1
 8003858:	4313      	orrs	r3, r2
 800385a:	d055      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800385c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003860:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003864:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003868:	d033      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800386a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800386e:	d82c      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003870:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003874:	d02f      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003876:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800387a:	d826      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 800387c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003880:	d02b      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003882:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003886:	d820      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003888:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800388c:	d012      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800388e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003892:	d81a      	bhi.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003894:	2b00      	cmp	r3, #0
 8003896:	d022      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003898:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800389c:	d115      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x662>
>>>>>>> dev
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f9a6 	bl	8004b9c <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003856:	e015      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3328      	adds	r3, #40	@ 0x28
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fa4d 	bl	8004d00 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
=======
 800389e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a2:	3308      	adds	r3, #8
 80038a4:	2101      	movs	r1, #1
 80038a6:	4618      	mov	r0, r3
 80038a8:	f001 f9a6 	bl	8004bf8 <RCCEx_PLL2_Config>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038b2:	e015      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b8:	3328      	adds	r3, #40	@ 0x28
 80038ba:	2101      	movs	r1, #1
 80038bc:	4618      	mov	r0, r3
 80038be:	f001 fa4d 	bl	8004d5c <RCCEx_PLL3_Config>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80038c8:	e00a      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
>>>>>>> dev
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800388c:	4ba3      	ldr	r3, [pc, #652]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389c:	4a9f      	ldr	r2, [pc, #636]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
=======
 80038ca:	2301      	movs	r3, #1
 80038cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d0:	e006      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038d2:	bf00      	nop
 80038d4:	e004      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038d6:	bf00      	nop
 80038d8:	e002      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038da:	bf00      	nop
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80038de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d10b      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80038e8:	4ba3      	ldr	r3, [pc, #652]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038ec:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80038f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80038f8:	4a9f      	ldr	r2, [pc, #636]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80038fe:	e003      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
<<<<<<< HEAD
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d037      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d6:	d00e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d816      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e6:	d111      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x700>
=======
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003914:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800391e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d037      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003932:	d00e      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003938:	d816      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d018      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800393e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003942:	d111      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x700>
>>>>>>> dev
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 80038e8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4a8b      	ldr	r2, [pc, #556]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038f4:	e00f      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
=======
 8003944:	4b8c      	ldr	r3, [pc, #560]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003948:	4a8b      	ldr	r2, [pc, #556]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003950:	e00f      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x70a>
>>>>>>> dev

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	3308      	adds	r3, #8
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f94c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800390a:	e004      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
=======
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	3308      	adds	r3, #8
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f001 f94c 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003966:	e004      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x70a>
>>>>>>> dev
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800391e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a7b      	ldr	r2, [pc, #492]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6513      	str	r3, [r2, #80]	@ 0x50
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x730>
=======
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396e:	e000      	b.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10a      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800397a:	4b7f      	ldr	r3, [pc, #508]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800397e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003988:	4a7b      	ldr	r2, [pc, #492]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800398a:	430b      	orrs	r3, r1
 800398c:	6513      	str	r3, [r2, #80]	@ 0x50
 800398e:	e003      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x730>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003990:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003994:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
<<<<<<< HEAD
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003952:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d039      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003962:	2b03      	cmp	r3, #3
 8003964:	d81c      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003966:	a201      	add	r2, pc, #4	@ (adr r2, 800396c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	080039a9 	.word	0x080039a9
 8003970:	0800397d 	.word	0x0800397d
 8003974:	0800398b 	.word	0x0800398b
 8003978:	080039a9 	.word	0x080039a9
=======
 8003998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80039a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d039      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80039b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d81c      	bhi.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x794>
 80039c2:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	08003a05 	.word	0x08003a05
 80039cc:	080039d9 	.word	0x080039d9
 80039d0:	080039e7 	.word	0x080039e7
 80039d4:	08003a05 	.word	0x08003a05
>>>>>>> dev
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 800397c:	4b67      	ldr	r3, [pc, #412]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	4a66      	ldr	r2, [pc, #408]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003988:	e00f      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
=======
 80039d8:	4b67      	ldr	r3, [pc, #412]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	4a66      	ldr	r2, [pc, #408]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039e4:	e00f      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
>>>>>>> dev

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	3308      	adds	r3, #8
 8003990:	2102      	movs	r1, #2
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f902 	bl	8004b9c <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
=======
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	3308      	adds	r3, #8
 80039ec:	2102      	movs	r1, #2
 80039ee:	4618      	mov	r0, r3
 80039f0:	f001 f902 	bl	8004bf8 <RCCEx_PLL2_Config>
 80039f4:	4603      	mov	r3, r0
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80039fa:	e004      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
>>>>>>> dev
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a6:	e000      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	f023 0103 	bic.w	r1, r3, #3
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	e003      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
=======
 80039fc:	2301      	movs	r3, #1
 80039fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a0e:	4b5a      	ldr	r3, [pc, #360]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a12:	f023 0103 	bic.w	r1, r3, #3
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a1c:	4a56      	ldr	r2, [pc, #344]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1e:	430b      	orrs	r3, r1
 8003a20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003a22:	e003      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80039c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
<<<<<<< HEAD
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f000 809f 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
=======
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a34:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003a38:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a42:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a46:	460b      	mov	r3, r1
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	f000 809f 	beq.w	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
>>>>>>> dev
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
<<<<<<< HEAD
 80039f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fe:	f7fd fb73 	bl	80010e8 <HAL_GetTick>
 8003a02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a06:	e00b      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fd fb6e 	bl	80010e8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	@ 0x64
 8003a16:	d903      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1e:	e005      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a20:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ed      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
=======
 8003a4e:	4b4b      	ldr	r3, [pc, #300]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a4a      	ldr	r2, [pc, #296]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a5a:	f7fd fb73 	bl	8001144 <HAL_GetTick>
 8003a5e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a62:	e00b      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a64:	f7fd fb6e 	bl	8001144 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b64      	cmp	r3, #100	@ 0x64
 8003a72:	d903      	bls.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a7a:	e005      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a7c:	4b3f      	ldr	r3, [pc, #252]	@ (8003b7c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0ed      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
>>>>>>> dev
      }
    }

    if (ret == HAL_OK)
<<<<<<< HEAD
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d179      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a40:	4053      	eors	r3, r2
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
=======
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d179      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a90:	4b39      	ldr	r3, [pc, #228]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a92:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a9c:	4053      	eors	r3, r2
 8003a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d015      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003aa6:	4b34      	ldr	r3, [pc, #208]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aaa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aae:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ab2:	4b31      	ldr	r3, [pc, #196]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ab6:	4a30      	ldr	r2, [pc, #192]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003abc:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003abe:	4b2e      	ldr	r3, [pc, #184]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac2:	4a2d      	ldr	r2, [pc, #180]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ac8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003aca:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003acc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ad0:	6713      	str	r3, [r2, #112]	@ 0x70
>>>>>>> dev
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
<<<<<<< HEAD
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a82:	d118      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fb30 	bl	80010e8 <HAL_GetTick>
 8003a88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a8c:	e00d      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fb2b 	bl	80010e8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d903      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0eb      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x882>
=======
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ade:	d118      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ae0:	f7fd fb30 	bl	8001144 <HAL_GetTick>
 8003ae4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ae8:	e00d      	b.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aea:	f7fd fb2b 	bl	8001144 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003af4:	1ad2      	subs	r2, r2, r3
 8003af6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d903      	bls.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003b04:	e005      	b.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b06:	4b1c      	ldr	r3, [pc, #112]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d0eb      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x882>
>>>>>>> dev
          }
        }
      }

      if (ret == HAL_OK)
<<<<<<< HEAD
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d129      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ace:	d10e      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ae0:	091a      	lsrs	r2, r3, #4
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6113      	str	r3, [r2, #16]
 8003aec:	e005      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003aee:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af8:	6113      	str	r3, [r2, #16]
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e00e      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
=======
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d129      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003b2a:	d10e      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003b2c:	4b12      	ldr	r3, [pc, #72]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2e:	691b      	ldr	r3, [r3, #16]
 8003b30:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b3c:	091a      	lsrs	r2, r3, #4
 8003b3e:	4b10      	ldr	r3, [pc, #64]	@ (8003b80 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	4a0d      	ldr	r2, [pc, #52]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b44:	430b      	orrs	r3, r1
 8003b46:	6113      	str	r3, [r2, #16]
 8003b48:	e005      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b50:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003b54:	6113      	str	r3, [r2, #16]
 8003b56:	4b08      	ldr	r3, [pc, #32]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b58:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b66:	4a04      	ldr	r2, [pc, #16]	@ (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b68:	430b      	orrs	r3, r1
 8003b6a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b6c:	e00e      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
>>>>>>> dev
      }
      else
      {
        /* set overall return value */
        status = ret;
<<<<<<< HEAD
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b1a:	e009      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b1c:	58024400 	.word	0x58024400
 8003b20:	58024800 	.word	0x58024800
 8003b24:	00ffffcf 	.word	0x00ffffcf
=======
 8003b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b76:	e009      	b.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58024800 	.word	0x58024800
 8003b80:	00ffffcf 	.word	0x00ffffcf
>>>>>>> dev
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003b84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
<<<<<<< HEAD
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f002 0301 	and.w	r3, r2, #1
 8003b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f000 8089 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b58:	2b28      	cmp	r3, #40	@ 0x28
 8003b5a:	d86b      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003c3d 	.word	0x08003c3d
 8003b68:	08003c35 	.word	0x08003c35
 8003b6c:	08003c35 	.word	0x08003c35
 8003b70:	08003c35 	.word	0x08003c35
 8003b74:	08003c35 	.word	0x08003c35
 8003b78:	08003c35 	.word	0x08003c35
 8003b7c:	08003c35 	.word	0x08003c35
 8003b80:	08003c35 	.word	0x08003c35
 8003b84:	08003c09 	.word	0x08003c09
 8003b88:	08003c35 	.word	0x08003c35
 8003b8c:	08003c35 	.word	0x08003c35
 8003b90:	08003c35 	.word	0x08003c35
 8003b94:	08003c35 	.word	0x08003c35
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003c35 	.word	0x08003c35
 8003ba0:	08003c35 	.word	0x08003c35
 8003ba4:	08003c1f 	.word	0x08003c1f
 8003ba8:	08003c35 	.word	0x08003c35
 8003bac:	08003c35 	.word	0x08003c35
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c35 	.word	0x08003c35
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c35 	.word	0x08003c35
 8003bc0:	08003c35 	.word	0x08003c35
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c35 	.word	0x08003c35
 8003bec:	08003c35 	.word	0x08003c35
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c3d 	.word	0x08003c3d
=======
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b94:	f002 0301 	and.w	r3, r2, #1
 8003b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ba2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	f000 8089 	beq.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003bb4:	2b28      	cmp	r3, #40	@ 0x28
 8003bb6:	d86b      	bhi.n	8003c90 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbe:	bf00      	nop
 8003bc0:	08003c99 	.word	0x08003c99
 8003bc4:	08003c91 	.word	0x08003c91
 8003bc8:	08003c91 	.word	0x08003c91
 8003bcc:	08003c91 	.word	0x08003c91
 8003bd0:	08003c91 	.word	0x08003c91
 8003bd4:	08003c91 	.word	0x08003c91
 8003bd8:	08003c91 	.word	0x08003c91
 8003bdc:	08003c91 	.word	0x08003c91
 8003be0:	08003c65 	.word	0x08003c65
 8003be4:	08003c91 	.word	0x08003c91
 8003be8:	08003c91 	.word	0x08003c91
 8003bec:	08003c91 	.word	0x08003c91
 8003bf0:	08003c91 	.word	0x08003c91
 8003bf4:	08003c91 	.word	0x08003c91
 8003bf8:	08003c91 	.word	0x08003c91
 8003bfc:	08003c91 	.word	0x08003c91
 8003c00:	08003c7b 	.word	0x08003c7b
 8003c04:	08003c91 	.word	0x08003c91
 8003c08:	08003c91 	.word	0x08003c91
 8003c0c:	08003c91 	.word	0x08003c91
 8003c10:	08003c91 	.word	0x08003c91
 8003c14:	08003c91 	.word	0x08003c91
 8003c18:	08003c91 	.word	0x08003c91
 8003c1c:	08003c91 	.word	0x08003c91
 8003c20:	08003c99 	.word	0x08003c99
 8003c24:	08003c91 	.word	0x08003c91
 8003c28:	08003c91 	.word	0x08003c91
 8003c2c:	08003c91 	.word	0x08003c91
 8003c30:	08003c91 	.word	0x08003c91
 8003c34:	08003c91 	.word	0x08003c91
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003c99 	.word	0x08003c99
 8003c44:	08003c91 	.word	0x08003c91
 8003c48:	08003c91 	.word	0x08003c91
 8003c4c:	08003c91 	.word	0x08003c91
 8003c50:	08003c91 	.word	0x08003c91
 8003c54:	08003c91 	.word	0x08003c91
 8003c58:	08003c91 	.word	0x08003c91
 8003c5c:	08003c91 	.word	0x08003c91
 8003c60:	08003c99 	.word	0x08003c99
>>>>>>> dev
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ffc3 	bl	8004b9c <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3328      	adds	r3, #40	@ 0x28
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f86a 	bl	8004d00 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
=======
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	3308      	adds	r3, #8
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f000 ffc3 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c78:	e00f      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	3328      	adds	r3, #40	@ 0x28
 8003c80:	2101      	movs	r1, #1
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f86a 	bl	8004d5c <RCCEx_PLL3_Config>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c8e:	e004      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
>>>>>>> dev
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c46:	4bbf      	ldr	r3, [pc, #764]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c54:	4abb      	ldr	r2, [pc, #748]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
=======
 8003c90:	2301      	movs	r3, #1
 8003c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c96:	e000      	b.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10a      	bne.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003ca2:	4bbf      	ldr	r3, [pc, #764]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ca6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb0:	4abb      	ldr	r2, [pc, #748]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cb2:	430b      	orrs	r3, r1
 8003cb4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cb6:	e003      	b.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003cb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
<<<<<<< HEAD
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 0302 	and.w	r3, r2, #2
 8003c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d041      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cc3 	.word	0x08003cc3
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003ce1 	.word	0x08003ce1
=======
 8003cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc8:	f002 0302 	and.w	r3, r2, #2
 8003ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cd6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	d041      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ce6:	2b05      	cmp	r3, #5
 8003ce8:	d824      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003cea:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d3d 	.word	0x08003d3d
 8003cf4:	08003d09 	.word	0x08003d09
 8003cf8:	08003d1f 	.word	0x08003d1f
 8003cfc:	08003d3d 	.word	0x08003d3d
 8003d00:	08003d3d 	.word	0x08003d3d
 8003d04:	08003d3d 	.word	0x08003d3d
>>>>>>> dev
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 ff71 	bl	8004b9c <RCCEx_PLL2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	3328      	adds	r3, #40	@ 0x28
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 f818 	bl	8004d00 <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
=======
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ff71 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d22:	3328      	adds	r3, #40	@ 0x28
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f818 	bl	8004d5c <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
>>>>>>> dev
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cea:	4b96      	ldr	r3, [pc, #600]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f023 0107 	bic.w	r1, r3, #7
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf8:	4a92      	ldr	r2, [pc, #584]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
=======
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003d46:	4b96      	ldr	r3, [pc, #600]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	f023 0107 	bic.w	r1, r3, #7
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d54:	4a92      	ldr	r2, [pc, #584]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xafc>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003d5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
<<<<<<< HEAD
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 0304 	and.w	r3, r2, #4
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d044      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d825      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d34:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d6b 	.word	0x08003d6b
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
=======
 8003d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 0304 	and.w	r3, r2, #4
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d044      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d8c:	2b05      	cmp	r3, #5
 8003d8e:	d825      	bhi.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d90:	a201      	add	r2, pc, #4	@ (adr r2, 8003d98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d96:	bf00      	nop
 8003d98:	08003de5 	.word	0x08003de5
 8003d9c:	08003db1 	.word	0x08003db1
 8003da0:	08003dc7 	.word	0x08003dc7
 8003da4:	08003de5 	.word	0x08003de5
 8003da8:	08003de5 	.word	0x08003de5
 8003dac:	08003de5 	.word	0x08003de5
>>>>>>> dev
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff1d 	bl	8004b9c <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffc4 	bl	8004d00 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
=======
 8003db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db4:	3308      	adds	r3, #8
 8003db6:	2101      	movs	r1, #1
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 ff1d 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dc4:	e00f      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	3328      	adds	r3, #40	@ 0x28
 8003dcc:	2101      	movs	r1, #1
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f000 ffc4 	bl	8004d5c <RCCEx_PLL3_Config>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003dda:	e004      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
>>>>>>> dev
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d92:	4b6c      	ldr	r3, [pc, #432]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f023 0107 	bic.w	r1, r3, #7
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	4a68      	ldr	r2, [pc, #416]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
=======
 8003ddc:	2301      	movs	r3, #1
 8003dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003de2:	e000      	b.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003de4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10b      	bne.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003dee:	4b6c      	ldr	r3, [pc, #432]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003df2:	f023 0107 	bic.w	r1, r3, #7
 8003df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfe:	4a68      	ldr	r2, [pc, #416]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e00:	430b      	orrs	r3, r1
 8003e02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e04:	e003      	b.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003e06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
<<<<<<< HEAD
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f002 0320 	and.w	r3, r2, #32
 8003dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d055      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dde:	d033      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de4:	d82c      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d826      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df6:	d02b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003df8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e02:	d012      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e08:	d81a      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e12:	d115      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
=======
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e16:	f002 0320 	and.w	r3, r2, #32
 8003e1a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e1e:	2300      	movs	r3, #0
 8003e20:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e24:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e28:	460b      	mov	r3, r1
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	d055      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e3a:	d033      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003e3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e40:	d82c      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e46:	d02f      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003e48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e4c:	d826      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e4e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e52:	d02b      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003e54:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003e58:	d820      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e5a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e5e:	d012      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e60:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e64:	d81a      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d022      	beq.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e6e:	d115      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xc34>
>>>>>>> dev
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	3308      	adds	r3, #8
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 febd 	bl	8004b9c <RCCEx_PLL2_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff64 	bl	8004d00 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
=======
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	3308      	adds	r3, #8
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 febd 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e84:	e015      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	3328      	adds	r3, #40	@ 0x28
 8003e8c:	2102      	movs	r1, #2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f000 ff64 	bl	8004d5c <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e00a      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a35      	ldr	r2, [pc, #212]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
=======
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea2:	e006      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ea4:	bf00      	nop
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003ea8:	bf00      	nop
 8003eaa:	e002      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eac:	bf00      	nop
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003eba:	4b39      	ldr	r3, [pc, #228]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebe:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eca:	4a35      	ldr	r2, [pc, #212]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xc72>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
<<<<<<< HEAD
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d058      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ea6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003eac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eb0:	d82c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d826      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec8:	d820      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed4:	d81a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ede:	d115      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
=======
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003ee6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ef0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d058      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f02:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f06:	d033      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003f08:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f0c:	d82c      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003f14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f18:	d826      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f1e:	d02b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003f20:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003f24:	d820      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003f2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f30:	d81a      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xd00>
>>>>>>> dev
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fe57 	bl	8004b9c <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fefe 	bl	8004d00 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
=======
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	3308      	adds	r3, #8
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 fe57 	bl	8004bf8 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3328      	adds	r3, #40	@ 0x28
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fefe 	bl	8004d5c <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f66:	e00a      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3a:	4a02      	ldr	r2, [pc, #8]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
=======
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10e      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f8a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f96:	4a02      	ldr	r2, [pc, #8]	@ (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f9c:	e006      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f9e:	bf00      	nop
 8003fa0:	58024400 	.word	0x58024400
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8003fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
<<<<<<< HEAD
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d055      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f7c:	d033      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f82:	d82c      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d02f      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8e:	d826      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f94:	d02b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f9a:	d820      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa0:	d012      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa6:	d81a      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d115      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
=======
 8003fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003fb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003fc2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	d055      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fd4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fd8:	d033      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003fda:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003fde:	d82c      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fe0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fe4:	d02f      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fea:	d826      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fec:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ff0:	d02b      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003ff2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003ff6:	d820      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ffc:	d012      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003ffe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004002:	d81a      	bhi.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004004:	2b00      	cmp	r3, #0
 8004006:	d022      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004008:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800400c:	d115      	bne.n	800403a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
>>>>>>> dev
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fdee 	bl	8004b9c <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	3328      	adds	r3, #40	@ 0x28
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe95 	bl	8004d00 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
=======
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	3308      	adds	r3, #8
 8004014:	2100      	movs	r1, #0
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fdee 	bl	8004bf8 <RCCEx_PLL2_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004022:	e015      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004028:	3328      	adds	r3, #40	@ 0x28
 800402a:	2102      	movs	r1, #2
 800402c:	4618      	mov	r0, r3
 800402e:	f000 fe95 	bl	8004d5c <RCCEx_PLL3_Config>
 8004032:	4603      	mov	r3, r0
 8004034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004038:	e00a      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800400c:	4a9d      	ldr	r2, [pc, #628]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe10>
=======
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004040:	e006      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004042:	bf00      	nop
 8004044:	e004      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004046:	bf00      	nop
 8004048:	e002      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800404a:	bf00      	nop
 800404c:	e000      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800404e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004054:	2b00      	cmp	r3, #0
 8004056:	d10b      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004058:	4ba1      	ldr	r3, [pc, #644]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800405a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800405c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004060:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004064:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004068:	4a9d      	ldr	r2, [pc, #628]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406a:	430b      	orrs	r3, r1
 800406c:	6593      	str	r3, [r2, #88]	@ 0x58
 800406e:	e003      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xe10>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
<<<<<<< HEAD
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0308 	and.w	r3, r2, #8
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d01e      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
=======
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 0308 	and.w	r3, r2, #8
 8004084:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800408e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d01e      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
<<<<<<< HEAD
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	3328      	adds	r3, #40	@ 0x28
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fe54 	bl	8004d00 <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	3328      	adds	r3, #40	@ 0x28
 80040ac:	2102      	movs	r1, #2
 80040ae:	4618      	mov	r0, r3
 80040b0:	f000 fe54 	bl	8004d5c <RCCEx_PLL3_Config>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d002      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
<<<<<<< HEAD
 8004064:	4b87      	ldr	r3, [pc, #540]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54
=======
 80040c0:	4b87      	ldr	r3, [pc, #540]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040c4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80040c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040d0:	4a83      	ldr	r2, [pc, #524]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d2:	430b      	orrs	r3, r1
 80040d4:	6553      	str	r3, [r2, #84]	@ 0x54
>>>>>>> dev

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
<<<<<<< HEAD
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f002 0310 	and.w	r3, r2, #16
 8004086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004090:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d01e      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
=======
 80040d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f002 0310 	and.w	r3, r2, #16
 80040e2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040e6:	2300      	movs	r3, #0
 80040e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80040ec:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80040f0:	460b      	mov	r3, r1
 80040f2:	4313      	orrs	r3, r2
 80040f4:	d01e      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xecc>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
<<<<<<< HEAD
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe25 	bl	8004d00 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80040f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004102:	d10c      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004108:	3328      	adds	r3, #40	@ 0x28
 800410a:	2102      	movs	r1, #2
 800410c:	4618      	mov	r0, r3
 800410e:	f000 fe25 	bl	8004d5c <RCCEx_PLL3_Config>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
<<<<<<< HEAD
 80040c2:	4b70      	ldr	r3, [pc, #448]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58
=======
 800411e:	4b70      	ldr	r3, [pc, #448]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004120:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004122:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800412e:	4a6c      	ldr	r2, [pc, #432]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004130:	430b      	orrs	r3, r1
 8004132:	6593      	str	r3, [r2, #88]	@ 0x58
>>>>>>> dev

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
<<<<<<< HEAD
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d03e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800410a:	d81b      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d00b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004116:	e015      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
=======
 8004134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800413c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004140:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004144:	2300      	movs	r3, #0
 8004146:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800414a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800414e:	460b      	mov	r3, r1
 8004150:	4313      	orrs	r3, r2
 8004152:	d03e      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004158:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800415c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004160:	d022      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004162:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004166:	d81b      	bhi.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004168:	2b00      	cmp	r3, #0
 800416a:	d003      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800416c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004170:	d00b      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004172:	e015      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xf38>
>>>>>>> dev
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
<<<<<<< HEAD
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	3308      	adds	r3, #8
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fd3b 	bl	8004b9c <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fde2 	bl	8004d00 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>
=======
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004178:	3308      	adds	r3, #8
 800417a:	2100      	movs	r1, #0
 800417c:	4618      	mov	r0, r3
 800417e:	f000 fd3b 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004182:	4603      	mov	r3, r0
 8004184:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004188:	e00f      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	3328      	adds	r3, #40	@ 0x28
 8004190:	2102      	movs	r1, #2
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fde2 	bl	8004d5c <RCCEx_PLL3_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800419e:	e004      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
>>>>>>> dev
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004166:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
=======
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a6:	e000      	b.n	80041aa <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80041a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d10b      	bne.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041b2:	4b4b      	ldr	r3, [pc, #300]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80041c2:	4a47      	ldr	r2, [pc, #284]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c4:	430b      	orrs	r3, r1
 80041c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80041ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
<<<<<<< HEAD
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004182:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004184:	2300      	movs	r3, #0
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004188:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419e:	d01f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
=======
 80041d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80041de:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e0:	2300      	movs	r3, #0
 80041e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041e4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041e8:	460b      	mov	r3, r1
 80041ea:	4313      	orrs	r3, r2
 80041ec:	d03b      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80041ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041fa:	d01f      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004200:	d818      	bhi.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004202:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004206:	d003      	beq.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004208:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800420c:	d007      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800420e:	e011      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
>>>>>>> dev
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 80041b4:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c0:	e00f      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
=======
 8004210:	4b33      	ldr	r3, [pc, #204]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004214:	4a32      	ldr	r2, [pc, #200]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004216:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
>>>>>>> dev

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
<<<<<<< HEAD
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	3328      	adds	r3, #40	@ 0x28
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd98 	bl	8004d00 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
=======
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	3328      	adds	r3, #40	@ 0x28
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fd98 	bl	8004d5c <RCCEx_PLL3_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004232:	e004      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
>>>>>>> dev
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xffe>
=======
 8004234:	2301      	movs	r3, #1
 8004236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800423a:	e000      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800423c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800423e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10b      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004246:	4b26      	ldr	r3, [pc, #152]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004248:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800424a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004252:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004256:	4a22      	ldr	r2, [pc, #136]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004258:	430b      	orrs	r3, r1
 800425a:	6553      	str	r3, [r2, #84]	@ 0x54
 800425c:	e003      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xffe>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 800425e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004262:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
<<<<<<< HEAD
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004216:	673b      	str	r3, [r7, #112]	@ 0x70
 8004218:	2300      	movs	r3, #0
 800421a:	677b      	str	r3, [r7, #116]	@ 0x74
 800421c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d034      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
=======
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004272:	673b      	str	r3, [r7, #112]	@ 0x70
 8004274:	2300      	movs	r3, #0
 8004276:	677b      	str	r3, [r7, #116]	@ 0x74
 8004278:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800427c:	460b      	mov	r3, r1
 800427e:	4313      	orrs	r3, r2
 8004280:	d034      	beq.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
<<<<<<< HEAD
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d007      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1050>
=======
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004288:	2b00      	cmp	r3, #0
 800428a:	d003      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004290:	d007      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004292:	e011      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
>>>>>>> dev
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004244:	e00e      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1058>
=======
 8004294:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004296:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004298:	4a11      	ldr	r2, [pc, #68]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800429a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800429e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042a0:	e00e      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>
>>>>>>> dev

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
<<<<<<< HEAD
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3308      	adds	r3, #8
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fca4 	bl	8004b9c <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427c:	430b      	orrs	r3, r1
 800427e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
=======
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a6:	3308      	adds	r3, #8
 80042a8:	2102      	movs	r1, #2
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 fca4 	bl	8004bf8 <RCCEx_PLL2_Config>
 80042b0:	4603      	mov	r3, r0
 80042b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80042b6:	e003      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10d      	bne.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042c8:	4b05      	ldr	r3, [pc, #20]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80042d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042d6:	4a02      	ldr	r2, [pc, #8]	@ (80042e0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d8:	430b      	orrs	r3, r1
 80042da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80042dc:	e006      	b.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80042de:	bf00      	nop
 80042e0:	58024400 	.word	0x58024400
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 8004288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80042e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
<<<<<<< HEAD
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429e:	2300      	movs	r3, #0
 80042a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b0:	3328      	adds	r3, #40	@ 0x28
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd23 	bl	8004d00 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80042ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80042f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042fa:	2300      	movs	r3, #0
 80042fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042fe:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004302:	460b      	mov	r3, r1
 8004304:	4313      	orrs	r3, r2
 8004306:	d00c      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800430c:	3328      	adds	r3, #40	@ 0x28
 800430e:	2102      	movs	r1, #2
 8004310:	4618      	mov	r0, r3
 8004312:	f000 fd23 	bl	8004d5c <RCCEx_PLL3_Config>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d002      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
<<<<<<< HEAD
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d4:	2300      	movs	r3, #0
 80042d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d038      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ee:	d018      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f4:	d811      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fa:	d014      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004300:	d80b      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430a:	d106      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
=======
 8004322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800432e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004330:	2300      	movs	r3, #0
 8004332:	667b      	str	r3, [r7, #100]	@ 0x64
 8004334:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004338:	460b      	mov	r3, r1
 800433a:	4313      	orrs	r3, r2
 800433c:	d038      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800433e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004346:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800434a:	d018      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800434c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004350:	d811      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004356:	d014      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800435c:	d80b      	bhi.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800435e:	2b00      	cmp	r3, #0
 8004360:	d011      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004362:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004366:	d106      	bne.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x110e>
>>>>>>> dev
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
<<<<<<< HEAD
 800430c:	4bc3      	ldr	r3, [pc, #780]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	4ac2      	ldr	r2, [pc, #776]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004318:	e008      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
=======
 8004368:	4bc3      	ldr	r3, [pc, #780]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800436c:	4ac2      	ldr	r2, [pc, #776]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004372:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004374:	e008      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
>>>>>>> dev
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
<<<<<<< HEAD
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4bb9      	ldr	r3, [pc, #740]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004344:	4ab5      	ldr	r2, [pc, #724]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6553      	str	r3, [r2, #84]	@ 0x54
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
=======
 8004376:	2301      	movs	r3, #1
 8004378:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800437e:	bf00      	nop
 8004380:	e002      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004382:	bf00      	nop
 8004384:	e000      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004386:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004390:	4bb9      	ldr	r3, [pc, #740]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043a0:	4ab5      	ldr	r2, [pc, #724]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6553      	str	r3, [r2, #84]	@ 0x54
 80043a6:	e003      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
>>>>>>> dev
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
<<<<<<< HEAD
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004362:	2300      	movs	r3, #0
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004366:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1178>
=======
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80043bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043be:	2300      	movs	r3, #0
 80043c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
<<<<<<< HEAD
 8004370:	4baa      	ldr	r3, [pc, #680]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	4aa7      	ldr	r2, [pc, #668]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6513      	str	r3, [r2, #80]	@ 0x50
=======
 80043cc:	4baa      	ldr	r3, [pc, #680]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043da:	4aa7      	ldr	r2, [pc, #668]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043dc:	430b      	orrs	r3, r1
 80043de:	6513      	str	r3, [r2, #80]	@ 0x50
>>>>>>> dev
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
<<<<<<< HEAD
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004390:	653b      	str	r3, [r7, #80]	@ 0x50
 8004392:	2300      	movs	r3, #0
 8004394:	657b      	str	r3, [r7, #84]	@ 0x54
 8004396:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
=======
 80043e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80043ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80043ee:	2300      	movs	r3, #0
 80043f0:	657b      	str	r3, [r7, #84]	@ 0x54
 80043f2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80043f6:	460b      	mov	r3, r1
 80043f8:	4313      	orrs	r3, r2
 80043fa:	d00a      	beq.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
<<<<<<< HEAD
 80043a0:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043b0:	4a9a      	ldr	r2, [pc, #616]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6113      	str	r3, [r2, #16]
=======
 80043fc:	4b9e      	ldr	r3, [pc, #632]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004408:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800440c:	4a9a      	ldr	r2, [pc, #616]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800440e:	430b      	orrs	r3, r1
 8004410:	6113      	str	r3, [r2, #16]
>>>>>>> dev
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
<<<<<<< HEAD
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c4:	2300      	movs	r3, #0
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
=======
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004420:	2300      	movs	r3, #0
 8004422:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004424:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004428:	460b      	mov	r3, r1
 800442a:	4313      	orrs	r3, r2
 800442c:	d009      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x11da>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
<<<<<<< HEAD
 80043d2:	4b92      	ldr	r3, [pc, #584]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e0:	4a8e      	ldr	r2, [pc, #568]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6513      	str	r3, [r2, #80]	@ 0x50
=======
 800442e:	4b92      	ldr	r3, [pc, #584]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004430:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004432:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800443c:	4a8e      	ldr	r2, [pc, #568]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	430b      	orrs	r3, r1
 8004440:	6513      	str	r3, [r2, #80]	@ 0x50
>>>>>>> dev
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
<<<<<<< HEAD
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f4:	2300      	movs	r3, #0
 80043f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1214>
=======
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800444e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004450:	2300      	movs	r3, #0
 8004452:	647b      	str	r3, [r7, #68]	@ 0x44
 8004454:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1214>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
<<<<<<< HEAD
 8004402:	4b86      	ldr	r3, [pc, #536]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	4a85      	ldr	r2, [pc, #532]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004408:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800440c:	6113      	str	r3, [r2, #16]
 800440e:	4b83      	ldr	r3, [pc, #524]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800441a:	4a80      	ldr	r2, [pc, #512]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6113      	str	r3, [r2, #16]
=======
 800445e:	4b86      	ldr	r3, [pc, #536]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004460:	691b      	ldr	r3, [r3, #16]
 8004462:	4a85      	ldr	r2, [pc, #532]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004464:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004468:	6113      	str	r3, [r2, #16]
 800446a:	4b83      	ldr	r3, [pc, #524]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446c:	6919      	ldr	r1, [r3, #16]
 800446e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004472:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004476:	4a80      	ldr	r2, [pc, #512]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6113      	str	r3, [r2, #16]
>>>>>>> dev
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
<<<<<<< HEAD
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800442c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442e:	2300      	movs	r3, #0
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004432:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1244>
=======
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800448a:	2300      	movs	r3, #0
 800448c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800448e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1244>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
<<<<<<< HEAD
 800443c:	4b77      	ldr	r3, [pc, #476]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	4a74      	ldr	r2, [pc, #464]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444c:	430b      	orrs	r3, r1
 800444e:	64d3      	str	r3, [r2, #76]	@ 0x4c
=======
 8004498:	4b77      	ldr	r3, [pc, #476]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800449c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a6:	4a74      	ldr	r2, [pc, #464]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
>>>>>>> dev
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
<<<<<<< HEAD
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800445c:	633b      	str	r3, [r7, #48]	@ 0x30
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
 8004462:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1276>
=======
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80044b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80044ba:	2300      	movs	r3, #0
 80044bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80044be:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x1276>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
<<<<<<< HEAD
 800446c:	4b6b      	ldr	r3, [pc, #428]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447c:	4a67      	ldr	r2, [pc, #412]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6553      	str	r3, [r2, #84]	@ 0x54
=======
 80044c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044cc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80044d8:	4a67      	ldr	r2, [pc, #412]	@ (8004678 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	6553      	str	r3, [r2, #84]	@ 0x54
>>>>>>> dev
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
<<<<<<< HEAD
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	2100      	movs	r1, #0
 800448c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004494:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	3308      	adds	r3, #8
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fb78 	bl	8004b9c <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
=======
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	2100      	movs	r1, #0
 80044e8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d011      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2100      	movs	r1, #0
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fb78 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
<<<<<<< HEAD
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	2100      	movs	r1, #0
 80044cc:	6239      	str	r1, [r7, #32]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d011      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	3308      	adds	r3, #8
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb58 	bl	8004b9c <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
=======
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	2100      	movs	r1, #0
 8004528:	6239      	str	r1, [r7, #32]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004530:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	3308      	adds	r3, #8
 8004540:	2101      	movs	r1, #1
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fb58 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800455a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
<<<<<<< HEAD
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	2100      	movs	r1, #0
 800450c:	61b9      	str	r1, [r7, #24]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004518:	460b      	mov	r3, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	d011      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	3308      	adds	r3, #8
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb38 	bl	8004b9c <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
=======
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	2100      	movs	r1, #0
 8004568:	61b9      	str	r1, [r7, #24]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	61fb      	str	r3, [r7, #28]
 8004570:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	3308      	adds	r3, #8
 8004580:	2102      	movs	r1, #2
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fb38 	bl	8004bf8 <RCCEx_PLL2_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x1336>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800459a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
<<<<<<< HEAD
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	2100      	movs	r1, #0
 800454c:	6139      	str	r1, [r7, #16]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d011      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	3328      	adds	r3, #40	@ 0x28
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fbca 	bl	8004d00 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
=======
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	2100      	movs	r1, #0
 80045a8:	6139      	str	r1, [r7, #16]
 80045aa:	f003 0308 	and.w	r3, r3, #8
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	3328      	adds	r3, #40	@ 0x28
 80045c0:	2100      	movs	r1, #0
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fbca 	bl	8004d5c <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x1376>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
<<<<<<< HEAD
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	2100      	movs	r1, #0
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d011      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	3328      	adds	r3, #40	@ 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fbaa 	bl	8004d00 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
=======
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e6:	2100      	movs	r1, #0
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	f003 0310 	and.w	r3, r3, #16
 80045ee:	60fb      	str	r3, [r7, #12]
 80045f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80045f4:	460b      	mov	r3, r1
 80045f6:	4313      	orrs	r3, r2
 80045f8:	d011      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80045fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fe:	3328      	adds	r3, #40	@ 0x28
 8004600:	2101      	movs	r1, #1
 8004602:	4618      	mov	r0, r3
 8004604:	f000 fbaa 	bl	8004d5c <RCCEx_PLL3_Config>
 8004608:	4603      	mov	r3, r0
 800460a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800460e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004616:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
<<<<<<< HEAD
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	2100      	movs	r1, #0
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045d8:	460b      	mov	r3, r1
 80045da:	4313      	orrs	r3, r2
 80045dc:	d011      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb8a 	bl	8004d00 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
=======
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	2100      	movs	r1, #0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d011      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800463a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800463e:	3328      	adds	r3, #40	@ 0x28
 8004640:	2102      	movs	r1, #2
 8004642:	4618      	mov	r0, r3
 8004644:	f000 fb8a 	bl	8004d5c <RCCEx_PLL3_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800464e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
>>>>>>> dev
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
<<<<<<< HEAD
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
=======
 8004656:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
>>>>>>> dev
    } 
  }

  if (status == HAL_OK)
<<<<<<< HEAD
 8004602:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004616:	46bd      	mov	sp, r7
 8004618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461c:	58024400 	.word	0x58024400

08004620 <HAL_RCCEx_GetD3PCLK1Freq>:
=======
 800465e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004662:	2b00      	cmp	r3, #0
 8004664:	d101      	bne.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004666:	2300      	movs	r3, #0
 8004668:	e000      	b.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
}
 800466c:	4618      	mov	r0, r3
 800466e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004672:	46bd      	mov	sp, r7
 8004674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004678:	58024400 	.word	0x58024400

0800467c <HAL_RCCEx_GetD3PCLK1Freq>:
>>>>>>> dev
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
<<<<<<< HEAD
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004624:	f7fe fd96 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
=======
 800467c:	b580      	push	{r7, lr}
 800467e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004680:	f7fe fd96 	bl	80031b0 <HAL_RCC_GetHCLKFreq>
 8004684:	4602      	mov	r2, r0
 8004686:	4b06      	ldr	r3, [pc, #24]	@ (80046a0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	091b      	lsrs	r3, r3, #4
 800468c:	f003 0307 	and.w	r3, r3, #7
 8004690:	4904      	ldr	r1, [pc, #16]	@ (80046a4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004692:	5ccb      	ldrb	r3, [r1, r3]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
>>>>>>> dev
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
<<<<<<< HEAD
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	0800669c 	.word	0x0800669c

0800464c <HAL_RCCEx_GetPLL2ClockFreq>:
=======
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	58024400 	.word	0x58024400
 80046a4:	08009384 	.word	0x08009384

080046a8 <HAL_RCCEx_GetPLL2ClockFreq>:
>>>>>>> dev
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
<<<<<<< HEAD
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
=======
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	@ 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 8004654:	4ba1      	ldr	r3, [pc, #644]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800465e:	4b9f      	ldr	r3, [pc, #636]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	0b1b      	lsrs	r3, r3, #12
 8004664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800466a:	4b9c      	ldr	r3, [pc, #624]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004676:	4b99      	ldr	r3, [pc, #612]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8111 	beq.w	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f000 8083 	beq.w	80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d056      	beq.n	8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046b6:	e099      	b.n	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
=======
 80046b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b4:	f003 0303 	and.w	r3, r3, #3
 80046b8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80046ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046be:	0b1b      	lsrs	r3, r3, #12
 80046c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046c4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80046c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ca:	091b      	lsrs	r3, r3, #4
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80046d2:	4b99      	ldr	r3, [pc, #612]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046d6:	08db      	lsrs	r3, r3, #3
 80046d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	fb02 f303 	mul.w	r3, r2, r3
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8111 	beq.w	8004918 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b02      	cmp	r3, #2
 80046fa:	f000 8083 	beq.w	8004804 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	2b02      	cmp	r3, #2
 8004702:	f200 80a1 	bhi.w	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d056      	beq.n	80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004712:	e099      	b.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
>>>>>>> dev
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 80046b8:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c4:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a84      	ldr	r2, [pc, #528]	@ (80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b7b      	ldr	r3, [pc, #492]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 8004714:	4b88      	ldr	r3, [pc, #544]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0320 	and.w	r3, r3, #32
 800471c:	2b00      	cmp	r3, #0
 800471e:	d02d      	beq.n	800477c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004720:	4b85      	ldr	r3, [pc, #532]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	08db      	lsrs	r3, r3, #3
 8004726:	f003 0303 	and.w	r3, r3, #3
 800472a:	4a84      	ldr	r2, [pc, #528]	@ (800493c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
 8004730:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	ee07 3a90 	vmov	s15, r3
 8004738:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	ee07 3a90 	vmov	s15, r3
 8004742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004746:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800474a:	4b7b      	ldr	r3, [pc, #492]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800474c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800474e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004752:	ee07 3a90 	vmov	s15, r3
 8004756:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800475a:	ed97 6a03 	vldr	s12, [r7, #12]
 800475e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004762:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004766:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800476a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800476e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004772:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004776:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> dev
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
<<<<<<< HEAD
 800471e:	e087      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004762:	e065      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a03 	vldr	s12, [r7, #12]
 800478a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a6:	e043      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ea:	e021      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800485e:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004878:	edd7 6a07 	vldr	s13, [r7, #28]
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
=======
 800477a:	e087      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800477c:	697b      	ldr	r3, [r7, #20]
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004786:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004944 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800478a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800478e:	4b6a      	ldr	r3, [pc, #424]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004792:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479e:	ed97 6a03 	vldr	s12, [r7, #12]
 80047a2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047be:	e065      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d2:	4b59      	ldr	r3, [pc, #356]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047e6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004802:	e043      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800480e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800494c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b48      	ldr	r3, [pc, #288]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004846:	e021      	b.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004948 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b37      	ldr	r3, [pc, #220]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800488c:	4b2a      	ldr	r3, [pc, #168]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80048ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048be:	0c1b      	lsrs	r3, r3, #16
 80048c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048c4:	ee07 3a90 	vmov	s15, r3
 80048c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80048d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e0:	ee17 2a90 	vmov	r2, s15
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80048e8:	4b13      	ldr	r3, [pc, #76]	@ (8004938 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ec:	0e1b      	lsrs	r3, r3, #24
 80048ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004902:	edd7 6a07 	vldr	s13, [r7, #28]
 8004906:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490e:	ee17 2a90 	vmov	r2, s15
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	609a      	str	r2, [r3, #8]
>>>>>>> dev
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
<<<<<<< HEAD
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	@ 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4af42400 	.word	0x4af42400

080048f4 <HAL_RCCEx_GetPLL3ClockFreq>:
=======
 8004916:	e008      	b.n	800492a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
}
 800492a:	bf00      	nop
 800492c:	3724      	adds	r7, #36	@ 0x24
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	58024400 	.word	0x58024400
 800493c:	03d09000 	.word	0x03d09000
 8004940:	46000000 	.word	0x46000000
 8004944:	4c742400 	.word	0x4c742400
 8004948:	4a742400 	.word	0x4a742400
 800494c:	4af42400 	.word	0x4af42400

08004950 <HAL_RCCEx_GetPLL3ClockFreq>:
>>>>>>> dev
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
<<<<<<< HEAD
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
=======
 8004950:	b480      	push	{r7}
 8004952:	b089      	sub	sp, #36	@ 0x24
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
<<<<<<< HEAD
 80048fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004906:	4b9f      	ldr	r3, [pc, #636]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	0d1b      	lsrs	r3, r3, #20
 800490c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004912:	4b9c      	ldr	r3, [pc, #624]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800491e:	4b99      	ldr	r3, [pc, #612]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8111 	beq.w	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f000 8083 	beq.w	8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f200 80a1 	bhi.w	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d056      	beq.n	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800495e:	e099      	b.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
=======
 8004958:	4ba1      	ldr	r3, [pc, #644]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800495c:	f003 0303 	and.w	r3, r3, #3
 8004960:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004962:	4b9f      	ldr	r3, [pc, #636]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004966:	0d1b      	lsrs	r3, r3, #20
 8004968:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800496c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800496e:	4b9c      	ldr	r3, [pc, #624]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	0a1b      	lsrs	r3, r3, #8
 8004974:	f003 0301 	and.w	r3, r3, #1
 8004978:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800497a:	4b99      	ldr	r3, [pc, #612]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497e:	08db      	lsrs	r3, r3, #3
 8004980:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	fb02 f303 	mul.w	r3, r2, r3
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f000 8111 	beq.w	8004bc0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	f000 8083 	beq.w	8004aac <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	f200 80a1 	bhi.w	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d003      	beq.n	80049bc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	2b01      	cmp	r3, #1
 80049b8:	d056      	beq.n	8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80049ba:	e099      	b.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
>>>>>>> dev
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
<<<<<<< HEAD
 8004960:	4b88      	ldr	r3, [pc, #544]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800496c:	4b85      	ldr	r3, [pc, #532]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	4a84      	ldr	r2, [pc, #528]	@ (8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
=======
 80049bc:	4b88      	ldr	r3, [pc, #544]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d02d      	beq.n	8004a24 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80049c8:	4b85      	ldr	r3, [pc, #532]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	08db      	lsrs	r3, r3, #3
 80049ce:	f003 0303 	and.w	r3, r3, #3
 80049d2:	4a84      	ldr	r2, [pc, #528]	@ (8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80049d4:	fa22 f303 	lsr.w	r3, r2, r3
 80049d8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	ee07 3a90 	vmov	s15, r3
 80049ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049f2:	4b7b      	ldr	r3, [pc, #492]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049fa:	ee07 3a90 	vmov	s15, r3
 80049fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a06:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a1e:	edc7 7a07 	vstr	s15, [r7, #28]
>>>>>>> dev
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
<<<<<<< HEAD
 80049c6:	e087      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b6a      	ldr	r3, [pc, #424]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0a:	e065      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e043      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b48      	ldr	r3, [pc, #288]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e021      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afe:	ee17 2a90 	vmov	r2, s15
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2c:	ee17 2a90 	vmov	r2, s15
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
=======
 8004a22:	e087      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a2e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bec <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a36:	4b6a      	ldr	r3, [pc, #424]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a66:	e065      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a72:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7a:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a8e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aaa:	e043      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ab6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b48      	ldr	r3, [pc, #288]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aee:	e021      	b.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bf0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b37      	ldr	r3, [pc, #220]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b34:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	0a5b      	lsrs	r3, r3, #9
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b62:	4b1f      	ldr	r3, [pc, #124]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	0c1b      	lsrs	r3, r3, #16
 8004b68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6c:	ee07 3a90 	vmov	s15, r3
 8004b70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b88:	ee17 2a90 	vmov	r2, s15
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b90:	4b13      	ldr	r3, [pc, #76]	@ (8004be0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b94:	0e1b      	lsrs	r3, r3, #24
 8004b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ba2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ba6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004baa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb6:	ee17 2a90 	vmov	r2, s15
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]
>>>>>>> dev
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
<<<<<<< HEAD
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
 8004b88:	03d09000 	.word	0x03d09000
 8004b8c:	46000000 	.word	0x46000000
 8004b90:	4c742400 	.word	0x4c742400
 8004b94:	4a742400 	.word	0x4a742400
 8004b98:	4af42400 	.word	0x4af42400

08004b9c <RCCEx_PLL2_Config>:
=======
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
}
 8004bd2:	bf00      	nop
 8004bd4:	3724      	adds	r7, #36	@ 0x24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	58024400 	.word	0x58024400
 8004be4:	03d09000 	.word	0x03d09000
 8004be8:	46000000 	.word	0x46000000
 8004bec:	4c742400 	.word	0x4c742400
 8004bf0:	4a742400 	.word	0x4a742400
 8004bf4:	4af42400 	.word	0x4af42400

08004bf8 <RCCEx_PLL2_Config>:
>>>>>>> dev
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
<<<<<<< HEAD
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
=======
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c02:	2300      	movs	r3, #0
 8004c04:	73fb      	strb	r3, [r7, #15]
>>>>>>> dev
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d101      	bne.n	8004bba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e099      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
=======
 8004c06:	4b53      	ldr	r3, [pc, #332]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d101      	bne.n	8004c16 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e099      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>
>>>>>>> dev


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
<<<<<<< HEAD
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fa8f 	bl	80010e8 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bce:	f7fc fa8b 	bl	80010e8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e086      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <RCCEx_PLL2_Config+0x32>
=======
 8004c16:	4b4f      	ldr	r3, [pc, #316]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a4e      	ldr	r2, [pc, #312]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c1c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c22:	f7fc fa8f 	bl	8001144 <HAL_GetTick>
 8004c26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c28:	e008      	b.n	8004c3c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c2a:	f7fc fa8b 	bl	8001144 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d901      	bls.n	8004c3c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e086      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c3c:	4b45      	ldr	r3, [pc, #276]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1f0      	bne.n	8004c2a <RCCEx_PLL2_Config+0x32>
>>>>>>> dev
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
<<<<<<< HEAD
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	025b      	lsls	r3, r3, #9
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c30:	4931      	ldr	r1, [pc, #196]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	638b      	str	r3, [r1, #56]	@ 0x38
=======
 8004c48:	4b42      	ldr	r3, [pc, #264]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	031b      	lsls	r3, r3, #12
 8004c56:	493f      	ldr	r1, [pc, #252]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	3b01      	subs	r3, #1
 8004c62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	025b      	lsls	r3, r3, #9
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	431a      	orrs	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	3b01      	subs	r3, #1
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c7e:	431a      	orrs	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	3b01      	subs	r3, #1
 8004c86:	061b      	lsls	r3, r3, #24
 8004c88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c8c:	4931      	ldr	r1, [pc, #196]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	638b      	str	r3, [r1, #56]	@ 0x38
>>>>>>> dev
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
<<<<<<< HEAD
 8004c36:	4b30      	ldr	r3, [pc, #192]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	492d      	ldr	r1, [pc, #180]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f023 0220 	bic.w	r2, r3, #32
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4928      	ldr	r1, [pc, #160]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <RCCEx_PLL2_Config+0x160>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	69d2      	ldr	r2, [r2, #28]
 8004c72:	00d2      	lsls	r2, r2, #3
 8004c74:	4920      	ldr	r1, [pc, #128]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	f043 0310 	orr.w	r3, r3, #16
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c98:	e00f      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cac:	e005      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
=======
 8004c92:	4b30      	ldr	r3, [pc, #192]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c96:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	492d      	ldr	r1, [pc, #180]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	f023 0220 	bic.w	r2, r3, #32
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	4928      	ldr	r1, [pc, #160]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004cb6:	4b27      	ldr	r3, [pc, #156]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	4a26      	ldr	r2, [pc, #152]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	f023 0310 	bic.w	r3, r3, #16
 8004cc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004cc2:	4b24      	ldr	r3, [pc, #144]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc6:	4b24      	ldr	r3, [pc, #144]	@ (8004d58 <RCCEx_PLL2_Config+0x160>)
 8004cc8:	4013      	ands	r3, r2
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	69d2      	ldr	r2, [r2, #28]
 8004cce:	00d2      	lsls	r2, r2, #3
 8004cd0:	4920      	ldr	r1, [pc, #128]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004cd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	4a1e      	ldr	r2, [pc, #120]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cdc:	f043 0310 	orr.w	r3, r3, #16
 8004ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d106      	bne.n	8004cf6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cec:	4a19      	ldr	r2, [pc, #100]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004cf2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cf4:	e00f      	b.n	8004d16 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	2b01      	cmp	r3, #1
 8004cfa:	d106      	bne.n	8004d0a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004cfc:	4b15      	ldr	r3, [pc, #84]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	4a14      	ldr	r2, [pc, #80]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d08:	e005      	b.n	8004d16 <RCCEx_PLL2_Config+0x11e>
>>>>>>> dev
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
<<<<<<< HEAD
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a11      	ldr	r2, [pc, #68]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 8004d0a:	4b12      	ldr	r3, [pc, #72]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d0e:	4a11      	ldr	r2, [pc, #68]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> dev
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
<<<<<<< HEAD
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fa0f 	bl	80010e8 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cce:	f7fc fa0b 	bl	80010e8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <RCCEx_PLL2_Config+0x132>
=======
 8004d16:	4b0f      	ldr	r3, [pc, #60]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc fa0f 	bl	8001144 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d2a:	f7fc fa0b 	bl	8001144 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e006      	b.n	8004d4a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d3c:	4b05      	ldr	r3, [pc, #20]	@ (8004d54 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <RCCEx_PLL2_Config+0x132>
>>>>>>> dev
    }

  }


  return status;
<<<<<<< HEAD
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	ffff0007 	.word	0xffff0007

08004d00 <RCCEx_PLL3_Config>:
=======
 8004d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	bf00      	nop
 8004d54:	58024400 	.word	0x58024400
 8004d58:	ffff0007 	.word	0xffff0007

08004d5c <RCCEx_PLL3_Config>:
>>>>>>> dev
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
<<<<<<< HEAD
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
=======
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b084      	sub	sp, #16
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d66:	2300      	movs	r3, #0
 8004d68:	73fb      	strb	r3, [r7, #15]
>>>>>>> dev
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
<<<<<<< HEAD
 8004d0e:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d101      	bne.n	8004d1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e099      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
=======
 8004d6a:	4b53      	ldr	r3, [pc, #332]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d101      	bne.n	8004d7a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e099      	b.n	8004eae <RCCEx_PLL3_Config+0x152>
>>>>>>> dev


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
<<<<<<< HEAD
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4e      	ldr	r2, [pc, #312]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f9dd 	bl	80010e8 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d32:	f7fc f9d9 	bl	80010e8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e086      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d44:	4b45      	ldr	r3, [pc, #276]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <RCCEx_PLL3_Config+0x32>
=======
 8004d7a:	4b4f      	ldr	r3, [pc, #316]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a4e      	ldr	r2, [pc, #312]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d86:	f7fc f9dd 	bl	8001144 <HAL_GetTick>
 8004d8a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d8c:	e008      	b.n	8004da0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d8e:	f7fc f9d9 	bl	8001144 <HAL_GetTick>
 8004d92:	4602      	mov	r2, r0
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	d901      	bls.n	8004da0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e086      	b.n	8004eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004da0:	4b45      	ldr	r3, [pc, #276]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f0      	bne.n	8004d8e <RCCEx_PLL3_Config+0x32>
>>>>>>> dev
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
<<<<<<< HEAD
 8004d50:	4b42      	ldr	r3, [pc, #264]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	493f      	ldr	r1, [pc, #252]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d94:	4931      	ldr	r1, [pc, #196]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	640b      	str	r3, [r1, #64]	@ 0x40
=======
 8004dac:	4b42      	ldr	r3, [pc, #264]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004db0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	051b      	lsls	r3, r3, #20
 8004dba:	493f      	ldr	r1, [pc, #252]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	025b      	lsls	r3, r3, #9
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	431a      	orrs	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	3b01      	subs	r3, #1
 8004ddc:	041b      	lsls	r3, r3, #16
 8004dde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	061b      	lsls	r3, r3, #24
 8004dec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004df0:	4931      	ldr	r1, [pc, #196]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	640b      	str	r3, [r1, #64]	@ 0x40
>>>>>>> dev
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
<<<<<<< HEAD
 8004d9a:	4b30      	ldr	r3, [pc, #192]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	492d      	ldr	r1, [pc, #180]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4928      	ldr	r1, [pc, #160]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dbe:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dce:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <RCCEx_PLL3_Config+0x160>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	69d2      	ldr	r2, [r2, #28]
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4920      	ldr	r1, [pc, #128]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dde:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dfc:	e00f      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e10:	e005      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
=======
 8004df6:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	695b      	ldr	r3, [r3, #20]
 8004e02:	492d      	ldr	r1, [pc, #180]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	4928      	ldr	r1, [pc, #160]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e1a:	4b27      	ldr	r3, [pc, #156]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1e:	4a26      	ldr	r2, [pc, #152]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e2a:	4b24      	ldr	r3, [pc, #144]	@ (8004ebc <RCCEx_PLL3_Config+0x160>)
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	69d2      	ldr	r2, [r2, #28]
 8004e32:	00d2      	lsls	r2, r2, #3
 8004e34:	4920      	ldr	r1, [pc, #128]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e3a:	4b1f      	ldr	r3, [pc, #124]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3e:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e44:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d106      	bne.n	8004e5a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	4a19      	ldr	r2, [pc, #100]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e52:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004e56:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e58:	e00f      	b.n	8004e7a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d106      	bne.n	8004e6e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e60:	4b15      	ldr	r3, [pc, #84]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	4a14      	ldr	r2, [pc, #80]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e66:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e6c:	e005      	b.n	8004e7a <RCCEx_PLL3_Config+0x11e>
>>>>>>> dev
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
<<<<<<< HEAD
 8004e12:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
=======
 8004e6e:	4b12      	ldr	r3, [pc, #72]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	4a11      	ldr	r2, [pc, #68]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
>>>>>>> dev
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
<<<<<<< HEAD
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc f95d 	bl	80010e8 <HAL_GetTick>
 8004e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e32:	f7fc f959 	bl	80010e8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <RCCEx_PLL3_Config+0x132>
=======
 8004e7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a0e      	ldr	r2, [pc, #56]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e86:	f7fc f95d 	bl	8001144 <HAL_GetTick>
 8004e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e8c:	e008      	b.n	8004ea0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e8e:	f7fc f959 	bl	8001144 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e006      	b.n	8004eae <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ea0:	4b05      	ldr	r3, [pc, #20]	@ (8004eb8 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <RCCEx_PLL3_Config+0x132>
>>>>>>> dev
    }

  }


  return status;
<<<<<<< HEAD
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	ffff0007 	.word	0xffff0007

08004e64 <HAL_UART_Init>:
=======
 8004eac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	58024400 	.word	0x58024400
 8004ebc:	ffff0007 	.word	0xffff0007

08004ec0 <HAL_UART_Init>:
>>>>>>> dev
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e042      	b.n	8004efc <HAL_UART_Init+0x98>
=======
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d101      	bne.n	8004ed2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e042      	b.n	8004f58 <HAL_UART_Init+0x98>
>>>>>>> dev
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
<<<<<<< HEAD
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
=======
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d106      	bne.n	8004eea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84
>>>>>>> dev

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
<<<<<<< HEAD
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fb fedf 	bl	8000c4c <HAL_UART_MspInit>
=======
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f7fb fedd 	bl	8000ca4 <HAL_UART_MspInit>
>>>>>>> dev
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
<<<<<<< HEAD
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2224      	movs	r2, #36	@ 0x24
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]
=======
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2224      	movs	r2, #36	@ 0x24
 8004eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f022 0201 	bic.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
>>>>>>> dev

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
<<<<<<< HEAD
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fd90 	bl	80059d4 <UART_AdvFeatureConfig>
=======
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 fd90 	bl	8005a30 <UART_AdvFeatureConfig>
>>>>>>> dev
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
<<<<<<< HEAD
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f825 	bl	8004f04 <UART_SetConfig>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01b      	b.n	8004efc <HAL_UART_Init+0x98>
=======
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f825 	bl	8004f60 <UART_SetConfig>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d101      	bne.n	8004f20 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e01b      	b.n	8004f58 <HAL_UART_Init+0x98>
>>>>>>> dev
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
<<<<<<< HEAD
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fe0f 	bl	8005b18 <UART_CheckIdleState>
 8004efa:	4603      	mov	r3, r0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_SetConfig>:
=======
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fe0f 	bl	8005b74 <UART_CheckIdleState>
 8004f56:	4603      	mov	r3, r0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <UART_SetConfig>:
>>>>>>> dev
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8004f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f08:	b092      	sub	sp, #72	@ 0x48
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6178      	str	r0, [r7, #20]
=======
 8004f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f64:	b092      	sub	sp, #72	@ 0x48
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6178      	str	r0, [r7, #20]
>>>>>>> dev
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
<<<<<<< HEAD
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
=======
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
>>>>>>> dev
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
<<<<<<< HEAD
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4bbe      	ldr	r3, [pc, #760]	@ (800522c <UART_SetConfig+0x328>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]
=======
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	431a      	orrs	r2, r3
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	69db      	ldr	r3, [r3, #28]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4bbe      	ldr	r3, [pc, #760]	@ (8005288 <UART_SetConfig+0x328>)
 8004f90:	4013      	ands	r3, r2
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	6812      	ldr	r2, [r2, #0]
 8004f96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6013      	str	r3, [r2, #0]
>>>>>>> dev

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
<<<<<<< HEAD
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
=======
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	68da      	ldr	r2, [r3, #12]
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
>>>>>>> dev
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
<<<<<<< HEAD
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4ab3      	ldr	r2, [pc, #716]	@ (8005230 <UART_SetConfig+0x32c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	4baf      	ldr	r3, [pc, #700]	@ (8005234 <UART_SetConfig+0x330>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]
=======
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	699b      	ldr	r3, [r3, #24]
 8004fb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4ab3      	ldr	r2, [pc, #716]	@ (800528c <UART_SetConfig+0x32c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fc8:	4313      	orrs	r3, r2
 8004fca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4baf      	ldr	r3, [pc, #700]	@ (8005290 <UART_SetConfig+0x330>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	6812      	ldr	r2, [r2, #0]
 8004fda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004fdc:	430b      	orrs	r3, r1
 8004fde:	6093      	str	r3, [r2, #8]
>>>>>>> dev

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
<<<<<<< HEAD
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4aa6      	ldr	r2, [pc, #664]	@ (8005238 <UART_SetConfig+0x334>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d177      	bne.n	8005094 <UART_SetConfig+0x190>
 8004fa4:	4ba5      	ldr	r3, [pc, #660]	@ (800523c <UART_SetConfig+0x338>)
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fac:	2b28      	cmp	r3, #40	@ 0x28
 8004fae:	d86d      	bhi.n	800508c <UART_SetConfig+0x188>
 8004fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0xb4>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	0800505d 	.word	0x0800505d
 8004fbc:	0800508d 	.word	0x0800508d
 8004fc0:	0800508d 	.word	0x0800508d
 8004fc4:	0800508d 	.word	0x0800508d
 8004fc8:	0800508d 	.word	0x0800508d
 8004fcc:	0800508d 	.word	0x0800508d
 8004fd0:	0800508d 	.word	0x0800508d
 8004fd4:	0800508d 	.word	0x0800508d
 8004fd8:	08005065 	.word	0x08005065
 8004fdc:	0800508d 	.word	0x0800508d
 8004fe0:	0800508d 	.word	0x0800508d
 8004fe4:	0800508d 	.word	0x0800508d
 8004fe8:	0800508d 	.word	0x0800508d
 8004fec:	0800508d 	.word	0x0800508d
 8004ff0:	0800508d 	.word	0x0800508d
 8004ff4:	0800508d 	.word	0x0800508d
 8004ff8:	0800506d 	.word	0x0800506d
 8004ffc:	0800508d 	.word	0x0800508d
 8005000:	0800508d 	.word	0x0800508d
 8005004:	0800508d 	.word	0x0800508d
 8005008:	0800508d 	.word	0x0800508d
 800500c:	0800508d 	.word	0x0800508d
 8005010:	0800508d 	.word	0x0800508d
 8005014:	0800508d 	.word	0x0800508d
 8005018:	08005075 	.word	0x08005075
 800501c:	0800508d 	.word	0x0800508d
 8005020:	0800508d 	.word	0x0800508d
 8005024:	0800508d 	.word	0x0800508d
 8005028:	0800508d 	.word	0x0800508d
 800502c:	0800508d 	.word	0x0800508d
 8005030:	0800508d 	.word	0x0800508d
 8005034:	0800508d 	.word	0x0800508d
 8005038:	0800507d 	.word	0x0800507d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800508d 	.word	0x0800508d
 8005044:	0800508d 	.word	0x0800508d
 8005048:	0800508d 	.word	0x0800508d
 800504c:	0800508d 	.word	0x0800508d
 8005050:	0800508d 	.word	0x0800508d
 8005054:	0800508d 	.word	0x0800508d
 8005058:	08005085 	.word	0x08005085
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e222      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005064:	2304      	movs	r3, #4
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e21e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800506c:	2308      	movs	r3, #8
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e21a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e216      	b.n	80054aa <UART_SetConfig+0x5a6>
 800507c:	2320      	movs	r3, #32
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e212      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005084:	2340      	movs	r3, #64	@ 0x40
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e20e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e20a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a69      	ldr	r2, [pc, #420]	@ (8005240 <UART_SetConfig+0x33c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d130      	bne.n	8005100 <UART_SetConfig+0x1fc>
 800509e:	4b67      	ldr	r3, [pc, #412]	@ (800523c <UART_SetConfig+0x338>)
 80050a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d826      	bhi.n	80050f8 <UART_SetConfig+0x1f4>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <UART_SetConfig+0x1ac>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c9 	.word	0x080050c9
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050d9 	.word	0x080050d9
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e1ec      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e1e8      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e1e4      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e1e0      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050e8:	2320      	movs	r3, #32
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e1dc      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050f0:	2340      	movs	r3, #64	@ 0x40
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e1d8      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e1d4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4f      	ldr	r2, [pc, #316]	@ (8005244 <UART_SetConfig+0x340>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d130      	bne.n	800516c <UART_SetConfig+0x268>
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <UART_SetConfig+0x338>)
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b05      	cmp	r3, #5
 8005114:	d826      	bhi.n	8005164 <UART_SetConfig+0x260>
 8005116:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <UART_SetConfig+0x218>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005135 	.word	0x08005135
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005145 	.word	0x08005145
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e1b6      	b.n	80054aa <UART_SetConfig+0x5a6>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e1b2      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e1ae      	b.n	80054aa <UART_SetConfig+0x5a6>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e1aa      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005154:	2320      	movs	r3, #32
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e1a6      	b.n	80054aa <UART_SetConfig+0x5a6>
 800515c:	2340      	movs	r3, #64	@ 0x40
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e1a2      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e19e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <UART_SetConfig+0x344>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d130      	bne.n	80051d8 <UART_SetConfig+0x2d4>
 8005176:	4b31      	ldr	r3, [pc, #196]	@ (800523c <UART_SetConfig+0x338>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	2b05      	cmp	r3, #5
 8005180:	d826      	bhi.n	80051d0 <UART_SetConfig+0x2cc>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <UART_SetConfig+0x284>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051a1 	.word	0x080051a1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051b1 	.word	0x080051b1
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e180      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e17c      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e178      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e174      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051c0:	2320      	movs	r3, #32
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e170      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051c8:	2340      	movs	r3, #64	@ 0x40
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e16c      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e168      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	@ (800524c <UART_SetConfig+0x348>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d142      	bne.n	8005268 <UART_SetConfig+0x364>
 80051e2:	4b16      	ldr	r3, [pc, #88]	@ (800523c <UART_SetConfig+0x338>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d838      	bhi.n	8005260 <UART_SetConfig+0x35c>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <UART_SetConfig+0x2f0>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005225 	.word	0x08005225
 8005204:	08005251 	.word	0x08005251
 8005208:	08005259 	.word	0x08005259
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e14a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e146      	b.n	80054aa <UART_SetConfig+0x5a6>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e142      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e13e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800522c:	cfff69f3 	.word	0xcfff69f3
 8005230:	58000c00 	.word	0x58000c00
 8005234:	11fff4ff 	.word	0x11fff4ff
 8005238:	40011000 	.word	0x40011000
 800523c:	58024400 	.word	0x58024400
 8005240:	40004400 	.word	0x40004400
 8005244:	40004800 	.word	0x40004800
 8005248:	40004c00 	.word	0x40004c00
 800524c:	40005000 	.word	0x40005000
 8005250:	2320      	movs	r3, #32
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e128      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005258:	2340      	movs	r3, #64	@ 0x40
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e124      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e120      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4acb      	ldr	r2, [pc, #812]	@ (800559c <UART_SetConfig+0x698>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d176      	bne.n	8005360 <UART_SetConfig+0x45c>
 8005272:	4bcb      	ldr	r3, [pc, #812]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800527a:	2b28      	cmp	r3, #40	@ 0x28
 800527c:	d86c      	bhi.n	8005358 <UART_SetConfig+0x454>
 800527e:	a201      	add	r2, pc, #4	@ (adr r2, 8005284 <UART_SetConfig+0x380>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	08005329 	.word	0x08005329
 8005288:	08005359 	.word	0x08005359
 800528c:	08005359 	.word	0x08005359
 8005290:	08005359 	.word	0x08005359
 8005294:	08005359 	.word	0x08005359
 8005298:	08005359 	.word	0x08005359
 800529c:	08005359 	.word	0x08005359
 80052a0:	08005359 	.word	0x08005359
 80052a4:	08005331 	.word	0x08005331
 80052a8:	08005359 	.word	0x08005359
 80052ac:	08005359 	.word	0x08005359
 80052b0:	08005359 	.word	0x08005359
 80052b4:	08005359 	.word	0x08005359
 80052b8:	08005359 	.word	0x08005359
 80052bc:	08005359 	.word	0x08005359
 80052c0:	08005359 	.word	0x08005359
 80052c4:	08005339 	.word	0x08005339
 80052c8:	08005359 	.word	0x08005359
 80052cc:	08005359 	.word	0x08005359
 80052d0:	08005359 	.word	0x08005359
 80052d4:	08005359 	.word	0x08005359
 80052d8:	08005359 	.word	0x08005359
 80052dc:	08005359 	.word	0x08005359
 80052e0:	08005359 	.word	0x08005359
 80052e4:	08005341 	.word	0x08005341
 80052e8:	08005359 	.word	0x08005359
 80052ec:	08005359 	.word	0x08005359
 80052f0:	08005359 	.word	0x08005359
 80052f4:	08005359 	.word	0x08005359
 80052f8:	08005359 	.word	0x08005359
 80052fc:	08005359 	.word	0x08005359
 8005300:	08005359 	.word	0x08005359
 8005304:	08005349 	.word	0x08005349
 8005308:	08005359 	.word	0x08005359
 800530c:	08005359 	.word	0x08005359
 8005310:	08005359 	.word	0x08005359
 8005314:	08005359 	.word	0x08005359
 8005318:	08005359 	.word	0x08005359
 800531c:	08005359 	.word	0x08005359
 8005320:	08005359 	.word	0x08005359
 8005324:	08005351 	.word	0x08005351
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e0bc      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e0b8      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e0b4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e0b0      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005348:	2320      	movs	r3, #32
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e0ac      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005350:	2340      	movs	r3, #64	@ 0x40
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e0a8      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005358:	2380      	movs	r3, #128	@ 0x80
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e0a4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a8f      	ldr	r2, [pc, #572]	@ (80055a4 <UART_SetConfig+0x6a0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d130      	bne.n	80053cc <UART_SetConfig+0x4c8>
 800536a:	4b8d      	ldr	r3, [pc, #564]	@ (80055a0 <UART_SetConfig+0x69c>)
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	2b05      	cmp	r3, #5
 8005374:	d826      	bhi.n	80053c4 <UART_SetConfig+0x4c0>
 8005376:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <UART_SetConfig+0x478>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005395 	.word	0x08005395
 8005380:	0800539d 	.word	0x0800539d
 8005384:	080053a5 	.word	0x080053a5
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e086      	b.n	80054aa <UART_SetConfig+0x5a6>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e082      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e07e      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e07a      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053b4:	2320      	movs	r3, #32
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e076      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e072      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e06e      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a75      	ldr	r2, [pc, #468]	@ (80055a8 <UART_SetConfig+0x6a4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d130      	bne.n	8005438 <UART_SetConfig+0x534>
 80053d6:	4b72      	ldr	r3, [pc, #456]	@ (80055a0 <UART_SetConfig+0x69c>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d826      	bhi.n	8005430 <UART_SetConfig+0x52c>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x4e4>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005409 	.word	0x08005409
 80053f0:	08005411 	.word	0x08005411
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e050      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e04c      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e048      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e044      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005420:	2320      	movs	r3, #32
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e040      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005428:	2340      	movs	r3, #64	@ 0x40
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e03c      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e038      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5b      	ldr	r2, [pc, #364]	@ (80055ac <UART_SetConfig+0x6a8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d130      	bne.n	80054a4 <UART_SetConfig+0x5a0>
 8005442:	4b57      	ldr	r3, [pc, #348]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b05      	cmp	r3, #5
 800544c:	d826      	bhi.n	800549c <UART_SetConfig+0x598>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0x550>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005475 	.word	0x08005475
 800545c:	0800547d 	.word	0x0800547d
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x5a6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e00e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800548c:	2320      	movs	r3, #32
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e00a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005494:	2340      	movs	r3, #64	@ 0x40
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e006      	b.n	80054aa <UART_SetConfig+0x5a6>
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e002      	b.n	80054aa <UART_SetConfig+0x5a6>
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <UART_SetConfig+0x6a8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	f040 80f8 	bne.w	80056a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	dc46      	bgt.n	800554c <UART_SetConfig+0x648>
 80054be:	2b02      	cmp	r3, #2
 80054c0:	f2c0 8082 	blt.w	80055c8 <UART_SetConfig+0x6c4>
 80054c4:	3b02      	subs	r3, #2
 80054c6:	2b1e      	cmp	r3, #30
 80054c8:	d87e      	bhi.n	80055c8 <UART_SetConfig+0x6c4>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <UART_SetConfig+0x5cc>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005553 	.word	0x08005553
 80054d4:	080055c9 	.word	0x080055c9
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	080055c9 	.word	0x080055c9
 80054e0:	080055c9 	.word	0x080055c9
 80054e4:	080055c9 	.word	0x080055c9
 80054e8:	0800556b 	.word	0x0800556b
 80054ec:	080055c9 	.word	0x080055c9
 80054f0:	080055c9 	.word	0x080055c9
 80054f4:	080055c9 	.word	0x080055c9
 80054f8:	080055c9 	.word	0x080055c9
 80054fc:	080055c9 	.word	0x080055c9
 8005500:	080055c9 	.word	0x080055c9
 8005504:	080055c9 	.word	0x080055c9
 8005508:	0800557b 	.word	0x0800557b
 800550c:	080055c9 	.word	0x080055c9
 8005510:	080055c9 	.word	0x080055c9
 8005514:	080055c9 	.word	0x080055c9
 8005518:	080055c9 	.word	0x080055c9
 800551c:	080055c9 	.word	0x080055c9
 8005520:	080055c9 	.word	0x080055c9
 8005524:	080055c9 	.word	0x080055c9
 8005528:	080055c9 	.word	0x080055c9
 800552c:	080055c9 	.word	0x080055c9
 8005530:	080055c9 	.word	0x080055c9
 8005534:	080055c9 	.word	0x080055c9
 8005538:	080055c9 	.word	0x080055c9
 800553c:	080055c9 	.word	0x080055c9
 8005540:	080055c9 	.word	0x080055c9
 8005544:	080055c9 	.word	0x080055c9
 8005548:	080055bb 	.word	0x080055bb
 800554c:	2b40      	cmp	r3, #64	@ 0x40
 800554e:	d037      	beq.n	80055c0 <UART_SetConfig+0x6bc>
 8005550:	e03a      	b.n	80055c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005552:	f7ff f865 	bl	8004620 <HAL_RCCEx_GetD3PCLK1Freq>
 8005556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005558:	e03c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f874 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e034      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f9c0 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005578:	e02c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <UART_SetConfig+0x69c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	4a07      	ldr	r2, [pc, #28]	@ (80055b0 <UART_SetConfig+0x6ac>)
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fe6:	f023 010f 	bic.w	r1, r3, #15
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4aa6      	ldr	r2, [pc, #664]	@ (8005294 <UART_SetConfig+0x334>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d177      	bne.n	80050f0 <UART_SetConfig+0x190>
 8005000:	4ba5      	ldr	r3, [pc, #660]	@ (8005298 <UART_SetConfig+0x338>)
 8005002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005008:	2b28      	cmp	r3, #40	@ 0x28
 800500a:	d86d      	bhi.n	80050e8 <UART_SetConfig+0x188>
 800500c:	a201      	add	r2, pc, #4	@ (adr r2, 8005014 <UART_SetConfig+0xb4>)
 800500e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005012:	bf00      	nop
 8005014:	080050b9 	.word	0x080050b9
 8005018:	080050e9 	.word	0x080050e9
 800501c:	080050e9 	.word	0x080050e9
 8005020:	080050e9 	.word	0x080050e9
 8005024:	080050e9 	.word	0x080050e9
 8005028:	080050e9 	.word	0x080050e9
 800502c:	080050e9 	.word	0x080050e9
 8005030:	080050e9 	.word	0x080050e9
 8005034:	080050c1 	.word	0x080050c1
 8005038:	080050e9 	.word	0x080050e9
 800503c:	080050e9 	.word	0x080050e9
 8005040:	080050e9 	.word	0x080050e9
 8005044:	080050e9 	.word	0x080050e9
 8005048:	080050e9 	.word	0x080050e9
 800504c:	080050e9 	.word	0x080050e9
 8005050:	080050e9 	.word	0x080050e9
 8005054:	080050c9 	.word	0x080050c9
 8005058:	080050e9 	.word	0x080050e9
 800505c:	080050e9 	.word	0x080050e9
 8005060:	080050e9 	.word	0x080050e9
 8005064:	080050e9 	.word	0x080050e9
 8005068:	080050e9 	.word	0x080050e9
 800506c:	080050e9 	.word	0x080050e9
 8005070:	080050e9 	.word	0x080050e9
 8005074:	080050d1 	.word	0x080050d1
 8005078:	080050e9 	.word	0x080050e9
 800507c:	080050e9 	.word	0x080050e9
 8005080:	080050e9 	.word	0x080050e9
 8005084:	080050e9 	.word	0x080050e9
 8005088:	080050e9 	.word	0x080050e9
 800508c:	080050e9 	.word	0x080050e9
 8005090:	080050e9 	.word	0x080050e9
 8005094:	080050d9 	.word	0x080050d9
 8005098:	080050e9 	.word	0x080050e9
 800509c:	080050e9 	.word	0x080050e9
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	080050e9 	.word	0x080050e9
 80050a8:	080050e9 	.word	0x080050e9
 80050ac:	080050e9 	.word	0x080050e9
 80050b0:	080050e9 	.word	0x080050e9
 80050b4:	080050e1 	.word	0x080050e1
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050be:	e222      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050c0:	2304      	movs	r3, #4
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e21e      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050c8:	2308      	movs	r3, #8
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e21a      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e216      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050d8:	2320      	movs	r3, #32
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e212      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050e0:	2340      	movs	r3, #64	@ 0x40
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e20e      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050e8:	2380      	movs	r3, #128	@ 0x80
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e20a      	b.n	8005506 <UART_SetConfig+0x5a6>
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a69      	ldr	r2, [pc, #420]	@ (800529c <UART_SetConfig+0x33c>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d130      	bne.n	800515c <UART_SetConfig+0x1fc>
 80050fa:	4b67      	ldr	r3, [pc, #412]	@ (8005298 <UART_SetConfig+0x338>)
 80050fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b05      	cmp	r3, #5
 8005104:	d826      	bhi.n	8005154 <UART_SetConfig+0x1f4>
 8005106:	a201      	add	r2, pc, #4	@ (adr r2, 800510c <UART_SetConfig+0x1ac>)
 8005108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800510c:	08005125 	.word	0x08005125
 8005110:	0800512d 	.word	0x0800512d
 8005114:	08005135 	.word	0x08005135
 8005118:	0800513d 	.word	0x0800513d
 800511c:	08005145 	.word	0x08005145
 8005120:	0800514d 	.word	0x0800514d
 8005124:	2300      	movs	r3, #0
 8005126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512a:	e1ec      	b.n	8005506 <UART_SetConfig+0x5a6>
 800512c:	2304      	movs	r3, #4
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005132:	e1e8      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005134:	2308      	movs	r3, #8
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e1e4      	b.n	8005506 <UART_SetConfig+0x5a6>
 800513c:	2310      	movs	r3, #16
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e1e0      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005144:	2320      	movs	r3, #32
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e1dc      	b.n	8005506 <UART_SetConfig+0x5a6>
 800514c:	2340      	movs	r3, #64	@ 0x40
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e1d8      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e1d4      	b.n	8005506 <UART_SetConfig+0x5a6>
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a4f      	ldr	r2, [pc, #316]	@ (80052a0 <UART_SetConfig+0x340>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d130      	bne.n	80051c8 <UART_SetConfig+0x268>
 8005166:	4b4c      	ldr	r3, [pc, #304]	@ (8005298 <UART_SetConfig+0x338>)
 8005168:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b05      	cmp	r3, #5
 8005170:	d826      	bhi.n	80051c0 <UART_SetConfig+0x260>
 8005172:	a201      	add	r2, pc, #4	@ (adr r2, 8005178 <UART_SetConfig+0x218>)
 8005174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005178:	08005191 	.word	0x08005191
 800517c:	08005199 	.word	0x08005199
 8005180:	080051a1 	.word	0x080051a1
 8005184:	080051a9 	.word	0x080051a9
 8005188:	080051b1 	.word	0x080051b1
 800518c:	080051b9 	.word	0x080051b9
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e1b6      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005198:	2304      	movs	r3, #4
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e1b2      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051a0:	2308      	movs	r3, #8
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e1ae      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051a8:	2310      	movs	r3, #16
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e1aa      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051b0:	2320      	movs	r3, #32
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e1a6      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051b8:	2340      	movs	r3, #64	@ 0x40
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e1a2      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051c0:	2380      	movs	r3, #128	@ 0x80
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e19e      	b.n	8005506 <UART_SetConfig+0x5a6>
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a35      	ldr	r2, [pc, #212]	@ (80052a4 <UART_SetConfig+0x344>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d130      	bne.n	8005234 <UART_SetConfig+0x2d4>
 80051d2:	4b31      	ldr	r3, [pc, #196]	@ (8005298 <UART_SetConfig+0x338>)
 80051d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051d6:	f003 0307 	and.w	r3, r3, #7
 80051da:	2b05      	cmp	r3, #5
 80051dc:	d826      	bhi.n	800522c <UART_SetConfig+0x2cc>
 80051de:	a201      	add	r2, pc, #4	@ (adr r2, 80051e4 <UART_SetConfig+0x284>)
 80051e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e4:	080051fd 	.word	0x080051fd
 80051e8:	08005205 	.word	0x08005205
 80051ec:	0800520d 	.word	0x0800520d
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521d 	.word	0x0800521d
 80051f8:	08005225 	.word	0x08005225
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e180      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005204:	2304      	movs	r3, #4
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e17c      	b.n	8005506 <UART_SetConfig+0x5a6>
 800520c:	2308      	movs	r3, #8
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e178      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005214:	2310      	movs	r3, #16
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e174      	b.n	8005506 <UART_SetConfig+0x5a6>
 800521c:	2320      	movs	r3, #32
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e170      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005224:	2340      	movs	r3, #64	@ 0x40
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e16c      	b.n	8005506 <UART_SetConfig+0x5a6>
 800522c:	2380      	movs	r3, #128	@ 0x80
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005232:	e168      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a1b      	ldr	r2, [pc, #108]	@ (80052a8 <UART_SetConfig+0x348>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d142      	bne.n	80052c4 <UART_SetConfig+0x364>
 800523e:	4b16      	ldr	r3, [pc, #88]	@ (8005298 <UART_SetConfig+0x338>)
 8005240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b05      	cmp	r3, #5
 8005248:	d838      	bhi.n	80052bc <UART_SetConfig+0x35c>
 800524a:	a201      	add	r2, pc, #4	@ (adr r2, 8005250 <UART_SetConfig+0x2f0>)
 800524c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005250:	08005269 	.word	0x08005269
 8005254:	08005271 	.word	0x08005271
 8005258:	08005279 	.word	0x08005279
 800525c:	08005281 	.word	0x08005281
 8005260:	080052ad 	.word	0x080052ad
 8005264:	080052b5 	.word	0x080052b5
 8005268:	2300      	movs	r3, #0
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e14a      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005270:	2304      	movs	r3, #4
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e146      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005278:	2308      	movs	r3, #8
 800527a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800527e:	e142      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005280:	2310      	movs	r3, #16
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005286:	e13e      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005288:	cfff69f3 	.word	0xcfff69f3
 800528c:	58000c00 	.word	0x58000c00
 8005290:	11fff4ff 	.word	0x11fff4ff
 8005294:	40011000 	.word	0x40011000
 8005298:	58024400 	.word	0x58024400
 800529c:	40004400 	.word	0x40004400
 80052a0:	40004800 	.word	0x40004800
 80052a4:	40004c00 	.word	0x40004c00
 80052a8:	40005000 	.word	0x40005000
 80052ac:	2320      	movs	r3, #32
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e128      	b.n	8005506 <UART_SetConfig+0x5a6>
 80052b4:	2340      	movs	r3, #64	@ 0x40
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e124      	b.n	8005506 <UART_SetConfig+0x5a6>
 80052bc:	2380      	movs	r3, #128	@ 0x80
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e120      	b.n	8005506 <UART_SetConfig+0x5a6>
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4acb      	ldr	r2, [pc, #812]	@ (80055f8 <UART_SetConfig+0x698>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d176      	bne.n	80053bc <UART_SetConfig+0x45c>
 80052ce:	4bcb      	ldr	r3, [pc, #812]	@ (80055fc <UART_SetConfig+0x69c>)
 80052d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052d6:	2b28      	cmp	r3, #40	@ 0x28
 80052d8:	d86c      	bhi.n	80053b4 <UART_SetConfig+0x454>
 80052da:	a201      	add	r2, pc, #4	@ (adr r2, 80052e0 <UART_SetConfig+0x380>)
 80052dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e0:	08005385 	.word	0x08005385
 80052e4:	080053b5 	.word	0x080053b5
 80052e8:	080053b5 	.word	0x080053b5
 80052ec:	080053b5 	.word	0x080053b5
 80052f0:	080053b5 	.word	0x080053b5
 80052f4:	080053b5 	.word	0x080053b5
 80052f8:	080053b5 	.word	0x080053b5
 80052fc:	080053b5 	.word	0x080053b5
 8005300:	0800538d 	.word	0x0800538d
 8005304:	080053b5 	.word	0x080053b5
 8005308:	080053b5 	.word	0x080053b5
 800530c:	080053b5 	.word	0x080053b5
 8005310:	080053b5 	.word	0x080053b5
 8005314:	080053b5 	.word	0x080053b5
 8005318:	080053b5 	.word	0x080053b5
 800531c:	080053b5 	.word	0x080053b5
 8005320:	08005395 	.word	0x08005395
 8005324:	080053b5 	.word	0x080053b5
 8005328:	080053b5 	.word	0x080053b5
 800532c:	080053b5 	.word	0x080053b5
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080053b5 	.word	0x080053b5
 8005338:	080053b5 	.word	0x080053b5
 800533c:	080053b5 	.word	0x080053b5
 8005340:	0800539d 	.word	0x0800539d
 8005344:	080053b5 	.word	0x080053b5
 8005348:	080053b5 	.word	0x080053b5
 800534c:	080053b5 	.word	0x080053b5
 8005350:	080053b5 	.word	0x080053b5
 8005354:	080053b5 	.word	0x080053b5
 8005358:	080053b5 	.word	0x080053b5
 800535c:	080053b5 	.word	0x080053b5
 8005360:	080053a5 	.word	0x080053a5
 8005364:	080053b5 	.word	0x080053b5
 8005368:	080053b5 	.word	0x080053b5
 800536c:	080053b5 	.word	0x080053b5
 8005370:	080053b5 	.word	0x080053b5
 8005374:	080053b5 	.word	0x080053b5
 8005378:	080053b5 	.word	0x080053b5
 800537c:	080053b5 	.word	0x080053b5
 8005380:	080053ad 	.word	0x080053ad
 8005384:	2301      	movs	r3, #1
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e0bc      	b.n	8005506 <UART_SetConfig+0x5a6>
 800538c:	2304      	movs	r3, #4
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e0b8      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005394:	2308      	movs	r3, #8
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e0b4      	b.n	8005506 <UART_SetConfig+0x5a6>
 800539c:	2310      	movs	r3, #16
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e0b0      	b.n	8005506 <UART_SetConfig+0x5a6>
 80053a4:	2320      	movs	r3, #32
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e0ac      	b.n	8005506 <UART_SetConfig+0x5a6>
 80053ac:	2340      	movs	r3, #64	@ 0x40
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e0a8      	b.n	8005506 <UART_SetConfig+0x5a6>
 80053b4:	2380      	movs	r3, #128	@ 0x80
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e0a4      	b.n	8005506 <UART_SetConfig+0x5a6>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a8f      	ldr	r2, [pc, #572]	@ (8005600 <UART_SetConfig+0x6a0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d130      	bne.n	8005428 <UART_SetConfig+0x4c8>
 80053c6:	4b8d      	ldr	r3, [pc, #564]	@ (80055fc <UART_SetConfig+0x69c>)
 80053c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	2b05      	cmp	r3, #5
 80053d0:	d826      	bhi.n	8005420 <UART_SetConfig+0x4c0>
 80053d2:	a201      	add	r2, pc, #4	@ (adr r2, 80053d8 <UART_SetConfig+0x478>)
 80053d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d8:	080053f1 	.word	0x080053f1
 80053dc:	080053f9 	.word	0x080053f9
 80053e0:	08005401 	.word	0x08005401
 80053e4:	08005409 	.word	0x08005409
 80053e8:	08005411 	.word	0x08005411
 80053ec:	08005419 	.word	0x08005419
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e086      	b.n	8005506 <UART_SetConfig+0x5a6>
 80053f8:	2304      	movs	r3, #4
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e082      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005400:	2308      	movs	r3, #8
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e07e      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005408:	2310      	movs	r3, #16
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e07a      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005410:	2320      	movs	r3, #32
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e076      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005418:	2340      	movs	r3, #64	@ 0x40
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e072      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005420:	2380      	movs	r3, #128	@ 0x80
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e06e      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a75      	ldr	r2, [pc, #468]	@ (8005604 <UART_SetConfig+0x6a4>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d130      	bne.n	8005494 <UART_SetConfig+0x534>
 8005432:	4b72      	ldr	r3, [pc, #456]	@ (80055fc <UART_SetConfig+0x69c>)
 8005434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005436:	f003 0307 	and.w	r3, r3, #7
 800543a:	2b05      	cmp	r3, #5
 800543c:	d826      	bhi.n	800548c <UART_SetConfig+0x52c>
 800543e:	a201      	add	r2, pc, #4	@ (adr r2, 8005444 <UART_SetConfig+0x4e4>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	0800545d 	.word	0x0800545d
 8005448:	08005465 	.word	0x08005465
 800544c:	0800546d 	.word	0x0800546d
 8005450:	08005475 	.word	0x08005475
 8005454:	0800547d 	.word	0x0800547d
 8005458:	08005485 	.word	0x08005485
 800545c:	2300      	movs	r3, #0
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e050      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005464:	2304      	movs	r3, #4
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e04c      	b.n	8005506 <UART_SetConfig+0x5a6>
 800546c:	2308      	movs	r3, #8
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e048      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005474:	2310      	movs	r3, #16
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e044      	b.n	8005506 <UART_SetConfig+0x5a6>
 800547c:	2320      	movs	r3, #32
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e040      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005484:	2340      	movs	r3, #64	@ 0x40
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e03c      	b.n	8005506 <UART_SetConfig+0x5a6>
 800548c:	2380      	movs	r3, #128	@ 0x80
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e038      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a5b      	ldr	r2, [pc, #364]	@ (8005608 <UART_SetConfig+0x6a8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d130      	bne.n	8005500 <UART_SetConfig+0x5a0>
 800549e:	4b57      	ldr	r3, [pc, #348]	@ (80055fc <UART_SetConfig+0x69c>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b05      	cmp	r3, #5
 80054a8:	d826      	bhi.n	80054f8 <UART_SetConfig+0x598>
 80054aa:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <UART_SetConfig+0x550>)
 80054ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054d1 	.word	0x080054d1
 80054b8:	080054d9 	.word	0x080054d9
 80054bc:	080054e1 	.word	0x080054e1
 80054c0:	080054e9 	.word	0x080054e9
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	2302      	movs	r3, #2
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e01a      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054d0:	2304      	movs	r3, #4
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e016      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054d8:	2308      	movs	r3, #8
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e012      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054e0:	2310      	movs	r3, #16
 80054e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054e6:	e00e      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054e8:	2320      	movs	r3, #32
 80054ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ee:	e00a      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054f0:	2340      	movs	r3, #64	@ 0x40
 80054f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054f6:	e006      	b.n	8005506 <UART_SetConfig+0x5a6>
 80054f8:	2380      	movs	r3, #128	@ 0x80
 80054fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054fe:	e002      	b.n	8005506 <UART_SetConfig+0x5a6>
 8005500:	2380      	movs	r3, #128	@ 0x80
 8005502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a3f      	ldr	r2, [pc, #252]	@ (8005608 <UART_SetConfig+0x6a8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	f040 80f8 	bne.w	8005702 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005512:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005516:	2b20      	cmp	r3, #32
 8005518:	dc46      	bgt.n	80055a8 <UART_SetConfig+0x648>
 800551a:	2b02      	cmp	r3, #2
 800551c:	f2c0 8082 	blt.w	8005624 <UART_SetConfig+0x6c4>
 8005520:	3b02      	subs	r3, #2
 8005522:	2b1e      	cmp	r3, #30
 8005524:	d87e      	bhi.n	8005624 <UART_SetConfig+0x6c4>
 8005526:	a201      	add	r2, pc, #4	@ (adr r2, 800552c <UART_SetConfig+0x5cc>)
 8005528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800552c:	080055af 	.word	0x080055af
 8005530:	08005625 	.word	0x08005625
 8005534:	080055b7 	.word	0x080055b7
 8005538:	08005625 	.word	0x08005625
 800553c:	08005625 	.word	0x08005625
 8005540:	08005625 	.word	0x08005625
 8005544:	080055c7 	.word	0x080055c7
 8005548:	08005625 	.word	0x08005625
 800554c:	08005625 	.word	0x08005625
 8005550:	08005625 	.word	0x08005625
 8005554:	08005625 	.word	0x08005625
 8005558:	08005625 	.word	0x08005625
 800555c:	08005625 	.word	0x08005625
 8005560:	08005625 	.word	0x08005625
 8005564:	080055d7 	.word	0x080055d7
 8005568:	08005625 	.word	0x08005625
 800556c:	08005625 	.word	0x08005625
 8005570:	08005625 	.word	0x08005625
 8005574:	08005625 	.word	0x08005625
 8005578:	08005625 	.word	0x08005625
 800557c:	08005625 	.word	0x08005625
 8005580:	08005625 	.word	0x08005625
 8005584:	08005625 	.word	0x08005625
 8005588:	08005625 	.word	0x08005625
 800558c:	08005625 	.word	0x08005625
 8005590:	08005625 	.word	0x08005625
 8005594:	08005625 	.word	0x08005625
 8005598:	08005625 	.word	0x08005625
 800559c:	08005625 	.word	0x08005625
 80055a0:	08005625 	.word	0x08005625
 80055a4:	08005617 	.word	0x08005617
 80055a8:	2b40      	cmp	r3, #64	@ 0x40
 80055aa:	d037      	beq.n	800561c <UART_SetConfig+0x6bc>
 80055ac:	e03a      	b.n	8005624 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80055ae:	f7ff f865 	bl	800467c <HAL_RCCEx_GetD3PCLK1Freq>
 80055b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055b4:	e03c      	b.n	8005630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7ff f874 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c4:	e034      	b.n	8005630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055c6:	f107 0318 	add.w	r3, r7, #24
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7ff f9c0 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055d4:	e02c      	b.n	8005630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d6:	4b09      	ldr	r3, [pc, #36]	@ (80055fc <UART_SetConfig+0x69c>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055e2:	4b06      	ldr	r3, [pc, #24]	@ (80055fc <UART_SetConfig+0x69c>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	08db      	lsrs	r3, r3, #3
 80055e8:	f003 0303 	and.w	r3, r3, #3
 80055ec:	4a07      	ldr	r2, [pc, #28]	@ (800560c <UART_SetConfig+0x6ac>)
 80055ee:	fa22 f303 	lsr.w	r3, r2, r3
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> dev
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 8005598:	e01c      	b.n	80055d4 <UART_SetConfig+0x6d0>
 800559a:	bf00      	nop
 800559c:	40011400 	.word	0x40011400
 80055a0:	58024400 	.word	0x58024400
 80055a4:	40007800 	.word	0x40007800
 80055a8:	40007c00 	.word	0x40007c00
 80055ac:	58000c00 	.word	0x58000c00
 80055b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055b4:	4b9d      	ldr	r3, [pc, #628]	@ (800582c <UART_SetConfig+0x928>)
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b8:	e00c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055ba:	4b9d      	ldr	r3, [pc, #628]	@ (8005830 <UART_SetConfig+0x92c>)
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055be:	e009      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c6:	e005      	b.n	80055d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055d2:	bf00      	nop
=======
 80055f4:	e01c      	b.n	8005630 <UART_SetConfig+0x6d0>
 80055f6:	bf00      	nop
 80055f8:	40011400 	.word	0x40011400
 80055fc:	58024400 	.word	0x58024400
 8005600:	40007800 	.word	0x40007800
 8005604:	40007c00 	.word	0x40007c00
 8005608:	58000c00 	.word	0x58000c00
 800560c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005610:	4b9d      	ldr	r3, [pc, #628]	@ (8005888 <UART_SetConfig+0x928>)
 8005612:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005614:	e00c      	b.n	8005630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005616:	4b9d      	ldr	r3, [pc, #628]	@ (800588c <UART_SetConfig+0x92c>)
 8005618:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800561a:	e009      	b.n	8005630 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800561c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005620:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005622:	e005      	b.n	8005630 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800562e:	bf00      	nop
>>>>>>> dev
    }

    /* If proper clock source reported */
    if (pclk != 0U)
<<<<<<< HEAD
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 81de 	beq.w	8005998 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4a94      	ldr	r2, [pc, #592]	@ (8005834 <UART_SetConfig+0x930>)
 80055e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d305      	bcc.n	800560c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005612:	e1c1      	b.n	8005998 <UART_SetConfig+0xa94>
=======
 8005630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 81de 	beq.w	80059f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800563c:	4a94      	ldr	r2, [pc, #592]	@ (8005890 <UART_SetConfig+0x930>)
 800563e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005642:	461a      	mov	r2, r3
 8005644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005646:	fbb3 f3f2 	udiv	r3, r3, r2
 800564a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	685a      	ldr	r2, [r3, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4413      	add	r3, r2
 8005656:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005658:	429a      	cmp	r2, r3
 800565a:	d305      	bcc.n	8005668 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005664:	429a      	cmp	r2, r3
 8005666:	d903      	bls.n	8005670 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800566e:	e1c1      	b.n	80059f4 <UART_SetConfig+0xa94>
>>>>>>> dev
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
<<<<<<< HEAD
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	2200      	movs	r2, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	4a84      	ldr	r2, [pc, #528]	@ (8005834 <UART_SetConfig+0x930>)
 8005622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005626:	b29b      	uxth	r3, r3
 8005628:	2200      	movs	r2, #0
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005636:	f7fa fe4f 	bl	80002d8 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	020b      	lsls	r3, r1, #8
 800564c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005650:	0202      	lsls	r2, r0, #8
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	6849      	ldr	r1, [r1, #4]
 8005656:	0849      	lsrs	r1, r1, #1
 8005658:	2000      	movs	r0, #0
 800565a:	460c      	mov	r4, r1
 800565c:	4605      	mov	r5, r0
 800565e:	eb12 0804 	adds.w	r8, r2, r4
 8005662:	eb43 0905 	adc.w	r9, r3, r5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	469a      	mov	sl, r3
 800566e:	4693      	mov	fp, r2
 8005670:	4652      	mov	r2, sl
 8005672:	465b      	mov	r3, fp
 8005674:	4640      	mov	r0, r8
 8005676:	4649      	mov	r1, r9
 8005678:	f7fa fe2e 	bl	80002d8 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4613      	mov	r3, r2
 8005682:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568a:	d308      	bcc.n	800569e <UART_SetConfig+0x79a>
 800568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005692:	d204      	bcs.n	800569e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e17c      	b.n	8005998 <UART_SetConfig+0xa94>
=======
 8005670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005672:	2200      	movs	r2, #0
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	60fa      	str	r2, [r7, #12]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	4a84      	ldr	r2, [pc, #528]	@ (8005890 <UART_SetConfig+0x930>)
 800567e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005682:	b29b      	uxth	r3, r3
 8005684:	2200      	movs	r2, #0
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	607a      	str	r2, [r7, #4]
 800568a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800568e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005692:	f7fa fe25 	bl	80002e0 <__aeabi_uldivmod>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4610      	mov	r0, r2
 800569c:	4619      	mov	r1, r3
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	020b      	lsls	r3, r1, #8
 80056a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80056ac:	0202      	lsls	r2, r0, #8
 80056ae:	6979      	ldr	r1, [r7, #20]
 80056b0:	6849      	ldr	r1, [r1, #4]
 80056b2:	0849      	lsrs	r1, r1, #1
 80056b4:	2000      	movs	r0, #0
 80056b6:	460c      	mov	r4, r1
 80056b8:	4605      	mov	r5, r0
 80056ba:	eb12 0804 	adds.w	r8, r2, r4
 80056be:	eb43 0905 	adc.w	r9, r3, r5
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	469a      	mov	sl, r3
 80056ca:	4693      	mov	fp, r2
 80056cc:	4652      	mov	r2, sl
 80056ce:	465b      	mov	r3, fp
 80056d0:	4640      	mov	r0, r8
 80056d2:	4649      	mov	r1, r9
 80056d4:	f7fa fe04 	bl	80002e0 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4613      	mov	r3, r2
 80056de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056e6:	d308      	bcc.n	80056fa <UART_SetConfig+0x79a>
 80056e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ee:	d204      	bcs.n	80056fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056f6:	60da      	str	r2, [r3, #12]
 80056f8:	e17c      	b.n	80059f4 <UART_SetConfig+0xa94>
>>>>>>> dev
        }
        else
        {
          ret = HAL_ERROR;
<<<<<<< HEAD
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056a4:	e178      	b.n	8005998 <UART_SetConfig+0xa94>
=======
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005700:	e178      	b.n	80059f4 <UART_SetConfig+0xa94>
>>>>>>> dev
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
<<<<<<< HEAD
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	f040 80c5 	bne.w	800583c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	dc48      	bgt.n	800574c <UART_SetConfig+0x848>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	db7b      	blt.n	80057b6 <UART_SetConfig+0x8b2>
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d879      	bhi.n	80057b6 <UART_SetConfig+0x8b2>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0x7c4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	08005753 	.word	0x08005753
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	080057b7 	.word	0x080057b7
 80056d4:	080057b7 	.word	0x080057b7
 80056d8:	08005763 	.word	0x08005763
 80056dc:	080057b7 	.word	0x080057b7
 80056e0:	080057b7 	.word	0x080057b7
 80056e4:	080057b7 	.word	0x080057b7
 80056e8:	08005773 	.word	0x08005773
 80056ec:	080057b7 	.word	0x080057b7
 80056f0:	080057b7 	.word	0x080057b7
 80056f4:	080057b7 	.word	0x080057b7
 80056f8:	080057b7 	.word	0x080057b7
 80056fc:	080057b7 	.word	0x080057b7
 8005700:	080057b7 	.word	0x080057b7
 8005704:	080057b7 	.word	0x080057b7
 8005708:	08005783 	.word	0x08005783
 800570c:	080057b7 	.word	0x080057b7
 8005710:	080057b7 	.word	0x080057b7
 8005714:	080057b7 	.word	0x080057b7
 8005718:	080057b7 	.word	0x080057b7
 800571c:	080057b7 	.word	0x080057b7
 8005720:	080057b7 	.word	0x080057b7
 8005724:	080057b7 	.word	0x080057b7
 8005728:	080057b7 	.word	0x080057b7
 800572c:	080057b7 	.word	0x080057b7
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057b7 	.word	0x080057b7
 8005738:	080057b7 	.word	0x080057b7
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057b7 	.word	0x080057b7
 8005744:	080057b7 	.word	0x080057b7
 8005748:	080057a9 	.word	0x080057a9
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d02e      	beq.n	80057ae <UART_SetConfig+0x8aa>
 8005750:	e031      	b.n	80057b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005752:	f7fd fd2f 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8005756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005758:	e033      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575a:	f7fd fd41 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 800575e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005760:	e02f      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe ff70 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005770:	e027      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 0318 	add.w	r3, r7, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff f8bc 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005780:	e01f      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005782:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <UART_SetConfig+0x934>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <UART_SetConfig+0x934>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a24      	ldr	r2, [pc, #144]	@ (800582c <UART_SetConfig+0x928>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800570a:	f040 80c5 	bne.w	8005898 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800570e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005712:	2b20      	cmp	r3, #32
 8005714:	dc48      	bgt.n	80057a8 <UART_SetConfig+0x848>
 8005716:	2b00      	cmp	r3, #0
 8005718:	db7b      	blt.n	8005812 <UART_SetConfig+0x8b2>
 800571a:	2b20      	cmp	r3, #32
 800571c:	d879      	bhi.n	8005812 <UART_SetConfig+0x8b2>
 800571e:	a201      	add	r2, pc, #4	@ (adr r2, 8005724 <UART_SetConfig+0x7c4>)
 8005720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005724:	080057af 	.word	0x080057af
 8005728:	080057b7 	.word	0x080057b7
 800572c:	08005813 	.word	0x08005813
 8005730:	08005813 	.word	0x08005813
 8005734:	080057bf 	.word	0x080057bf
 8005738:	08005813 	.word	0x08005813
 800573c:	08005813 	.word	0x08005813
 8005740:	08005813 	.word	0x08005813
 8005744:	080057cf 	.word	0x080057cf
 8005748:	08005813 	.word	0x08005813
 800574c:	08005813 	.word	0x08005813
 8005750:	08005813 	.word	0x08005813
 8005754:	08005813 	.word	0x08005813
 8005758:	08005813 	.word	0x08005813
 800575c:	08005813 	.word	0x08005813
 8005760:	08005813 	.word	0x08005813
 8005764:	080057df 	.word	0x080057df
 8005768:	08005813 	.word	0x08005813
 800576c:	08005813 	.word	0x08005813
 8005770:	08005813 	.word	0x08005813
 8005774:	08005813 	.word	0x08005813
 8005778:	08005813 	.word	0x08005813
 800577c:	08005813 	.word	0x08005813
 8005780:	08005813 	.word	0x08005813
 8005784:	08005813 	.word	0x08005813
 8005788:	08005813 	.word	0x08005813
 800578c:	08005813 	.word	0x08005813
 8005790:	08005813 	.word	0x08005813
 8005794:	08005813 	.word	0x08005813
 8005798:	08005813 	.word	0x08005813
 800579c:	08005813 	.word	0x08005813
 80057a0:	08005813 	.word	0x08005813
 80057a4:	08005805 	.word	0x08005805
 80057a8:	2b40      	cmp	r3, #64	@ 0x40
 80057aa:	d02e      	beq.n	800580a <UART_SetConfig+0x8aa>
 80057ac:	e031      	b.n	8005812 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057ae:	f7fd fd2f 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 80057b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057b4:	e033      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057b6:	f7fd fd41 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 80057ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80057bc:	e02f      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe ff70 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057cc:	e027      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057ce:	f107 0318 	add.w	r3, r7, #24
 80057d2:	4618      	mov	r0, r3
 80057d4:	f7ff f8bc 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057dc:	e01f      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057de:	4b2d      	ldr	r3, [pc, #180]	@ (8005894 <UART_SetConfig+0x934>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0320 	and.w	r3, r3, #32
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d009      	beq.n	80057fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80057ea:	4b2a      	ldr	r3, [pc, #168]	@ (8005894 <UART_SetConfig+0x934>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	08db      	lsrs	r3, r3, #3
 80057f0:	f003 0303 	and.w	r3, r3, #3
 80057f4:	4a24      	ldr	r2, [pc, #144]	@ (8005888 <UART_SetConfig+0x928>)
 80057f6:	fa22 f303 	lsr.w	r3, r2, r3
 80057fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> dev
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <UART_SetConfig+0x928>)
 80057a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a8:	4b21      	ldr	r3, [pc, #132]	@ (8005830 <UART_SetConfig+0x92c>)
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057b4:	e005      	b.n	80057c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057c0:	bf00      	nop
=======
 80057fc:	e00f      	b.n	800581e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057fe:	4b22      	ldr	r3, [pc, #136]	@ (8005888 <UART_SetConfig+0x928>)
 8005800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005802:	e00c      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005804:	4b21      	ldr	r3, [pc, #132]	@ (800588c <UART_SetConfig+0x92c>)
 8005806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005808:	e009      	b.n	800581e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800580a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800580e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005810:	e005      	b.n	800581e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800581c:	bf00      	nop
>>>>>>> dev
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
<<<<<<< HEAD
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80e7 	beq.w	8005998 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <UART_SetConfig+0x930>)
 80057d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057dc:	005a      	lsls	r2, r3, #1
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	441a      	add	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d916      	bls.n	8005824 <UART_SetConfig+0x920>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fc:	d212      	bcs.n	8005824 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	b29b      	uxth	r3, r3
 8005802:	f023 030f 	bic.w	r3, r3, #15
 8005806:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	b29a      	uxth	r2, r3
 8005814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005816:	4313      	orrs	r3, r2
 8005818:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e0b9      	b.n	8005998 <UART_SetConfig+0xa94>
=======
 800581e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005820:	2b00      	cmp	r3, #0
 8005822:	f000 80e7 	beq.w	80059f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	4a19      	ldr	r2, [pc, #100]	@ (8005890 <UART_SetConfig+0x930>)
 800582c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005830:	461a      	mov	r2, r3
 8005832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005834:	fbb3 f3f2 	udiv	r3, r3, r2
 8005838:	005a      	lsls	r2, r3, #1
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	085b      	lsrs	r3, r3, #1
 8005840:	441a      	add	r2, r3
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	fbb2 f3f3 	udiv	r3, r2, r3
 800584a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	2b0f      	cmp	r3, #15
 8005850:	d916      	bls.n	8005880 <UART_SetConfig+0x920>
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005858:	d212      	bcs.n	8005880 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	b29b      	uxth	r3, r3
 800585e:	f023 030f 	bic.w	r3, r3, #15
 8005862:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	b29b      	uxth	r3, r3
 800586a:	f003 0307 	and.w	r3, r3, #7
 800586e:	b29a      	uxth	r2, r3
 8005870:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005872:	4313      	orrs	r3, r2
 8005874:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005876:	697b      	ldr	r3, [r7, #20]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800587c:	60da      	str	r2, [r3, #12]
 800587e:	e0b9      	b.n	80059f4 <UART_SetConfig+0xa94>
>>>>>>> dev
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005824:	2301      	movs	r3, #1
 8005826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800582a:	e0b5      	b.n	8005998 <UART_SetConfig+0xa94>
 800582c:	03d09000 	.word	0x03d09000
 8005830:	003d0900 	.word	0x003d0900
 8005834:	080066ac 	.word	0x080066ac
 8005838:	58024400 	.word	0x58024400
=======
 8005880:	2301      	movs	r3, #1
 8005882:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005886:	e0b5      	b.n	80059f4 <UART_SetConfig+0xa94>
 8005888:	03d09000 	.word	0x03d09000
 800588c:	003d0900 	.word	0x003d0900
 8005890:	08009394 	.word	0x08009394
 8005894:	58024400 	.word	0x58024400
>>>>>>> dev
      }
    }
  }
  else
  {
    switch (clocksource)
<<<<<<< HEAD
 800583c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005840:	2b20      	cmp	r3, #32
 8005842:	dc49      	bgt.n	80058d8 <UART_SetConfig+0x9d4>
 8005844:	2b00      	cmp	r3, #0
 8005846:	db7c      	blt.n	8005942 <UART_SetConfig+0xa3e>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d87a      	bhi.n	8005942 <UART_SetConfig+0xa3e>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <UART_SetConfig+0x950>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	080058df 	.word	0x080058df
 8005858:	080058e7 	.word	0x080058e7
 800585c:	08005943 	.word	0x08005943
 8005860:	08005943 	.word	0x08005943
 8005864:	080058ef 	.word	0x080058ef
 8005868:	08005943 	.word	0x08005943
 800586c:	08005943 	.word	0x08005943
 8005870:	08005943 	.word	0x08005943
 8005874:	080058ff 	.word	0x080058ff
 8005878:	08005943 	.word	0x08005943
 800587c:	08005943 	.word	0x08005943
 8005880:	08005943 	.word	0x08005943
 8005884:	08005943 	.word	0x08005943
 8005888:	08005943 	.word	0x08005943
 800588c:	08005943 	.word	0x08005943
 8005890:	08005943 	.word	0x08005943
 8005894:	0800590f 	.word	0x0800590f
 8005898:	08005943 	.word	0x08005943
 800589c:	08005943 	.word	0x08005943
 80058a0:	08005943 	.word	0x08005943
 80058a4:	08005943 	.word	0x08005943
 80058a8:	08005943 	.word	0x08005943
 80058ac:	08005943 	.word	0x08005943
 80058b0:	08005943 	.word	0x08005943
 80058b4:	08005943 	.word	0x08005943
 80058b8:	08005943 	.word	0x08005943
 80058bc:	08005943 	.word	0x08005943
 80058c0:	08005943 	.word	0x08005943
 80058c4:	08005943 	.word	0x08005943
 80058c8:	08005943 	.word	0x08005943
 80058cc:	08005943 	.word	0x08005943
 80058d0:	08005943 	.word	0x08005943
 80058d4:	08005935 	.word	0x08005935
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d02e      	beq.n	800593a <UART_SetConfig+0xa36>
 80058dc:	e031      	b.n	8005942 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fd fc69 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80058e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e4:	e033      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e6:	f7fd fc7b 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80058ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058ec:	e02f      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe feaa 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058fc:	e027      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fe:	f107 0318 	add.w	r3, r7, #24
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fff6 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800590c:	e01f      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590e:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <UART_SetConfig+0xac0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591a:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <UART_SetConfig+0xac0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	08db      	lsrs	r3, r3, #3
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <UART_SetConfig+0xac4>)
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
=======
 8005898:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800589c:	2b20      	cmp	r3, #32
 800589e:	dc49      	bgt.n	8005934 <UART_SetConfig+0x9d4>
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	db7c      	blt.n	800599e <UART_SetConfig+0xa3e>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d87a      	bhi.n	800599e <UART_SetConfig+0xa3e>
 80058a8:	a201      	add	r2, pc, #4	@ (adr r2, 80058b0 <UART_SetConfig+0x950>)
 80058aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ae:	bf00      	nop
 80058b0:	0800593b 	.word	0x0800593b
 80058b4:	08005943 	.word	0x08005943
 80058b8:	0800599f 	.word	0x0800599f
 80058bc:	0800599f 	.word	0x0800599f
 80058c0:	0800594b 	.word	0x0800594b
 80058c4:	0800599f 	.word	0x0800599f
 80058c8:	0800599f 	.word	0x0800599f
 80058cc:	0800599f 	.word	0x0800599f
 80058d0:	0800595b 	.word	0x0800595b
 80058d4:	0800599f 	.word	0x0800599f
 80058d8:	0800599f 	.word	0x0800599f
 80058dc:	0800599f 	.word	0x0800599f
 80058e0:	0800599f 	.word	0x0800599f
 80058e4:	0800599f 	.word	0x0800599f
 80058e8:	0800599f 	.word	0x0800599f
 80058ec:	0800599f 	.word	0x0800599f
 80058f0:	0800596b 	.word	0x0800596b
 80058f4:	0800599f 	.word	0x0800599f
 80058f8:	0800599f 	.word	0x0800599f
 80058fc:	0800599f 	.word	0x0800599f
 8005900:	0800599f 	.word	0x0800599f
 8005904:	0800599f 	.word	0x0800599f
 8005908:	0800599f 	.word	0x0800599f
 800590c:	0800599f 	.word	0x0800599f
 8005910:	0800599f 	.word	0x0800599f
 8005914:	0800599f 	.word	0x0800599f
 8005918:	0800599f 	.word	0x0800599f
 800591c:	0800599f 	.word	0x0800599f
 8005920:	0800599f 	.word	0x0800599f
 8005924:	0800599f 	.word	0x0800599f
 8005928:	0800599f 	.word	0x0800599f
 800592c:	0800599f 	.word	0x0800599f
 8005930:	08005991 	.word	0x08005991
 8005934:	2b40      	cmp	r3, #64	@ 0x40
 8005936:	d02e      	beq.n	8005996 <UART_SetConfig+0xa36>
 8005938:	e031      	b.n	800599e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800593a:	f7fd fc69 	bl	8003210 <HAL_RCC_GetPCLK1Freq>
 800593e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005940:	e033      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005942:	f7fd fc7b 	bl	800323c <HAL_RCC_GetPCLK2Freq>
 8005946:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005948:	e02f      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800594a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe feaa 	bl	80046a8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005956:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005958:	e027      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800595a:	f107 0318 	add.w	r3, r7, #24
 800595e:	4618      	mov	r0, r3
 8005960:	f7fe fff6 	bl	8004950 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005968:	e01f      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596a:	4b2d      	ldr	r3, [pc, #180]	@ (8005a20 <UART_SetConfig+0xac0>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0320 	and.w	r3, r3, #32
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005976:	4b2a      	ldr	r3, [pc, #168]	@ (8005a20 <UART_SetConfig+0xac0>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	08db      	lsrs	r3, r3, #3
 800597c:	f003 0303 	and.w	r3, r3, #3
 8005980:	4a28      	ldr	r2, [pc, #160]	@ (8005a24 <UART_SetConfig+0xac4>)
 8005982:	fa22 f303 	lsr.w	r3, r2, r3
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c
>>>>>>> dev
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
<<<<<<< HEAD
 800592c:	e00f      	b.n	800594e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800592e:	4b26      	ldr	r3, [pc, #152]	@ (80059c8 <UART_SetConfig+0xac4>)
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005932:	e00c      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <UART_SetConfig+0xac8>)
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005938:	e009      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005940:	e005      	b.n	800594e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800594c:	bf00      	nop
    }

    if (pclk != 0U)
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d021      	beq.n	8005998 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	4a1d      	ldr	r2, [pc, #116]	@ (80059d0 <UART_SetConfig+0xacc>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005962:	fbb3 f2f2 	udiv	r2, r3, r2
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597a:	2b0f      	cmp	r3, #15
 800597c:	d909      	bls.n	8005992 <UART_SetConfig+0xa8e>
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d205      	bcs.n	8005992 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	b29a      	uxth	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e002      	b.n	8005998 <UART_SetConfig+0xa94>
=======
 8005988:	e00f      	b.n	80059aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800598a:	4b26      	ldr	r3, [pc, #152]	@ (8005a24 <UART_SetConfig+0xac4>)
 800598c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800598e:	e00c      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005990:	4b25      	ldr	r3, [pc, #148]	@ (8005a28 <UART_SetConfig+0xac8>)
 8005992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005994:	e009      	b.n	80059aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800599a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800599c:	e005      	b.n	80059aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800599e:	2300      	movs	r3, #0
 80059a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80059a8:	bf00      	nop
    }

    if (pclk != 0U)
 80059aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d021      	beq.n	80059f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b4:	4a1d      	ldr	r2, [pc, #116]	@ (8005a2c <UART_SetConfig+0xacc>)
 80059b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059ba:	461a      	mov	r2, r3
 80059bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059be:	fbb3 f2f2 	udiv	r2, r3, r2
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	441a      	add	r2, r3
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	2b0f      	cmp	r3, #15
 80059d8:	d909      	bls.n	80059ee <UART_SetConfig+0xa8e>
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80059e0:	d205      	bcs.n	80059ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e4:	b29a      	uxth	r2, r3
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	60da      	str	r2, [r3, #12]
 80059ec:	e002      	b.n	80059f4 <UART_SetConfig+0xa94>
>>>>>>> dev
      }
      else
      {
        ret = HAL_ERROR;
<<<<<<< HEAD
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
=======
 80059ee:	2301      	movs	r3, #1
 80059f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
>>>>>>> dev
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
<<<<<<< HEAD
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2200      	movs	r2, #0
 80059ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3748      	adds	r7, #72	@ 0x48
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	03d09000 	.word	0x03d09000
 80059cc:	003d0900 	.word	0x003d0900
 80059d0:	080066ac 	.word	0x080066ac

080059d4 <UART_AdvFeatureConfig>:
=======
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2200      	movs	r2, #0
 8005a08:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005a10:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3748      	adds	r7, #72	@ 0x48
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a1e:	bf00      	nop
 8005a20:	58024400 	.word	0x58024400
 8005a24:	03d09000 	.word	0x03d09000
 8005a28:	003d0900 	.word	0x003d0900
 8005a2c:	08009394 	.word	0x08009394

08005a30 <UART_AdvFeatureConfig>:
>>>>>>> dev
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
=======
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
<<<<<<< HEAD
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
=======
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3c:	f003 0308 	and.w	r3, r3, #8
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	430a      	orrs	r2, r1
 8005a58:	605a      	str	r2, [r3, #4]
>>>>>>> dev
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
<<<<<<< HEAD
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
=======
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	685b      	ldr	r3, [r3, #4]
 8005a6c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	430a      	orrs	r2, r1
 8005a7a:	605a      	str	r2, [r3, #4]
>>>>>>> dev
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
<<<<<<< HEAD
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
=======
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00a      	beq.n	8005a9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	430a      	orrs	r2, r1
 8005a9c:	605a      	str	r2, [r3, #4]
>>>>>>> dev
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
<<<<<<< HEAD
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
=======
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00a      	beq.n	8005ac0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	430a      	orrs	r2, r1
 8005abe:	605a      	str	r2, [r3, #4]
>>>>>>> dev
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
<<<<<<< HEAD
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
=======
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac4:	f003 0310 	and.w	r3, r3, #16
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d00a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	609a      	str	r2, [r3, #8]
>>>>>>> dev
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
<<<<<<< HEAD
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
=======
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	f003 0320 	and.w	r3, r3, #32
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	609a      	str	r2, [r3, #8]
>>>>>>> dev
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
<<<<<<< HEAD
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
=======
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01a      	beq.n	8005b46 <UART_AdvFeatureConfig+0x116>
>>>>>>> dev
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
<<<<<<< HEAD
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
=======
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	430a      	orrs	r2, r1
 8005b24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b2e:	d10a      	bne.n	8005b46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	430a      	orrs	r2, r1
 8005b44:	605a      	str	r2, [r3, #4]
>>>>>>> dev
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
<<<<<<< HEAD
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
=======
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	430a      	orrs	r2, r1
 8005b66:	605a      	str	r2, [r3, #4]
  }
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <UART_CheckIdleState>:
>>>>>>> dev
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	@ 0x60
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
=======
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b098      	sub	sp, #96	@ 0x60
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
<<<<<<< HEAD
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fb fade 	bl	80010e8 <HAL_GetTick>
 8005b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d12f      	bne.n	8005b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f88e 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d022      	beq.n	8005b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
=======
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b84:	f7fb fade 	bl	8001144 <HAL_GetTick>
 8005b88:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0308 	and.w	r3, r3, #8
 8005b94:	2b08      	cmp	r3, #8
 8005b96:	d12f      	bne.n	8005bf8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f88e 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d022      	beq.n	8005bf8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
>>>>>>> dev
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
<<<<<<< HEAD
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b76:	643a      	str	r2, [r7, #64]	@ 0x40
=======
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bba:	e853 3f00 	ldrex	r3, [r3]
 8005bbe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bc2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005bc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	461a      	mov	r2, r3
 8005bce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005bd2:	643a      	str	r2, [r7, #64]	@ 0x40
>>>>>>> dev
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
<<<<<<< HEAD
 8005b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e063      	b.n	8005c64 <UART_CheckIdleState+0x14c>
=======
 8005bd4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005bd6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005bd8:	e841 2300 	strex	r3, r2, [r1]
 8005bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005bde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d1e6      	bne.n	8005bb2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e063      	b.n	8005cc0 <UART_CheckIdleState+0x14c>
>>>>>>> dev
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
<<<<<<< HEAD
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d149      	bne.n	8005c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005baa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f857 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03c      	beq.n	8005c3e <UART_CheckIdleState+0x126>
=======
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0304 	and.w	r3, r3, #4
 8005c02:	2b04      	cmp	r3, #4
 8005c04:	d149      	bne.n	8005c9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005c0a:	9300      	str	r3, [sp, #0]
 8005c0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f857 	bl	8005cc8 <UART_WaitOnFlagUntilTimeout>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d03c      	beq.n	8005c9a <UART_CheckIdleState+0x126>
>>>>>>> dev
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
<<<<<<< HEAD
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	61fa      	str	r2, [r7, #28]
 8005c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	617b      	str	r3, [r7, #20]
   return(result);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e012      	b.n	8005c64 <UART_CheckIdleState+0x14c>
=======
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	623b      	str	r3, [r7, #32]
   return(result);
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c3e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e6      	bne.n	8005c20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3308      	adds	r3, #8
 8005c58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3308      	adds	r3, #8
 8005c70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c72:	61fa      	str	r2, [r7, #28]
 8005c74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	69fa      	ldr	r2, [r7, #28]
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	617b      	str	r3, [r7, #20]
   return(result);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e012      	b.n	8005cc0 <UART_CheckIdleState+0x14c>
>>>>>>> dev
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3758      	adds	r7, #88	@ 0x58
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_WaitOnFlagUntilTimeout>:
=======
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2220      	movs	r2, #32
 8005c9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3758      	adds	r7, #88	@ 0x58
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <UART_WaitOnFlagUntilTimeout>:
>>>>>>> dev
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
<<<<<<< HEAD
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	e04f      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d04b      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fb fa2f 	bl	80010e8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e04e      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d037      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b80      	cmp	r3, #128	@ 0x80
 8005cb2:	d034      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d031      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d110      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	621a      	str	r2, [r3, #32]
=======
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cd8:	e04f      	b.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ce0:	d04b      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ce2:	f7fb fa2f 	bl	8001144 <HAL_GetTick>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	d302      	bcc.n	8005cf8 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf2:	69bb      	ldr	r3, [r7, #24]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d101      	bne.n	8005cfc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e04e      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0304 	and.w	r3, r3, #4
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d037      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b80      	cmp	r3, #128	@ 0x80
 8005d0e:	d034      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	2b40      	cmp	r3, #64	@ 0x40
 8005d14:	d031      	beq.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69db      	ldr	r3, [r3, #28]
 8005d1c:	f003 0308 	and.w	r3, r3, #8
 8005d20:	2b08      	cmp	r3, #8
 8005d22:	d110      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	2208      	movs	r2, #8
 8005d2a:	621a      	str	r2, [r3, #32]
>>>>>>> dev

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f839 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e029      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf8:	d111      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d02:	621a      	str	r2, [r3, #32]
=======
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f839 	bl	8005da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2208      	movs	r2, #8
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e029      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69db      	ldr	r3, [r3, #28]
 8005d4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d54:	d111      	bne.n	8005d7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d5e:	621a      	str	r2, [r3, #32]
>>>>>>> dev

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
<<<<<<< HEAD
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f81f 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0a0      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x12>
=======
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 f81f 	bl	8005da4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e00f      	b.n	8005d9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	69da      	ldr	r2, [r3, #28]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	4013      	ands	r3, r2
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	429a      	cmp	r2, r3
 8005d88:	bf0c      	ite	eq
 8005d8a:	2301      	moveq	r3, #1
 8005d8c:	2300      	movne	r3, #0
 8005d8e:	b2db      	uxtb	r3, r3
 8005d90:	461a      	mov	r2, r3
 8005d92:	79fb      	ldrb	r3, [r7, #7]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d0a0      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0x12>
>>>>>>> dev
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_EndRxTransfer>:
=======
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <UART_EndRxTransfer>:
>>>>>>> dev
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005d48:	b480      	push	{r7}
 8005d4a:	b095      	sub	sp, #84	@ 0x54
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	4b1e      	ldr	r3, [pc, #120]	@ (8005e10 <UART_EndRxTransfer+0xc8>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d118      	bne.n	8005df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_EndRxTransfer+0x76>
=======
 8005da4:	b480      	push	{r7}
 8005da6:	b095      	sub	sp, #84	@ 0x54
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db4:	e853 3f00 	ldrex	r3, [r3]
 8005db8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005dc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dca:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005dd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005dd2:	e841 2300 	strex	r3, r2, [r1]
 8005dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d1e6      	bne.n	8005dac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3308      	adds	r3, #8
 8005de4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	e853 3f00 	ldrex	r3, [r3]
 8005dec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dee:	69fa      	ldr	r2, [r7, #28]
 8005df0:	4b1e      	ldr	r3, [pc, #120]	@ (8005e6c <UART_EndRxTransfer+0xc8>)
 8005df2:	4013      	ands	r3, r2
 8005df4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	3308      	adds	r3, #8
 8005dfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005e04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e06:	e841 2300 	strex	r3, r2, [r1]
 8005e0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d1e5      	bne.n	8005dde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d118      	bne.n	8005e4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	e853 3f00 	ldrex	r3, [r3]
 8005e26:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f023 0310 	bic.w	r3, r3, #16
 8005e2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	461a      	mov	r2, r3
 8005e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e38:	61bb      	str	r3, [r7, #24]
 8005e3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3c:	6979      	ldr	r1, [r7, #20]
 8005e3e:	69ba      	ldr	r2, [r7, #24]
 8005e40:	e841 2300 	strex	r3, r2, [r1]
 8005e44:	613b      	str	r3, [r7, #16]
   return(result);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1e6      	bne.n	8005e1a <UART_EndRxTransfer+0x76>
>>>>>>> dev
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
<<<<<<< HEAD
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e04:	bf00      	nop
 8005e06:	3754      	adds	r7, #84	@ 0x54
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	effffffe 	.word	0xeffffffe

08005e14 <HAL_UARTEx_DisableFifoMode>:
=======
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e60:	bf00      	nop
 8005e62:	3754      	adds	r7, #84	@ 0x54
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	effffffe 	.word	0xeffffffe

08005e70 <HAL_UARTEx_DisableFifoMode>:
>>>>>>> dev
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
=======
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
>>>>>>> dev

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e027      	b.n	8005e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_UARTEx_SetTxFifoThreshold>:
=======
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d101      	bne.n	8005e86 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e82:	2302      	movs	r3, #2
 8005e84:	e027      	b.n	8005ed6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2224      	movs	r2, #36	@ 0x24
 8005e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f022 0201 	bic.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005eb4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3714      	adds	r7, #20
 8005eda:	46bd      	mov	sp, r7
 8005edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee0:	4770      	bx	lr

08005ee2 <HAL_UARTEx_SetTxFifoThreshold>:
>>>>>>> dev
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
=======
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b084      	sub	sp, #16
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
 8005eea:	6039      	str	r1, [r7, #0]
>>>>>>> dev
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e02d      	b.n	8005efa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2224      	movs	r2, #36	@ 0x24
 8005eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f850 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_UARTEx_SetRxFifoThreshold>:
=======
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d101      	bne.n	8005efa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e02d      	b.n	8005f56 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2201      	movs	r2, #1
 8005efe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2224      	movs	r2, #36	@ 0x24
 8005f06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 0201 	bic.w	r2, r2, #1
 8005f20:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	430a      	orrs	r2, r1
 8005f34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 f850 	bl	8005fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_UARTEx_SetRxFifoThreshold>:
>>>>>>> dev
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
<<<<<<< HEAD
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
=======
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
>>>>>>> dev
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
<<<<<<< HEAD
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e02d      	b.n	8005f76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2224      	movs	r2, #36	@ 0x24
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f812 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UARTEx_SetNbDataToProcess>:
=======
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d101      	bne.n	8005f76 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f72:	2302      	movs	r3, #2
 8005f74:	e02d      	b.n	8005fd2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2224      	movs	r2, #36	@ 0x24
 8005f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 0201 	bic.w	r2, r2, #1
 8005f9c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f812 	bl	8005fdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
	...

08005fdc <UARTEx_SetNbDataToProcess>:
>>>>>>> dev
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
<<<<<<< HEAD
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
=======
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
>>>>>>> dev
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
<<<<<<< HEAD
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d108      	bne.n	8005fa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
=======
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d108      	bne.n	8005ffe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
>>>>>>> dev
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
<<<<<<< HEAD
 8005fa0:	e031      	b.n	8006006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	0e5b      	lsrs	r3, r3, #25
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	0f5b      	lsrs	r3, r3, #29
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	7b3a      	ldrb	r2, [r7, #12]
 8005fce:	4911      	ldr	r1, [pc, #68]	@ (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fd0:	5c8a      	ldrb	r2, [r1, r2]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fd6:	7b3a      	ldrb	r2, [r7, #12]
 8005fd8:	490f      	ldr	r1, [pc, #60]	@ (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005fda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	7b7a      	ldrb	r2, [r7, #13]
 8005fec:	4909      	ldr	r1, [pc, #36]	@ (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fee:	5c8a      	ldrb	r2, [r1, r2]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff4:	7b7a      	ldrb	r2, [r7, #13]
 8005ff6:	4908      	ldr	r1, [pc, #32]	@ (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	080066c4 	.word	0x080066c4
 8006018:	080066cc 	.word	0x080066cc

0800601c <USB_CoreInit>:
=======
 8005ffc:	e031      	b.n	8006062 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ffe:	2310      	movs	r3, #16
 8006000:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006002:	2310      	movs	r3, #16
 8006004:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	0e5b      	lsrs	r3, r3, #25
 800600e:	b2db      	uxtb	r3, r3
 8006010:	f003 0307 	and.w	r3, r3, #7
 8006014:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689b      	ldr	r3, [r3, #8]
 800601c:	0f5b      	lsrs	r3, r3, #29
 800601e:	b2db      	uxtb	r3, r3
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006026:	7bbb      	ldrb	r3, [r7, #14]
 8006028:	7b3a      	ldrb	r2, [r7, #12]
 800602a:	4911      	ldr	r1, [pc, #68]	@ (8006070 <UARTEx_SetNbDataToProcess+0x94>)
 800602c:	5c8a      	ldrb	r2, [r1, r2]
 800602e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006032:	7b3a      	ldrb	r2, [r7, #12]
 8006034:	490f      	ldr	r1, [pc, #60]	@ (8006074 <UARTEx_SetNbDataToProcess+0x98>)
 8006036:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006038:	fb93 f3f2 	sdiv	r3, r3, r2
 800603c:	b29a      	uxth	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	7b7a      	ldrb	r2, [r7, #13]
 8006048:	4909      	ldr	r1, [pc, #36]	@ (8006070 <UARTEx_SetNbDataToProcess+0x94>)
 800604a:	5c8a      	ldrb	r2, [r1, r2]
 800604c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006050:	7b7a      	ldrb	r2, [r7, #13]
 8006052:	4908      	ldr	r1, [pc, #32]	@ (8006074 <UARTEx_SetNbDataToProcess+0x98>)
 8006054:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006056:	fb93 f3f2 	sdiv	r3, r3, r2
 800605a:	b29a      	uxth	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006062:	bf00      	nop
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	080093ac 	.word	0x080093ac
 8006074:	080093b4 	.word	0x080093b4

08006078 <USB_CoreInit>:
>>>>>>> dev
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 800601c:	b084      	sub	sp, #16
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	f107 001c 	add.w	r0, r7, #28
 800602a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006032:	2b01      	cmp	r3, #1
 8006034:	d121      	bne.n	800607a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	4b2c      	ldr	r3, [pc, #176]	@ (80060f8 <USB_CoreInit+0xdc>)
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800605a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800605e:	2b01      	cmp	r3, #1
 8006060:	d105      	bne.n	800606e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60da      	str	r2, [r3, #12]
=======
 8006078:	b084      	sub	sp, #16
 800607a:	b580      	push	{r7, lr}
 800607c:	b084      	sub	sp, #16
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	f107 001c 	add.w	r0, r7, #28
 8006086:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800608a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800608e:	2b01      	cmp	r3, #1
 8006090:	d121      	bne.n	80060d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006096:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	4b2c      	ldr	r3, [pc, #176]	@ (8006154 <USB_CoreInit+0xdc>)
 80060a4:	4013      	ands	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80060b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060ba:	2b01      	cmp	r3, #1
 80060bc:	d105      	bne.n	80060ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	60da      	str	r2, [r3, #12]
>>>>>>> dev
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
<<<<<<< HEAD
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 faaa 	bl	80065c8 <USB_CoreReset>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e01b      	b.n	80060b2 <USB_CoreInit+0x96>
=======
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 faaa 	bl	8006624 <USB_CoreReset>
 80060d0:	4603      	mov	r3, r0
 80060d2:	73fb      	strb	r3, [r7, #15]
 80060d4:	e01b      	b.n	800610e <USB_CoreInit+0x96>
>>>>>>> dev
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
<<<<<<< HEAD
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa9e 	bl	80065c8 <USB_CoreReset>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80060a4:	e005      	b.n	80060b2 <USB_CoreInit+0x96>
=======
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 fa9e 	bl	8006624 <USB_CoreReset>
 80060e8:	4603      	mov	r3, r0
 80060ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80060ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d106      	bne.n	8006102 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8006100:	e005      	b.n	800610e <USB_CoreInit+0x96>
>>>>>>> dev
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
<<<<<<< HEAD
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006106:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> dev
    }
  }

  if (cfg.dma_enable == 1U)
<<<<<<< HEAD
 80060b2:	7fbb      	ldrb	r3, [r7, #30]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d116      	bne.n	80060e6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <USB_CoreInit+0xe0>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0206 	orr.w	r2, r3, #6
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f2:	b004      	add	sp, #16
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	ffbdffbf 	.word	0xffbdffbf
 80060fc:	03ee0000 	.word	0x03ee0000

08006100 <USB_DisableGlobalInt>:
=======
 800610e:	7fbb      	ldrb	r3, [r7, #30]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d116      	bne.n	8006142 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006118:	b29a      	uxth	r2, r3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006122:	4b0d      	ldr	r3, [pc, #52]	@ (8006158 <USB_CoreInit+0xe0>)
 8006124:	4313      	orrs	r3, r2
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f043 0206 	orr.w	r2, r3, #6
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800614e:	b004      	add	sp, #16
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	ffbdffbf 	.word	0xffbdffbf
 8006158:	03ee0000 	.word	0x03ee0000

0800615c <USB_DisableGlobalInt>:
>>>>>>> dev
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 0201 	bic.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_SetCurrentMode>:
=======
 800615c:	b480      	push	{r7}
 800615e:	b083      	sub	sp, #12
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f023 0201 	bic.w	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006170:	2300      	movs	r3, #0
}
 8006172:	4618      	mov	r0, r3
 8006174:	370c      	adds	r7, #12
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <USB_SetCurrentMode>:
>>>>>>> dev
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
<<<<<<< HEAD
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d115      	bne.n	8006170 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]
=======
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	460b      	mov	r3, r1
 8006188:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800618a:	2300      	movs	r3, #0
 800618c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d115      	bne.n	80061cc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	60da      	str	r2, [r3, #12]
>>>>>>> dev

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
 8006150:	200a      	movs	r0, #10
 8006152:	f7fa ffd5 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	330a      	adds	r3, #10
 800615a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa25 	bl	80065ac <USB_GetMode>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d01e      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2bc7      	cmp	r3, #199	@ 0xc7
 800616c:	d9f0      	bls.n	8006150 <USB_SetCurrentMode+0x2e>
 800616e:	e01a      	b.n	80061a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d115      	bne.n	80061a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]
=======
 80061ac:	200a      	movs	r0, #10
 80061ae:	f7fa ffd5 	bl	800115c <HAL_Delay>
      ms += 10U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	330a      	adds	r3, #10
 80061b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 fa25 	bl	8006608 <USB_GetMode>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	d01e      	beq.n	8006202 <USB_SetCurrentMode+0x84>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2bc7      	cmp	r3, #199	@ 0xc7
 80061c8:	d9f0      	bls.n	80061ac <USB_SetCurrentMode+0x2e>
 80061ca:	e01a      	b.n	8006202 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80061cc:	78fb      	ldrb	r3, [r7, #3]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d115      	bne.n	80061fe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	60da      	str	r2, [r3, #12]
>>>>>>> dev

    do
    {
      HAL_Delay(10U);
<<<<<<< HEAD
 8006182:	200a      	movs	r0, #10
 8006184:	f7fa ffbc 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	330a      	adds	r3, #10
 800618c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa0c 	bl	80065ac <USB_GetMode>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2bc7      	cmp	r3, #199	@ 0xc7
 800619e:	d9f0      	bls.n	8006182 <USB_SetCurrentMode+0x60>
 80061a0:	e001      	b.n	80061a6 <USB_SetCurrentMode+0x84>
=======
 80061de:	200a      	movs	r0, #10
 80061e0:	f7fa ffbc 	bl	800115c <HAL_Delay>
      ms += 10U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	330a      	adds	r3, #10
 80061e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 fa0c 	bl	8006608 <USB_GetMode>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d005      	beq.n	8006202 <USB_SetCurrentMode+0x84>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2bc7      	cmp	r3, #199	@ 0xc7
 80061fa:	d9f0      	bls.n	80061de <USB_SetCurrentMode+0x60>
 80061fc:	e001      	b.n	8006202 <USB_SetCurrentMode+0x84>
>>>>>>> dev
  }
  else
  {
    return HAL_ERROR;
<<<<<<< HEAD
 80061a2:	2301      	movs	r3, #1
 80061a4:	e005      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2bc8      	cmp	r3, #200	@ 0xc8
 80061aa:	d101      	bne.n	80061b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <USB_DevInit>:
=======
 80061fe:	2301      	movs	r3, #1
 8006200:	e005      	b.n	800620e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2bc8      	cmp	r3, #200	@ 0xc8
 8006206:	d101      	bne.n	800620c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e000      	b.n	800620e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800620c:	2300      	movs	r3, #0
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
	...

08006218 <USB_DevInit>:
>>>>>>> dev
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
<<<<<<< HEAD
 80061bc:	b084      	sub	sp, #16
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e009      	b.n	80061f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3340      	adds	r3, #64	@ 0x40
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0e      	cmp	r3, #14
 80061f4:	d9f2      	bls.n	80061dc <USB_DevInit+0x20>
=======
 8006218:	b084      	sub	sp, #16
 800621a:	b580      	push	{r7, lr}
 800621c:	b086      	sub	sp, #24
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
 8006222:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006226:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	613b      	str	r3, [r7, #16]
 8006236:	e009      	b.n	800624c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	3340      	adds	r3, #64	@ 0x40
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	2200      	movs	r2, #0
 8006244:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	3301      	adds	r3, #1
 800624a:	613b      	str	r3, [r7, #16]
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	2b0e      	cmp	r3, #14
 8006250:	d9f2      	bls.n	8006238 <USB_DevInit+0x20>
>>>>>>> dev
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
<<<<<<< HEAD
 80061f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d11c      	bne.n	8006238 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e005      	b.n	8006244 <USB_DevInit+0x88>
=======
 8006252:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006256:	2b00      	cmp	r3, #0
 8006258:	d11c      	bne.n	8006294 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006268:	f043 0302 	orr.w	r3, r3, #2
 800626c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006272:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	601a      	str	r2, [r3, #0]
 8006292:	e005      	b.n	80062a0 <USB_DevInit+0x88>
>>>>>>> dev
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
<<<<<<< HEAD
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	639a      	str	r2, [r3, #56]	@ 0x38
=======
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006298:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	639a      	str	r2, [r3, #56]	@ 0x38
>>>>>>> dev
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
<<<<<<< HEAD
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006250:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10d      	bne.n	8006274 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f968 	bl	8006538 <USB_SetDevSpeed>
 8006268:	e008      	b.n	800627c <USB_DevInit+0xc0>
=======
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062a6:	461a      	mov	r2, r3
 80062a8:	2300      	movs	r3, #0
 80062aa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80062ac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10d      	bne.n	80062d0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80062b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d104      	bne.n	80062c6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80062bc:	2100      	movs	r1, #0
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f000 f968 	bl	8006594 <USB_SetDevSpeed>
 80062c4:	e008      	b.n	80062d8 <USB_DevInit+0xc0>
>>>>>>> dev
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
<<<<<<< HEAD
 800626a:	2101      	movs	r1, #1
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f963 	bl	8006538 <USB_SetDevSpeed>
 8006272:	e003      	b.n	800627c <USB_DevInit+0xc0>
=======
 80062c6:	2101      	movs	r1, #1
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f000 f963 	bl	8006594 <USB_SetDevSpeed>
 80062ce:	e003      	b.n	80062d8 <USB_DevInit+0xc0>
>>>>>>> dev
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
<<<<<<< HEAD
 8006274:	2103      	movs	r1, #3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f95e 	bl	8006538 <USB_SetDevSpeed>
=======
 80062d0:	2103      	movs	r1, #3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f000 f95e 	bl	8006594 <USB_SetDevSpeed>
>>>>>>> dev
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
<<<<<<< HEAD
 800627c:	2110      	movs	r1, #16
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8fa 	bl	8006478 <USB_FlushTxFifo>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f924 	bl	80064dc <USB_FlushRxFifo>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
=======
 80062d8:	2110      	movs	r1, #16
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f8fa 	bl	80064d4 <USB_FlushTxFifo>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d001      	beq.n	80062ea <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f924 	bl	8006538 <USB_FlushRxFifo>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d001      	beq.n	80062fa <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	75fb      	strb	r3, [r7, #23]
>>>>>>> dev
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
<<<<<<< HEAD
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e043      	b.n	8006350 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062de:	d118      	bne.n	8006312 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e013      	b.n	8006324 <USB_DevInit+0x168>
=======
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006300:	461a      	mov	r2, r3
 8006302:	2300      	movs	r3, #0
 8006304:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006318:	461a      	mov	r2, r3
 800631a:	2300      	movs	r3, #0
 800631c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631e:	2300      	movs	r3, #0
 8006320:	613b      	str	r3, [r7, #16]
 8006322:	e043      	b.n	80063ac <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006336:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800633a:	d118      	bne.n	800636e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10a      	bne.n	8006358 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	015a      	lsls	r2, r3, #5
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4413      	add	r3, r2
 800634a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800634e:	461a      	mov	r2, r3
 8006350:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006354:	6013      	str	r3, [r2, #0]
 8006356:	e013      	b.n	8006380 <USB_DevInit+0x168>
>>>>>>> dev
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
<<<<<<< HEAD
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e008      	b.n	8006324 <USB_DevInit+0x168>
=======
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006364:	461a      	mov	r2, r3
 8006366:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	e008      	b.n	8006380 <USB_DevInit+0x168>
>>>>>>> dev
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
<<<<<<< HEAD
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	461a      	mov	r2, r3
 8006320:	2300      	movs	r3, #0
 8006322:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006342:	461a      	mov	r2, r3
 8006344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006354:	461a      	mov	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4293      	cmp	r3, r2
 800635a:	d3b5      	bcc.n	80062c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e043      	b.n	80063ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006378:	d118      	bne.n	80063ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e013      	b.n	80063be <USB_DevInit+0x202>
=======
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800637a:	461a      	mov	r2, r3
 800637c:	2300      	movs	r3, #0
 800637e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800638c:	461a      	mov	r2, r3
 800638e:	2300      	movs	r3, #0
 8006390:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800639e:	461a      	mov	r2, r3
 80063a0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	3301      	adds	r3, #1
 80063aa:	613b      	str	r3, [r7, #16]
 80063ac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b0:	461a      	mov	r2, r3
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d3b5      	bcc.n	8006324 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b8:	2300      	movs	r3, #0
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	e043      	b.n	8006446 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d4:	d118      	bne.n	8006408 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e8:	461a      	mov	r2, r3
 80063ea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80063ee:	6013      	str	r3, [r2, #0]
 80063f0:	e013      	b.n	800641a <USB_DevInit+0x202>
>>>>>>> dev
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
<<<<<<< HEAD
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a2:	461a      	mov	r2, r3
 80063a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e008      	b.n	80063be <USB_DevInit+0x202>
=======
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	015a      	lsls	r2, r3, #5
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4413      	add	r3, r2
 80063fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fe:	461a      	mov	r2, r3
 8006400:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006404:	6013      	str	r3, [r2, #0]
 8006406:	e008      	b.n	800641a <USB_DevInit+0x202>
>>>>>>> dev
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
<<<<<<< HEAD
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b8:	461a      	mov	r2, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	2300      	movs	r3, #0
 80063ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063dc:	461a      	mov	r2, r3
 80063de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3301      	adds	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ee:	461a      	mov	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d3b5      	bcc.n	8006362 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	619a      	str	r2, [r3, #24]
=======
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	015a      	lsls	r2, r3, #5
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4413      	add	r3, r2
 8006410:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006414:	461a      	mov	r2, r3
 8006416:	2300      	movs	r3, #0
 8006418:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	015a      	lsls	r2, r3, #5
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	4413      	add	r3, r2
 8006422:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006426:	461a      	mov	r2, r3
 8006428:	2300      	movs	r3, #0
 800642a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006438:	461a      	mov	r2, r3
 800643a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800643e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	3301      	adds	r3, #1
 8006444:	613b      	str	r3, [r7, #16]
 8006446:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800644a:	461a      	mov	r2, r3
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	4293      	cmp	r3, r2
 8006450:	d3b5      	bcc.n	80063be <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006460:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006464:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006472:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006474:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006478:	2b00      	cmp	r3, #0
 800647a:	d105      	bne.n	8006488 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	699b      	ldr	r3, [r3, #24]
 8006480:	f043 0210 	orr.w	r2, r3, #16
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	619a      	str	r2, [r3, #24]
>>>>>>> dev
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
<<<<<<< HEAD
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <USB_DevInit+0x2b4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6193      	str	r3, [r2, #24]
=======
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699a      	ldr	r2, [r3, #24]
 800648c:	4b0f      	ldr	r3, [pc, #60]	@ (80064cc <USB_DevInit+0x2b4>)
 800648e:	4313      	orrs	r3, r2
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6193      	str	r3, [r2, #24]
>>>>>>> dev
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
<<<<<<< HEAD
 8006438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f043 0208 	orr.w	r2, r3, #8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800644c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <USB_DevInit+0x2b8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800646c:	b004      	add	sp, #16
 800646e:	4770      	bx	lr
 8006470:	803c3800 	.word	0x803c3800
 8006474:	40000004 	.word	0x40000004

08006478 <USB_FlushTxFifo>:
=======
 8006494:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006498:	2b00      	cmp	r3, #0
 800649a:	d005      	beq.n	80064a8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	699b      	ldr	r3, [r3, #24]
 80064a0:	f043 0208 	orr.w	r2, r3, #8
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80064a8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d105      	bne.n	80064bc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	4b06      	ldr	r3, [pc, #24]	@ (80064d0 <USB_DevInit+0x2b8>)
 80064b6:	4313      	orrs	r3, r2
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3718      	adds	r7, #24
 80064c2:	46bd      	mov	sp, r7
 80064c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064c8:	b004      	add	sp, #16
 80064ca:	4770      	bx	lr
 80064cc:	803c3800 	.word	0x803c3800
 80064d0:	40000004 	.word	0x40000004

080064d4 <USB_FlushTxFifo>:
>>>>>>> dev
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
<<<<<<< HEAD
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]
=======
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
>>>>>>> dev

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006492:	d901      	bls.n	8006498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e01b      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	daf2      	bge.n	8006486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	019b      	lsls	r3, r3, #6
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	611a      	str	r2, [r3, #16]
=======
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	3301      	adds	r3, #1
 80064e6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ee:	d901      	bls.n	80064f4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064f0:	2303      	movs	r3, #3
 80064f2:	e01b      	b.n	800652c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	daf2      	bge.n	80064e2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	019b      	lsls	r3, r3, #6
 8006504:	f043 0220 	orr.w	r2, r3, #32
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	611a      	str	r2, [r3, #16]
>>>>>>> dev

  do
  {
    count++;
<<<<<<< HEAD
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064bc:	d901      	bls.n	80064c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e006      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d0f0      	beq.n	80064b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_FlushRxFifo>:
=======
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006518:	d901      	bls.n	800651e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e006      	b.n	800652c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0320 	and.w	r3, r3, #32
 8006526:	2b20      	cmp	r3, #32
 8006528:	d0f0      	beq.n	800650c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_FlushRxFifo>:
>>>>>>> dev
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]
=======
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006540:	2300      	movs	r3, #0
 8006542:	60fb      	str	r3, [r7, #12]
>>>>>>> dev

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f4:	d901      	bls.n	80064fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e018      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2210      	movs	r2, #16
 800650a:	611a      	str	r2, [r3, #16]
=======
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	3301      	adds	r3, #1
 8006548:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006550:	d901      	bls.n	8006556 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006552:	2303      	movs	r3, #3
 8006554:	e018      	b.n	8006588 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691b      	ldr	r3, [r3, #16]
 800655a:	2b00      	cmp	r3, #0
 800655c:	daf2      	bge.n	8006544 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2210      	movs	r2, #16
 8006566:	611a      	str	r2, [r3, #16]
>>>>>>> dev

  do
  {
    count++;
<<<<<<< HEAD
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006518:	d901      	bls.n	800651e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e006      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d0f0      	beq.n	800650c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_SetDevSpeed>:
=======
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	3301      	adds	r3, #1
 800656c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006574:	d901      	bls.n	800657a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006576:	2303      	movs	r3, #3
 8006578:	e006      	b.n	8006588 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	f003 0310 	and.w	r3, r3, #16
 8006582:	2b10      	cmp	r3, #16
 8006584:	d0f0      	beq.n	8006568 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3714      	adds	r7, #20
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <USB_SetDevSpeed>:
>>>>>>> dev
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
<<<<<<< HEAD
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_DevDisconnect>:
=======
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	460b      	mov	r3, r1
 800659e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	68f9      	ldr	r1, [r7, #12]
 80065b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065b4:	4313      	orrs	r3, r2
 80065b6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <USB_DevDisconnect>:
>>>>>>> dev
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_GetMode>:
=======
 80065c6:	b480      	push	{r7}
 80065c8:	b085      	sub	sp, #20
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68fa      	ldr	r2, [r7, #12]
 80065dc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80065e0:	f023 0303 	bic.w	r3, r3, #3
 80065e4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065f4:	f043 0302 	orr.w	r3, r3, #2
 80065f8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3714      	adds	r7, #20
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <USB_GetMode>:
>>>>>>> dev
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0301 	and.w	r3, r3, #1
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_CoreReset>:
=======
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	695b      	ldr	r3, [r3, #20]
 8006614:	f003 0301 	and.w	r3, r3, #1
}
 8006618:	4618      	mov	r0, r3
 800661a:	370c      	adds	r7, #12
 800661c:	46bd      	mov	sp, r7
 800661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006622:	4770      	bx	lr

08006624 <USB_CoreReset>:
>>>>>>> dev
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
<<<<<<< HEAD
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]
=======
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800662c:	2300      	movs	r3, #0
 800662e:	60fb      	str	r3, [r7, #12]
>>>>>>> dev

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
<<<<<<< HEAD
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065e0:	d901      	bls.n	80065e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e01b      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	daf2      	bge.n	80065d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	611a      	str	r2, [r3, #16]
=======
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3301      	adds	r3, #1
 8006634:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800663c:	d901      	bls.n	8006642 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e01b      	b.n	800667a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	691b      	ldr	r3, [r3, #16]
 8006646:	2b00      	cmp	r3, #0
 8006648:	daf2      	bge.n	8006630 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800664a:	2300      	movs	r3, #0
 800664c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	f043 0201 	orr.w	r2, r3, #1
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	611a      	str	r2, [r3, #16]
>>>>>>> dev

  do
  {
    count++;
<<<<<<< HEAD
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800660a:	d901      	bls.n	8006610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d0f0      	beq.n	80065fe <USB_CoreReset+0x36>

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <memset>:
 800662a:	4402      	add	r2, r0
 800662c:	4603      	mov	r3, r0
 800662e:	4293      	cmp	r3, r2
 8006630:	d100      	bne.n	8006634 <memset+0xa>
 8006632:	4770      	bx	lr
 8006634:	f803 1b01 	strb.w	r1, [r3], #1
 8006638:	e7f9      	b.n	800662e <memset+0x4>
	...

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	@ (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	@ (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	@ (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	@ (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f818 	bl	8006684 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	080066dc 	.word	0x080066dc
 8006678:	080066dc 	.word	0x080066dc
 800667c:	080066dc 	.word	0x080066dc
 8006680:	080066e0 	.word	0x080066e0

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
=======
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006666:	d901      	bls.n	800666c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e006      	b.n	800667a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d0f0      	beq.n	800665a <USB_CoreReset+0x36>

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3714      	adds	r7, #20
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr
	...

08006688 <__NVIC_SetPriority>:
{
 8006688:	b480      	push	{r7}
 800668a:	b083      	sub	sp, #12
 800668c:	af00      	add	r7, sp, #0
 800668e:	4603      	mov	r3, r0
 8006690:	6039      	str	r1, [r7, #0]
 8006692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006698:	2b00      	cmp	r3, #0
 800669a:	db0a      	blt.n	80066b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	b2da      	uxtb	r2, r3
 80066a0:	490c      	ldr	r1, [pc, #48]	@ (80066d4 <__NVIC_SetPriority+0x4c>)
 80066a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066a6:	0112      	lsls	r2, r2, #4
 80066a8:	b2d2      	uxtb	r2, r2
 80066aa:	440b      	add	r3, r1
 80066ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80066b0:	e00a      	b.n	80066c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	b2da      	uxtb	r2, r3
 80066b6:	4908      	ldr	r1, [pc, #32]	@ (80066d8 <__NVIC_SetPriority+0x50>)
 80066b8:	88fb      	ldrh	r3, [r7, #6]
 80066ba:	f003 030f 	and.w	r3, r3, #15
 80066be:	3b04      	subs	r3, #4
 80066c0:	0112      	lsls	r2, r2, #4
 80066c2:	b2d2      	uxtb	r2, r2
 80066c4:	440b      	add	r3, r1
 80066c6:	761a      	strb	r2, [r3, #24]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	e000e100 	.word	0xe000e100
 80066d8:	e000ed00 	.word	0xe000ed00

080066dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80066e0:	2100      	movs	r1, #0
 80066e2:	f06f 0004 	mvn.w	r0, #4
 80066e6:	f7ff ffcf 	bl	8006688 <__NVIC_SetPriority>
#endif
}
 80066ea:	bf00      	nop
 80066ec:	bd80      	pop	{r7, pc}
	...

080066f0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066f6:	f3ef 8305 	mrs	r3, IPSR
 80066fa:	603b      	str	r3, [r7, #0]
  return(result);
 80066fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006702:	f06f 0305 	mvn.w	r3, #5
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e00c      	b.n	8006724 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800670a:	4b0a      	ldr	r3, [pc, #40]	@ (8006734 <osKernelInitialize+0x44>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d105      	bne.n	800671e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006712:	4b08      	ldr	r3, [pc, #32]	@ (8006734 <osKernelInitialize+0x44>)
 8006714:	2201      	movs	r2, #1
 8006716:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006718:	2300      	movs	r3, #0
 800671a:	607b      	str	r3, [r7, #4]
 800671c:	e002      	b.n	8006724 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800671e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006722:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006724:	687b      	ldr	r3, [r7, #4]
}
 8006726:	4618      	mov	r0, r3
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr
 8006732:	bf00      	nop
 8006734:	24000760 	.word	0x24000760

08006738 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006738:	b580      	push	{r7, lr}
 800673a:	b082      	sub	sp, #8
 800673c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800673e:	f3ef 8305 	mrs	r3, IPSR
 8006742:	603b      	str	r3, [r7, #0]
  return(result);
 8006744:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <osKernelStart+0x1a>
    stat = osErrorISR;
 800674a:	f06f 0305 	mvn.w	r3, #5
 800674e:	607b      	str	r3, [r7, #4]
 8006750:	e010      	b.n	8006774 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006752:	4b0b      	ldr	r3, [pc, #44]	@ (8006780 <osKernelStart+0x48>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b01      	cmp	r3, #1
 8006758:	d109      	bne.n	800676e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800675a:	f7ff ffbf 	bl	80066dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800675e:	4b08      	ldr	r3, [pc, #32]	@ (8006780 <osKernelStart+0x48>)
 8006760:	2202      	movs	r2, #2
 8006762:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006764:	f001 f87a 	bl	800785c <vTaskStartScheduler>
      stat = osOK;
 8006768:	2300      	movs	r3, #0
 800676a:	607b      	str	r3, [r7, #4]
 800676c:	e002      	b.n	8006774 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800676e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006772:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006774:	687b      	ldr	r3, [r7, #4]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	24000760 	.word	0x24000760

08006784 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006784:	b580      	push	{r7, lr}
 8006786:	b08e      	sub	sp, #56	@ 0x38
 8006788:	af04      	add	r7, sp, #16
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006790:	2300      	movs	r3, #0
 8006792:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006794:	f3ef 8305 	mrs	r3, IPSR
 8006798:	617b      	str	r3, [r7, #20]
  return(result);
 800679a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800679c:	2b00      	cmp	r3, #0
 800679e:	d17e      	bne.n	800689e <osThreadNew+0x11a>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d07b      	beq.n	800689e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80067a6:	2380      	movs	r3, #128	@ 0x80
 80067a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80067aa:	2318      	movs	r3, #24
 80067ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80067b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80067b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d045      	beq.n	800684a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <osThreadNew+0x48>
        name = attr->name;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	699b      	ldr	r3, [r3, #24]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d002      	beq.n	80067da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	699b      	ldr	r3, [r3, #24]
 80067d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80067da:	69fb      	ldr	r3, [r7, #28]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d008      	beq.n	80067f2 <osThreadNew+0x6e>
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	2b38      	cmp	r3, #56	@ 0x38
 80067e4:	d805      	bhi.n	80067f2 <osThreadNew+0x6e>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <osThreadNew+0x72>
        return (NULL);
 80067f2:	2300      	movs	r3, #0
 80067f4:	e054      	b.n	80068a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d003      	beq.n	8006806 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	695b      	ldr	r3, [r3, #20]
 8006802:	089b      	lsrs	r3, r3, #2
 8006804:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <osThreadNew+0xa8>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	2b5b      	cmp	r3, #91	@ 0x5b
 8006814:	d90a      	bls.n	800682c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800681a:	2b00      	cmp	r3, #0
 800681c:	d006      	beq.n	800682c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d002      	beq.n	800682c <osThreadNew+0xa8>
        mem = 1;
 8006826:	2301      	movs	r3, #1
 8006828:	61bb      	str	r3, [r7, #24]
 800682a:	e010      	b.n	800684e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10c      	bne.n	800684e <osThreadNew+0xca>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d108      	bne.n	800684e <osThreadNew+0xca>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d104      	bne.n	800684e <osThreadNew+0xca>
          mem = 0;
 8006844:	2300      	movs	r3, #0
 8006846:	61bb      	str	r3, [r7, #24]
 8006848:	e001      	b.n	800684e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800684a:	2300      	movs	r3, #0
 800684c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d110      	bne.n	8006876 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800685c:	9202      	str	r2, [sp, #8]
 800685e:	9301      	str	r3, [sp, #4]
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	6a3a      	ldr	r2, [r7, #32]
 8006868:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fe1a 	bl	80074a4 <xTaskCreateStatic>
 8006870:	4603      	mov	r3, r0
 8006872:	613b      	str	r3, [r7, #16]
 8006874:	e013      	b.n	800689e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d110      	bne.n	800689e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800687c:	6a3b      	ldr	r3, [r7, #32]
 800687e:	b29a      	uxth	r2, r3
 8006880:	f107 0310 	add.w	r3, r7, #16
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	69fb      	ldr	r3, [r7, #28]
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800688e:	68f8      	ldr	r0, [r7, #12]
 8006890:	f000 fe68 	bl	8007564 <xTaskCreate>
 8006894:	4603      	mov	r3, r0
 8006896:	2b01      	cmp	r3, #1
 8006898:	d001      	beq.n	800689e <osThreadNew+0x11a>
            hTask = NULL;
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800689e:	693b      	ldr	r3, [r7, #16]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3728      	adds	r7, #40	@ 0x28
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068b0:	f3ef 8305 	mrs	r3, IPSR
 80068b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80068b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d003      	beq.n	80068c4 <osDelay+0x1c>
    stat = osErrorISR;
 80068bc:	f06f 0305 	mvn.w	r3, #5
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e007      	b.n	80068d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 ff8e 	bl	80077f0 <vTaskDelay>
    }
  }

  return (stat);
 80068d4:	68fb      	ldr	r3, [r7, #12]
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80068e0:	b480      	push	{r7}
 80068e2:	b085      	sub	sp, #20
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4a07      	ldr	r2, [pc, #28]	@ (800690c <vApplicationGetIdleTaskMemory+0x2c>)
 80068f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	4a06      	ldr	r2, [pc, #24]	@ (8006910 <vApplicationGetIdleTaskMemory+0x30>)
 80068f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2280      	movs	r2, #128	@ 0x80
 80068fc:	601a      	str	r2, [r3, #0]
}
 80068fe:	bf00      	nop
 8006900:	3714      	adds	r7, #20
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr
 800690a:	bf00      	nop
 800690c:	24000764 	.word	0x24000764
 8006910:	240007c0 	.word	0x240007c0

08006914 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006914:	b480      	push	{r7}
 8006916:	b085      	sub	sp, #20
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	4a07      	ldr	r2, [pc, #28]	@ (8006940 <vApplicationGetTimerTaskMemory+0x2c>)
 8006924:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	4a06      	ldr	r2, [pc, #24]	@ (8006944 <vApplicationGetTimerTaskMemory+0x30>)
 800692a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006932:	601a      	str	r2, [r3, #0]
}
 8006934:	bf00      	nop
 8006936:	3714      	adds	r7, #20
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	240009c0 	.word	0x240009c0
 8006944:	24000a1c 	.word	0x24000a1c

08006948 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f103 0208 	add.w	r2, r3, #8
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006960:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f103 0208 	add.w	r2, r3, #8
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	f103 0208 	add.w	r2, r3, #8
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006988:	b480      	push	{r7}
 800698a:	b083      	sub	sp, #12
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006996:	bf00      	nop
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069a2:	b480      	push	{r7}
 80069a4:	b085      	sub	sp, #20
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	683a      	ldr	r2, [r7, #0]
 80069cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	601a      	str	r2, [r3, #0]
}
 80069de:	bf00      	nop
 80069e0:	3714      	adds	r7, #20
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr

080069ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80069ea:	b480      	push	{r7}
 80069ec:	b085      	sub	sp, #20
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	6078      	str	r0, [r7, #4]
 80069f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a00:	d103      	bne.n	8006a0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	60fb      	str	r3, [r7, #12]
 8006a08:	e00c      	b.n	8006a24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	3308      	adds	r3, #8
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <vListInsert+0x2e>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68ba      	ldr	r2, [r7, #8]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d2f6      	bcs.n	8006a12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	685a      	ldr	r2, [r3, #4]
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	683a      	ldr	r2, [r7, #0]
 8006a3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	1c5a      	adds	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	601a      	str	r2, [r3, #0]
}
 8006a50:	bf00      	nop
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	685b      	ldr	r3, [r3, #4]
 8006a6e:	687a      	ldr	r2, [r7, #4]
 8006a70:	6892      	ldr	r2, [r2, #8]
 8006a72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	6852      	ldr	r2, [r2, #4]
 8006a7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d103      	bne.n	8006a90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	689a      	ldr	r2, [r3, #8]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	1e5a      	subs	r2, r3, #1
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d10b      	bne.n	8006adc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	e7fd      	b.n	8006ad8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006adc:	f002 f8c4 	bl	8008c68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ae8:	68f9      	ldr	r1, [r7, #12]
 8006aea:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aec:	fb01 f303 	mul.w	r3, r1, r3
 8006af0:	441a      	add	r2, r3
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	68f9      	ldr	r1, [r7, #12]
 8006b10:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006b12:	fb01 f303 	mul.w	r3, r1, r3
 8006b16:	441a      	add	r2, r3
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	22ff      	movs	r2, #255	@ 0xff
 8006b20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	22ff      	movs	r2, #255	@ 0xff
 8006b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d114      	bne.n	8006b5c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	691b      	ldr	r3, [r3, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d01a      	beq.n	8006b70 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	3310      	adds	r3, #16
 8006b3e:	4618      	mov	r0, r3
 8006b40:	f001 f91a 	bl	8007d78 <xTaskRemoveFromEventList>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d012      	beq.n	8006b70 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <xQueueGenericReset+0xd0>)
 8006b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b50:	601a      	str	r2, [r3, #0]
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	e009      	b.n	8006b70 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3310      	adds	r3, #16
 8006b60:	4618      	mov	r0, r3
 8006b62:	f7ff fef1 	bl	8006948 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3324      	adds	r3, #36	@ 0x24
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff feec 	bl	8006948 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b70:	f002 f8ac 	bl	8008ccc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b74:	2301      	movs	r3, #1
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	e000ed04 	.word	0xe000ed04

08006b84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b08e      	sub	sp, #56	@ 0x38
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d10b      	bne.n	8006bb0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006baa:	bf00      	nop
 8006bac:	bf00      	nop
 8006bae:	e7fd      	b.n	8006bac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d002      	beq.n	8006bda <xQueueGenericCreateStatic+0x56>
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <xQueueGenericCreateStatic+0x5a>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e000      	b.n	8006be0 <xQueueGenericCreateStatic+0x5c>
 8006bde:	2300      	movs	r3, #0
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10b      	bne.n	8006bfc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	623b      	str	r3, [r7, #32]
}
 8006bf6:	bf00      	nop
 8006bf8:	bf00      	nop
 8006bfa:	e7fd      	b.n	8006bf8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d102      	bne.n	8006c08 <xQueueGenericCreateStatic+0x84>
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d101      	bne.n	8006c0c <xQueueGenericCreateStatic+0x88>
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e000      	b.n	8006c0e <xQueueGenericCreateStatic+0x8a>
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10b      	bne.n	8006c2a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	61fb      	str	r3, [r7, #28]
}
 8006c24:	bf00      	nop
 8006c26:	bf00      	nop
 8006c28:	e7fd      	b.n	8006c26 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006c2a:	2350      	movs	r3, #80	@ 0x50
 8006c2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b50      	cmp	r3, #80	@ 0x50
 8006c32:	d00b      	beq.n	8006c4c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	61bb      	str	r3, [r7, #24]
}
 8006c46:	bf00      	nop
 8006c48:	bf00      	nop
 8006c4a:	e7fd      	b.n	8006c48 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006c4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00d      	beq.n	8006c74 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006c60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c66:	9300      	str	r3, [sp, #0]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	68f8      	ldr	r0, [r7, #12]
 8006c70:	f000 f805 	bl	8006c7e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3730      	adds	r7, #48	@ 0x30
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}

08006c7e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	60f8      	str	r0, [r7, #12]
 8006c86:	60b9      	str	r1, [r7, #8]
 8006c88:	607a      	str	r2, [r7, #4]
 8006c8a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	69ba      	ldr	r2, [r7, #24]
 8006c96:	601a      	str	r2, [r3, #0]
 8006c98:	e002      	b.n	8006ca0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	68ba      	ldr	r2, [r7, #8]
 8006caa:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006cac:	2101      	movs	r1, #1
 8006cae:	69b8      	ldr	r0, [r7, #24]
 8006cb0:	f7ff fefe 	bl	8006ab0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	78fa      	ldrb	r2, [r7, #3]
 8006cb8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006cbc:	bf00      	nop
 8006cbe:	3710      	adds	r7, #16
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b08e      	sub	sp, #56	@ 0x38
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
 8006cd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d10b      	bne.n	8006cf8 <xQueueGenericSend+0x34>
	__asm volatile
 8006ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce4:	f383 8811 	msr	BASEPRI, r3
 8006ce8:	f3bf 8f6f 	isb	sy
 8006cec:	f3bf 8f4f 	dsb	sy
 8006cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006cf2:	bf00      	nop
 8006cf4:	bf00      	nop
 8006cf6:	e7fd      	b.n	8006cf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d103      	bne.n	8006d06 <xQueueGenericSend+0x42>
 8006cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <xQueueGenericSend+0x46>
 8006d06:	2301      	movs	r3, #1
 8006d08:	e000      	b.n	8006d0c <xQueueGenericSend+0x48>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d10b      	bne.n	8006d28 <xQueueGenericSend+0x64>
	__asm volatile
 8006d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d14:	f383 8811 	msr	BASEPRI, r3
 8006d18:	f3bf 8f6f 	isb	sy
 8006d1c:	f3bf 8f4f 	dsb	sy
 8006d20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006d22:	bf00      	nop
 8006d24:	bf00      	nop
 8006d26:	e7fd      	b.n	8006d24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d103      	bne.n	8006d36 <xQueueGenericSend+0x72>
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d101      	bne.n	8006d3a <xQueueGenericSend+0x76>
 8006d36:	2301      	movs	r3, #1
 8006d38:	e000      	b.n	8006d3c <xQueueGenericSend+0x78>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d10b      	bne.n	8006d58 <xQueueGenericSend+0x94>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	623b      	str	r3, [r7, #32]
}
 8006d52:	bf00      	nop
 8006d54:	bf00      	nop
 8006d56:	e7fd      	b.n	8006d54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d58:	f001 f9ce 	bl	80080f8 <xTaskGetSchedulerState>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d102      	bne.n	8006d68 <xQueueGenericSend+0xa4>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d101      	bne.n	8006d6c <xQueueGenericSend+0xa8>
 8006d68:	2301      	movs	r3, #1
 8006d6a:	e000      	b.n	8006d6e <xQueueGenericSend+0xaa>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d10b      	bne.n	8006d8a <xQueueGenericSend+0xc6>
	__asm volatile
 8006d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d76:	f383 8811 	msr	BASEPRI, r3
 8006d7a:	f3bf 8f6f 	isb	sy
 8006d7e:	f3bf 8f4f 	dsb	sy
 8006d82:	61fb      	str	r3, [r7, #28]
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop
 8006d88:	e7fd      	b.n	8006d86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d8a:	f001 ff6d 	bl	8008c68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d302      	bcc.n	8006da0 <xQueueGenericSend+0xdc>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b02      	cmp	r3, #2
 8006d9e:	d129      	bne.n	8006df4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006da0:	683a      	ldr	r2, [r7, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006da6:	f000 fa0f 	bl	80071c8 <prvCopyDataToQueue>
 8006daa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d010      	beq.n	8006dd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006db6:	3324      	adds	r3, #36	@ 0x24
 8006db8:	4618      	mov	r0, r3
 8006dba:	f000 ffdd 	bl	8007d78 <xTaskRemoveFromEventList>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d013      	beq.n	8006dec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006dc4:	4b3f      	ldr	r3, [pc, #252]	@ (8006ec4 <xQueueGenericSend+0x200>)
 8006dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006dca:	601a      	str	r2, [r3, #0]
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	f3bf 8f6f 	isb	sy
 8006dd4:	e00a      	b.n	8006dec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006ddc:	4b39      	ldr	r3, [pc, #228]	@ (8006ec4 <xQueueGenericSend+0x200>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006dec:	f001 ff6e 	bl	8008ccc <vPortExitCritical>
				return pdPASS;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e063      	b.n	8006ebc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d103      	bne.n	8006e02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006dfa:	f001 ff67 	bl	8008ccc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	e05c      	b.n	8006ebc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d106      	bne.n	8006e16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e08:	f107 0314 	add.w	r3, r7, #20
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f001 f817 	bl	8007e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e12:	2301      	movs	r3, #1
 8006e14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e16:	f001 ff59 	bl	8008ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e1a:	f000 fd87 	bl	800792c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e1e:	f001 ff23 	bl	8008c68 <vPortEnterCritical>
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e28:	b25b      	sxtb	r3, r3
 8006e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e2e:	d103      	bne.n	8006e38 <xQueueGenericSend+0x174>
 8006e30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e3e:	b25b      	sxtb	r3, r3
 8006e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e44:	d103      	bne.n	8006e4e <xQueueGenericSend+0x18a>
 8006e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e4e:	f001 ff3d 	bl	8008ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e52:	1d3a      	adds	r2, r7, #4
 8006e54:	f107 0314 	add.w	r3, r7, #20
 8006e58:	4611      	mov	r1, r2
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f001 f806 	bl	8007e6c <xTaskCheckForTimeOut>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d124      	bne.n	8006eb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e68:	f000 faa6 	bl	80073b8 <prvIsQueueFull>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d018      	beq.n	8006ea4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e74:	3310      	adds	r3, #16
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f000 ff2a 	bl	8007cd4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e82:	f000 fa31 	bl	80072e8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e86:	f000 fd5f 	bl	8007948 <xTaskResumeAll>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f47f af7c 	bne.w	8006d8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e92:	4b0c      	ldr	r3, [pc, #48]	@ (8006ec4 <xQueueGenericSend+0x200>)
 8006e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e98:	601a      	str	r2, [r3, #0]
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	f3bf 8f6f 	isb	sy
 8006ea2:	e772      	b.n	8006d8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006ea4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ea6:	f000 fa1f 	bl	80072e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006eaa:	f000 fd4d 	bl	8007948 <xTaskResumeAll>
 8006eae:	e76c      	b.n	8006d8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006eb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006eb2:	f000 fa19 	bl	80072e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006eb6:	f000 fd47 	bl	8007948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006eba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3738      	adds	r7, #56	@ 0x38
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	e000ed04 	.word	0xe000ed04

08006ec8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b090      	sub	sp, #64	@ 0x40
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	607a      	str	r2, [r7, #4]
 8006ed4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10b      	bne.n	8006ef8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee4:	f383 8811 	msr	BASEPRI, r3
 8006ee8:	f3bf 8f6f 	isb	sy
 8006eec:	f3bf 8f4f 	dsb	sy
 8006ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006ef2:	bf00      	nop
 8006ef4:	bf00      	nop
 8006ef6:	e7fd      	b.n	8006ef4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d103      	bne.n	8006f06 <xQueueGenericSendFromISR+0x3e>
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d101      	bne.n	8006f0a <xQueueGenericSendFromISR+0x42>
 8006f06:	2301      	movs	r3, #1
 8006f08:	e000      	b.n	8006f0c <xQueueGenericSendFromISR+0x44>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d10b      	bne.n	8006f28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b02      	cmp	r3, #2
 8006f2c:	d103      	bne.n	8006f36 <xQueueGenericSendFromISR+0x6e>
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d101      	bne.n	8006f3a <xQueueGenericSendFromISR+0x72>
 8006f36:	2301      	movs	r3, #1
 8006f38:	e000      	b.n	8006f3c <xQueueGenericSendFromISR+0x74>
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10b      	bne.n	8006f58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f44:	f383 8811 	msr	BASEPRI, r3
 8006f48:	f3bf 8f6f 	isb	sy
 8006f4c:	f3bf 8f4f 	dsb	sy
 8006f50:	623b      	str	r3, [r7, #32]
}
 8006f52:	bf00      	nop
 8006f54:	bf00      	nop
 8006f56:	e7fd      	b.n	8006f54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006f58:	f001 ff66 	bl	8008e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006f5c:	f3ef 8211 	mrs	r2, BASEPRI
 8006f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f64:	f383 8811 	msr	BASEPRI, r3
 8006f68:	f3bf 8f6f 	isb	sy
 8006f6c:	f3bf 8f4f 	dsb	sy
 8006f70:	61fa      	str	r2, [r7, #28]
 8006f72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d302      	bcc.n	8006f8a <xQueueGenericSendFromISR+0xc2>
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d12f      	bne.n	8006fea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006fa0:	f000 f912 	bl	80071c8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006fa4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fac:	d112      	bne.n	8006fd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d016      	beq.n	8006fe4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fb8:	3324      	adds	r3, #36	@ 0x24
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 fedc 	bl	8007d78 <xTaskRemoveFromEventList>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00e      	beq.n	8006fe4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e007      	b.n	8006fe4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006fd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006fd8:	3301      	adds	r3, #1
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	b25a      	sxtb	r2, r3
 8006fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006fe8:	e001      	b.n	8006fee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006fee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006ff8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006ffa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3740      	adds	r7, #64	@ 0x40
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08c      	sub	sp, #48	@ 0x30
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007010:	2300      	movs	r3, #0
 8007012:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d10b      	bne.n	8007036 <xQueueReceive+0x32>
	__asm volatile
 800701e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007022:	f383 8811 	msr	BASEPRI, r3
 8007026:	f3bf 8f6f 	isb	sy
 800702a:	f3bf 8f4f 	dsb	sy
 800702e:	623b      	str	r3, [r7, #32]
}
 8007030:	bf00      	nop
 8007032:	bf00      	nop
 8007034:	e7fd      	b.n	8007032 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <xQueueReceive+0x40>
 800703c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007040:	2b00      	cmp	r3, #0
 8007042:	d101      	bne.n	8007048 <xQueueReceive+0x44>
 8007044:	2301      	movs	r3, #1
 8007046:	e000      	b.n	800704a <xQueueReceive+0x46>
 8007048:	2300      	movs	r3, #0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10b      	bne.n	8007066 <xQueueReceive+0x62>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61fb      	str	r3, [r7, #28]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007066:	f001 f847 	bl	80080f8 <xTaskGetSchedulerState>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d102      	bne.n	8007076 <xQueueReceive+0x72>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <xQueueReceive+0x76>
 8007076:	2301      	movs	r3, #1
 8007078:	e000      	b.n	800707c <xQueueReceive+0x78>
 800707a:	2300      	movs	r3, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	d10b      	bne.n	8007098 <xQueueReceive+0x94>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	61bb      	str	r3, [r7, #24]
}
 8007092:	bf00      	nop
 8007094:	bf00      	nop
 8007096:	e7fd      	b.n	8007094 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007098:	f001 fde6 	bl	8008c68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070a0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d01f      	beq.n	80070e8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070a8:	68b9      	ldr	r1, [r7, #8]
 80070aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070ac:	f000 f8f6 	bl	800729c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b2:	1e5a      	subs	r2, r3, #1
 80070b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80070b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00f      	beq.n	80070e0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	3310      	adds	r3, #16
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fe57 	bl	8007d78 <xTaskRemoveFromEventList>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d007      	beq.n	80070e0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80070d0:	4b3c      	ldr	r3, [pc, #240]	@ (80071c4 <xQueueReceive+0x1c0>)
 80070d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070d6:	601a      	str	r2, [r3, #0]
 80070d8:	f3bf 8f4f 	dsb	sy
 80070dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80070e0:	f001 fdf4 	bl	8008ccc <vPortExitCritical>
				return pdPASS;
 80070e4:	2301      	movs	r3, #1
 80070e6:	e069      	b.n	80071bc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d103      	bne.n	80070f6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80070ee:	f001 fded 	bl	8008ccc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e062      	b.n	80071bc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80070f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80070fc:	f107 0310 	add.w	r3, r7, #16
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fe9d 	bl	8007e40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007106:	2301      	movs	r3, #1
 8007108:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800710a:	f001 fddf 	bl	8008ccc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800710e:	f000 fc0d 	bl	800792c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007112:	f001 fda9 	bl	8008c68 <vPortEnterCritical>
 8007116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007118:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800711c:	b25b      	sxtb	r3, r3
 800711e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007122:	d103      	bne.n	800712c <xQueueReceive+0x128>
 8007124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007132:	b25b      	sxtb	r3, r3
 8007134:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007138:	d103      	bne.n	8007142 <xQueueReceive+0x13e>
 800713a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007142:	f001 fdc3 	bl	8008ccc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007146:	1d3a      	adds	r2, r7, #4
 8007148:	f107 0310 	add.w	r3, r7, #16
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f000 fe8c 	bl	8007e6c <xTaskCheckForTimeOut>
 8007154:	4603      	mov	r3, r0
 8007156:	2b00      	cmp	r3, #0
 8007158:	d123      	bne.n	80071a2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800715a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800715c:	f000 f916 	bl	800738c <prvIsQueueEmpty>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d017      	beq.n	8007196 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	3324      	adds	r3, #36	@ 0x24
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4611      	mov	r1, r2
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fdb0 	bl	8007cd4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007174:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007176:	f000 f8b7 	bl	80072e8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800717a:	f000 fbe5 	bl	8007948 <xTaskResumeAll>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d189      	bne.n	8007098 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007184:	4b0f      	ldr	r3, [pc, #60]	@ (80071c4 <xQueueReceive+0x1c0>)
 8007186:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	f3bf 8f4f 	dsb	sy
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	e780      	b.n	8007098 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007196:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007198:	f000 f8a6 	bl	80072e8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800719c:	f000 fbd4 	bl	8007948 <xTaskResumeAll>
 80071a0:	e77a      	b.n	8007098 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80071a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071a4:	f000 f8a0 	bl	80072e8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80071a8:	f000 fbce 	bl	8007948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80071ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80071ae:	f000 f8ed 	bl	800738c <prvIsQueueEmpty>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f43f af6f 	beq.w	8007098 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80071ba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3730      	adds	r7, #48	@ 0x30
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	e000ed04 	.word	0xe000ed04

080071c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80071d4:	2300      	movs	r3, #0
 80071d6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071dc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d10d      	bne.n	8007202 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d14d      	bne.n	800728a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	689b      	ldr	r3, [r3, #8]
 80071f2:	4618      	mov	r0, r3
 80071f4:	f000 ff9e 	bl	8008134 <xTaskPriorityDisinherit>
 80071f8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2200      	movs	r2, #0
 80071fe:	609a      	str	r2, [r3, #8]
 8007200:	e043      	b.n	800728a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d119      	bne.n	800723c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6858      	ldr	r0, [r3, #4]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007210:	461a      	mov	r2, r3
 8007212:	68b9      	ldr	r1, [r7, #8]
 8007214:	f002 f864 	bl	80092e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685a      	ldr	r2, [r3, #4]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007220:	441a      	add	r2, r3
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	685a      	ldr	r2, [r3, #4]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	429a      	cmp	r2, r3
 8007230:	d32b      	bcc.n	800728a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681a      	ldr	r2, [r3, #0]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	605a      	str	r2, [r3, #4]
 800723a:	e026      	b.n	800728a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68d8      	ldr	r0, [r3, #12]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007244:	461a      	mov	r2, r3
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	f002 f84a 	bl	80092e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68da      	ldr	r2, [r3, #12]
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007254:	425b      	negs	r3, r3
 8007256:	441a      	add	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68da      	ldr	r2, [r3, #12]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	429a      	cmp	r2, r3
 8007266:	d207      	bcs.n	8007278 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007270:	425b      	negs	r3, r3
 8007272:	441a      	add	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2b02      	cmp	r3, #2
 800727c:	d105      	bne.n	800728a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	3b01      	subs	r3, #1
 8007288:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	1c5a      	adds	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007292:	697b      	ldr	r3, [r7, #20]
}
 8007294:	4618      	mov	r0, r3
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b082      	sub	sp, #8
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
 80072a4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d018      	beq.n	80072e0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b6:	441a      	add	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d303      	bcc.n	80072d0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	68d9      	ldr	r1, [r3, #12]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d8:	461a      	mov	r2, r3
 80072da:	6838      	ldr	r0, [r7, #0]
 80072dc:	f002 f800 	bl	80092e0 <memcpy>
	}
}
 80072e0:	bf00      	nop
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80072f0:	f001 fcba 	bl	8008c68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072fa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fc:	e011      	b.n	8007322 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007302:	2b00      	cmp	r3, #0
 8007304:	d012      	beq.n	800732c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3324      	adds	r3, #36	@ 0x24
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fd34 	bl	8007d78 <xTaskRemoveFromEventList>
 8007310:	4603      	mov	r3, r0
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007316:	f000 fe0d 	bl	8007f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800731a:	7bfb      	ldrb	r3, [r7, #15]
 800731c:	3b01      	subs	r3, #1
 800731e:	b2db      	uxtb	r3, r3
 8007320:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007326:	2b00      	cmp	r3, #0
 8007328:	dce9      	bgt.n	80072fe <prvUnlockQueue+0x16>
 800732a:	e000      	b.n	800732e <prvUnlockQueue+0x46>
					break;
 800732c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	22ff      	movs	r2, #255	@ 0xff
 8007332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007336:	f001 fcc9 	bl	8008ccc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800733a:	f001 fc95 	bl	8008c68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007344:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007346:	e011      	b.n	800736c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d012      	beq.n	8007376 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	3310      	adds	r3, #16
 8007354:	4618      	mov	r0, r3
 8007356:	f000 fd0f 	bl	8007d78 <xTaskRemoveFromEventList>
 800735a:	4603      	mov	r3, r0
 800735c:	2b00      	cmp	r3, #0
 800735e:	d001      	beq.n	8007364 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007360:	f000 fde8 	bl	8007f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007364:	7bbb      	ldrb	r3, [r7, #14]
 8007366:	3b01      	subs	r3, #1
 8007368:	b2db      	uxtb	r3, r3
 800736a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800736c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007370:	2b00      	cmp	r3, #0
 8007372:	dce9      	bgt.n	8007348 <prvUnlockQueue+0x60>
 8007374:	e000      	b.n	8007378 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007376:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	22ff      	movs	r2, #255	@ 0xff
 800737c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007380:	f001 fca4 	bl	8008ccc <vPortExitCritical>
}
 8007384:	bf00      	nop
 8007386:	3710      	adds	r7, #16
 8007388:	46bd      	mov	sp, r7
 800738a:	bd80      	pop	{r7, pc}

0800738c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b084      	sub	sp, #16
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007394:	f001 fc68 	bl	8008c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80073a0:	2301      	movs	r3, #1
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	e001      	b.n	80073aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80073a6:	2300      	movs	r3, #0
 80073a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073aa:	f001 fc8f 	bl	8008ccc <vPortExitCritical>

	return xReturn;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80073c0:	f001 fc52 	bl	8008c68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073cc:	429a      	cmp	r2, r3
 80073ce:	d102      	bne.n	80073d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80073d0:	2301      	movs	r3, #1
 80073d2:	60fb      	str	r3, [r7, #12]
 80073d4:	e001      	b.n	80073da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80073da:	f001 fc77 	bl	8008ccc <vPortExitCritical>

	return xReturn;
 80073de:	68fb      	ldr	r3, [r7, #12]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]
 80073f6:	e014      	b.n	8007422 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80073f8:	4a0f      	ldr	r2, [pc, #60]	@ (8007438 <vQueueAddToRegistry+0x50>)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d10b      	bne.n	800741c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007404:	490c      	ldr	r1, [pc, #48]	@ (8007438 <vQueueAddToRegistry+0x50>)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800740e:	4a0a      	ldr	r2, [pc, #40]	@ (8007438 <vQueueAddToRegistry+0x50>)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	00db      	lsls	r3, r3, #3
 8007414:	4413      	add	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800741a:	e006      	b.n	800742a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	3301      	adds	r3, #1
 8007420:	60fb      	str	r3, [r7, #12]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b07      	cmp	r3, #7
 8007426:	d9e7      	bls.n	80073f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007428:	bf00      	nop
 800742a:	bf00      	nop
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	24000e1c 	.word	0x24000e1c

0800743c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	60f8      	str	r0, [r7, #12]
 8007444:	60b9      	str	r1, [r7, #8]
 8007446:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800744c:	f001 fc0c 	bl	8008c68 <vPortEnterCritical>
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007456:	b25b      	sxtb	r3, r3
 8007458:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800745c:	d103      	bne.n	8007466 <vQueueWaitForMessageRestricted+0x2a>
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800746c:	b25b      	sxtb	r3, r3
 800746e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007472:	d103      	bne.n	800747c <vQueueWaitForMessageRestricted+0x40>
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800747c:	f001 fc26 	bl	8008ccc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007484:	2b00      	cmp	r3, #0
 8007486:	d106      	bne.n	8007496 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	3324      	adds	r3, #36	@ 0x24
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	68b9      	ldr	r1, [r7, #8]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 fc45 	bl	8007d20 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007496:	6978      	ldr	r0, [r7, #20]
 8007498:	f7ff ff26 	bl	80072e8 <prvUnlockQueue>
	}
 800749c:	bf00      	nop
 800749e:	3718      	adds	r7, #24
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b08e      	sub	sp, #56	@ 0x38
 80074a8:	af04      	add	r7, sp, #16
 80074aa:	60f8      	str	r0, [r7, #12]
 80074ac:	60b9      	str	r1, [r7, #8]
 80074ae:	607a      	str	r2, [r7, #4]
 80074b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80074b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d10b      	bne.n	80074d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80074b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074bc:	f383 8811 	msr	BASEPRI, r3
 80074c0:	f3bf 8f6f 	isb	sy
 80074c4:	f3bf 8f4f 	dsb	sy
 80074c8:	623b      	str	r3, [r7, #32]
}
 80074ca:	bf00      	nop
 80074cc:	bf00      	nop
 80074ce:	e7fd      	b.n	80074cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80074d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10b      	bne.n	80074ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80074d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	61fb      	str	r3, [r7, #28]
}
 80074e8:	bf00      	nop
 80074ea:	bf00      	nop
 80074ec:	e7fd      	b.n	80074ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80074ee:	235c      	movs	r3, #92	@ 0x5c
 80074f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	2b5c      	cmp	r3, #92	@ 0x5c
 80074f6:	d00b      	beq.n	8007510 <xTaskCreateStatic+0x6c>
	__asm volatile
 80074f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fc:	f383 8811 	msr	BASEPRI, r3
 8007500:	f3bf 8f6f 	isb	sy
 8007504:	f3bf 8f4f 	dsb	sy
 8007508:	61bb      	str	r3, [r7, #24]
}
 800750a:	bf00      	nop
 800750c:	bf00      	nop
 800750e:	e7fd      	b.n	800750c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007510:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	2b00      	cmp	r3, #0
 8007516:	d01e      	beq.n	8007556 <xTaskCreateStatic+0xb2>
 8007518:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800751a:	2b00      	cmp	r3, #0
 800751c:	d01b      	beq.n	8007556 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800751e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007520:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007524:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007526:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752a:	2202      	movs	r2, #2
 800752c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007530:	2300      	movs	r3, #0
 8007532:	9303      	str	r3, [sp, #12]
 8007534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007536:	9302      	str	r3, [sp, #8]
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	9301      	str	r3, [sp, #4]
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	9300      	str	r3, [sp, #0]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	687a      	ldr	r2, [r7, #4]
 8007546:	68b9      	ldr	r1, [r7, #8]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f850 	bl	80075ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800754e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007550:	f000 f8de 	bl	8007710 <prvAddNewTaskToReadyList>
 8007554:	e001      	b.n	800755a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007556:	2300      	movs	r3, #0
 8007558:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800755a:	697b      	ldr	r3, [r7, #20]
	}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	@ 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	@ 0x30
 8007568:	af04      	add	r7, sp, #16
 800756a:	60f8      	str	r0, [r7, #12]
 800756c:	60b9      	str	r1, [r7, #8]
 800756e:	603b      	str	r3, [r7, #0]
 8007570:	4613      	mov	r3, r2
 8007572:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007574:	88fb      	ldrh	r3, [r7, #6]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	4618      	mov	r0, r3
 800757a:	f001 fc97 	bl	8008eac <pvPortMalloc>
 800757e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00e      	beq.n	80075a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007586:	205c      	movs	r0, #92	@ 0x5c
 8007588:	f001 fc90 	bl	8008eac <pvPortMalloc>
 800758c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d003      	beq.n	800759c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	631a      	str	r2, [r3, #48]	@ 0x30
 800759a:	e005      	b.n	80075a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800759c:	6978      	ldr	r0, [r7, #20]
 800759e:	f001 fd53 	bl	8009048 <vPortFree>
 80075a2:	e001      	b.n	80075a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80075a4:	2300      	movs	r3, #0
 80075a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d017      	beq.n	80075de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80075b6:	88fa      	ldrh	r2, [r7, #6]
 80075b8:	2300      	movs	r3, #0
 80075ba:	9303      	str	r3, [sp, #12]
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	9302      	str	r3, [sp, #8]
 80075c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075c2:	9301      	str	r3, [sp, #4]
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 f80e 	bl	80075ee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80075d2:	69f8      	ldr	r0, [r7, #28]
 80075d4:	f000 f89c 	bl	8007710 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80075d8:	2301      	movs	r3, #1
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	e002      	b.n	80075e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80075de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80075e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80075e4:	69bb      	ldr	r3, [r7, #24]
	}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b088      	sub	sp, #32
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	60f8      	str	r0, [r7, #12]
 80075f6:	60b9      	str	r1, [r7, #8]
 80075f8:	607a      	str	r2, [r7, #4]
 80075fa:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80075fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	009b      	lsls	r3, r3, #2
 8007604:	461a      	mov	r2, r3
 8007606:	21a5      	movs	r1, #165	@ 0xa5
 8007608:	f001 fe3e 	bl	8009288 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800760c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8007616:	440b      	add	r3, r1
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	f023 0307 	bic.w	r3, r3, #7
 8007624:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	f003 0307 	and.w	r3, r3, #7
 800762c:	2b00      	cmp	r3, #0
 800762e:	d00b      	beq.n	8007648 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	617b      	str	r3, [r7, #20]
}
 8007642:	bf00      	nop
 8007644:	bf00      	nop
 8007646:	e7fd      	b.n	8007644 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d01f      	beq.n	800768e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800764e:	2300      	movs	r3, #0
 8007650:	61fb      	str	r3, [r7, #28]
 8007652:	e012      	b.n	800767a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	4413      	add	r3, r2
 800765a:	7819      	ldrb	r1, [r3, #0]
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	4413      	add	r3, r2
 8007662:	3334      	adds	r3, #52	@ 0x34
 8007664:	460a      	mov	r2, r1
 8007666:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007668:	68ba      	ldr	r2, [r7, #8]
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	4413      	add	r3, r2
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d006      	beq.n	8007682 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	3301      	adds	r3, #1
 8007678:	61fb      	str	r3, [r7, #28]
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2b0f      	cmp	r3, #15
 800767e:	d9e9      	bls.n	8007654 <prvInitialiseNewTask+0x66>
 8007680:	e000      	b.n	8007684 <prvInitialiseNewTask+0x96>
			{
				break;
 8007682:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007686:	2200      	movs	r2, #0
 8007688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800768c:	e003      	b.n	8007696 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007698:	2b37      	cmp	r3, #55	@ 0x37
 800769a:	d901      	bls.n	80076a0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800769c:	2337      	movs	r3, #55	@ 0x37
 800769e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80076a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80076a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80076aa:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	2200      	movs	r2, #0
 80076b0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80076b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b4:	3304      	adds	r3, #4
 80076b6:	4618      	mov	r0, r3
 80076b8:	f7ff f966 	bl	8006988 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80076bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076be:	3318      	adds	r3, #24
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7ff f961 	bl	8006988 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80076c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076da:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80076dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076de:	2200      	movs	r2, #0
 80076e0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80076e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e4:	2200      	movs	r2, #0
 80076e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80076ea:	683a      	ldr	r2, [r7, #0]
 80076ec:	68f9      	ldr	r1, [r7, #12]
 80076ee:	69b8      	ldr	r0, [r7, #24]
 80076f0:	f001 f986 	bl	8008a00 <pxPortInitialiseStack>
 80076f4:	4602      	mov	r2, r0
 80076f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80076fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d002      	beq.n	8007706 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3720      	adds	r7, #32
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
	...

08007710 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007718:	f001 faa6 	bl	8008c68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800771c:	4b2d      	ldr	r3, [pc, #180]	@ (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a2c      	ldr	r2, [pc, #176]	@ (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007724:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007726:	4b2c      	ldr	r3, [pc, #176]	@ (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800772e:	4a2a      	ldr	r2, [pc, #168]	@ (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007734:	4b27      	ldr	r3, [pc, #156]	@ (80077d4 <prvAddNewTaskToReadyList+0xc4>)
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d110      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800773c:	f000 fc1e 	bl	8007f7c <prvInitialiseTaskLists>
 8007740:	e00d      	b.n	800775e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007742:	4b26      	ldr	r3, [pc, #152]	@ (80077dc <prvAddNewTaskToReadyList+0xcc>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d109      	bne.n	800775e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800774a:	4b23      	ldr	r3, [pc, #140]	@ (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007754:	429a      	cmp	r2, r3
 8007756:	d802      	bhi.n	800775e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007758:	4a1f      	ldr	r2, [pc, #124]	@ (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800775e:	4b20      	ldr	r3, [pc, #128]	@ (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	3301      	adds	r3, #1
 8007764:	4a1e      	ldr	r2, [pc, #120]	@ (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 8007766:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007768:	4b1d      	ldr	r3, [pc, #116]	@ (80077e0 <prvAddNewTaskToReadyList+0xd0>)
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007774:	4b1b      	ldr	r3, [pc, #108]	@ (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d903      	bls.n	8007784 <prvAddNewTaskToReadyList+0x74>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007780:	4a18      	ldr	r2, [pc, #96]	@ (80077e4 <prvAddNewTaskToReadyList+0xd4>)
 8007782:	6013      	str	r3, [r2, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007788:	4613      	mov	r3, r2
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	009b      	lsls	r3, r3, #2
 8007790:	4a15      	ldr	r2, [pc, #84]	@ (80077e8 <prvAddNewTaskToReadyList+0xd8>)
 8007792:	441a      	add	r2, r3
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7ff f901 	bl	80069a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80077a0:	f001 fa94 	bl	8008ccc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80077a4:	4b0d      	ldr	r3, [pc, #52]	@ (80077dc <prvAddNewTaskToReadyList+0xcc>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80077ac:	4b0a      	ldr	r3, [pc, #40]	@ (80077d8 <prvAddNewTaskToReadyList+0xc8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d207      	bcs.n	80077ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80077ba:	4b0c      	ldr	r3, [pc, #48]	@ (80077ec <prvAddNewTaskToReadyList+0xdc>)
 80077bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077c0:	601a      	str	r2, [r3, #0]
 80077c2:	f3bf 8f4f 	dsb	sy
 80077c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077ca:	bf00      	nop
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	24001330 	.word	0x24001330
 80077d8:	24000e5c 	.word	0x24000e5c
 80077dc:	2400133c 	.word	0x2400133c
 80077e0:	2400134c 	.word	0x2400134c
 80077e4:	24001338 	.word	0x24001338
 80077e8:	24000e60 	.word	0x24000e60
 80077ec:	e000ed04 	.word	0xe000ed04

080077f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b084      	sub	sp, #16
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80077f8:	2300      	movs	r3, #0
 80077fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d018      	beq.n	8007834 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007802:	4b14      	ldr	r3, [pc, #80]	@ (8007854 <vTaskDelay+0x64>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <vTaskDelay+0x32>
	__asm volatile
 800780a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780e:	f383 8811 	msr	BASEPRI, r3
 8007812:	f3bf 8f6f 	isb	sy
 8007816:	f3bf 8f4f 	dsb	sy
 800781a:	60bb      	str	r3, [r7, #8]
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	e7fd      	b.n	800781e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007822:	f000 f883 	bl	800792c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007826:	2100      	movs	r1, #0
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fd3b 	bl	80082a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800782e:	f000 f88b 	bl	8007948 <xTaskResumeAll>
 8007832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d107      	bne.n	800784a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800783a:	4b07      	ldr	r3, [pc, #28]	@ (8007858 <vTaskDelay+0x68>)
 800783c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007840:	601a      	str	r2, [r3, #0]
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800784a:	bf00      	nop
 800784c:	3710      	adds	r7, #16
 800784e:	46bd      	mov	sp, r7
 8007850:	bd80      	pop	{r7, pc}
 8007852:	bf00      	nop
 8007854:	24001358 	.word	0x24001358
 8007858:	e000ed04 	.word	0xe000ed04

0800785c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b08a      	sub	sp, #40	@ 0x28
 8007860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007862:	2300      	movs	r3, #0
 8007864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007866:	2300      	movs	r3, #0
 8007868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800786a:	463a      	mov	r2, r7
 800786c:	1d39      	adds	r1, r7, #4
 800786e:	f107 0308 	add.w	r3, r7, #8
 8007872:	4618      	mov	r0, r3
 8007874:	f7ff f834 	bl	80068e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007878:	6839      	ldr	r1, [r7, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	9202      	str	r2, [sp, #8]
 8007880:	9301      	str	r3, [sp, #4]
 8007882:	2300      	movs	r3, #0
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	2300      	movs	r3, #0
 8007888:	460a      	mov	r2, r1
 800788a:	4922      	ldr	r1, [pc, #136]	@ (8007914 <vTaskStartScheduler+0xb8>)
 800788c:	4822      	ldr	r0, [pc, #136]	@ (8007918 <vTaskStartScheduler+0xbc>)
 800788e:	f7ff fe09 	bl	80074a4 <xTaskCreateStatic>
 8007892:	4603      	mov	r3, r0
 8007894:	4a21      	ldr	r2, [pc, #132]	@ (800791c <vTaskStartScheduler+0xc0>)
 8007896:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007898:	4b20      	ldr	r3, [pc, #128]	@ (800791c <vTaskStartScheduler+0xc0>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d002      	beq.n	80078a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e001      	b.n	80078aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80078a6:	2300      	movs	r3, #0
 80078a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d102      	bne.n	80078b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80078b0:	f000 fd4c 	bl	800834c <xTimerCreateTimerTask>
 80078b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d116      	bne.n	80078ea <vTaskStartScheduler+0x8e>
	__asm volatile
 80078bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c0:	f383 8811 	msr	BASEPRI, r3
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	f3bf 8f4f 	dsb	sy
 80078cc:	613b      	str	r3, [r7, #16]
}
 80078ce:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80078d0:	4b13      	ldr	r3, [pc, #76]	@ (8007920 <vTaskStartScheduler+0xc4>)
 80078d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078d6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80078d8:	4b12      	ldr	r3, [pc, #72]	@ (8007924 <vTaskStartScheduler+0xc8>)
 80078da:	2201      	movs	r2, #1
 80078dc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80078de:	4b12      	ldr	r3, [pc, #72]	@ (8007928 <vTaskStartScheduler+0xcc>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80078e4:	f001 f91c 	bl	8008b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80078e8:	e00f      	b.n	800790a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f0:	d10b      	bne.n	800790a <vTaskStartScheduler+0xae>
	__asm volatile
 80078f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078f6:	f383 8811 	msr	BASEPRI, r3
 80078fa:	f3bf 8f6f 	isb	sy
 80078fe:	f3bf 8f4f 	dsb	sy
 8007902:	60fb      	str	r3, [r7, #12]
}
 8007904:	bf00      	nop
 8007906:	bf00      	nop
 8007908:	e7fd      	b.n	8007906 <vTaskStartScheduler+0xaa>
}
 800790a:	bf00      	nop
 800790c:	3718      	adds	r7, #24
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}
 8007912:	bf00      	nop
 8007914:	08009348 	.word	0x08009348
 8007918:	08007f4d 	.word	0x08007f4d
 800791c:	24001354 	.word	0x24001354
 8007920:	24001350 	.word	0x24001350
 8007924:	2400133c 	.word	0x2400133c
 8007928:	24001334 	.word	0x24001334

0800792c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800792c:	b480      	push	{r7}
 800792e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007930:	4b04      	ldr	r3, [pc, #16]	@ (8007944 <vTaskSuspendAll+0x18>)
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	3301      	adds	r3, #1
 8007936:	4a03      	ldr	r2, [pc, #12]	@ (8007944 <vTaskSuspendAll+0x18>)
 8007938:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800793a:	bf00      	nop
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	24001358 	.word	0x24001358

08007948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800794e:	2300      	movs	r3, #0
 8007950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007956:	4b42      	ldr	r3, [pc, #264]	@ (8007a60 <xTaskResumeAll+0x118>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d10b      	bne.n	8007976 <xTaskResumeAll+0x2e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007976:	f001 f977 	bl	8008c68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800797a:	4b39      	ldr	r3, [pc, #228]	@ (8007a60 <xTaskResumeAll+0x118>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	3b01      	subs	r3, #1
 8007980:	4a37      	ldr	r2, [pc, #220]	@ (8007a60 <xTaskResumeAll+0x118>)
 8007982:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007984:	4b36      	ldr	r3, [pc, #216]	@ (8007a60 <xTaskResumeAll+0x118>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d162      	bne.n	8007a52 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800798c:	4b35      	ldr	r3, [pc, #212]	@ (8007a64 <xTaskResumeAll+0x11c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d05e      	beq.n	8007a52 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007994:	e02f      	b.n	80079f6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007996:	4b34      	ldr	r3, [pc, #208]	@ (8007a68 <xTaskResumeAll+0x120>)
 8007998:	68db      	ldr	r3, [r3, #12]
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3318      	adds	r3, #24
 80079a2:	4618      	mov	r0, r3
 80079a4:	f7ff f85a 	bl	8006a5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	3304      	adds	r3, #4
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff f855 	bl	8006a5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079b6:	4b2d      	ldr	r3, [pc, #180]	@ (8007a6c <xTaskResumeAll+0x124>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d903      	bls.n	80079c6 <xTaskResumeAll+0x7e>
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a6c <xTaskResumeAll+0x124>)
 80079c4:	6013      	str	r3, [r2, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079ca:	4613      	mov	r3, r2
 80079cc:	009b      	lsls	r3, r3, #2
 80079ce:	4413      	add	r3, r2
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4a27      	ldr	r2, [pc, #156]	@ (8007a70 <xTaskResumeAll+0x128>)
 80079d4:	441a      	add	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	3304      	adds	r3, #4
 80079da:	4619      	mov	r1, r3
 80079dc:	4610      	mov	r0, r2
 80079de:	f7fe ffe0 	bl	80069a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e6:	4b23      	ldr	r3, [pc, #140]	@ (8007a74 <xTaskResumeAll+0x12c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d302      	bcc.n	80079f6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80079f0:	4b21      	ldr	r3, [pc, #132]	@ (8007a78 <xTaskResumeAll+0x130>)
 80079f2:	2201      	movs	r2, #1
 80079f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80079f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007a68 <xTaskResumeAll+0x120>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1cb      	bne.n	8007996 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007a04:	f000 fb58 	bl	80080b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007a08:	4b1c      	ldr	r3, [pc, #112]	@ (8007a7c <xTaskResumeAll+0x134>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d010      	beq.n	8007a36 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007a14:	f000 f846 	bl	8007aa4 <xTaskIncrementTick>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d002      	beq.n	8007a24 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8007a1e:	4b16      	ldr	r3, [pc, #88]	@ (8007a78 <xTaskResumeAll+0x130>)
 8007a20:	2201      	movs	r2, #1
 8007a22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d1f1      	bne.n	8007a14 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8007a30:	4b12      	ldr	r3, [pc, #72]	@ (8007a7c <xTaskResumeAll+0x134>)
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007a36:	4b10      	ldr	r3, [pc, #64]	@ (8007a78 <xTaskResumeAll+0x130>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d009      	beq.n	8007a52 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007a42:	4b0f      	ldr	r3, [pc, #60]	@ (8007a80 <xTaskResumeAll+0x138>)
 8007a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a48:	601a      	str	r2, [r3, #0]
 8007a4a:	f3bf 8f4f 	dsb	sy
 8007a4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007a52:	f001 f93b 	bl	8008ccc <vPortExitCritical>

	return xAlreadyYielded;
 8007a56:	68bb      	ldr	r3, [r7, #8]
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3710      	adds	r7, #16
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	24001358 	.word	0x24001358
 8007a64:	24001330 	.word	0x24001330
 8007a68:	240012f0 	.word	0x240012f0
 8007a6c:	24001338 	.word	0x24001338
 8007a70:	24000e60 	.word	0x24000e60
 8007a74:	24000e5c 	.word	0x24000e5c
 8007a78:	24001344 	.word	0x24001344
 8007a7c:	24001340 	.word	0x24001340
 8007a80:	e000ed04 	.word	0xe000ed04

08007a84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a8a:	4b05      	ldr	r3, [pc, #20]	@ (8007aa0 <xTaskGetTickCount+0x1c>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a90:	687b      	ldr	r3, [r7, #4]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	370c      	adds	r7, #12
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
 8007a9e:	bf00      	nop
 8007aa0:	24001334 	.word	0x24001334

08007aa4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b086      	sub	sp, #24
 8007aa8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007aae:	4b4f      	ldr	r3, [pc, #316]	@ (8007bec <xTaskIncrementTick+0x148>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f040 8090 	bne.w	8007bd8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007ab8:	4b4d      	ldr	r3, [pc, #308]	@ (8007bf0 <xTaskIncrementTick+0x14c>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	3301      	adds	r3, #1
 8007abe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007ac0:	4a4b      	ldr	r2, [pc, #300]	@ (8007bf0 <xTaskIncrementTick+0x14c>)
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d121      	bne.n	8007b10 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007acc:	4b49      	ldr	r3, [pc, #292]	@ (8007bf4 <xTaskIncrementTick+0x150>)
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d00b      	beq.n	8007aee <xTaskIncrementTick+0x4a>
	__asm volatile
 8007ad6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ada:	f383 8811 	msr	BASEPRI, r3
 8007ade:	f3bf 8f6f 	isb	sy
 8007ae2:	f3bf 8f4f 	dsb	sy
 8007ae6:	603b      	str	r3, [r7, #0]
}
 8007ae8:	bf00      	nop
 8007aea:	bf00      	nop
 8007aec:	e7fd      	b.n	8007aea <xTaskIncrementTick+0x46>
 8007aee:	4b41      	ldr	r3, [pc, #260]	@ (8007bf4 <xTaskIncrementTick+0x150>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	60fb      	str	r3, [r7, #12]
 8007af4:	4b40      	ldr	r3, [pc, #256]	@ (8007bf8 <xTaskIncrementTick+0x154>)
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf4 <xTaskIncrementTick+0x150>)
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4a3e      	ldr	r2, [pc, #248]	@ (8007bf8 <xTaskIncrementTick+0x154>)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	6013      	str	r3, [r2, #0]
 8007b02:	4b3e      	ldr	r3, [pc, #248]	@ (8007bfc <xTaskIncrementTick+0x158>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3301      	adds	r3, #1
 8007b08:	4a3c      	ldr	r2, [pc, #240]	@ (8007bfc <xTaskIncrementTick+0x158>)
 8007b0a:	6013      	str	r3, [r2, #0]
 8007b0c:	f000 fad4 	bl	80080b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007b10:	4b3b      	ldr	r3, [pc, #236]	@ (8007c00 <xTaskIncrementTick+0x15c>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	693a      	ldr	r2, [r7, #16]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d349      	bcc.n	8007bae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b1a:	4b36      	ldr	r3, [pc, #216]	@ (8007bf4 <xTaskIncrementTick+0x150>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d104      	bne.n	8007b2e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b24:	4b36      	ldr	r3, [pc, #216]	@ (8007c00 <xTaskIncrementTick+0x15c>)
 8007b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007b2a:	601a      	str	r2, [r3, #0]
					break;
 8007b2c:	e03f      	b.n	8007bae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b2e:	4b31      	ldr	r3, [pc, #196]	@ (8007bf4 <xTaskIncrementTick+0x150>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68db      	ldr	r3, [r3, #12]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d203      	bcs.n	8007b4e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007b46:	4a2e      	ldr	r2, [pc, #184]	@ (8007c00 <xTaskIncrementTick+0x15c>)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007b4c:	e02f      	b.n	8007bae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	3304      	adds	r3, #4
 8007b52:	4618      	mov	r0, r3
 8007b54:	f7fe ff82 	bl	8006a5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d004      	beq.n	8007b6a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	3318      	adds	r3, #24
 8007b64:	4618      	mov	r0, r3
 8007b66:	f7fe ff79 	bl	8006a5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b6a:	68bb      	ldr	r3, [r7, #8]
 8007b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b6e:	4b25      	ldr	r3, [pc, #148]	@ (8007c04 <xTaskIncrementTick+0x160>)
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d903      	bls.n	8007b7e <xTaskIncrementTick+0xda>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b7a:	4a22      	ldr	r2, [pc, #136]	@ (8007c04 <xTaskIncrementTick+0x160>)
 8007b7c:	6013      	str	r3, [r2, #0]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	009b      	lsls	r3, r3, #2
 8007b8a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c08 <xTaskIncrementTick+0x164>)
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	3304      	adds	r3, #4
 8007b92:	4619      	mov	r1, r3
 8007b94:	4610      	mov	r0, r2
 8007b96:	f7fe ff04 	bl	80069a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b9e:	4b1b      	ldr	r3, [pc, #108]	@ (8007c0c <xTaskIncrementTick+0x168>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	429a      	cmp	r2, r3
 8007ba6:	d3b8      	bcc.n	8007b1a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bac:	e7b5      	b.n	8007b1a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007bae:	4b17      	ldr	r3, [pc, #92]	@ (8007c0c <xTaskIncrementTick+0x168>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bb4:	4914      	ldr	r1, [pc, #80]	@ (8007c08 <xTaskIncrementTick+0x164>)
 8007bb6:	4613      	mov	r3, r2
 8007bb8:	009b      	lsls	r3, r3, #2
 8007bba:	4413      	add	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	440b      	add	r3, r1
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d901      	bls.n	8007bca <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007bca:	4b11      	ldr	r3, [pc, #68]	@ (8007c10 <xTaskIncrementTick+0x16c>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d007      	beq.n	8007be2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	617b      	str	r3, [r7, #20]
 8007bd6:	e004      	b.n	8007be2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8007c14 <xTaskIncrementTick+0x170>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3301      	adds	r3, #1
 8007bde:	4a0d      	ldr	r2, [pc, #52]	@ (8007c14 <xTaskIncrementTick+0x170>)
 8007be0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007be2:	697b      	ldr	r3, [r7, #20]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	24001358 	.word	0x24001358
 8007bf0:	24001334 	.word	0x24001334
 8007bf4:	240012e8 	.word	0x240012e8
 8007bf8:	240012ec 	.word	0x240012ec
 8007bfc:	24001348 	.word	0x24001348
 8007c00:	24001350 	.word	0x24001350
 8007c04:	24001338 	.word	0x24001338
 8007c08:	24000e60 	.word	0x24000e60
 8007c0c:	24000e5c 	.word	0x24000e5c
 8007c10:	24001344 	.word	0x24001344
 8007c14:	24001340 	.word	0x24001340

08007c18 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007c1e:	4b28      	ldr	r3, [pc, #160]	@ (8007cc0 <vTaskSwitchContext+0xa8>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d003      	beq.n	8007c2e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007c26:	4b27      	ldr	r3, [pc, #156]	@ (8007cc4 <vTaskSwitchContext+0xac>)
 8007c28:	2201      	movs	r2, #1
 8007c2a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007c2c:	e042      	b.n	8007cb4 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007c2e:	4b25      	ldr	r3, [pc, #148]	@ (8007cc4 <vTaskSwitchContext+0xac>)
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c34:	4b24      	ldr	r3, [pc, #144]	@ (8007cc8 <vTaskSwitchContext+0xb0>)
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60fb      	str	r3, [r7, #12]
 8007c3a:	e011      	b.n	8007c60 <vTaskSwitchContext+0x48>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d10b      	bne.n	8007c5a <vTaskSwitchContext+0x42>
	__asm volatile
 8007c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c46:	f383 8811 	msr	BASEPRI, r3
 8007c4a:	f3bf 8f6f 	isb	sy
 8007c4e:	f3bf 8f4f 	dsb	sy
 8007c52:	607b      	str	r3, [r7, #4]
}
 8007c54:	bf00      	nop
 8007c56:	bf00      	nop
 8007c58:	e7fd      	b.n	8007c56 <vTaskSwitchContext+0x3e>
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3b01      	subs	r3, #1
 8007c5e:	60fb      	str	r3, [r7, #12]
 8007c60:	491a      	ldr	r1, [pc, #104]	@ (8007ccc <vTaskSwitchContext+0xb4>)
 8007c62:	68fa      	ldr	r2, [r7, #12]
 8007c64:	4613      	mov	r3, r2
 8007c66:	009b      	lsls	r3, r3, #2
 8007c68:	4413      	add	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	440b      	add	r3, r1
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d0e3      	beq.n	8007c3c <vTaskSwitchContext+0x24>
 8007c74:	68fa      	ldr	r2, [r7, #12]
 8007c76:	4613      	mov	r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	4413      	add	r3, r2
 8007c7c:	009b      	lsls	r3, r3, #2
 8007c7e:	4a13      	ldr	r2, [pc, #76]	@ (8007ccc <vTaskSwitchContext+0xb4>)
 8007c80:	4413      	add	r3, r2
 8007c82:	60bb      	str	r3, [r7, #8]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	685a      	ldr	r2, [r3, #4]
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	685a      	ldr	r2, [r3, #4]
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	3308      	adds	r3, #8
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d104      	bne.n	8007ca4 <vTaskSwitchContext+0x8c>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	685a      	ldr	r2, [r3, #4]
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	605a      	str	r2, [r3, #4]
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	4a09      	ldr	r2, [pc, #36]	@ (8007cd0 <vTaskSwitchContext+0xb8>)
 8007cac:	6013      	str	r3, [r2, #0]
 8007cae:	4a06      	ldr	r2, [pc, #24]	@ (8007cc8 <vTaskSwitchContext+0xb0>)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6013      	str	r3, [r2, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	24001358 	.word	0x24001358
 8007cc4:	24001344 	.word	0x24001344
 8007cc8:	24001338 	.word	0x24001338
 8007ccc:	24000e60 	.word	0x24000e60
 8007cd0:	24000e5c 	.word	0x24000e5c

08007cd4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b084      	sub	sp, #16
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d10b      	bne.n	8007cfc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ce8:	f383 8811 	msr	BASEPRI, r3
 8007cec:	f3bf 8f6f 	isb	sy
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	60fb      	str	r3, [r7, #12]
}
 8007cf6:	bf00      	nop
 8007cf8:	bf00      	nop
 8007cfa:	e7fd      	b.n	8007cf8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007cfc:	4b07      	ldr	r3, [pc, #28]	@ (8007d1c <vTaskPlaceOnEventList+0x48>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3318      	adds	r3, #24
 8007d02:	4619      	mov	r1, r3
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f7fe fe70 	bl	80069ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	6838      	ldr	r0, [r7, #0]
 8007d0e:	f000 fac9 	bl	80082a4 <prvAddCurrentTaskToDelayedList>
}
 8007d12:	bf00      	nop
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
 8007d1a:	bf00      	nop
 8007d1c:	24000e5c 	.word	0x24000e5c

08007d20 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d10b      	bne.n	8007d4a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d36:	f383 8811 	msr	BASEPRI, r3
 8007d3a:	f3bf 8f6f 	isb	sy
 8007d3e:	f3bf 8f4f 	dsb	sy
 8007d42:	617b      	str	r3, [r7, #20]
}
 8007d44:	bf00      	nop
 8007d46:	bf00      	nop
 8007d48:	e7fd      	b.n	8007d46 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007d74 <vTaskPlaceOnEventListRestricted+0x54>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	3318      	adds	r3, #24
 8007d50:	4619      	mov	r1, r3
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f7fe fe25 	bl	80069a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d002      	beq.n	8007d64 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007d5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d62:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d64:	6879      	ldr	r1, [r7, #4]
 8007d66:	68b8      	ldr	r0, [r7, #8]
 8007d68:	f000 fa9c 	bl	80082a4 <prvAddCurrentTaskToDelayedList>
	}
 8007d6c:	bf00      	nop
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	24000e5c 	.word	0x24000e5c

08007d78 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b086      	sub	sp, #24
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68db      	ldr	r3, [r3, #12]
 8007d84:	68db      	ldr	r3, [r3, #12]
 8007d86:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d10b      	bne.n	8007da6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d92:	f383 8811 	msr	BASEPRI, r3
 8007d96:	f3bf 8f6f 	isb	sy
 8007d9a:	f3bf 8f4f 	dsb	sy
 8007d9e:	60fb      	str	r3, [r7, #12]
}
 8007da0:	bf00      	nop
 8007da2:	bf00      	nop
 8007da4:	e7fd      	b.n	8007da2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	3318      	adds	r3, #24
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7fe fe56 	bl	8006a5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007db0:	4b1d      	ldr	r3, [pc, #116]	@ (8007e28 <xTaskRemoveFromEventList+0xb0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d11d      	bne.n	8007df4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f7fe fe4d 	bl	8006a5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dc6:	4b19      	ldr	r3, [pc, #100]	@ (8007e2c <xTaskRemoveFromEventList+0xb4>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d903      	bls.n	8007dd6 <xTaskRemoveFromEventList+0x5e>
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dd2:	4a16      	ldr	r2, [pc, #88]	@ (8007e2c <xTaskRemoveFromEventList+0xb4>)
 8007dd4:	6013      	str	r3, [r2, #0]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dda:	4613      	mov	r3, r2
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	4413      	add	r3, r2
 8007de0:	009b      	lsls	r3, r3, #2
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <xTaskRemoveFromEventList+0xb8>)
 8007de4:	441a      	add	r2, r3
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4619      	mov	r1, r3
 8007dec:	4610      	mov	r0, r2
 8007dee:	f7fe fdd8 	bl	80069a2 <vListInsertEnd>
 8007df2:	e005      	b.n	8007e00 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	3318      	adds	r3, #24
 8007df8:	4619      	mov	r1, r3
 8007dfa:	480e      	ldr	r0, [pc, #56]	@ (8007e34 <xTaskRemoveFromEventList+0xbc>)
 8007dfc:	f7fe fdd1 	bl	80069a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e04:	4b0c      	ldr	r3, [pc, #48]	@ (8007e38 <xTaskRemoveFromEventList+0xc0>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d905      	bls.n	8007e1a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007e0e:	2301      	movs	r3, #1
 8007e10:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007e12:	4b0a      	ldr	r3, [pc, #40]	@ (8007e3c <xTaskRemoveFromEventList+0xc4>)
 8007e14:	2201      	movs	r2, #1
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	e001      	b.n	8007e1e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007e1e:	697b      	ldr	r3, [r7, #20]
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	3718      	adds	r7, #24
 8007e24:	46bd      	mov	sp, r7
 8007e26:	bd80      	pop	{r7, pc}
 8007e28:	24001358 	.word	0x24001358
 8007e2c:	24001338 	.word	0x24001338
 8007e30:	24000e60 	.word	0x24000e60
 8007e34:	240012f0 	.word	0x240012f0
 8007e38:	24000e5c 	.word	0x24000e5c
 8007e3c:	24001344 	.word	0x24001344

08007e40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e48:	4b06      	ldr	r3, [pc, #24]	@ (8007e64 <vTaskInternalSetTimeOutState+0x24>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e50:	4b05      	ldr	r3, [pc, #20]	@ (8007e68 <vTaskInternalSetTimeOutState+0x28>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	605a      	str	r2, [r3, #4]
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr
 8007e64:	24001348 	.word	0x24001348
 8007e68:	24001334 	.word	0x24001334

08007e6c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10b      	bne.n	8007e94 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e80:	f383 8811 	msr	BASEPRI, r3
 8007e84:	f3bf 8f6f 	isb	sy
 8007e88:	f3bf 8f4f 	dsb	sy
 8007e8c:	613b      	str	r3, [r7, #16]
}
 8007e8e:	bf00      	nop
 8007e90:	bf00      	nop
 8007e92:	e7fd      	b.n	8007e90 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d10b      	bne.n	8007eb2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e9e:	f383 8811 	msr	BASEPRI, r3
 8007ea2:	f3bf 8f6f 	isb	sy
 8007ea6:	f3bf 8f4f 	dsb	sy
 8007eaa:	60fb      	str	r3, [r7, #12]
}
 8007eac:	bf00      	nop
 8007eae:	bf00      	nop
 8007eb0:	e7fd      	b.n	8007eae <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007eb2:	f000 fed9 	bl	8008c68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8007f2c <xTaskCheckForTimeOut+0xc0>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	1ad3      	subs	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ece:	d102      	bne.n	8007ed6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	61fb      	str	r3, [r7, #28]
 8007ed4:	e023      	b.n	8007f1e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4b15      	ldr	r3, [pc, #84]	@ (8007f30 <xTaskCheckForTimeOut+0xc4>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d007      	beq.n	8007ef2 <xTaskCheckForTimeOut+0x86>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	429a      	cmp	r2, r3
 8007eea:	d302      	bcc.n	8007ef2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007eec:	2301      	movs	r3, #1
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	e015      	b.n	8007f1e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	697a      	ldr	r2, [r7, #20]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d20b      	bcs.n	8007f14 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	681a      	ldr	r2, [r3, #0]
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	1ad2      	subs	r2, r2, r3
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7ff ff99 	bl	8007e40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f0e:	2300      	movs	r3, #0
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	e004      	b.n	8007f1e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f1e:	f000 fed5 	bl	8008ccc <vPortExitCritical>

	return xReturn;
 8007f22:	69fb      	ldr	r3, [r7, #28]
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	24001334 	.word	0x24001334
 8007f30:	24001348 	.word	0x24001348

08007f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f34:	b480      	push	{r7}
 8007f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f38:	4b03      	ldr	r3, [pc, #12]	@ (8007f48 <vTaskMissedYield+0x14>)
 8007f3a:	2201      	movs	r2, #1
 8007f3c:	601a      	str	r2, [r3, #0]
}
 8007f3e:	bf00      	nop
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr
 8007f48:	24001344 	.word	0x24001344

08007f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f54:	f000 f852 	bl	8007ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f58:	4b06      	ldr	r3, [pc, #24]	@ (8007f74 <prvIdleTask+0x28>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d9f9      	bls.n	8007f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f60:	4b05      	ldr	r3, [pc, #20]	@ (8007f78 <prvIdleTask+0x2c>)
 8007f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f66:	601a      	str	r2, [r3, #0]
 8007f68:	f3bf 8f4f 	dsb	sy
 8007f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f70:	e7f0      	b.n	8007f54 <prvIdleTask+0x8>
 8007f72:	bf00      	nop
 8007f74:	24000e60 	.word	0x24000e60
 8007f78:	e000ed04 	.word	0xe000ed04

08007f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f82:	2300      	movs	r3, #0
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	e00c      	b.n	8007fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	4a12      	ldr	r2, [pc, #72]	@ (8007fdc <prvInitialiseTaskLists+0x60>)
 8007f94:	4413      	add	r3, r2
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7fe fcd6 	bl	8006948 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	607b      	str	r3, [r7, #4]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b37      	cmp	r3, #55	@ 0x37
 8007fa6:	d9ef      	bls.n	8007f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fa8:	480d      	ldr	r0, [pc, #52]	@ (8007fe0 <prvInitialiseTaskLists+0x64>)
 8007faa:	f7fe fccd 	bl	8006948 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fae:	480d      	ldr	r0, [pc, #52]	@ (8007fe4 <prvInitialiseTaskLists+0x68>)
 8007fb0:	f7fe fcca 	bl	8006948 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fb4:	480c      	ldr	r0, [pc, #48]	@ (8007fe8 <prvInitialiseTaskLists+0x6c>)
 8007fb6:	f7fe fcc7 	bl	8006948 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fba:	480c      	ldr	r0, [pc, #48]	@ (8007fec <prvInitialiseTaskLists+0x70>)
 8007fbc:	f7fe fcc4 	bl	8006948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fc0:	480b      	ldr	r0, [pc, #44]	@ (8007ff0 <prvInitialiseTaskLists+0x74>)
 8007fc2:	f7fe fcc1 	bl	8006948 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff4 <prvInitialiseTaskLists+0x78>)
 8007fc8:	4a05      	ldr	r2, [pc, #20]	@ (8007fe0 <prvInitialiseTaskLists+0x64>)
 8007fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8007ff8 <prvInitialiseTaskLists+0x7c>)
 8007fce:	4a05      	ldr	r2, [pc, #20]	@ (8007fe4 <prvInitialiseTaskLists+0x68>)
 8007fd0:	601a      	str	r2, [r3, #0]
}
 8007fd2:	bf00      	nop
 8007fd4:	3708      	adds	r7, #8
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	bd80      	pop	{r7, pc}
 8007fda:	bf00      	nop
 8007fdc:	24000e60 	.word	0x24000e60
 8007fe0:	240012c0 	.word	0x240012c0
 8007fe4:	240012d4 	.word	0x240012d4
 8007fe8:	240012f0 	.word	0x240012f0
 8007fec:	24001304 	.word	0x24001304
 8007ff0:	2400131c 	.word	0x2400131c
 8007ff4:	240012e8 	.word	0x240012e8
 8007ff8:	240012ec 	.word	0x240012ec

08007ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008002:	e019      	b.n	8008038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008004:	f000 fe30 	bl	8008c68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008008:	4b10      	ldr	r3, [pc, #64]	@ (800804c <prvCheckTasksWaitingTermination+0x50>)
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	68db      	ldr	r3, [r3, #12]
 800800e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	3304      	adds	r3, #4
 8008014:	4618      	mov	r0, r3
 8008016:	f7fe fd21 	bl	8006a5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800801a:	4b0d      	ldr	r3, [pc, #52]	@ (8008050 <prvCheckTasksWaitingTermination+0x54>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3b01      	subs	r3, #1
 8008020:	4a0b      	ldr	r2, [pc, #44]	@ (8008050 <prvCheckTasksWaitingTermination+0x54>)
 8008022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008024:	4b0b      	ldr	r3, [pc, #44]	@ (8008054 <prvCheckTasksWaitingTermination+0x58>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3b01      	subs	r3, #1
 800802a:	4a0a      	ldr	r2, [pc, #40]	@ (8008054 <prvCheckTasksWaitingTermination+0x58>)
 800802c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800802e:	f000 fe4d 	bl	8008ccc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 f810 	bl	8008058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <prvCheckTasksWaitingTermination+0x58>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e1      	bne.n	8008004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008040:	bf00      	nop
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	24001304 	.word	0x24001304
 8008050:	24001330 	.word	0x24001330
 8008054:	24001318 	.word	0x24001318

08008058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008066:	2b00      	cmp	r3, #0
 8008068:	d108      	bne.n	800807c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800806e:	4618      	mov	r0, r3
 8008070:	f000 ffea 	bl	8009048 <vPortFree>
				vPortFree( pxTCB );
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f000 ffe7 	bl	8009048 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800807a:	e019      	b.n	80080b0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008082:	2b01      	cmp	r3, #1
 8008084:	d103      	bne.n	800808e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 ffde 	bl	8009048 <vPortFree>
	}
 800808c:	e010      	b.n	80080b0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008094:	2b02      	cmp	r3, #2
 8008096:	d00b      	beq.n	80080b0 <prvDeleteTCB+0x58>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	60fb      	str	r3, [r7, #12]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <prvDeleteTCB+0x54>
	}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b083      	sub	sp, #12
 80080bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080be:	4b0c      	ldr	r3, [pc, #48]	@ (80080f0 <prvResetNextTaskUnblockTime+0x38>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d104      	bne.n	80080d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080c8:	4b0a      	ldr	r3, [pc, #40]	@ (80080f4 <prvResetNextTaskUnblockTime+0x3c>)
 80080ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80080d0:	e008      	b.n	80080e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d2:	4b07      	ldr	r3, [pc, #28]	@ (80080f0 <prvResetNextTaskUnblockTime+0x38>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	68db      	ldr	r3, [r3, #12]
 80080da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a04      	ldr	r2, [pc, #16]	@ (80080f4 <prvResetNextTaskUnblockTime+0x3c>)
 80080e2:	6013      	str	r3, [r2, #0]
}
 80080e4:	bf00      	nop
 80080e6:	370c      	adds	r7, #12
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	240012e8 	.word	0x240012e8
 80080f4:	24001350 	.word	0x24001350

080080f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80080f8:	b480      	push	{r7}
 80080fa:	b083      	sub	sp, #12
 80080fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80080fe:	4b0b      	ldr	r3, [pc, #44]	@ (800812c <xTaskGetSchedulerState+0x34>)
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d102      	bne.n	800810c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008106:	2301      	movs	r3, #1
 8008108:	607b      	str	r3, [r7, #4]
 800810a:	e008      	b.n	800811e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800810c:	4b08      	ldr	r3, [pc, #32]	@ (8008130 <xTaskGetSchedulerState+0x38>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d102      	bne.n	800811a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008114:	2302      	movs	r3, #2
 8008116:	607b      	str	r3, [r7, #4]
 8008118:	e001      	b.n	800811e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800811a:	2300      	movs	r3, #0
 800811c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800811e:	687b      	ldr	r3, [r7, #4]
	}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr
 800812c:	2400133c 	.word	0x2400133c
 8008130:	24001358 	.word	0x24001358

08008134 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008134:	b580      	push	{r7, lr}
 8008136:	b086      	sub	sp, #24
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008140:	2300      	movs	r3, #0
 8008142:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d058      	beq.n	80081fc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800814a:	4b2f      	ldr	r3, [pc, #188]	@ (8008208 <xTaskPriorityDisinherit+0xd4>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	429a      	cmp	r2, r3
 8008152:	d00b      	beq.n	800816c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008158:	f383 8811 	msr	BASEPRI, r3
 800815c:	f3bf 8f6f 	isb	sy
 8008160:	f3bf 8f4f 	dsb	sy
 8008164:	60fb      	str	r3, [r7, #12]
}
 8008166:	bf00      	nop
 8008168:	bf00      	nop
 800816a:	e7fd      	b.n	8008168 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008170:	2b00      	cmp	r3, #0
 8008172:	d10b      	bne.n	800818c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	60bb      	str	r3, [r7, #8]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008190:	1e5a      	subs	r2, r3, #1
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	693b      	ldr	r3, [r7, #16]
 800819c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800819e:	429a      	cmp	r2, r3
 80081a0:	d02c      	beq.n	80081fc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d128      	bne.n	80081fc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	3304      	adds	r3, #4
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7fe fc54 	bl	8006a5c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081b8:	693b      	ldr	r3, [r7, #16]
 80081ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081c0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081cc:	4b0f      	ldr	r3, [pc, #60]	@ (800820c <xTaskPriorityDisinherit+0xd8>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d903      	bls.n	80081dc <xTaskPriorityDisinherit+0xa8>
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	4a0c      	ldr	r2, [pc, #48]	@ (800820c <xTaskPriorityDisinherit+0xd8>)
 80081da:	6013      	str	r3, [r2, #0]
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e0:	4613      	mov	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	4413      	add	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4a09      	ldr	r2, [pc, #36]	@ (8008210 <xTaskPriorityDisinherit+0xdc>)
 80081ea:	441a      	add	r2, r3
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	3304      	adds	r3, #4
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7fe fbd5 	bl	80069a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80081f8:	2301      	movs	r3, #1
 80081fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80081fc:	697b      	ldr	r3, [r7, #20]
	}
 80081fe:	4618      	mov	r0, r3
 8008200:	3718      	adds	r7, #24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	24000e5c 	.word	0x24000e5c
 800820c:	24001338 	.word	0x24001338
 8008210:	24000e60 	.word	0x24000e60

08008214 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800821e:	f000 fd23 	bl	8008c68 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008222:	4b1e      	ldr	r3, [pc, #120]	@ (800829c <ulTaskNotifyTake+0x88>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008228:	2b00      	cmp	r3, #0
 800822a:	d113      	bne.n	8008254 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800822c:	4b1b      	ldr	r3, [pc, #108]	@ (800829c <ulTaskNotifyTake+0x88>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d00b      	beq.n	8008254 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800823c:	2101      	movs	r1, #1
 800823e:	6838      	ldr	r0, [r7, #0]
 8008240:	f000 f830 	bl	80082a4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8008244:	4b16      	ldr	r3, [pc, #88]	@ (80082a0 <ulTaskNotifyTake+0x8c>)
 8008246:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8008254:	f000 fd3a 	bl	8008ccc <vPortExitCritical>

		taskENTER_CRITICAL();
 8008258:	f000 fd06 	bl	8008c68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800825c:	4b0f      	ldr	r3, [pc, #60]	@ (800829c <ulTaskNotifyTake+0x88>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008262:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00c      	beq.n	8008284 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d004      	beq.n	800827a <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8008270:	4b0a      	ldr	r3, [pc, #40]	@ (800829c <ulTaskNotifyTake+0x88>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2200      	movs	r2, #0
 8008276:	655a      	str	r2, [r3, #84]	@ 0x54
 8008278:	e004      	b.n	8008284 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800827a:	4b08      	ldr	r3, [pc, #32]	@ (800829c <ulTaskNotifyTake+0x88>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	3a01      	subs	r2, #1
 8008282:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <ulTaskNotifyTake+0x88>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800828e:	f000 fd1d 	bl	8008ccc <vPortExitCritical>

		return ulReturn;
 8008292:	68fb      	ldr	r3, [r7, #12]
	}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	24000e5c 	.word	0x24000e5c
 80082a0:	e000ed04 	.word	0xe000ed04

080082a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b084      	sub	sp, #16
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80082ae:	4b21      	ldr	r3, [pc, #132]	@ (8008334 <prvAddCurrentTaskToDelayedList+0x90>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80082b4:	4b20      	ldr	r3, [pc, #128]	@ (8008338 <prvAddCurrentTaskToDelayedList+0x94>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3304      	adds	r3, #4
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7fe fbce 	bl	8006a5c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c6:	d10a      	bne.n	80082de <prvAddCurrentTaskToDelayedList+0x3a>
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d007      	beq.n	80082de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082ce:	4b1a      	ldr	r3, [pc, #104]	@ (8008338 <prvAddCurrentTaskToDelayedList+0x94>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3304      	adds	r3, #4
 80082d4:	4619      	mov	r1, r3
 80082d6:	4819      	ldr	r0, [pc, #100]	@ (800833c <prvAddCurrentTaskToDelayedList+0x98>)
 80082d8:	f7fe fb63 	bl	80069a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082dc:	e026      	b.n	800832c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	4413      	add	r3, r2
 80082e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082e6:	4b14      	ldr	r3, [pc, #80]	@ (8008338 <prvAddCurrentTaskToDelayedList+0x94>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	68ba      	ldr	r2, [r7, #8]
 80082ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	429a      	cmp	r2, r3
 80082f4:	d209      	bcs.n	800830a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082f6:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <prvAddCurrentTaskToDelayedList+0x9c>)
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	4b0f      	ldr	r3, [pc, #60]	@ (8008338 <prvAddCurrentTaskToDelayedList+0x94>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3304      	adds	r3, #4
 8008300:	4619      	mov	r1, r3
 8008302:	4610      	mov	r0, r2
 8008304:	f7fe fb71 	bl	80069ea <vListInsert>
}
 8008308:	e010      	b.n	800832c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800830a:	4b0e      	ldr	r3, [pc, #56]	@ (8008344 <prvAddCurrentTaskToDelayedList+0xa0>)
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4b0a      	ldr	r3, [pc, #40]	@ (8008338 <prvAddCurrentTaskToDelayedList+0x94>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	3304      	adds	r3, #4
 8008314:	4619      	mov	r1, r3
 8008316:	4610      	mov	r0, r2
 8008318:	f7fe fb67 	bl	80069ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800831c:	4b0a      	ldr	r3, [pc, #40]	@ (8008348 <prvAddCurrentTaskToDelayedList+0xa4>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	429a      	cmp	r2, r3
 8008324:	d202      	bcs.n	800832c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008326:	4a08      	ldr	r2, [pc, #32]	@ (8008348 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	6013      	str	r3, [r2, #0]
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}
 8008334:	24001334 	.word	0x24001334
 8008338:	24000e5c 	.word	0x24000e5c
 800833c:	2400131c 	.word	0x2400131c
 8008340:	240012ec 	.word	0x240012ec
 8008344:	240012e8 	.word	0x240012e8
 8008348:	24001350 	.word	0x24001350

0800834c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b08a      	sub	sp, #40	@ 0x28
 8008350:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008356:	f000 fb13 	bl	8008980 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800835a:	4b1d      	ldr	r3, [pc, #116]	@ (80083d0 <xTimerCreateTimerTask+0x84>)
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d021      	beq.n	80083a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008362:	2300      	movs	r3, #0
 8008364:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008366:	2300      	movs	r3, #0
 8008368:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800836a:	1d3a      	adds	r2, r7, #4
 800836c:	f107 0108 	add.w	r1, r7, #8
 8008370:	f107 030c 	add.w	r3, r7, #12
 8008374:	4618      	mov	r0, r3
 8008376:	f7fe facd 	bl	8006914 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	9202      	str	r2, [sp, #8]
 8008382:	9301      	str	r3, [sp, #4]
 8008384:	2302      	movs	r3, #2
 8008386:	9300      	str	r3, [sp, #0]
 8008388:	2300      	movs	r3, #0
 800838a:	460a      	mov	r2, r1
 800838c:	4911      	ldr	r1, [pc, #68]	@ (80083d4 <xTimerCreateTimerTask+0x88>)
 800838e:	4812      	ldr	r0, [pc, #72]	@ (80083d8 <xTimerCreateTimerTask+0x8c>)
 8008390:	f7ff f888 	bl	80074a4 <xTaskCreateStatic>
 8008394:	4603      	mov	r3, r0
 8008396:	4a11      	ldr	r2, [pc, #68]	@ (80083dc <xTimerCreateTimerTask+0x90>)
 8008398:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800839a:	4b10      	ldr	r3, [pc, #64]	@ (80083dc <xTimerCreateTimerTask+0x90>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d001      	beq.n	80083a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80083a2:	2301      	movs	r3, #1
 80083a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d10b      	bne.n	80083c4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80083ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b0:	f383 8811 	msr	BASEPRI, r3
 80083b4:	f3bf 8f6f 	isb	sy
 80083b8:	f3bf 8f4f 	dsb	sy
 80083bc:	613b      	str	r3, [r7, #16]
}
 80083be:	bf00      	nop
 80083c0:	bf00      	nop
 80083c2:	e7fd      	b.n	80083c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80083c4:	697b      	ldr	r3, [r7, #20]
}
 80083c6:	4618      	mov	r0, r3
 80083c8:	3718      	adds	r7, #24
 80083ca:	46bd      	mov	sp, r7
 80083cc:	bd80      	pop	{r7, pc}
 80083ce:	bf00      	nop
 80083d0:	2400138c 	.word	0x2400138c
 80083d4:	08009350 	.word	0x08009350
 80083d8:	08008519 	.word	0x08008519
 80083dc:	24001390 	.word	0x24001390

080083e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b08a      	sub	sp, #40	@ 0x28
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	60f8      	str	r0, [r7, #12]
 80083e8:	60b9      	str	r1, [r7, #8]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d10b      	bne.n	8008410 <xTimerGenericCommand+0x30>
	__asm volatile
 80083f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fc:	f383 8811 	msr	BASEPRI, r3
 8008400:	f3bf 8f6f 	isb	sy
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	623b      	str	r3, [r7, #32]
}
 800840a:	bf00      	nop
 800840c:	bf00      	nop
 800840e:	e7fd      	b.n	800840c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008410:	4b19      	ldr	r3, [pc, #100]	@ (8008478 <xTimerGenericCommand+0x98>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d02a      	beq.n	800846e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	2b05      	cmp	r3, #5
 8008428:	dc18      	bgt.n	800845c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800842a:	f7ff fe65 	bl	80080f8 <xTaskGetSchedulerState>
 800842e:	4603      	mov	r3, r0
 8008430:	2b02      	cmp	r3, #2
 8008432:	d109      	bne.n	8008448 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008434:	4b10      	ldr	r3, [pc, #64]	@ (8008478 <xTimerGenericCommand+0x98>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	f107 0110 	add.w	r1, r7, #16
 800843c:	2300      	movs	r3, #0
 800843e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008440:	f7fe fc40 	bl	8006cc4 <xQueueGenericSend>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24
 8008446:	e012      	b.n	800846e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008448:	4b0b      	ldr	r3, [pc, #44]	@ (8008478 <xTimerGenericCommand+0x98>)
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	f107 0110 	add.w	r1, r7, #16
 8008450:	2300      	movs	r3, #0
 8008452:	2200      	movs	r2, #0
 8008454:	f7fe fc36 	bl	8006cc4 <xQueueGenericSend>
 8008458:	6278      	str	r0, [r7, #36]	@ 0x24
 800845a:	e008      	b.n	800846e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800845c:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <xTimerGenericCommand+0x98>)
 800845e:	6818      	ldr	r0, [r3, #0]
 8008460:	f107 0110 	add.w	r1, r7, #16
 8008464:	2300      	movs	r3, #0
 8008466:	683a      	ldr	r2, [r7, #0]
 8008468:	f7fe fd2e 	bl	8006ec8 <xQueueGenericSendFromISR>
 800846c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800846e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008470:	4618      	mov	r0, r3
 8008472:	3728      	adds	r7, #40	@ 0x28
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}
 8008478:	2400138c 	.word	0x2400138c

0800847c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8
 8008482:	6078      	str	r0, [r7, #4]
 8008484:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008486:	4b23      	ldr	r3, [pc, #140]	@ (8008514 <prvProcessExpiredTimer+0x98>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68db      	ldr	r3, [r3, #12]
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	3304      	adds	r3, #4
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fae1 	bl	8006a5c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084a0:	f003 0304 	and.w	r3, r3, #4
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d023      	beq.n	80084f0 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	18d1      	adds	r1, r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	683a      	ldr	r2, [r7, #0]
 80084b4:	6978      	ldr	r0, [r7, #20]
 80084b6:	f000 f8d5 	bl	8008664 <prvInsertTimerInActiveList>
 80084ba:	4603      	mov	r3, r0
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d020      	beq.n	8008502 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084c0:	2300      	movs	r3, #0
 80084c2:	9300      	str	r3, [sp, #0]
 80084c4:	2300      	movs	r3, #0
 80084c6:	687a      	ldr	r2, [r7, #4]
 80084c8:	2100      	movs	r1, #0
 80084ca:	6978      	ldr	r0, [r7, #20]
 80084cc:	f7ff ff88 	bl	80083e0 <xTimerGenericCommand>
 80084d0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d114      	bne.n	8008502 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80084d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084dc:	f383 8811 	msr	BASEPRI, r3
 80084e0:	f3bf 8f6f 	isb	sy
 80084e4:	f3bf 8f4f 	dsb	sy
 80084e8:	60fb      	str	r3, [r7, #12]
}
 80084ea:	bf00      	nop
 80084ec:	bf00      	nop
 80084ee:	e7fd      	b.n	80084ec <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f6:	f023 0301 	bic.w	r3, r3, #1
 80084fa:	b2da      	uxtb	r2, r3
 80084fc:	697b      	ldr	r3, [r7, #20]
 80084fe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008502:	697b      	ldr	r3, [r7, #20]
 8008504:	6a1b      	ldr	r3, [r3, #32]
 8008506:	6978      	ldr	r0, [r7, #20]
 8008508:	4798      	blx	r3
}
 800850a:	bf00      	nop
 800850c:	3718      	adds	r7, #24
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	24001384 	.word	0x24001384

08008518 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008520:	f107 0308 	add.w	r3, r7, #8
 8008524:	4618      	mov	r0, r3
 8008526:	f000 f859 	bl	80085dc <prvGetNextExpireTime>
 800852a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	4619      	mov	r1, r3
 8008530:	68f8      	ldr	r0, [r7, #12]
 8008532:	f000 f805 	bl	8008540 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008536:	f000 f8d7 	bl	80086e8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800853a:	bf00      	nop
 800853c:	e7f0      	b.n	8008520 <prvTimerTask+0x8>
	...

08008540 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
 8008548:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800854a:	f7ff f9ef 	bl	800792c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800854e:	f107 0308 	add.w	r3, r7, #8
 8008552:	4618      	mov	r0, r3
 8008554:	f000 f866 	bl	8008624 <prvSampleTimeNow>
 8008558:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d130      	bne.n	80085c2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10a      	bne.n	800857c <prvProcessTimerOrBlockTask+0x3c>
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	429a      	cmp	r2, r3
 800856c:	d806      	bhi.n	800857c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800856e:	f7ff f9eb 	bl	8007948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008572:	68f9      	ldr	r1, [r7, #12]
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f7ff ff81 	bl	800847c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800857a:	e024      	b.n	80085c6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d008      	beq.n	8008594 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008582:	4b13      	ldr	r3, [pc, #76]	@ (80085d0 <prvProcessTimerOrBlockTask+0x90>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d101      	bne.n	8008590 <prvProcessTimerOrBlockTask+0x50>
 800858c:	2301      	movs	r3, #1
 800858e:	e000      	b.n	8008592 <prvProcessTimerOrBlockTask+0x52>
 8008590:	2300      	movs	r3, #0
 8008592:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008594:	4b0f      	ldr	r3, [pc, #60]	@ (80085d4 <prvProcessTimerOrBlockTask+0x94>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	1ad3      	subs	r3, r2, r3
 800859e:	683a      	ldr	r2, [r7, #0]
 80085a0:	4619      	mov	r1, r3
 80085a2:	f7fe ff4b 	bl	800743c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80085a6:	f7ff f9cf 	bl	8007948 <xTaskResumeAll>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10a      	bne.n	80085c6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80085b0:	4b09      	ldr	r3, [pc, #36]	@ (80085d8 <prvProcessTimerOrBlockTask+0x98>)
 80085b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	f3bf 8f6f 	isb	sy
}
 80085c0:	e001      	b.n	80085c6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80085c2:	f7ff f9c1 	bl	8007948 <xTaskResumeAll>
}
 80085c6:	bf00      	nop
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	24001388 	.word	0x24001388
 80085d4:	2400138c 	.word	0x2400138c
 80085d8:	e000ed04 	.word	0xe000ed04

080085dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80085e4:	4b0e      	ldr	r3, [pc, #56]	@ (8008620 <prvGetNextExpireTime+0x44>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d101      	bne.n	80085f2 <prvGetNextExpireTime+0x16>
 80085ee:	2201      	movs	r2, #1
 80085f0:	e000      	b.n	80085f4 <prvGetNextExpireTime+0x18>
 80085f2:	2200      	movs	r2, #0
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d105      	bne.n	800860c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008600:	4b07      	ldr	r3, [pc, #28]	@ (8008620 <prvGetNextExpireTime+0x44>)
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	60fb      	str	r3, [r7, #12]
 800860a:	e001      	b.n	8008610 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008610:	68fb      	ldr	r3, [r7, #12]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	24001384 	.word	0x24001384

08008624 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800862c:	f7ff fa2a 	bl	8007a84 <xTaskGetTickCount>
 8008630:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008632:	4b0b      	ldr	r3, [pc, #44]	@ (8008660 <prvSampleTimeNow+0x3c>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	429a      	cmp	r2, r3
 800863a:	d205      	bcs.n	8008648 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800863c:	f000 f93a 	bl	80088b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	601a      	str	r2, [r3, #0]
 8008646:	e002      	b.n	800864e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800864e:	4a04      	ldr	r2, [pc, #16]	@ (8008660 <prvSampleTimeNow+0x3c>)
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008654:	68fb      	ldr	r3, [r7, #12]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	24001394 	.word	0x24001394

08008664 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b086      	sub	sp, #24
 8008668:	af00      	add	r7, sp, #0
 800866a:	60f8      	str	r0, [r7, #12]
 800866c:	60b9      	str	r1, [r7, #8]
 800866e:	607a      	str	r2, [r7, #4]
 8008670:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008672:	2300      	movs	r3, #0
 8008674:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	68fa      	ldr	r2, [r7, #12]
 8008680:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008682:	68ba      	ldr	r2, [r7, #8]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d812      	bhi.n	80086b0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	1ad2      	subs	r2, r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	429a      	cmp	r2, r3
 8008696:	d302      	bcc.n	800869e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008698:	2301      	movs	r3, #1
 800869a:	617b      	str	r3, [r7, #20]
 800869c:	e01b      	b.n	80086d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800869e:	4b10      	ldr	r3, [pc, #64]	@ (80086e0 <prvInsertTimerInActiveList+0x7c>)
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	3304      	adds	r3, #4
 80086a6:	4619      	mov	r1, r3
 80086a8:	4610      	mov	r0, r2
 80086aa:	f7fe f99e 	bl	80069ea <vListInsert>
 80086ae:	e012      	b.n	80086d6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	683b      	ldr	r3, [r7, #0]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d206      	bcs.n	80086c6 <prvInsertTimerInActiveList+0x62>
 80086b8:	68ba      	ldr	r2, [r7, #8]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d302      	bcc.n	80086c6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80086c0:	2301      	movs	r3, #1
 80086c2:	617b      	str	r3, [r7, #20]
 80086c4:	e007      	b.n	80086d6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80086c6:	4b07      	ldr	r3, [pc, #28]	@ (80086e4 <prvInsertTimerInActiveList+0x80>)
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	3304      	adds	r3, #4
 80086ce:	4619      	mov	r1, r3
 80086d0:	4610      	mov	r0, r2
 80086d2:	f7fe f98a 	bl	80069ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 80086d6:	697b      	ldr	r3, [r7, #20]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	24001388 	.word	0x24001388
 80086e4:	24001384 	.word	0x24001384

080086e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08e      	sub	sp, #56	@ 0x38
 80086ec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086ee:	e0ce      	b.n	800888e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da19      	bge.n	800872a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086f6:	1d3b      	adds	r3, r7, #4
 80086f8:	3304      	adds	r3, #4
 80086fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d10b      	bne.n	800871a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008706:	f383 8811 	msr	BASEPRI, r3
 800870a:	f3bf 8f6f 	isb	sy
 800870e:	f3bf 8f4f 	dsb	sy
 8008712:	61fb      	str	r3, [r7, #28]
}
 8008714:	bf00      	nop
 8008716:	bf00      	nop
 8008718:	e7fd      	b.n	8008716 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800871a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008720:	6850      	ldr	r0, [r2, #4]
 8008722:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008724:	6892      	ldr	r2, [r2, #8]
 8008726:	4611      	mov	r1, r2
 8008728:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f2c0 80ae 	blt.w	800888e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008738:	695b      	ldr	r3, [r3, #20]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d004      	beq.n	8008748 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800873e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008740:	3304      	adds	r3, #4
 8008742:	4618      	mov	r0, r3
 8008744:	f7fe f98a 	bl	8006a5c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008748:	463b      	mov	r3, r7
 800874a:	4618      	mov	r0, r3
 800874c:	f7ff ff6a 	bl	8008624 <prvSampleTimeNow>
 8008750:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b09      	cmp	r3, #9
 8008756:	f200 8097 	bhi.w	8008888 <prvProcessReceivedCommands+0x1a0>
 800875a:	a201      	add	r2, pc, #4	@ (adr r2, 8008760 <prvProcessReceivedCommands+0x78>)
 800875c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008760:	08008789 	.word	0x08008789
 8008764:	08008789 	.word	0x08008789
 8008768:	08008789 	.word	0x08008789
 800876c:	080087ff 	.word	0x080087ff
 8008770:	08008813 	.word	0x08008813
 8008774:	0800885f 	.word	0x0800885f
 8008778:	08008789 	.word	0x08008789
 800877c:	08008789 	.word	0x08008789
 8008780:	080087ff 	.word	0x080087ff
 8008784:	08008813 	.word	0x08008813
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800878e:	f043 0301 	orr.w	r3, r3, #1
 8008792:	b2da      	uxtb	r2, r3
 8008794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008796:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800879e:	699b      	ldr	r3, [r3, #24]
 80087a0:	18d1      	adds	r1, r2, r3
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087a8:	f7ff ff5c 	bl	8008664 <prvInsertTimerInActiveList>
 80087ac:	4603      	mov	r3, r0
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d06c      	beq.n	800888c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087b4:	6a1b      	ldr	r3, [r3, #32]
 80087b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087b8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087c0:	f003 0304 	and.w	r3, r3, #4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d061      	beq.n	800888c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80087c8:	68ba      	ldr	r2, [r7, #8]
 80087ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	441a      	add	r2, r3
 80087d0:	2300      	movs	r3, #0
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	2300      	movs	r3, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80087da:	f7ff fe01 	bl	80083e0 <xTimerGenericCommand>
 80087de:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d152      	bne.n	800888c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	61bb      	str	r3, [r7, #24]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80087fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008800:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	b2da      	uxtb	r2, r3
 800880a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800880c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008810:	e03d      	b.n	800888e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008818:	f043 0301 	orr.w	r3, r3, #1
 800881c:	b2da      	uxtb	r2, r3
 800881e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008820:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008824:	68ba      	ldr	r2, [r7, #8]
 8008826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008828:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	699b      	ldr	r3, [r3, #24]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	617b      	str	r3, [r7, #20]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008850:	18d1      	adds	r1, r2, r3
 8008852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008858:	f7ff ff04 	bl	8008664 <prvInsertTimerInActiveList>
					break;
 800885c:	e017      	b.n	800888e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800885e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008860:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008864:	f003 0302 	and.w	r3, r3, #2
 8008868:	2b00      	cmp	r3, #0
 800886a:	d103      	bne.n	8008874 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800886c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800886e:	f000 fbeb 	bl	8009048 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008872:	e00c      	b.n	800888e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800887a:	f023 0301 	bic.w	r3, r3, #1
 800887e:	b2da      	uxtb	r2, r3
 8008880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008886:	e002      	b.n	800888e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008888:	bf00      	nop
 800888a:	e000      	b.n	800888e <prvProcessReceivedCommands+0x1a6>
					break;
 800888c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800888e:	4b08      	ldr	r3, [pc, #32]	@ (80088b0 <prvProcessReceivedCommands+0x1c8>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	1d39      	adds	r1, r7, #4
 8008894:	2200      	movs	r2, #0
 8008896:	4618      	mov	r0, r3
 8008898:	f7fe fbb4 	bl	8007004 <xQueueReceive>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f47f af26 	bne.w	80086f0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	3730      	adds	r7, #48	@ 0x30
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	2400138c 	.word	0x2400138c

080088b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80088ba:	e049      	b.n	8008950 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80088bc:	4b2e      	ldr	r3, [pc, #184]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088c6:	4b2c      	ldr	r3, [pc, #176]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	68db      	ldr	r3, [r3, #12]
 80088ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	3304      	adds	r3, #4
 80088d4:	4618      	mov	r0, r3
 80088d6:	f7fe f8c1 	bl	8006a5c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	68f8      	ldr	r0, [r7, #12]
 80088e0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d02f      	beq.n	8008950 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	699b      	ldr	r3, [r3, #24]
 80088f4:	693a      	ldr	r2, [r7, #16]
 80088f6:	4413      	add	r3, r2
 80088f8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80088fa:	68ba      	ldr	r2, [r7, #8]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	429a      	cmp	r2, r3
 8008900:	d90e      	bls.n	8008920 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	68fa      	ldr	r2, [r7, #12]
 800890c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800890e:	4b1a      	ldr	r3, [pc, #104]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	3304      	adds	r3, #4
 8008916:	4619      	mov	r1, r3
 8008918:	4610      	mov	r0, r2
 800891a:	f7fe f866 	bl	80069ea <vListInsert>
 800891e:	e017      	b.n	8008950 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008920:	2300      	movs	r3, #0
 8008922:	9300      	str	r3, [sp, #0]
 8008924:	2300      	movs	r3, #0
 8008926:	693a      	ldr	r2, [r7, #16]
 8008928:	2100      	movs	r1, #0
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f7ff fd58 	bl	80083e0 <xTimerGenericCommand>
 8008930:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d10b      	bne.n	8008950 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893c:	f383 8811 	msr	BASEPRI, r3
 8008940:	f3bf 8f6f 	isb	sy
 8008944:	f3bf 8f4f 	dsb	sy
 8008948:	603b      	str	r3, [r7, #0]
}
 800894a:	bf00      	nop
 800894c:	bf00      	nop
 800894e:	e7fd      	b.n	800894c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008950:	4b09      	ldr	r3, [pc, #36]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1b0      	bne.n	80088bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800895a:	4b07      	ldr	r3, [pc, #28]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008960:	4b06      	ldr	r3, [pc, #24]	@ (800897c <prvSwitchTimerLists+0xc8>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a04      	ldr	r2, [pc, #16]	@ (8008978 <prvSwitchTimerLists+0xc4>)
 8008966:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008968:	4a04      	ldr	r2, [pc, #16]	@ (800897c <prvSwitchTimerLists+0xc8>)
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	6013      	str	r3, [r2, #0]
}
 800896e:	bf00      	nop
 8008970:	3718      	adds	r7, #24
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	24001384 	.word	0x24001384
 800897c:	24001388 	.word	0x24001388

08008980 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008986:	f000 f96f 	bl	8008c68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800898a:	4b15      	ldr	r3, [pc, #84]	@ (80089e0 <prvCheckForValidListAndQueue+0x60>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d120      	bne.n	80089d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008992:	4814      	ldr	r0, [pc, #80]	@ (80089e4 <prvCheckForValidListAndQueue+0x64>)
 8008994:	f7fd ffd8 	bl	8006948 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008998:	4813      	ldr	r0, [pc, #76]	@ (80089e8 <prvCheckForValidListAndQueue+0x68>)
 800899a:	f7fd ffd5 	bl	8006948 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800899e:	4b13      	ldr	r3, [pc, #76]	@ (80089ec <prvCheckForValidListAndQueue+0x6c>)
 80089a0:	4a10      	ldr	r2, [pc, #64]	@ (80089e4 <prvCheckForValidListAndQueue+0x64>)
 80089a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80089a4:	4b12      	ldr	r3, [pc, #72]	@ (80089f0 <prvCheckForValidListAndQueue+0x70>)
 80089a6:	4a10      	ldr	r2, [pc, #64]	@ (80089e8 <prvCheckForValidListAndQueue+0x68>)
 80089a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80089aa:	2300      	movs	r3, #0
 80089ac:	9300      	str	r3, [sp, #0]
 80089ae:	4b11      	ldr	r3, [pc, #68]	@ (80089f4 <prvCheckForValidListAndQueue+0x74>)
 80089b0:	4a11      	ldr	r2, [pc, #68]	@ (80089f8 <prvCheckForValidListAndQueue+0x78>)
 80089b2:	2110      	movs	r1, #16
 80089b4:	200a      	movs	r0, #10
 80089b6:	f7fe f8e5 	bl	8006b84 <xQueueGenericCreateStatic>
 80089ba:	4603      	mov	r3, r0
 80089bc:	4a08      	ldr	r2, [pc, #32]	@ (80089e0 <prvCheckForValidListAndQueue+0x60>)
 80089be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <prvCheckForValidListAndQueue+0x60>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d005      	beq.n	80089d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80089c8:	4b05      	ldr	r3, [pc, #20]	@ (80089e0 <prvCheckForValidListAndQueue+0x60>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	490b      	ldr	r1, [pc, #44]	@ (80089fc <prvCheckForValidListAndQueue+0x7c>)
 80089ce:	4618      	mov	r0, r3
 80089d0:	f7fe fd0a 	bl	80073e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80089d4:	f000 f97a 	bl	8008ccc <vPortExitCritical>
}
 80089d8:	bf00      	nop
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	2400138c 	.word	0x2400138c
 80089e4:	2400135c 	.word	0x2400135c
 80089e8:	24001370 	.word	0x24001370
 80089ec:	24001384 	.word	0x24001384
 80089f0:	24001388 	.word	0x24001388
 80089f4:	24001438 	.word	0x24001438
 80089f8:	24001398 	.word	0x24001398
 80089fc:	08009358 	.word	0x08009358

08008a00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	60f8      	str	r0, [r7, #12]
 8008a08:	60b9      	str	r1, [r7, #8]
 8008a0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	3b04      	subs	r3, #4
 8008a10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008a18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	3b04      	subs	r3, #4
 8008a1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f023 0201 	bic.w	r2, r3, #1
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	3b04      	subs	r3, #4
 8008a2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008a30:	4a0c      	ldr	r2, [pc, #48]	@ (8008a64 <pxPortInitialiseStack+0x64>)
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b14      	subs	r3, #20
 8008a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	3b04      	subs	r3, #4
 8008a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f06f 0202 	mvn.w	r2, #2
 8008a4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	3b20      	subs	r3, #32
 8008a54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3714      	adds	r7, #20
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	08008a69 	.word	0x08008a69

08008a68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008a72:	4b13      	ldr	r3, [pc, #76]	@ (8008ac0 <prvTaskExitError+0x58>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a7a:	d00b      	beq.n	8008a94 <prvTaskExitError+0x2c>
	__asm volatile
 8008a7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a80:	f383 8811 	msr	BASEPRI, r3
 8008a84:	f3bf 8f6f 	isb	sy
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	60fb      	str	r3, [r7, #12]
}
 8008a8e:	bf00      	nop
 8008a90:	bf00      	nop
 8008a92:	e7fd      	b.n	8008a90 <prvTaskExitError+0x28>
	__asm volatile
 8008a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a98:	f383 8811 	msr	BASEPRI, r3
 8008a9c:	f3bf 8f6f 	isb	sy
 8008aa0:	f3bf 8f4f 	dsb	sy
 8008aa4:	60bb      	str	r3, [r7, #8]
}
 8008aa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008aa8:	bf00      	nop
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0fc      	beq.n	8008aaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008ab0:	bf00      	nop
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr
 8008abe:	bf00      	nop
 8008ac0:	24000010 	.word	0x24000010
	...

08008ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008ad0:	4b07      	ldr	r3, [pc, #28]	@ (8008af0 <pxCurrentTCBConst2>)
 8008ad2:	6819      	ldr	r1, [r3, #0]
 8008ad4:	6808      	ldr	r0, [r1, #0]
 8008ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f380 8809 	msr	PSP, r0
 8008ade:	f3bf 8f6f 	isb	sy
 8008ae2:	f04f 0000 	mov.w	r0, #0
 8008ae6:	f380 8811 	msr	BASEPRI, r0
 8008aea:	4770      	bx	lr
 8008aec:	f3af 8000 	nop.w

08008af0 <pxCurrentTCBConst2>:
 8008af0:	24000e5c 	.word	0x24000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008af4:	bf00      	nop
 8008af6:	bf00      	nop

08008af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008af8:	4808      	ldr	r0, [pc, #32]	@ (8008b1c <prvPortStartFirstTask+0x24>)
 8008afa:	6800      	ldr	r0, [r0, #0]
 8008afc:	6800      	ldr	r0, [r0, #0]
 8008afe:	f380 8808 	msr	MSP, r0
 8008b02:	f04f 0000 	mov.w	r0, #0
 8008b06:	f380 8814 	msr	CONTROL, r0
 8008b0a:	b662      	cpsie	i
 8008b0c:	b661      	cpsie	f
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	df00      	svc	0
 8008b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008b1a:	bf00      	nop
 8008b1c:	e000ed08 	.word	0xe000ed08

08008b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008b26:	4b47      	ldr	r3, [pc, #284]	@ (8008c44 <xPortStartScheduler+0x124>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	4a47      	ldr	r2, [pc, #284]	@ (8008c48 <xPortStartScheduler+0x128>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d10b      	bne.n	8008b48 <xPortStartScheduler+0x28>
	__asm volatile
 8008b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b34:	f383 8811 	msr	BASEPRI, r3
 8008b38:	f3bf 8f6f 	isb	sy
 8008b3c:	f3bf 8f4f 	dsb	sy
 8008b40:	613b      	str	r3, [r7, #16]
}
 8008b42:	bf00      	nop
 8008b44:	bf00      	nop
 8008b46:	e7fd      	b.n	8008b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008b48:	4b3e      	ldr	r3, [pc, #248]	@ (8008c44 <xPortStartScheduler+0x124>)
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a3f      	ldr	r2, [pc, #252]	@ (8008c4c <xPortStartScheduler+0x12c>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d10b      	bne.n	8008b6a <xPortStartScheduler+0x4a>
	__asm volatile
 8008b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b56:	f383 8811 	msr	BASEPRI, r3
 8008b5a:	f3bf 8f6f 	isb	sy
 8008b5e:	f3bf 8f4f 	dsb	sy
 8008b62:	60fb      	str	r3, [r7, #12]
}
 8008b64:	bf00      	nop
 8008b66:	bf00      	nop
 8008b68:	e7fd      	b.n	8008b66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008b6a:	4b39      	ldr	r3, [pc, #228]	@ (8008c50 <xPortStartScheduler+0x130>)
 8008b6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	22ff      	movs	r2, #255	@ 0xff
 8008b7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008b84:	78fb      	ldrb	r3, [r7, #3]
 8008b86:	b2db      	uxtb	r3, r3
 8008b88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008b8c:	b2da      	uxtb	r2, r3
 8008b8e:	4b31      	ldr	r3, [pc, #196]	@ (8008c54 <xPortStartScheduler+0x134>)
 8008b90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008b92:	4b31      	ldr	r3, [pc, #196]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008b94:	2207      	movs	r2, #7
 8008b96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008b98:	e009      	b.n	8008bae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3b01      	subs	r3, #1
 8008ba0:	4a2d      	ldr	r2, [pc, #180]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008ba2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	005b      	lsls	r3, r3, #1
 8008baa:	b2db      	uxtb	r3, r3
 8008bac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008bae:	78fb      	ldrb	r3, [r7, #3]
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008bb6:	2b80      	cmp	r3, #128	@ 0x80
 8008bb8:	d0ef      	beq.n	8008b9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008bba:	4b27      	ldr	r3, [pc, #156]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f1c3 0307 	rsb	r3, r3, #7
 8008bc2:	2b04      	cmp	r3, #4
 8008bc4:	d00b      	beq.n	8008bde <xPortStartScheduler+0xbe>
	__asm volatile
 8008bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	60bb      	str	r3, [r7, #8]
}
 8008bd8:	bf00      	nop
 8008bda:	bf00      	nop
 8008bdc:	e7fd      	b.n	8008bda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008bde:	4b1e      	ldr	r3, [pc, #120]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	021b      	lsls	r3, r3, #8
 8008be4:	4a1c      	ldr	r2, [pc, #112]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008be6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008be8:	4b1b      	ldr	r3, [pc, #108]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008bf0:	4a19      	ldr	r2, [pc, #100]	@ (8008c58 <xPortStartScheduler+0x138>)
 8008bf2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	b2da      	uxtb	r2, r3
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008bfc:	4b17      	ldr	r3, [pc, #92]	@ (8008c5c <xPortStartScheduler+0x13c>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a16      	ldr	r2, [pc, #88]	@ (8008c5c <xPortStartScheduler+0x13c>)
 8008c02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008c06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008c08:	4b14      	ldr	r3, [pc, #80]	@ (8008c5c <xPortStartScheduler+0x13c>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	4a13      	ldr	r2, [pc, #76]	@ (8008c5c <xPortStartScheduler+0x13c>)
 8008c0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008c12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008c14:	f000 f8da 	bl	8008dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008c18:	4b11      	ldr	r3, [pc, #68]	@ (8008c60 <xPortStartScheduler+0x140>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008c1e:	f000 f8f9 	bl	8008e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008c22:	4b10      	ldr	r3, [pc, #64]	@ (8008c64 <xPortStartScheduler+0x144>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a0f      	ldr	r2, [pc, #60]	@ (8008c64 <xPortStartScheduler+0x144>)
 8008c28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008c2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008c2e:	f7ff ff63 	bl	8008af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008c32:	f7fe fff1 	bl	8007c18 <vTaskSwitchContext>
	prvTaskExitError();
 8008c36:	f7ff ff17 	bl	8008a68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008c3a:	2300      	movs	r3, #0
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3718      	adds	r7, #24
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	e000ed00 	.word	0xe000ed00
 8008c48:	410fc271 	.word	0x410fc271
 8008c4c:	410fc270 	.word	0x410fc270
 8008c50:	e000e400 	.word	0xe000e400
 8008c54:	24001488 	.word	0x24001488
 8008c58:	2400148c 	.word	0x2400148c
 8008c5c:	e000ed20 	.word	0xe000ed20
 8008c60:	24000010 	.word	0x24000010
 8008c64:	e000ef34 	.word	0xe000ef34

08008c68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b083      	sub	sp, #12
 8008c6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c72:	f383 8811 	msr	BASEPRI, r3
 8008c76:	f3bf 8f6f 	isb	sy
 8008c7a:	f3bf 8f4f 	dsb	sy
 8008c7e:	607b      	str	r3, [r7, #4]
}
 8008c80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008c82:	4b10      	ldr	r3, [pc, #64]	@ (8008cc4 <vPortEnterCritical+0x5c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3301      	adds	r3, #1
 8008c88:	4a0e      	ldr	r2, [pc, #56]	@ (8008cc4 <vPortEnterCritical+0x5c>)
 8008c8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008c8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008cc4 <vPortEnterCritical+0x5c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2b01      	cmp	r3, #1
 8008c92:	d110      	bne.n	8008cb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008c94:	4b0c      	ldr	r3, [pc, #48]	@ (8008cc8 <vPortEnterCritical+0x60>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	b2db      	uxtb	r3, r3
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008c9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca2:	f383 8811 	msr	BASEPRI, r3
 8008ca6:	f3bf 8f6f 	isb	sy
 8008caa:	f3bf 8f4f 	dsb	sy
 8008cae:	603b      	str	r3, [r7, #0]
}
 8008cb0:	bf00      	nop
 8008cb2:	bf00      	nop
 8008cb4:	e7fd      	b.n	8008cb2 <vPortEnterCritical+0x4a>
	}
}
 8008cb6:	bf00      	nop
 8008cb8:	370c      	adds	r7, #12
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	24000010 	.word	0x24000010
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b083      	sub	sp, #12
 8008cd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008cd2:	4b12      	ldr	r3, [pc, #72]	@ (8008d1c <vPortExitCritical+0x50>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d10b      	bne.n	8008cf2 <vPortExitCritical+0x26>
	__asm volatile
 8008cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cde:	f383 8811 	msr	BASEPRI, r3
 8008ce2:	f3bf 8f6f 	isb	sy
 8008ce6:	f3bf 8f4f 	dsb	sy
 8008cea:	607b      	str	r3, [r7, #4]
}
 8008cec:	bf00      	nop
 8008cee:	bf00      	nop
 8008cf0:	e7fd      	b.n	8008cee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8008d1c <vPortExitCritical+0x50>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	3b01      	subs	r3, #1
 8008cf8:	4a08      	ldr	r2, [pc, #32]	@ (8008d1c <vPortExitCritical+0x50>)
 8008cfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008cfc:	4b07      	ldr	r3, [pc, #28]	@ (8008d1c <vPortExitCritical+0x50>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <vPortExitCritical+0x44>
 8008d04:	2300      	movs	r3, #0
 8008d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	f383 8811 	msr	BASEPRI, r3
}
 8008d0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	24000010 	.word	0x24000010

08008d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008d20:	f3ef 8009 	mrs	r0, PSP
 8008d24:	f3bf 8f6f 	isb	sy
 8008d28:	4b15      	ldr	r3, [pc, #84]	@ (8008d80 <pxCurrentTCBConst>)
 8008d2a:	681a      	ldr	r2, [r3, #0]
 8008d2c:	f01e 0f10 	tst.w	lr, #16
 8008d30:	bf08      	it	eq
 8008d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d3a:	6010      	str	r0, [r2, #0]
 8008d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008d44:	f380 8811 	msr	BASEPRI, r0
 8008d48:	f3bf 8f4f 	dsb	sy
 8008d4c:	f3bf 8f6f 	isb	sy
 8008d50:	f7fe ff62 	bl	8007c18 <vTaskSwitchContext>
 8008d54:	f04f 0000 	mov.w	r0, #0
 8008d58:	f380 8811 	msr	BASEPRI, r0
 8008d5c:	bc09      	pop	{r0, r3}
 8008d5e:	6819      	ldr	r1, [r3, #0]
 8008d60:	6808      	ldr	r0, [r1, #0]
 8008d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d66:	f01e 0f10 	tst.w	lr, #16
 8008d6a:	bf08      	it	eq
 8008d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008d70:	f380 8809 	msr	PSP, r0
 8008d74:	f3bf 8f6f 	isb	sy
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	f3af 8000 	nop.w

08008d80 <pxCurrentTCBConst>:
 8008d80:	24000e5c 	.word	0x24000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008d84:	bf00      	nop
 8008d86:	bf00      	nop

08008d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d92:	f383 8811 	msr	BASEPRI, r3
 8008d96:	f3bf 8f6f 	isb	sy
 8008d9a:	f3bf 8f4f 	dsb	sy
 8008d9e:	607b      	str	r3, [r7, #4]
}
 8008da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008da2:	f7fe fe7f 	bl	8007aa4 <xTaskIncrementTick>
 8008da6:	4603      	mov	r3, r0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008dac:	4b06      	ldr	r3, [pc, #24]	@ (8008dc8 <xPortSysTickHandler+0x40>)
 8008dae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db2:	601a      	str	r2, [r3, #0]
 8008db4:	2300      	movs	r3, #0
 8008db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	f383 8811 	msr	BASEPRI, r3
}
 8008dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008dc0:	bf00      	nop
 8008dc2:	3708      	adds	r7, #8
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}
 8008dc8:	e000ed04 	.word	0xe000ed04

08008dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008dcc:	b480      	push	{r7}
 8008dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008dd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008e04 <vPortSetupTimerInterrupt+0x38>)
 8008dd8:	2200      	movs	r2, #0
 8008dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e08 <vPortSetupTimerInterrupt+0x3c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0a      	ldr	r2, [pc, #40]	@ (8008e0c <vPortSetupTimerInterrupt+0x40>)
 8008de2:	fba2 2303 	umull	r2, r3, r2, r3
 8008de6:	099b      	lsrs	r3, r3, #6
 8008de8:	4a09      	ldr	r2, [pc, #36]	@ (8008e10 <vPortSetupTimerInterrupt+0x44>)
 8008dea:	3b01      	subs	r3, #1
 8008dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008dee:	4b04      	ldr	r3, [pc, #16]	@ (8008e00 <vPortSetupTimerInterrupt+0x34>)
 8008df0:	2207      	movs	r2, #7
 8008df2:	601a      	str	r2, [r3, #0]
}
 8008df4:	bf00      	nop
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
 8008dfe:	bf00      	nop
 8008e00:	e000e010 	.word	0xe000e010
 8008e04:	e000e018 	.word	0xe000e018
 8008e08:	24000000 	.word	0x24000000
 8008e0c:	10624dd3 	.word	0x10624dd3
 8008e10:	e000e014 	.word	0xe000e014

08008e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008e14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008e24 <vPortEnableVFP+0x10>
 8008e18:	6801      	ldr	r1, [r0, #0]
 8008e1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008e1e:	6001      	str	r1, [r0, #0]
 8008e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008e22:	bf00      	nop
 8008e24:	e000ed88 	.word	0xe000ed88

08008e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008e28:	b480      	push	{r7}
 8008e2a:	b085      	sub	sp, #20
 8008e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008e2e:	f3ef 8305 	mrs	r3, IPSR
 8008e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d915      	bls.n	8008e66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008e3a:	4a18      	ldr	r2, [pc, #96]	@ (8008e9c <vPortValidateInterruptPriority+0x74>)
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	4413      	add	r3, r2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008e44:	4b16      	ldr	r3, [pc, #88]	@ (8008ea0 <vPortValidateInterruptPriority+0x78>)
 8008e46:	781b      	ldrb	r3, [r3, #0]
 8008e48:	7afa      	ldrb	r2, [r7, #11]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d20b      	bcs.n	8008e66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e52:	f383 8811 	msr	BASEPRI, r3
 8008e56:	f3bf 8f6f 	isb	sy
 8008e5a:	f3bf 8f4f 	dsb	sy
 8008e5e:	607b      	str	r3, [r7, #4]
}
 8008e60:	bf00      	nop
 8008e62:	bf00      	nop
 8008e64:	e7fd      	b.n	8008e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008e66:	4b0f      	ldr	r3, [pc, #60]	@ (8008ea4 <vPortValidateInterruptPriority+0x7c>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008ea8 <vPortValidateInterruptPriority+0x80>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	429a      	cmp	r2, r3
 8008e74:	d90b      	bls.n	8008e8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7a:	f383 8811 	msr	BASEPRI, r3
 8008e7e:	f3bf 8f6f 	isb	sy
 8008e82:	f3bf 8f4f 	dsb	sy
 8008e86:	603b      	str	r3, [r7, #0]
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	e7fd      	b.n	8008e8a <vPortValidateInterruptPriority+0x62>
	}
 8008e8e:	bf00      	nop
 8008e90:	3714      	adds	r7, #20
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	e000e3f0 	.word	0xe000e3f0
 8008ea0:	24001488 	.word	0x24001488
 8008ea4:	e000ed0c 	.word	0xe000ed0c
 8008ea8:	2400148c 	.word	0x2400148c

08008eac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b08a      	sub	sp, #40	@ 0x28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008eb8:	f7fe fd38 	bl	800792c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008ebc:	4b5c      	ldr	r3, [pc, #368]	@ (8009030 <pvPortMalloc+0x184>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d101      	bne.n	8008ec8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008ec4:	f000 f924 	bl	8009110 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008ec8:	4b5a      	ldr	r3, [pc, #360]	@ (8009034 <pvPortMalloc+0x188>)
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	f040 8095 	bne.w	8009000 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d01e      	beq.n	8008f1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008edc:	2208      	movs	r2, #8
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f003 0307 	and.w	r3, r3, #7
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d015      	beq.n	8008f1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f023 0307 	bic.w	r3, r3, #7
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f003 0307 	and.w	r3, r3, #7
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00b      	beq.n	8008f1a <pvPortMalloc+0x6e>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	617b      	str	r3, [r7, #20]
}
 8008f14:	bf00      	nop
 8008f16:	bf00      	nop
 8008f18:	e7fd      	b.n	8008f16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d06f      	beq.n	8009000 <pvPortMalloc+0x154>
 8008f20:	4b45      	ldr	r3, [pc, #276]	@ (8009038 <pvPortMalloc+0x18c>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d86a      	bhi.n	8009000 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008f2a:	4b44      	ldr	r3, [pc, #272]	@ (800903c <pvPortMalloc+0x190>)
 8008f2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008f2e:	4b43      	ldr	r3, [pc, #268]	@ (800903c <pvPortMalloc+0x190>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f34:	e004      	b.n	8008f40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d903      	bls.n	8008f52 <pvPortMalloc+0xa6>
 8008f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d1f1      	bne.n	8008f36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008f52:	4b37      	ldr	r3, [pc, #220]	@ (8009030 <pvPortMalloc+0x184>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f58:	429a      	cmp	r2, r3
 8008f5a:	d051      	beq.n	8009000 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2208      	movs	r2, #8
 8008f62:	4413      	add	r3, r2
 8008f64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f70:	685a      	ldr	r2, [r3, #4]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	1ad2      	subs	r2, r2, r3
 8008f76:	2308      	movs	r3, #8
 8008f78:	005b      	lsls	r3, r3, #1
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d920      	bls.n	8008fc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	4413      	add	r3, r2
 8008f84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f86:	69bb      	ldr	r3, [r7, #24]
 8008f88:	f003 0307 	and.w	r3, r3, #7
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d00b      	beq.n	8008fa8 <pvPortMalloc+0xfc>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
}
 8008fa2:	bf00      	nop
 8008fa4:	bf00      	nop
 8008fa6:	e7fd      	b.n	8008fa4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008faa:	685a      	ldr	r2, [r3, #4]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	1ad2      	subs	r2, r2, r3
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb6:	687a      	ldr	r2, [r7, #4]
 8008fb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008fba:	69b8      	ldr	r0, [r7, #24]
 8008fbc:	f000 f90a 	bl	80091d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008fc0:	4b1d      	ldr	r3, [pc, #116]	@ (8009038 <pvPortMalloc+0x18c>)
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	4a1b      	ldr	r2, [pc, #108]	@ (8009038 <pvPortMalloc+0x18c>)
 8008fcc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008fce:	4b1a      	ldr	r3, [pc, #104]	@ (8009038 <pvPortMalloc+0x18c>)
 8008fd0:	681a      	ldr	r2, [r3, #0]
 8008fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8009040 <pvPortMalloc+0x194>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	429a      	cmp	r2, r3
 8008fd8:	d203      	bcs.n	8008fe2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008fda:	4b17      	ldr	r3, [pc, #92]	@ (8009038 <pvPortMalloc+0x18c>)
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a18      	ldr	r2, [pc, #96]	@ (8009040 <pvPortMalloc+0x194>)
 8008fe0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe4:	685a      	ldr	r2, [r3, #4]
 8008fe6:	4b13      	ldr	r3, [pc, #76]	@ (8009034 <pvPortMalloc+0x188>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	431a      	orrs	r2, r3
 8008fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ff6:	4b13      	ldr	r3, [pc, #76]	@ (8009044 <pvPortMalloc+0x198>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	4a11      	ldr	r2, [pc, #68]	@ (8009044 <pvPortMalloc+0x198>)
 8008ffe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009000:	f7fe fca2 	bl	8007948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009004:	69fb      	ldr	r3, [r7, #28]
 8009006:	f003 0307 	and.w	r3, r3, #7
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <pvPortMalloc+0x17a>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	60fb      	str	r3, [r7, #12]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <pvPortMalloc+0x176>
	return pvReturn;
 8009026:	69fb      	ldr	r3, [r7, #28]
}
 8009028:	4618      	mov	r0, r3
 800902a:	3728      	adds	r7, #40	@ 0x28
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	24005098 	.word	0x24005098
 8009034:	240050ac 	.word	0x240050ac
 8009038:	2400509c 	.word	0x2400509c
 800903c:	24005090 	.word	0x24005090
 8009040:	240050a0 	.word	0x240050a0
 8009044:	240050a4 	.word	0x240050a4

08009048 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b086      	sub	sp, #24
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d04f      	beq.n	80090fa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800905a:	2308      	movs	r3, #8
 800905c:	425b      	negs	r3, r3
 800905e:	697a      	ldr	r2, [r7, #20]
 8009060:	4413      	add	r3, r2
 8009062:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009064:	697b      	ldr	r3, [r7, #20]
 8009066:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4b25      	ldr	r3, [pc, #148]	@ (8009104 <vPortFree+0xbc>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4013      	ands	r3, r2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d10b      	bne.n	800908e <vPortFree+0x46>
	__asm volatile
 8009076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907a:	f383 8811 	msr	BASEPRI, r3
 800907e:	f3bf 8f6f 	isb	sy
 8009082:	f3bf 8f4f 	dsb	sy
 8009086:	60fb      	str	r3, [r7, #12]
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	e7fd      	b.n	800908a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <vPortFree+0x66>
	__asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	60bb      	str	r3, [r7, #8]
}
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	4b14      	ldr	r3, [pc, #80]	@ (8009104 <vPortFree+0xbc>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	4013      	ands	r3, r2
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01e      	beq.n	80090fa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d11a      	bne.n	80090fa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	685a      	ldr	r2, [r3, #4]
 80090c8:	4b0e      	ldr	r3, [pc, #56]	@ (8009104 <vPortFree+0xbc>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	43db      	mvns	r3, r3
 80090ce:	401a      	ands	r2, r3
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80090d4:	f7fe fc2a 	bl	800792c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	4b0a      	ldr	r3, [pc, #40]	@ (8009108 <vPortFree+0xc0>)
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4413      	add	r3, r2
 80090e2:	4a09      	ldr	r2, [pc, #36]	@ (8009108 <vPortFree+0xc0>)
 80090e4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80090e6:	6938      	ldr	r0, [r7, #16]
 80090e8:	f000 f874 	bl	80091d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80090ec:	4b07      	ldr	r3, [pc, #28]	@ (800910c <vPortFree+0xc4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a06      	ldr	r2, [pc, #24]	@ (800910c <vPortFree+0xc4>)
 80090f4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80090f6:	f7fe fc27 	bl	8007948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80090fa:	bf00      	nop
 80090fc:	3718      	adds	r7, #24
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	240050ac 	.word	0x240050ac
 8009108:	2400509c 	.word	0x2400509c
 800910c:	240050a8 	.word	0x240050a8

08009110 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009110:	b480      	push	{r7}
 8009112:	b085      	sub	sp, #20
 8009114:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009116:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800911a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800911c:	4b27      	ldr	r3, [pc, #156]	@ (80091bc <prvHeapInit+0xac>)
 800911e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f003 0307 	and.w	r3, r3, #7
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00c      	beq.n	8009144 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	3307      	adds	r3, #7
 800912e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 0307 	bic.w	r3, r3, #7
 8009136:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	1ad3      	subs	r3, r2, r3
 800913e:	4a1f      	ldr	r2, [pc, #124]	@ (80091bc <prvHeapInit+0xac>)
 8009140:	4413      	add	r3, r2
 8009142:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009148:	4a1d      	ldr	r2, [pc, #116]	@ (80091c0 <prvHeapInit+0xb0>)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800914e:	4b1c      	ldr	r3, [pc, #112]	@ (80091c0 <prvHeapInit+0xb0>)
 8009150:	2200      	movs	r2, #0
 8009152:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	4413      	add	r3, r2
 800915a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800915c:	2208      	movs	r2, #8
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	1a9b      	subs	r3, r3, r2
 8009162:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 0307 	bic.w	r3, r3, #7
 800916a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	4a15      	ldr	r2, [pc, #84]	@ (80091c4 <prvHeapInit+0xb4>)
 8009170:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009172:	4b14      	ldr	r3, [pc, #80]	@ (80091c4 <prvHeapInit+0xb4>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2200      	movs	r2, #0
 8009178:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800917a:	4b12      	ldr	r3, [pc, #72]	@ (80091c4 <prvHeapInit+0xb4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	68fa      	ldr	r2, [r7, #12]
 800918a:	1ad2      	subs	r2, r2, r3
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009190:	4b0c      	ldr	r3, [pc, #48]	@ (80091c4 <prvHeapInit+0xb4>)
 8009192:	681a      	ldr	r2, [r3, #0]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	4a0a      	ldr	r2, [pc, #40]	@ (80091c8 <prvHeapInit+0xb8>)
 800919e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80091a0:	683b      	ldr	r3, [r7, #0]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	4a09      	ldr	r2, [pc, #36]	@ (80091cc <prvHeapInit+0xbc>)
 80091a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80091a8:	4b09      	ldr	r3, [pc, #36]	@ (80091d0 <prvHeapInit+0xc0>)
 80091aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091ae:	601a      	str	r2, [r3, #0]
}
 80091b0:	bf00      	nop
 80091b2:	3714      	adds	r7, #20
 80091b4:	46bd      	mov	sp, r7
 80091b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ba:	4770      	bx	lr
 80091bc:	24001490 	.word	0x24001490
 80091c0:	24005090 	.word	0x24005090
 80091c4:	24005098 	.word	0x24005098
 80091c8:	240050a0 	.word	0x240050a0
 80091cc:	2400509c 	.word	0x2400509c
 80091d0:	240050ac 	.word	0x240050ac

080091d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80091dc:	4b28      	ldr	r3, [pc, #160]	@ (8009280 <prvInsertBlockIntoFreeList+0xac>)
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	e002      	b.n	80091e8 <prvInsertBlockIntoFreeList+0x14>
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d8f7      	bhi.n	80091e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	68ba      	ldr	r2, [r7, #8]
 80091fc:	4413      	add	r3, r2
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	429a      	cmp	r2, r3
 8009202:	d108      	bne.n	8009216 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	685b      	ldr	r3, [r3, #4]
 800920c:	441a      	add	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	685b      	ldr	r3, [r3, #4]
 800921e:	68ba      	ldr	r2, [r7, #8]
 8009220:	441a      	add	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	429a      	cmp	r2, r3
 8009228:	d118      	bne.n	800925c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	4b15      	ldr	r3, [pc, #84]	@ (8009284 <prvInsertBlockIntoFreeList+0xb0>)
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	429a      	cmp	r2, r3
 8009234:	d00d      	beq.n	8009252 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	685b      	ldr	r3, [r3, #4]
 8009240:	441a      	add	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	601a      	str	r2, [r3, #0]
 8009250:	e008      	b.n	8009264 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009252:	4b0c      	ldr	r3, [pc, #48]	@ (8009284 <prvInsertBlockIntoFreeList+0xb0>)
 8009254:	681a      	ldr	r2, [r3, #0]
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	601a      	str	r2, [r3, #0]
 800925a:	e003      	b.n	8009264 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	429a      	cmp	r2, r3
 800926a:	d002      	beq.n	8009272 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009272:	bf00      	nop
 8009274:	3714      	adds	r7, #20
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	24005090 	.word	0x24005090
 8009284:	24005098 	.word	0x24005098

08009288 <memset>:
 8009288:	4402      	add	r2, r0
 800928a:	4603      	mov	r3, r0
 800928c:	4293      	cmp	r3, r2
 800928e:	d100      	bne.n	8009292 <memset+0xa>
 8009290:	4770      	bx	lr
 8009292:	f803 1b01 	strb.w	r1, [r3], #1
 8009296:	e7f9      	b.n	800928c <memset+0x4>

08009298 <__libc_init_array>:
 8009298:	b570      	push	{r4, r5, r6, lr}
 800929a:	4d0d      	ldr	r5, [pc, #52]	@ (80092d0 <__libc_init_array+0x38>)
 800929c:	4c0d      	ldr	r4, [pc, #52]	@ (80092d4 <__libc_init_array+0x3c>)
 800929e:	1b64      	subs	r4, r4, r5
 80092a0:	10a4      	asrs	r4, r4, #2
 80092a2:	2600      	movs	r6, #0
 80092a4:	42a6      	cmp	r6, r4
 80092a6:	d109      	bne.n	80092bc <__libc_init_array+0x24>
 80092a8:	4d0b      	ldr	r5, [pc, #44]	@ (80092d8 <__libc_init_array+0x40>)
 80092aa:	4c0c      	ldr	r4, [pc, #48]	@ (80092dc <__libc_init_array+0x44>)
 80092ac:	f000 f826 	bl	80092fc <_init>
 80092b0:	1b64      	subs	r4, r4, r5
 80092b2:	10a4      	asrs	r4, r4, #2
 80092b4:	2600      	movs	r6, #0
 80092b6:	42a6      	cmp	r6, r4
 80092b8:	d105      	bne.n	80092c6 <__libc_init_array+0x2e>
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c0:	4798      	blx	r3
 80092c2:	3601      	adds	r6, #1
 80092c4:	e7ee      	b.n	80092a4 <__libc_init_array+0xc>
 80092c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ca:	4798      	blx	r3
 80092cc:	3601      	adds	r6, #1
 80092ce:	e7f2      	b.n	80092b6 <__libc_init_array+0x1e>
 80092d0:	080093c4 	.word	0x080093c4
 80092d4:	080093c4 	.word	0x080093c4
 80092d8:	080093c4 	.word	0x080093c4
 80092dc:	080093c8 	.word	0x080093c8

080092e0 <memcpy>:
 80092e0:	440a      	add	r2, r1
 80092e2:	4291      	cmp	r1, r2
 80092e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80092e8:	d100      	bne.n	80092ec <memcpy+0xc>
 80092ea:	4770      	bx	lr
 80092ec:	b510      	push	{r4, lr}
 80092ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092f6:	4291      	cmp	r1, r2
 80092f8:	d1f9      	bne.n	80092ee <memcpy+0xe>
 80092fa:	bd10      	pop	{r4, pc}

080092fc <_init>:
 80092fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fe:	bf00      	nop
 8009300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009302:	bc08      	pop	{r3}
 8009304:	469e      	mov	lr, r3
 8009306:	4770      	bx	lr

08009308 <_fini>:
 8009308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930a:	bf00      	nop
 800930c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800930e:	bc08      	pop	{r3}
 8009310:	469e      	mov	lr, r3
 8009312:	4770      	bx	lr
>>>>>>> dev
