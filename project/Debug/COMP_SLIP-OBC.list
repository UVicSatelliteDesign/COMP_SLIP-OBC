
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008464  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08008704  08008704  00009704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080088bc  080088bc  000098bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080088c4  080088c4  000098c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080088c8  080088c8  000098c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080088cc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400006c  08008938  0000a06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000cc  08008998  0000a0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007dc  2400012c  080089f8  0000a12c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000908  080089f8  0000a908  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a12c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018fff  00000000  00000000  0000a15a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b84  00000000  00000000  00023159  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00025ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c21  00000000  00000000  00026ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00038863  00000000  00000000  000278c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015142  00000000  00000000  00060124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00160e30  00000000  00000000  00075266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d6096  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd0  00000000  00000000  001d60dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001daeac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080086ec 	.word	0x080086ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	080086ec 	.word	0x080086ec

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b09a      	sub	sp, #104	@ 0x68
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006b2:	f000 fdfd 	bl	80012b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b6:	f000 f823 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ba:	f000 f96b 	bl	8000994 <MX_GPIO_Init>
  MX_ETH_Init();
 80006be:	f000 f89f 	bl	8000800 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80006c2:	f000 f8e9 	bl	8000898 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006c6:	f000 f933 	bl	8000930 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart3);
 80006ca:	4809      	ldr	r0, [pc, #36]	@ (80006f0 <main+0x44>)
 80006cc:	f000 fa44 	bl	8000b58 <RetargetInit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	printf("\r\nYour name: ");
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <main+0x48>)
 80006d2:	f006 fb2d 	bl	8006d30 <iprintf>
	scanf("%s", buf);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <main+0x4c>)
 80006dc:	f006 fb3a 	bl	8006d54 <iscanf>
	printf("\r\nHello, %s!\r\n", buf);
 80006e0:	1d3b      	adds	r3, r7, #4
 80006e2:	4619      	mov	r1, r3
 80006e4:	4805      	ldr	r0, [pc, #20]	@ (80006fc <main+0x50>)
 80006e6:	f006 fb23 	bl	8006d30 <iprintf>
	printf("\r\nYour name: ");
 80006ea:	bf00      	nop
 80006ec:	e7f0      	b.n	80006d0 <main+0x24>
 80006ee:	bf00      	nop
 80006f0:	24000230 	.word	0x24000230
 80006f4:	08008704 	.word	0x08008704
 80006f8:	08008714 	.word	0x08008714
 80006fc:	08008718 	.word	0x08008718

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	224c      	movs	r2, #76	@ 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fc29 	bl	8006f66 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fc23 	bl	8006f66 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000720:	2002      	movs	r0, #2
 8000722:	f001 fead 	bl	8002480 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b33      	ldr	r3, [pc, #204]	@ (80007f8 <SystemClock_Config+0xf8>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	4a32      	ldr	r2, [pc, #200]	@ (80007f8 <SystemClock_Config+0xf8>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000736:	4b30      	ldr	r3, [pc, #192]	@ (80007f8 <SystemClock_Config+0xf8>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b2e      	ldr	r3, [pc, #184]	@ (80007fc <SystemClock_Config+0xfc>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000748:	4a2c      	ldr	r2, [pc, #176]	@ (80007fc <SystemClock_Config+0xfc>)
 800074a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b2a      	ldr	r3, [pc, #168]	@ (80007fc <SystemClock_Config+0xfc>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800075c:	bf00      	nop
 800075e:	4b27      	ldr	r3, [pc, #156]	@ (80007fc <SystemClock_Config+0xfc>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000766:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800076a:	d1f8      	bne.n	800075e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800076c:	2303      	movs	r3, #3
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000770:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000776:	2301      	movs	r3, #1
 8000778:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077a:	2340      	movs	r3, #64	@ 0x40
 800077c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077e:	2302      	movs	r3, #2
 8000780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000782:	2302      	movs	r3, #2
 8000784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000786:	2301      	movs	r3, #1
 8000788:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800078a:	2318      	movs	r3, #24
 800078c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800078e:	2302      	movs	r3, #2
 8000790:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000792:	2304      	movs	r3, #4
 8000794:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000796:	2302      	movs	r3, #2
 8000798:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800079a:	230c      	movs	r3, #12
 800079c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800079e:	2300      	movs	r3, #0
 80007a0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 feb2 	bl	8002514 <HAL_RCC_OscConfig>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <SystemClock_Config+0xba>
  {
    Error_Handler();
 80007b6:	f000 f9c9 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ba:	233f      	movs	r3, #63	@ 0x3f
 80007bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2101      	movs	r1, #1
 80007de:	4618      	mov	r0, r3
 80007e0:	f002 faf2 	bl	8002dc8 <HAL_RCC_ClockConfig>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0xee>
  {
    Error_Handler();
 80007ea:	f000 f9af 	bl	8000b4c <Error_Handler>
  }
}
 80007ee:	bf00      	nop
 80007f0:	3770      	adds	r7, #112	@ 0x70
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	58000400 	.word	0x58000400
 80007fc:	58024800 	.word	0x58024800

08000800 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000804:	4b1e      	ldr	r3, [pc, #120]	@ (8000880 <MX_ETH_Init+0x80>)
 8000806:	4a1f      	ldr	r2, [pc, #124]	@ (8000884 <MX_ETH_Init+0x84>)
 8000808:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800080a:	4b1f      	ldr	r3, [pc, #124]	@ (8000888 <MX_ETH_Init+0x88>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000810:	4b1d      	ldr	r3, [pc, #116]	@ (8000888 <MX_ETH_Init+0x88>)
 8000812:	2280      	movs	r2, #128	@ 0x80
 8000814:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000816:	4b1c      	ldr	r3, [pc, #112]	@ (8000888 <MX_ETH_Init+0x88>)
 8000818:	22e1      	movs	r2, #225	@ 0xe1
 800081a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800081c:	4b1a      	ldr	r3, [pc, #104]	@ (8000888 <MX_ETH_Init+0x88>)
 800081e:	2200      	movs	r2, #0
 8000820:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <MX_ETH_Init+0x88>)
 8000824:	2200      	movs	r2, #0
 8000826:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000828:	4b17      	ldr	r3, [pc, #92]	@ (8000888 <MX_ETH_Init+0x88>)
 800082a:	2200      	movs	r2, #0
 800082c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800082e:	4b14      	ldr	r3, [pc, #80]	@ (8000880 <MX_ETH_Init+0x80>)
 8000830:	4a15      	ldr	r2, [pc, #84]	@ (8000888 <MX_ETH_Init+0x88>)
 8000832:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <MX_ETH_Init+0x80>)
 8000836:	2201      	movs	r2, #1
 8000838:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800083a:	4b11      	ldr	r3, [pc, #68]	@ (8000880 <MX_ETH_Init+0x80>)
 800083c:	4a13      	ldr	r2, [pc, #76]	@ (800088c <MX_ETH_Init+0x8c>)
 800083e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000840:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <MX_ETH_Init+0x80>)
 8000842:	4a13      	ldr	r2, [pc, #76]	@ (8000890 <MX_ETH_Init+0x90>)
 8000844:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000846:	4b0e      	ldr	r3, [pc, #56]	@ (8000880 <MX_ETH_Init+0x80>)
 8000848:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800084c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800084e:	480c      	ldr	r0, [pc, #48]	@ (8000880 <MX_ETH_Init+0x80>)
 8000850:	f000 fee8 	bl	8001624 <HAL_ETH_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800085a:	f000 f977 	bl	8000b4c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800085e:	2238      	movs	r2, #56	@ 0x38
 8000860:	2100      	movs	r1, #0
 8000862:	480c      	ldr	r0, [pc, #48]	@ (8000894 <MX_ETH_Init+0x94>)
 8000864:	f006 fb7f 	bl	8006f66 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000868:	4b0a      	ldr	r3, [pc, #40]	@ (8000894 <MX_ETH_Init+0x94>)
 800086a:	2221      	movs	r2, #33	@ 0x21
 800086c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <MX_ETH_Init+0x94>)
 8000870:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000874:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000876:	4b07      	ldr	r3, [pc, #28]	@ (8000894 <MX_ETH_Init+0x94>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	bd80      	pop	{r7, pc}
 8000880:	24000180 	.word	0x24000180
 8000884:	40028000 	.word	0x40028000
 8000888:	240007a8 	.word	0x240007a8
 800088c:	240000cc 	.word	0x240000cc
 8000890:	2400006c 	.word	0x2400006c
 8000894:	24000148 	.word	0x24000148

08000898 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 800089e:	4a23      	ldr	r2, [pc, #140]	@ (800092c <MX_USART3_UART_Init+0x94>)
 80008a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008a2:	4b21      	ldr	r3, [pc, #132]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008be:	220c      	movs	r2, #12
 80008c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008c2:	4b19      	ldr	r3, [pc, #100]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c8:	4b17      	ldr	r3, [pc, #92]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ce:	4b16      	ldr	r3, [pc, #88]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d4:	4b14      	ldr	r3, [pc, #80]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008da:	4b13      	ldr	r3, [pc, #76]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008dc:	2200      	movs	r2, #0
 80008de:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008e0:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008e2:	f004 fc29 	bl	8005138 <HAL_UART_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80008ec:	f000 f92e 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008f0:	2100      	movs	r1, #0
 80008f2:	480d      	ldr	r0, [pc, #52]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 80008f4:	f005 fd87 	bl	8006406 <HAL_UARTEx_SetTxFifoThreshold>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80008fe:	f000 f925 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000902:	2100      	movs	r1, #0
 8000904:	4808      	ldr	r0, [pc, #32]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 8000906:	f005 fdbc 	bl	8006482 <HAL_UARTEx_SetRxFifoThreshold>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d001      	beq.n	8000914 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000910:	f000 f91c 	bl	8000b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000914:	4804      	ldr	r0, [pc, #16]	@ (8000928 <MX_USART3_UART_Init+0x90>)
 8000916:	f005 fd3d 	bl	8006394 <HAL_UARTEx_DisableFifoMode>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000920:	f000 f914 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}
 8000928:	24000230 	.word	0x24000230
 800092c:	40004800 	.word	0x40004800

08000930 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000934:	4b15      	ldr	r3, [pc, #84]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000938:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800093a:	4b14      	ldr	r3, [pc, #80]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800093c:	2209      	movs	r2, #9
 800093e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000940:	4b12      	ldr	r3, [pc, #72]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000942:	2202      	movs	r2, #2
 8000944:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000946:	4b11      	ldr	r3, [pc, #68]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000948:	2200      	movs	r2, #0
 800094a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800094c:	4b0f      	ldr	r3, [pc, #60]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094e:	2202      	movs	r2, #2
 8000950:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000952:	4b0e      	ldr	r3, [pc, #56]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000954:	2201      	movs	r2, #1
 8000956:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000958:	4b0c      	ldr	r3, [pc, #48]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095a:	2200      	movs	r2, #0
 800095c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800095e:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000964:	4b09      	ldr	r3, [pc, #36]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000966:	2201      	movs	r2, #1
 8000968:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800096a:	4b08      	ldr	r3, [pc, #32]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096c:	2201      	movs	r2, #1
 800096e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000976:	4805      	ldr	r0, [pc, #20]	@ (800098c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000978:	f001 fc51 	bl	800221e <HAL_PCD_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000982:	f000 f8e3 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	240002c4 	.word	0x240002c4
 8000990:	40080000 	.word	0x40080000

08000994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08c      	sub	sp, #48	@ 0x30
 8000998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800099a:	f107 031c 	add.w	r3, r7, #28
 800099e:	2200      	movs	r2, #0
 80009a0:	601a      	str	r2, [r3, #0]
 80009a2:	605a      	str	r2, [r3, #4]
 80009a4:	609a      	str	r2, [r3, #8]
 80009a6:	60da      	str	r2, [r3, #12]
 80009a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009aa:	4b62      	ldr	r3, [pc, #392]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009b0:	4a60      	ldr	r2, [pc, #384]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ba:	4b5e      	ldr	r3, [pc, #376]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009c0:	f003 0304 	and.w	r3, r3, #4
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009c8:	4b5a      	ldr	r3, [pc, #360]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ce:	4a59      	ldr	r2, [pc, #356]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009d8:	4b56      	ldr	r3, [pc, #344]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b53      	ldr	r3, [pc, #332]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a51      	ldr	r2, [pc, #324]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b4b      	ldr	r3, [pc, #300]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b47      	ldr	r3, [pc, #284]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b44      	ldr	r3, [pc, #272]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a42      	ldr	r2, [pc, #264]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a40:	4b3c      	ldr	r3, [pc, #240]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	4a3b      	ldr	r2, [pc, #236]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a50:	4b38      	ldr	r3, [pc, #224]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5e:	4b35      	ldr	r3, [pc, #212]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a33      	ldr	r2, [pc, #204]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b31      	ldr	r3, [pc, #196]	@ (8000b34 <MX_GPIO_Init+0x1a0>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a82:	482d      	ldr	r0, [pc, #180]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000a84:	f001 fbb2 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a8e:	482b      	ldr	r0, [pc, #172]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000a90:	f001 fbac 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	4829      	ldr	r0, [pc, #164]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000a9a:	f001 fba7 	bl	80021ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a9e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aa2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aac:	f107 031c 	add.w	r3, r7, #28
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4824      	ldr	r0, [pc, #144]	@ (8000b44 <MX_GPIO_Init+0x1b0>)
 8000ab4:	f001 f9ea 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000ab8:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000abc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aca:	f107 031c 	add.w	r3, r7, #28
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4819      	ldr	r0, [pc, #100]	@ (8000b38 <MX_GPIO_Init+0x1a4>)
 8000ad2:	f001 f9db 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000adc:	2301      	movs	r3, #1
 8000ade:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 031c 	add.w	r3, r7, #28
 8000aec:	4619      	mov	r1, r3
 8000aee:	4813      	ldr	r0, [pc, #76]	@ (8000b3c <MX_GPIO_Init+0x1a8>)
 8000af0:	f001 f9cc 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000af4:	2380      	movs	r3, #128	@ 0x80
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4619      	mov	r1, r3
 8000b08:	480f      	ldr	r0, [pc, #60]	@ (8000b48 <MX_GPIO_Init+0x1b4>)
 8000b0a:	f001 f9bf 	bl	8001e8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0e:	2302      	movs	r3, #2
 8000b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	4619      	mov	r1, r3
 8000b24:	4806      	ldr	r0, [pc, #24]	@ (8000b40 <MX_GPIO_Init+0x1ac>)
 8000b26:	f001 f9b1 	bl	8001e8c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3730      	adds	r7, #48	@ 0x30
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	58024400 	.word	0x58024400
 8000b38:	58020400 	.word	0x58020400
 8000b3c:	58020c00 	.word	0x58020c00
 8000b40:	58021000 	.word	0x58021000
 8000b44:	58020800 	.word	0x58020800
 8000b48:	58021800 	.word	0x58021800

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000b60:	4a07      	ldr	r2, [pc, #28]	@ (8000b80 <RetargetInit+0x28>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8000b66:	4b07      	ldr	r3, [pc, #28]	@ (8000b84 <RetargetInit+0x2c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	6898      	ldr	r0, [r3, #8]
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	2202      	movs	r2, #2
 8000b70:	2100      	movs	r1, #0
 8000b72:	f006 f901 	bl	8006d78 <setvbuf>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	240007b0 	.word	0x240007b0
 8000b84:	2400001c 	.word	0x2400001c

08000b88 <_isatty>:

int _isatty(int fd) {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	db04      	blt.n	8000ba0 <_isatty+0x18>
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b02      	cmp	r3, #2
 8000b9a:	dc01      	bgt.n	8000ba0 <_isatty+0x18>
    return 1;
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	e005      	b.n	8000bac <_isatty+0x24>

  errno = EBADF;
 8000ba0:	f006 fa30 	bl	8007004 <__errno>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2209      	movs	r2, #9
 8000ba8:	601a      	str	r2, [r3, #0]
  return 0;
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <_write>:

int _write(int fd, char* ptr, int len) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d002      	beq.n	8000bcc <_write+0x18>
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	2b02      	cmp	r3, #2
 8000bca:	d111      	bne.n	8000bf0 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000bcc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c08 <_write+0x54>)
 8000bce:	6818      	ldr	r0, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	b29a      	uxth	r2, r3
 8000bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd8:	68b9      	ldr	r1, [r7, #8]
 8000bda:	f004 fafd 	bl	80051d8 <HAL_UART_Transmit>
 8000bde:	4603      	mov	r3, r0
 8000be0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <_write+0x38>
      return len;
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	e008      	b.n	8000bfe <_write+0x4a>
    else
      return EIO;
 8000bec:	2305      	movs	r3, #5
 8000bee:	e006      	b.n	8000bfe <_write+0x4a>
  }
  errno = EBADF;
 8000bf0:	f006 fa08 	bl	8007004 <__errno>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2209      	movs	r2, #9
 8000bf8:	601a      	str	r2, [r3, #0]
  return -1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	240007b0 	.word	0x240007b0

08000c0c <_close>:

int _close(int fd) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db04      	blt.n	8000c24 <_close+0x18>
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	dc01      	bgt.n	8000c24 <_close+0x18>
    return 0;
 8000c20:	2300      	movs	r3, #0
 8000c22:	e006      	b.n	8000c32 <_close+0x26>

  errno = EBADF;
 8000c24:	f006 f9ee 	bl	8007004 <__errno>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2209      	movs	r2, #9
 8000c2c:	601a      	str	r2, [r3, #0]
  return -1;
 8000c2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	3708      	adds	r7, #8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}

08000c3a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b084      	sub	sp, #16
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	60f8      	str	r0, [r7, #12]
 8000c42:	60b9      	str	r1, [r7, #8]
 8000c44:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000c46:	f006 f9dd 	bl	8007004 <__errno>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2209      	movs	r2, #9
 8000c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_read>:

int _read(int fd, char* ptr, int len) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b086      	sub	sp, #24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d110      	bne.n	8000c90 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca8 <_read+0x4c>)
 8000c70:	6818      	ldr	r0, [r3, #0]
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	2201      	movs	r2, #1
 8000c78:	68b9      	ldr	r1, [r7, #8]
 8000c7a:	f004 fb3b 	bl	80052f4 <HAL_UART_Receive>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000c82:	7dfb      	ldrb	r3, [r7, #23]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <_read+0x30>
      return 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e008      	b.n	8000c9e <_read+0x42>
    else
      return EIO;
 8000c8c:	2305      	movs	r3, #5
 8000c8e:	e006      	b.n	8000c9e <_read+0x42>
  }
  errno = EBADF;
 8000c90:	f006 f9b8 	bl	8007004 <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2209      	movs	r2, #9
 8000c98:	601a      	str	r2, [r3, #0]
  return -1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	240007b0 	.word	0x240007b0

08000cac <_fstat>:

int _fstat(int fd, struct stat* st) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	db08      	blt.n	8000cce <_fstat+0x22>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2b02      	cmp	r3, #2
 8000cc0:	dc05      	bgt.n	8000cce <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc8:	605a      	str	r2, [r3, #4]
    return 0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e005      	b.n	8000cda <_fstat+0x2e>
  }

  errno = EBADF;
 8000cce:	f006 f999 	bl	8007004 <__errno>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2209      	movs	r2, #9
 8000cd6:	601a      	str	r2, [r3, #0]
  return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	4b0a      	ldr	r3, [pc, #40]	@ (8000d14 <HAL_MspInit+0x30>)
 8000cec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cf0:	4a08      	ldr	r2, [pc, #32]	@ (8000d14 <HAL_MspInit+0x30>)
 8000cf2:	f043 0302 	orr.w	r3, r3, #2
 8000cf6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cfa:	4b06      	ldr	r3, [pc, #24]	@ (8000d14 <HAL_MspInit+0x30>)
 8000cfc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000d00:	f003 0302 	and.w	r3, r3, #2
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	58024400 	.word	0x58024400

08000d18 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b08e      	sub	sp, #56	@ 0x38
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	4a59      	ldr	r2, [pc, #356]	@ (8000e9c <HAL_ETH_MspInit+0x184>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	f040 80ab 	bne.w	8000e92 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000d3c:	4b58      	ldr	r3, [pc, #352]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d42:	4a57      	ldr	r2, [pc, #348]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000d48:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d4c:	4b54      	ldr	r3, [pc, #336]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000d5a:	4b51      	ldr	r3, [pc, #324]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d5c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d60:	4a4f      	ldr	r2, [pc, #316]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d66:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d6a:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d74:	61fb      	str	r3, [r7, #28]
 8000d76:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000d78:	4b49      	ldr	r3, [pc, #292]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d7a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d7e:	4a48      	ldr	r2, [pc, #288]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d88:	4b45      	ldr	r3, [pc, #276]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	4b42      	ldr	r3, [pc, #264]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9c:	4a40      	ldr	r2, [pc, #256]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000d9e:	f043 0304 	orr.w	r3, r3, #4
 8000da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000da6:	4b3e      	ldr	r3, [pc, #248]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dac:	f003 0304 	and.w	r3, r3, #4
 8000db0:	617b      	str	r3, [r7, #20]
 8000db2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db4:	4b3a      	ldr	r3, [pc, #232]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000db6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dba:	4a39      	ldr	r2, [pc, #228]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	613b      	str	r3, [r7, #16]
 8000dd0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd2:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd8:	4a31      	ldr	r2, [pc, #196]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000dda:	f043 0302 	orr.w	r3, r3, #2
 8000dde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de2:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de8:	f003 0302 	and.w	r3, r3, #2
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000df0:	4b2b      	ldr	r3, [pc, #172]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df6:	4a2a      	ldr	r2, [pc, #168]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000df8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e00:	4b27      	ldr	r3, [pc, #156]	@ (8000ea0 <HAL_ETH_MspInit+0x188>)
 8000e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000e0e:	2332      	movs	r3, #50	@ 0x32
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e12:	2302      	movs	r3, #2
 8000e14:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	230b      	movs	r3, #11
 8000e20:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e26:	4619      	mov	r1, r3
 8000e28:	481e      	ldr	r0, [pc, #120]	@ (8000ea4 <HAL_ETH_MspInit+0x18c>)
 8000e2a:	f001 f82f 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000e2e:	2386      	movs	r3, #134	@ 0x86
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3e:	230b      	movs	r3, #11
 8000e40:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e46:	4619      	mov	r1, r3
 8000e48:	4817      	ldr	r0, [pc, #92]	@ (8000ea8 <HAL_ETH_MspInit+0x190>)
 8000e4a:	f001 f81f 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e60:	230b      	movs	r3, #11
 8000e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4810      	ldr	r0, [pc, #64]	@ (8000eac <HAL_ETH_MspInit+0x194>)
 8000e6c:	f001 f80e 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e70:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e82:	230b      	movs	r3, #11
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4808      	ldr	r0, [pc, #32]	@ (8000eb0 <HAL_ETH_MspInit+0x198>)
 8000e8e:	f000 fffd 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3738      	adds	r7, #56	@ 0x38
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40028000 	.word	0x40028000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020800 	.word	0x58020800
 8000ea8:	58020000 	.word	0x58020000
 8000eac:	58020400 	.word	0x58020400
 8000eb0:	58021800 	.word	0x58021800

08000eb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ba      	sub	sp, #232	@ 0xe8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	22c0      	movs	r2, #192	@ 0xc0
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f006 f846 	bl	8006f66 <memset>
  if(huart->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a27      	ldr	r2, [pc, #156]	@ (8000f7c <HAL_UART_MspInit+0xc8>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d146      	bne.n	8000f72 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	f04f 0202 	mov.w	r2, #2
 8000ee8:	f04f 0300 	mov.w	r3, #0
 8000eec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef6:	f107 0310 	add.w	r3, r7, #16
 8000efa:	4618      	mov	r0, r3
 8000efc:	f002 faf0 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f06:	f7ff fe21 	bl	8000b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f10:	4a1b      	ldr	r2, [pc, #108]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f16:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f1c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f24:	60fb      	str	r3, [r7, #12]
 8000f26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2e:	4a14      	ldr	r2, [pc, #80]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f38:	4b11      	ldr	r3, [pc, #68]	@ (8000f80 <HAL_UART_MspInit+0xcc>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	60bb      	str	r3, [r7, #8]
 8000f44:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000f46:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f60:	2307      	movs	r3, #7
 8000f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f66:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4805      	ldr	r0, [pc, #20]	@ (8000f84 <HAL_UART_MspInit+0xd0>)
 8000f6e:	f000 ff8d 	bl	8001e8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000f72:	bf00      	nop
 8000f74:	37e8      	adds	r7, #232	@ 0xe8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40004800 	.word	0x40004800
 8000f80:	58024400 	.word	0x58024400
 8000f84:	58020c00 	.word	0x58020c00

08000f88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	22c0      	movs	r2, #192	@ 0xc0
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f005 ffdc 	bl	8006f66 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a30      	ldr	r2, [pc, #192]	@ (8001074 <HAL_PCD_MspInit+0xec>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d159      	bne.n	800106c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000fb8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000fc4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fcc:	f107 0310 	add.w	r3, r7, #16
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f002 fa85 	bl	80034e0 <HAL_RCCEx_PeriphCLKConfig>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000fdc:	f7ff fdb6 	bl	8000b4c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000fe0:	f001 fa88 	bl	80024f4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	4b24      	ldr	r3, [pc, #144]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a23      	ldr	r2, [pc, #140]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b20      	ldr	r3, [pc, #128]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001002:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001006:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	2302      	movs	r3, #2
 800100c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	2300      	movs	r3, #0
 8001018:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800101c:	230a      	movs	r3, #10
 800101e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001026:	4619      	mov	r1, r3
 8001028:	4814      	ldr	r0, [pc, #80]	@ (800107c <HAL_PCD_MspInit+0xf4>)
 800102a:	f000 ff2f 	bl	8001e8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800102e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001042:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	@ (800107c <HAL_PCD_MspInit+0xf4>)
 800104a:	f000 ff1f 	bl	8001e8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800104e:	4b0a      	ldr	r3, [pc, #40]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8001050:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8001056:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800105a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800105e:	4b06      	ldr	r3, [pc, #24]	@ (8001078 <HAL_PCD_MspInit+0xf0>)
 8001060:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001064:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800106c:	bf00      	nop
 800106e:	37e8      	adds	r7, #232	@ 0xe8
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40080000 	.word	0x40080000
 8001078:	58024400 	.word	0x58024400
 800107c:	58020000 	.word	0x58020000

08001080 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001084:	bf00      	nop
 8001086:	e7fd      	b.n	8001084 <NMI_Handler+0x4>

08001088 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800108c:	bf00      	nop
 800108e:	e7fd      	b.n	800108c <HardFault_Handler+0x4>

08001090 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <MemManage_Handler+0x4>

08001098 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <BusFault_Handler+0x4>

080010a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <UsageFault_Handler+0x4>

080010a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d6:	f000 f95d 	bl	8001394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	@ (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	@ (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	@ (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f005 ff78 	bl	8007004 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	@ (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	@ (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	24080000 	.word	0x24080000
 8001140:	00000400 	.word	0x00000400
 8001144:	240007b4 	.word	0x240007b4
 8001148:	24000908 	.word	0x24000908

0800114c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001150:	4b37      	ldr	r3, [pc, #220]	@ (8001230 <SystemInit+0xe4>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001156:	4a36      	ldr	r2, [pc, #216]	@ (8001230 <SystemInit+0xe4>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001160:	4b34      	ldr	r3, [pc, #208]	@ (8001234 <SystemInit+0xe8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 030f 	and.w	r3, r3, #15
 8001168:	2b06      	cmp	r3, #6
 800116a:	d807      	bhi.n	800117c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800116c:	4b31      	ldr	r3, [pc, #196]	@ (8001234 <SystemInit+0xe8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f023 030f 	bic.w	r3, r3, #15
 8001174:	4a2f      	ldr	r2, [pc, #188]	@ (8001234 <SystemInit+0xe8>)
 8001176:	f043 0307 	orr.w	r3, r3, #7
 800117a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800117c:	4b2e      	ldr	r3, [pc, #184]	@ (8001238 <SystemInit+0xec>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a2d      	ldr	r2, [pc, #180]	@ (8001238 <SystemInit+0xec>)
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001188:	4b2b      	ldr	r3, [pc, #172]	@ (8001238 <SystemInit+0xec>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800118e:	4b2a      	ldr	r3, [pc, #168]	@ (8001238 <SystemInit+0xec>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	4929      	ldr	r1, [pc, #164]	@ (8001238 <SystemInit+0xec>)
 8001194:	4b29      	ldr	r3, [pc, #164]	@ (800123c <SystemInit+0xf0>)
 8001196:	4013      	ands	r3, r2
 8001198:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800119a:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <SystemInit+0xe8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0308 	and.w	r3, r3, #8
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d007      	beq.n	80011b6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011a6:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <SystemInit+0xe8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f023 030f 	bic.w	r3, r3, #15
 80011ae:	4a21      	ldr	r2, [pc, #132]	@ (8001234 <SystemInit+0xe8>)
 80011b0:	f043 0307 	orr.w	r3, r3, #7
 80011b4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <SystemInit+0xec>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001238 <SystemInit+0xec>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001238 <SystemInit+0xec>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001238 <SystemInit+0xec>)
 80011ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001240 <SystemInit+0xf4>)
 80011cc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001238 <SystemInit+0xec>)
 80011d0:	4a1c      	ldr	r2, [pc, #112]	@ (8001244 <SystemInit+0xf8>)
 80011d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011d4:	4b18      	ldr	r3, [pc, #96]	@ (8001238 <SystemInit+0xec>)
 80011d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001248 <SystemInit+0xfc>)
 80011d8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011da:	4b17      	ldr	r3, [pc, #92]	@ (8001238 <SystemInit+0xec>)
 80011dc:	2200      	movs	r2, #0
 80011de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011e0:	4b15      	ldr	r3, [pc, #84]	@ (8001238 <SystemInit+0xec>)
 80011e2:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <SystemInit+0xfc>)
 80011e4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011e6:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <SystemInit+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <SystemInit+0xec>)
 80011ee:	4a16      	ldr	r2, [pc, #88]	@ (8001248 <SystemInit+0xfc>)
 80011f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80011f2:	4b11      	ldr	r3, [pc, #68]	@ (8001238 <SystemInit+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001238 <SystemInit+0xec>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001238 <SystemInit+0xec>)
 80011fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001202:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001204:	4b0c      	ldr	r3, [pc, #48]	@ (8001238 <SystemInit+0xec>)
 8001206:	2200      	movs	r2, #0
 8001208:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800120a:	4b10      	ldr	r3, [pc, #64]	@ (800124c <SystemInit+0x100>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	4b10      	ldr	r3, [pc, #64]	@ (8001250 <SystemInit+0x104>)
 8001210:	4013      	ands	r3, r2
 8001212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001216:	d202      	bcs.n	800121e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001218:	4b0e      	ldr	r3, [pc, #56]	@ (8001254 <SystemInit+0x108>)
 800121a:	2201      	movs	r2, #1
 800121c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800121e:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <SystemInit+0x10c>)
 8001220:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001224:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001226:	bf00      	nop
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000ed00 	.word	0xe000ed00
 8001234:	52002000 	.word	0x52002000
 8001238:	58024400 	.word	0x58024400
 800123c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001240:	02020200 	.word	0x02020200
 8001244:	01ff0000 	.word	0x01ff0000
 8001248:	01010280 	.word	0x01010280
 800124c:	5c001000 	.word	0x5c001000
 8001250:	ffff0000 	.word	0xffff0000
 8001254:	51008108 	.word	0x51008108
 8001258:	52004000 	.word	0x52004000

0800125c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800125c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001294 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001260:	f7ff ff74 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	@ (8001298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	@ (800129c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	@ (80012a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f005 fec1 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128e:	f7ff fa0d 	bl	80006ac <main>
  bx  lr
 8001292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001294:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001298:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800129c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 80012a0:	080088cc 	.word	0x080088cc
  ldr r2, =_sbss
 80012a4:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 80012a8:	24000908 	.word	0x24000908

080012ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC3_IRQHandler>
	...

080012b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b6:	2003      	movs	r0, #3
 80012b8:	f000 f982 	bl	80015c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012bc:	f001 ff3a 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80012c0:	4602      	mov	r2, r0
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_Init+0x68>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	0a1b      	lsrs	r3, r3, #8
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4913      	ldr	r1, [pc, #76]	@ (800131c <HAL_Init+0x6c>)
 80012ce:	5ccb      	ldrb	r3, [r1, r3]
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa22 f303 	lsr.w	r3, r2, r3
 80012d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_Init+0x68>)
 80012dc:	699b      	ldr	r3, [r3, #24]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	4a0e      	ldr	r2, [pc, #56]	@ (800131c <HAL_Init+0x6c>)
 80012e4:	5cd3      	ldrb	r3, [r2, r3]
 80012e6:	f003 031f 	and.w	r3, r3, #31
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	fa22 f303 	lsr.w	r3, r2, r3
 80012f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001320 <HAL_Init+0x70>)
 80012f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001324 <HAL_Init+0x74>)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012fa:	2000      	movs	r0, #0
 80012fc:	f000 f814 	bl	8001328 <HAL_InitTick>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e002      	b.n	8001310 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fceb 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3708      	adds	r7, #8
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	58024400 	.word	0x58024400
 800131c:	08008734 	.word	0x08008734
 8001320:	24000004 	.word	0x24000004
 8001324:	24000000 	.word	0x24000000

08001328 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001330:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_InitTick+0x60>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e021      	b.n	8001380 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800133c:	4b13      	ldr	r3, [pc, #76]	@ (800138c <HAL_InitTick+0x64>)
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_InitTick+0x60>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4619      	mov	r1, r3
 8001346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134a:	fbb3 f3f1 	udiv	r3, r3, r1
 800134e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f000 f959 	bl	800160a <HAL_SYSTICK_Config>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e00e      	b.n	8001380 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2b0f      	cmp	r3, #15
 8001366:	d80a      	bhi.n	800137e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001368:	2200      	movs	r2, #0
 800136a:	6879      	ldr	r1, [r7, #4]
 800136c:	f04f 30ff 	mov.w	r0, #4294967295
 8001370:	f000 f931 	bl	80015d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001374:	4a06      	ldr	r2, [pc, #24]	@ (8001390 <HAL_InitTick+0x68>)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	e000      	b.n	8001380 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2400000c 	.word	0x2400000c
 800138c:	24000000 	.word	0x24000000
 8001390:	24000008 	.word	0x24000008

08001394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001398:	4b06      	ldr	r3, [pc, #24]	@ (80013b4 <HAL_IncTick+0x20>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	4a04      	ldr	r2, [pc, #16]	@ (80013b8 <HAL_IncTick+0x24>)
 80013a6:	6013      	str	r3, [r2, #0]
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	2400000c 	.word	0x2400000c
 80013b8:	240007b8 	.word	0x240007b8

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b03      	ldr	r3, [pc, #12]	@ (80013d0 <HAL_GetTick+0x14>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop
 80013d0:	240007b8 	.word	0x240007b8

080013d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff ffee 	bl	80013bc <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013ec:	d005      	beq.n	80013fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001418 <HAL_Delay+0x44>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4413      	add	r3, r2
 80013f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013fa:	bf00      	nop
 80013fc:	f7ff ffde 	bl	80013bc <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	429a      	cmp	r2, r3
 800140a:	d8f7      	bhi.n	80013fc <HAL_Delay+0x28>
  {
  }
}
 800140c:	bf00      	nop
 800140e:	bf00      	nop
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	2400000c 	.word	0x2400000c

0800141c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001420:	4b03      	ldr	r3, [pc, #12]	@ (8001430 <HAL_GetREVID+0x14>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	0c1b      	lsrs	r3, r3, #16
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr
 8001430:	5c001000 	.word	0x5c001000

08001434 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001444:	4904      	ldr	r1, [pc, #16]	@ (8001458 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4313      	orrs	r3, r2
 800144a:	604b      	str	r3, [r1, #4]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58000400 	.word	0x58000400

0800145c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800146c:	4b0b      	ldr	r3, [pc, #44]	@ (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001472:	68ba      	ldr	r2, [r7, #8]
 8001474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001478:	4013      	ands	r3, r2
 800147a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001484:	4b06      	ldr	r3, [pc, #24]	@ (80014a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001486:	4313      	orrs	r3, r2
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	@ (800149c <__NVIC_SetPriorityGrouping+0x40>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00
 80014a0:	05fa0000 	.word	0x05fa0000

080014a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a8:	4b04      	ldr	r3, [pc, #16]	@ (80014bc <__NVIC_GetPriorityGrouping+0x18>)
 80014aa:	68db      	ldr	r3, [r3, #12]
 80014ac:	0a1b      	lsrs	r3, r3, #8
 80014ae:	f003 0307 	and.w	r3, r3, #7
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	4603      	mov	r3, r0
 80014c8:	6039      	str	r1, [r7, #0]
 80014ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	db0a      	blt.n	80014ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	490c      	ldr	r1, [pc, #48]	@ (800150c <__NVIC_SetPriority+0x4c>)
 80014da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014de:	0112      	lsls	r2, r2, #4
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	440b      	add	r3, r1
 80014e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e8:	e00a      	b.n	8001500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4908      	ldr	r1, [pc, #32]	@ (8001510 <__NVIC_SetPriority+0x50>)
 80014f0:	88fb      	ldrh	r3, [r7, #6]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	3b04      	subs	r3, #4
 80014f8:	0112      	lsls	r2, r2, #4
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	440b      	add	r3, r1
 80014fe:	761a      	strb	r2, [r3, #24]
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000e100 	.word	0xe000e100
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	@ 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f1c3 0307 	rsb	r3, r3, #7
 800152e:	2b04      	cmp	r3, #4
 8001530:	bf28      	it	cs
 8001532:	2304      	movcs	r3, #4
 8001534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3304      	adds	r3, #4
 800153a:	2b06      	cmp	r3, #6
 800153c:	d902      	bls.n	8001544 <NVIC_EncodePriority+0x30>
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	3b03      	subs	r3, #3
 8001542:	e000      	b.n	8001546 <NVIC_EncodePriority+0x32>
 8001544:	2300      	movs	r3, #0
 8001546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001548:	f04f 32ff 	mov.w	r2, #4294967295
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43da      	mvns	r2, r3
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	401a      	ands	r2, r3
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800155c:	f04f 31ff 	mov.w	r1, #4294967295
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	fa01 f303 	lsl.w	r3, r1, r3
 8001566:	43d9      	mvns	r1, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	4313      	orrs	r3, r2
         );
}
 800156e:	4618      	mov	r0, r3
 8001570:	3724      	adds	r7, #36	@ 0x24
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
	...

0800157c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b082      	sub	sp, #8
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3b01      	subs	r3, #1
 8001588:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800158c:	d301      	bcc.n	8001592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158e:	2301      	movs	r3, #1
 8001590:	e00f      	b.n	80015b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001592:	4a0a      	ldr	r2, [pc, #40]	@ (80015bc <SysTick_Config+0x40>)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3b01      	subs	r3, #1
 8001598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159a:	210f      	movs	r1, #15
 800159c:	f04f 30ff 	mov.w	r0, #4294967295
 80015a0:	f7ff ff8e 	bl	80014c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a4:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SysTick_Config+0x40>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015aa:	4b04      	ldr	r3, [pc, #16]	@ (80015bc <SysTick_Config+0x40>)
 80015ac:	2207      	movs	r2, #7
 80015ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f7ff ff47 	bl	800145c <__NVIC_SetPriorityGrouping>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	4603      	mov	r3, r0
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
 80015e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff5e 	bl	80014a4 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff90 	bl	8001514 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5f 	bl	80014c0 <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffb2 	bl	800157c <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e0e3      	b.n	80017fe <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800163c:	2b00      	cmp	r3, #0
 800163e:	d106      	bne.n	800164e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2223      	movs	r2, #35	@ 0x23
 8001644:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f7ff fb65 	bl	8000d18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164e:	4b6e      	ldr	r3, [pc, #440]	@ (8001808 <HAL_ETH_Init+0x1e4>)
 8001650:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001654:	4a6c      	ldr	r2, [pc, #432]	@ (8001808 <HAL_ETH_Init+0x1e4>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800165e:	4b6a      	ldr	r3, [pc, #424]	@ (8001808 <HAL_ETH_Init+0x1e4>)
 8001660:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	7a1b      	ldrb	r3, [r3, #8]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d103      	bne.n	800167c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fedd 	bl	8001434 <HAL_SYSCFG_ETHInterfaceSelect>
 800167a:	e003      	b.n	8001684 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800167c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001680:	f7ff fed8 	bl	8001434 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001684:	4b61      	ldr	r3, [pc, #388]	@ (800180c <HAL_ETH_Init+0x1e8>)
 8001686:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800169e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016a0:	f7ff fe8c 	bl	80013bc <HAL_GetTick>
 80016a4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016a6:	e011      	b.n	80016cc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016a8:	f7ff fe88 	bl	80013bc <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80016b6:	d909      	bls.n	80016cc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2204      	movs	r2, #4
 80016bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	22e0      	movs	r2, #224	@ 0xe0
 80016c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e098      	b.n	80017fe <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1e4      	bne.n	80016a8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f89e 	bl	8001820 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80016e4:	f001 fea0 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a49      	ldr	r2, [pc, #292]	@ (8001810 <HAL_ETH_Init+0x1ec>)
 80016ec:	fba2 2303 	umull	r2, r3, r2, r3
 80016f0:	0c9a      	lsrs	r2, r3, #18
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	3a01      	subs	r2, #1
 80016f8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 fa81 	bl	8001c04 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800170a:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800170e:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800171a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800171e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	695b      	ldr	r3, [r3, #20]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b00      	cmp	r3, #0
 800172c:	d009      	beq.n	8001742 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2201      	movs	r2, #1
 8001732:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	22e0      	movs	r2, #224	@ 0xe0
 800173a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e05d      	b.n	80017fe <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800174a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800174e:	4b31      	ldr	r3, [pc, #196]	@ (8001814 <HAL_ETH_Init+0x1f0>)
 8001750:	4013      	ands	r3, r2
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6952      	ldr	r2, [r2, #20]
 8001756:	0051      	lsls	r1, r2, #1
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	430b      	orrs	r3, r1
 800175e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001762:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 fae9 	bl	8001d3e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 fb2f 	bl	8001dd0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	3305      	adds	r3, #5
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	021a      	lsls	r2, r3, #8
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	3304      	adds	r3, #4
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	4619      	mov	r1, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	430a      	orrs	r2, r1
 800178c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	3303      	adds	r3, #3
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	061a      	lsls	r2, r3, #24
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	3302      	adds	r3, #2
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	041b      	lsls	r3, r3, #16
 80017a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	3301      	adds	r3, #1
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017b0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017be:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017c0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b11      	ldr	r3, [pc, #68]	@ (8001818 <HAL_ETH_Init+0x1f4>)
 80017d2:	430b      	orrs	r3, r1
 80017d4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_ETH_Init+0x1f8>)
 80017e6:	430b      	orrs	r3, r1
 80017e8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2210      	movs	r2, #16
 80017f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	58024400 	.word	0x58024400
 800180c:	58000400 	.word	0x58000400
 8001810:	431bde83 	.word	0x431bde83
 8001814:	ffff8001 	.word	0xffff8001
 8001818:	0c020060 	.word	0x0c020060
 800181c:	0c20c000 	.word	0x0c20c000

08001820 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001830:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001838:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800183a:	f001 fdf5 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 800183e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	4a1a      	ldr	r2, [pc, #104]	@ (80018ac <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d804      	bhi.n	8001852 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e022      	b.n	8001898 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	4a16      	ldr	r2, [pc, #88]	@ (80018b0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d204      	bcs.n	8001864 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	e019      	b.n	8001898 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	4a13      	ldr	r2, [pc, #76]	@ (80018b4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d915      	bls.n	8001898 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4a12      	ldr	r2, [pc, #72]	@ (80018b8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d804      	bhi.n	800187e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e00c      	b.n	8001898 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	4a0e      	ldr	r2, [pc, #56]	@ (80018bc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d804      	bhi.n	8001890 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e003      	b.n	8001898 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001896:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	68fa      	ldr	r2, [r7, #12]
 800189e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	02160ebf 	.word	0x02160ebf
 80018b0:	03938700 	.word	0x03938700
 80018b4:	05f5e0ff 	.word	0x05f5e0ff
 80018b8:	08f0d17f 	.word	0x08f0d17f
 80018bc:	0ee6b27f 	.word	0x0ee6b27f

080018c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80018d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	791b      	ldrb	r3, [r3, #4]
 80018d8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80018da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	7b1b      	ldrb	r3, [r3, #12]
 80018e0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	7b5b      	ldrb	r3, [r3, #13]
 80018e8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	7b9b      	ldrb	r3, [r3, #14]
 80018f0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80018f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	7bdb      	ldrb	r3, [r3, #15]
 80018f8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80018fa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	7c12      	ldrb	r2, [r2, #16]
 8001900:	2a00      	cmp	r2, #0
 8001902:	d102      	bne.n	800190a <ETH_SetMACConfig+0x4a>
 8001904:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001908:	e000      	b.n	800190c <ETH_SetMACConfig+0x4c>
 800190a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800190c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	7c52      	ldrb	r2, [r2, #17]
 8001912:	2a00      	cmp	r2, #0
 8001914:	d102      	bne.n	800191c <ETH_SetMACConfig+0x5c>
 8001916:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800191a:	e000      	b.n	800191e <ETH_SetMACConfig+0x5e>
 800191c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	7c9b      	ldrb	r3, [r3, #18]
 8001924:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001926:	431a      	orrs	r2, r3
               macconf->Speed |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800192c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	7f1b      	ldrb	r3, [r3, #28]
 8001938:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800193a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	7f5b      	ldrb	r3, [r3, #29]
 8001940:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001942:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001944:	683a      	ldr	r2, [r7, #0]
 8001946:	7f92      	ldrb	r2, [r2, #30]
 8001948:	2a00      	cmp	r2, #0
 800194a:	d102      	bne.n	8001952 <ETH_SetMACConfig+0x92>
 800194c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001950:	e000      	b.n	8001954 <ETH_SetMACConfig+0x94>
 8001952:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001954:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	7fdb      	ldrb	r3, [r3, #31]
 800195a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800195c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001964:	2a00      	cmp	r2, #0
 8001966:	d102      	bne.n	800196e <ETH_SetMACConfig+0xae>
 8001968:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800196c:	e000      	b.n	8001970 <ETH_SetMACConfig+0xb0>
 800196e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001970:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001976:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800197e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001980:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001986:	4313      	orrs	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b56      	ldr	r3, [pc, #344]	@ (8001aec <ETH_SetMACConfig+0x22c>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	68f9      	ldr	r1, [r7, #12]
 800199a:	430b      	orrs	r3, r1
 800199c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019ac:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019b6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80019be:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80019c8:	2a00      	cmp	r2, #0
 80019ca:	d102      	bne.n	80019d2 <ETH_SetMACConfig+0x112>
 80019cc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80019d0:	e000      	b.n	80019d4 <ETH_SetMACConfig+0x114>
 80019d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019d4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019da:	4313      	orrs	r3, r2
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4b42      	ldr	r3, [pc, #264]	@ (8001af0 <ETH_SetMACConfig+0x230>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6812      	ldr	r2, [r2, #0]
 80019ec:	68f9      	ldr	r1, [r7, #12]
 80019ee:	430b      	orrs	r3, r1
 80019f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80019f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80019fe:	4313      	orrs	r3, r2
 8001a00:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	68da      	ldr	r2, [r3, #12]
 8001a08:	4b3a      	ldr	r3, [pc, #232]	@ (8001af4 <ETH_SetMACConfig+0x234>)
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	687a      	ldr	r2, [r7, #4]
 8001a0e:	6812      	ldr	r2, [r2, #0]
 8001a10:	68f9      	ldr	r1, [r7, #12]
 8001a12:	430b      	orrs	r3, r1
 8001a14:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a1c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a22:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a2a:	2a00      	cmp	r2, #0
 8001a2c:	d101      	bne.n	8001a32 <ETH_SetMACConfig+0x172>
 8001a2e:	2280      	movs	r2, #128	@ 0x80
 8001a30:	e000      	b.n	8001a34 <ETH_SetMACConfig+0x174>
 8001a32:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a34:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a46:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	68f9      	ldr	r1, [r7, #12]
 8001a52:	430b      	orrs	r3, r1
 8001a54:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001a5c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001a64:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a66:	4313      	orrs	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a72:	f023 0103 	bic.w	r1, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001a8a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001aa0:	683a      	ldr	r2, [r7, #0]
 8001aa2:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001aa6:	2a00      	cmp	r2, #0
 8001aa8:	d101      	bne.n	8001aae <ETH_SetMACConfig+0x1ee>
 8001aaa:	2240      	movs	r2, #64	@ 0x40
 8001aac:	e000      	b.n	8001ab0 <ETH_SetMACConfig+0x1f0>
 8001aae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ab0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001ab8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001ac2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001ad0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68fa      	ldr	r2, [r7, #12]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	00048083 	.word	0x00048083
 8001af0:	c0f88000 	.word	0xc0f88000
 8001af4:	fffffef0 	.word	0xfffffef0

08001af8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b38      	ldr	r3, [pc, #224]	@ (8001bf0 <ETH_SetDMAConfig+0xf8>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	6811      	ldr	r1, [r2, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	6812      	ldr	r2, [r2, #0]
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b1e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	791b      	ldrb	r3, [r3, #4]
 8001b24:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b2a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	7b1b      	ldrb	r3, [r3, #12]
 8001b30:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b32:	4313      	orrs	r3, r2
 8001b34:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	4b2c      	ldr	r3, [pc, #176]	@ (8001bf4 <ETH_SetDMAConfig+0xfc>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	6812      	ldr	r2, [r2, #0]
 8001b48:	68f9      	ldr	r1, [r7, #12]
 8001b4a:	430b      	orrs	r3, r1
 8001b4c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b50:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	7b5b      	ldrb	r3, [r3, #13]
 8001b56:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b68:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <ETH_SetDMAConfig+0x100>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	68f9      	ldr	r1, [r7, #12]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b7c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	7d1b      	ldrb	r3, [r3, #20]
 8001b88:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	7f5b      	ldrb	r3, [r3, #29]
 8001b90:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001ba2:	4b16      	ldr	r3, [pc, #88]	@ (8001bfc <ETH_SetDMAConfig+0x104>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	6812      	ldr	r2, [r2, #0]
 8001baa:	68f9      	ldr	r1, [r7, #12]
 8001bac:	430b      	orrs	r3, r1
 8001bae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bb2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	7f1b      	ldrb	r3, [r3, #28]
 8001bba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bcc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <ETH_SetDMAConfig+0x108>)
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6812      	ldr	r2, [r2, #0]
 8001bd8:	68f9      	ldr	r1, [r7, #12]
 8001bda:	430b      	orrs	r3, r1
 8001bdc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001be0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001be4:	bf00      	nop
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	ffff87fd 	.word	0xffff87fd
 8001bf4:	ffff2ffe 	.word	0xffff2ffe
 8001bf8:	fffec000 	.word	0xfffec000
 8001bfc:	ffc0efef 	.word	0xffc0efef
 8001c00:	7fc0ffff 	.word	0x7fc0ffff

08001c04 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b0a4      	sub	sp, #144	@ 0x90
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c12:	2300      	movs	r3, #0
 8001c14:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c22:	2301      	movs	r3, #1
 8001c24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c44:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001c5c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001c60:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001c96:	2301      	movs	r3, #1
 8001c98:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c9c:	2320      	movs	r3, #32
 8001c9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cae:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cb4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001cb8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001ce8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fde6 	bl	80018c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d00:	2300      	movs	r3, #0
 8001d02:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d0e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d12:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d14:	2300      	movs	r3, #0
 8001d16:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d1c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d24:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d2a:	f107 0308 	add.w	r3, r7, #8
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff fee1 	bl	8001af8 <ETH_SetDMAConfig>
}
 8001d36:	bf00      	nop
 8001d38:	3790      	adds	r7, #144	@ 0x90
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b085      	sub	sp, #20
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	e01d      	b.n	8001d88 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68d9      	ldr	r1, [r3, #12]
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	4613      	mov	r3, r2
 8001d54:	005b      	lsls	r3, r3, #1
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	440b      	add	r3, r1
 8001d5c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	2200      	movs	r2, #0
 8001d74:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	3206      	adds	r2, #6
 8001d7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b03      	cmp	r3, #3
 8001d8c:	d9de      	bls.n	8001d4c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2200      	movs	r2, #0
 8001d92:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2303      	movs	r3, #3
 8001da0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68da      	ldr	r2, [r3, #12]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dc0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	e023      	b.n	8001e26 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6919      	ldr	r1, [r3, #16]
 8001de2:	68fa      	ldr	r2, [r7, #12]
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001df6:	68bb      	ldr	r3, [r7, #8]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2200      	movs	r2, #0
 8001e12:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	3212      	adds	r2, #18
 8001e1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	3301      	adds	r3, #1
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2b03      	cmp	r3, #3
 8001e2a:	d9d8      	bls.n	8001dde <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e52:	461a      	mov	r2, r3
 8001e54:	2303      	movs	r3, #3
 8001e56:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691a      	ldr	r2, [r3, #16]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e66:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e7a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001e7e:	bf00      	nop
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
	...

08001e8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b089      	sub	sp, #36	@ 0x24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e9a:	4b89      	ldr	r3, [pc, #548]	@ (80020c0 <HAL_GPIO_Init+0x234>)
 8001e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e9e:	e194      	b.n	80021ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	2101      	movs	r1, #1
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 8186 	beq.w	80021c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d005      	beq.n	8001ed0 <HAL_GPIO_Init+0x44>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d130      	bne.n	8001f32 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	2203      	movs	r2, #3
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f06:	2201      	movs	r2, #1
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 0201 	and.w	r2, r3, #1
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	fa02 f303 	lsl.w	r3, r2, r3
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d017      	beq.n	8001f6e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	689a      	ldr	r2, [r3, #8]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f003 0303 	and.w	r3, r3, #3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d123      	bne.n	8001fc2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	220f      	movs	r2, #15
 8001f92:	fa02 f303 	lsl.w	r3, r2, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	69ba      	ldr	r2, [r7, #24]
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	691a      	ldr	r2, [r3, #16]
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f003 0307 	and.w	r3, r3, #7
 8001fa8:	009b      	lsls	r3, r3, #2
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	08da      	lsrs	r2, r3, #3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3208      	adds	r2, #8
 8001fbc:	69b9      	ldr	r1, [r7, #24]
 8001fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	2203      	movs	r2, #3
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0203 	and.w	r2, r3, #3
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	005b      	lsls	r3, r3, #1
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80e0 	beq.w	80021c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002004:	4b2f      	ldr	r3, [pc, #188]	@ (80020c4 <HAL_GPIO_Init+0x238>)
 8002006:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800200a:	4a2e      	ldr	r2, [pc, #184]	@ (80020c4 <HAL_GPIO_Init+0x238>)
 800200c:	f043 0302 	orr.w	r3, r3, #2
 8002010:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002014:	4b2b      	ldr	r3, [pc, #172]	@ (80020c4 <HAL_GPIO_Init+0x238>)
 8002016:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a29      	ldr	r2, [pc, #164]	@ (80020c8 <HAL_GPIO_Init+0x23c>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a20      	ldr	r2, [pc, #128]	@ (80020cc <HAL_GPIO_Init+0x240>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d052      	beq.n	80020f4 <HAL_GPIO_Init+0x268>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a1f      	ldr	r2, [pc, #124]	@ (80020d0 <HAL_GPIO_Init+0x244>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d031      	beq.n	80020ba <HAL_GPIO_Init+0x22e>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a1e      	ldr	r2, [pc, #120]	@ (80020d4 <HAL_GPIO_Init+0x248>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d02b      	beq.n	80020b6 <HAL_GPIO_Init+0x22a>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a1d      	ldr	r2, [pc, #116]	@ (80020d8 <HAL_GPIO_Init+0x24c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d025      	beq.n	80020b2 <HAL_GPIO_Init+0x226>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_GPIO_Init+0x250>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d01f      	beq.n	80020ae <HAL_GPIO_Init+0x222>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_GPIO_Init+0x254>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d019      	beq.n	80020aa <HAL_GPIO_Init+0x21e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1a      	ldr	r2, [pc, #104]	@ (80020e4 <HAL_GPIO_Init+0x258>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0x21a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a19      	ldr	r2, [pc, #100]	@ (80020e8 <HAL_GPIO_Init+0x25c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <HAL_GPIO_Init+0x216>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a18      	ldr	r2, [pc, #96]	@ (80020ec <HAL_GPIO_Init+0x260>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d007      	beq.n	800209e <HAL_GPIO_Init+0x212>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <HAL_GPIO_Init+0x264>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d101      	bne.n	800209a <HAL_GPIO_Init+0x20e>
 8002096:	2309      	movs	r3, #9
 8002098:	e02d      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 800209a:	230a      	movs	r3, #10
 800209c:	e02b      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 800209e:	2308      	movs	r3, #8
 80020a0:	e029      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020a2:	2307      	movs	r3, #7
 80020a4:	e027      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020a6:	2306      	movs	r3, #6
 80020a8:	e025      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020aa:	2305      	movs	r3, #5
 80020ac:	e023      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020ae:	2304      	movs	r3, #4
 80020b0:	e021      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020b2:	2303      	movs	r3, #3
 80020b4:	e01f      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e01d      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e01b      	b.n	80020f6 <HAL_GPIO_Init+0x26a>
 80020be:	bf00      	nop
 80020c0:	58000080 	.word	0x58000080
 80020c4:	58024400 	.word	0x58024400
 80020c8:	58000400 	.word	0x58000400
 80020cc:	58020000 	.word	0x58020000
 80020d0:	58020400 	.word	0x58020400
 80020d4:	58020800 	.word	0x58020800
 80020d8:	58020c00 	.word	0x58020c00
 80020dc:	58021000 	.word	0x58021000
 80020e0:	58021400 	.word	0x58021400
 80020e4:	58021800 	.word	0x58021800
 80020e8:	58021c00 	.word	0x58021c00
 80020ec:	58022000 	.word	0x58022000
 80020f0:	58022400 	.word	0x58022400
 80020f4:	2300      	movs	r3, #0
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	f002 0203 	and.w	r2, r2, #3
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	4093      	lsls	r3, r2
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4313      	orrs	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002106:	4938      	ldr	r1, [pc, #224]	@ (80021e8 <HAL_GPIO_Init+0x35c>)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	089b      	lsrs	r3, r3, #2
 800210c:	3302      	adds	r3, #2
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800213a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002142:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	43db      	mvns	r3, r3
 800214e:	69ba      	ldr	r2, [r7, #24]
 8002150:	4013      	ands	r3, r2
 8002152:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d003      	beq.n	8002168 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002168:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d003      	beq.n	8002194 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	43db      	mvns	r3, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4013      	ands	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	3301      	adds	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681a      	ldr	r2, [r3, #0]
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	fa22 f303 	lsr.w	r3, r2, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f ae63 	bne.w	8001ea0 <HAL_GPIO_Init+0x14>
  }
}
 80021da:	bf00      	nop
 80021dc:	bf00      	nop
 80021de:	3724      	adds	r7, #36	@ 0x24
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	58000400 	.word	0x58000400

080021ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	807b      	strh	r3, [r7, #2]
 80021f8:	4613      	mov	r3, r2
 80021fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fc:	787b      	ldrb	r3, [r7, #1]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002208:	e003      	b.n	8002212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800220a:	887b      	ldrh	r3, [r7, #2]
 800220c:	041a      	lsls	r2, r3, #16
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	619a      	str	r2, [r3, #24]
}
 8002212:	bf00      	nop
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b086      	sub	sp, #24
 8002222:	af02      	add	r7, sp, #8
 8002224:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e0fe      	b.n	800242e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002236:	b2db      	uxtb	r3, r3
 8002238:	2b00      	cmp	r3, #0
 800223a:	d106      	bne.n	800224a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fe9f 	bl	8000f88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2203      	movs	r2, #3
 800224e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f004 fa12 	bl	8006680 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	7c1a      	ldrb	r2, [r3, #16]
 8002264:	f88d 2000 	strb.w	r2, [sp]
 8002268:	3304      	adds	r3, #4
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	f004 f996 	bl	800659c <USB_CoreInit>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d005      	beq.n	8002282 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2202      	movs	r2, #2
 800227a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e0d5      	b.n	800242e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2100      	movs	r1, #0
 8002288:	4618      	mov	r0, r3
 800228a:	f004 fa0a 	bl	80066a2 <USB_SetCurrentMode>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d005      	beq.n	80022a0 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2202      	movs	r2, #2
 8002298:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0c6      	b.n	800242e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e04a      	b.n	800233c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022a6:	7bfa      	ldrb	r2, [r7, #15]
 80022a8:	6879      	ldr	r1, [r7, #4]
 80022aa:	4613      	mov	r3, r2
 80022ac:	00db      	lsls	r3, r3, #3
 80022ae:	4413      	add	r3, r2
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	440b      	add	r3, r1
 80022b4:	3315      	adds	r3, #21
 80022b6:	2201      	movs	r2, #1
 80022b8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022ba:	7bfa      	ldrb	r2, [r7, #15]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	00db      	lsls	r3, r3, #3
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3314      	adds	r3, #20
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022ce:	7bfa      	ldrb	r2, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	b298      	uxth	r0, r3
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	4613      	mov	r3, r2
 80022d8:	00db      	lsls	r3, r3, #3
 80022da:	4413      	add	r3, r2
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	440b      	add	r3, r1
 80022e0:	332e      	adds	r3, #46	@ 0x2e
 80022e2:	4602      	mov	r2, r0
 80022e4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	6879      	ldr	r1, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	440b      	add	r3, r1
 80022f4:	3318      	adds	r3, #24
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80022fa:	7bfa      	ldrb	r2, [r7, #15]
 80022fc:	6879      	ldr	r1, [r7, #4]
 80022fe:	4613      	mov	r3, r2
 8002300:	00db      	lsls	r3, r3, #3
 8002302:	4413      	add	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	440b      	add	r3, r1
 8002308:	331c      	adds	r3, #28
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800230e:	7bfa      	ldrb	r2, [r7, #15]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	4413      	add	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	3320      	adds	r3, #32
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	3324      	adds	r3, #36	@ 0x24
 8002332:	2200      	movs	r2, #0
 8002334:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002336:	7bfb      	ldrb	r3, [r7, #15]
 8002338:	3301      	adds	r3, #1
 800233a:	73fb      	strb	r3, [r7, #15]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	791b      	ldrb	r3, [r3, #4]
 8002340:	7bfa      	ldrb	r2, [r7, #15]
 8002342:	429a      	cmp	r2, r3
 8002344:	d3af      	bcc.n	80022a6 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002346:	2300      	movs	r3, #0
 8002348:	73fb      	strb	r3, [r7, #15]
 800234a:	e044      	b.n	80023d6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800234c:	7bfa      	ldrb	r2, [r7, #15]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	4413      	add	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800235e:	2200      	movs	r2, #0
 8002360:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002362:	7bfa      	ldrb	r2, [r7, #15]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	00db      	lsls	r3, r3, #3
 800236a:	4413      	add	r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002374:	7bfa      	ldrb	r2, [r7, #15]
 8002376:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002378:	7bfa      	ldrb	r2, [r7, #15]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4413      	add	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800238e:	7bfa      	ldrb	r2, [r7, #15]
 8002390:	6879      	ldr	r1, [r7, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	440b      	add	r3, r1
 800239c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023a4:	7bfa      	ldrb	r2, [r7, #15]
 80023a6:	6879      	ldr	r1, [r7, #4]
 80023a8:	4613      	mov	r3, r2
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	440b      	add	r3, r1
 80023b2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023ba:	7bfa      	ldrb	r2, [r7, #15]
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	440b      	add	r3, r1
 80023c8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73fb      	strb	r3, [r7, #15]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	791b      	ldrb	r3, [r3, #4]
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d3b5      	bcc.n	800234c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	7c1a      	ldrb	r2, [r3, #16]
 80023e8:	f88d 2000 	strb.w	r2, [sp]
 80023ec:	3304      	adds	r3, #4
 80023ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023f0:	f004 f9a4 	bl	800673c <USB_DevInit>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d005      	beq.n	8002406 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2202      	movs	r2, #2
 80023fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e013      	b.n	800242e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	7b1b      	ldrb	r3, [r3, #12]
 8002418:	2b01      	cmp	r3, #1
 800241a:	d102      	bne.n	8002422 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f000 f80b 	bl	8002438 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4618      	mov	r0, r3
 8002428:	f004 fb5f 	bl	8006aea <USB_DevDisconnect>

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002466:	4b05      	ldr	r3, [pc, #20]	@ (800247c <HAL_PCDEx_ActivateLPM+0x44>)
 8002468:	4313      	orrs	r3, r2
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	10000003 	.word	0x10000003

08002480 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_PWREx_ConfigSupply+0x70>)
 800248a:	68db      	ldr	r3, [r3, #12]
 800248c:	f003 0304 	and.w	r3, r3, #4
 8002490:	2b04      	cmp	r3, #4
 8002492:	d00a      	beq.n	80024aa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002494:	4b16      	ldr	r3, [pc, #88]	@ (80024f0 <HAL_PWREx_ConfigSupply+0x70>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	429a      	cmp	r2, r3
 80024a0:	d001      	beq.n	80024a6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e01f      	b.n	80024e6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e01d      	b.n	80024e6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024aa:	4b11      	ldr	r3, [pc, #68]	@ (80024f0 <HAL_PWREx_ConfigSupply+0x70>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	f023 0207 	bic.w	r2, r3, #7
 80024b2:	490f      	ldr	r1, [pc, #60]	@ (80024f0 <HAL_PWREx_ConfigSupply+0x70>)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024ba:	f7fe ff7f 	bl	80013bc <HAL_GetTick>
 80024be:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024c0:	e009      	b.n	80024d6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024c2:	f7fe ff7b 	bl	80013bc <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024d0:	d901      	bls.n	80024d6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e007      	b.n	80024e6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024d6:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_PWREx_ConfigSupply+0x70>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024e2:	d1ee      	bne.n	80024c2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	58024800 	.word	0x58024800

080024f4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80024f8:	4b05      	ldr	r3, [pc, #20]	@ (8002510 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a04      	ldr	r2, [pc, #16]	@ (8002510 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002502:	60d3      	str	r3, [r2, #12]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	58024800 	.word	0x58024800

08002514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08c      	sub	sp, #48	@ 0x30
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d102      	bne.n	8002528 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	f000 bc48 	b.w	8002db8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 8088 	beq.w	8002646 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002536:	4b99      	ldr	r3, [pc, #612]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800253e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002540:	4b96      	ldr	r3, [pc, #600]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002548:	2b10      	cmp	r3, #16
 800254a:	d007      	beq.n	800255c <HAL_RCC_OscConfig+0x48>
 800254c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800254e:	2b18      	cmp	r3, #24
 8002550:	d111      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d10c      	bne.n	8002576 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800255c:	4b8f      	ldr	r3, [pc, #572]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002564:	2b00      	cmp	r3, #0
 8002566:	d06d      	beq.n	8002644 <HAL_RCC_OscConfig+0x130>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d169      	bne.n	8002644 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	f000 bc21 	b.w	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800257e:	d106      	bne.n	800258e <HAL_RCC_OscConfig+0x7a>
 8002580:	4b86      	ldr	r3, [pc, #536]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a85      	ldr	r2, [pc, #532]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002586:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800258a:	6013      	str	r3, [r2, #0]
 800258c:	e02e      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x9c>
 8002596:	4b81      	ldr	r3, [pc, #516]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a80      	ldr	r2, [pc, #512]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800259c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a0:	6013      	str	r3, [r2, #0]
 80025a2:	4b7e      	ldr	r3, [pc, #504]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7d      	ldr	r2, [pc, #500]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xc0>
 80025ba:	4b78      	ldr	r3, [pc, #480]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a77      	ldr	r2, [pc, #476]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b75      	ldr	r3, [pc, #468]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a74      	ldr	r2, [pc, #464]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xd8>
 80025d4:	4b71      	ldr	r3, [pc, #452]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a70      	ldr	r2, [pc, #448]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b6e      	ldr	r3, [pc, #440]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6d      	ldr	r2, [pc, #436]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fee2 	bl	80013bc <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fede 	bl	80013bc <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	@ 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e3d4      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800260e:	4b63      	ldr	r3, [pc, #396]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xe8>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fece 	bl	80013bc <HAL_GetTick>
 8002620:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe feca 	bl	80013bc <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	@ 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e3c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002636:	4b59      	ldr	r3, [pc, #356]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x110>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 80ca 	beq.w	80027e8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002654:	4b51      	ldr	r3, [pc, #324]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800265c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800265e:	4b4f      	ldr	r3, [pc, #316]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002662:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002664:	6a3b      	ldr	r3, [r7, #32]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_RCC_OscConfig+0x166>
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b18      	cmp	r3, #24
 800266e:	d156      	bne.n	800271e <HAL_RCC_OscConfig+0x20a>
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	2b00      	cmp	r3, #0
 8002678:	d151      	bne.n	800271e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800267a:	4b48      	ldr	r3, [pc, #288]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d005      	beq.n	8002692 <HAL_RCC_OscConfig+0x17e>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e392      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002692:	4b42      	ldr	r3, [pc, #264]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f023 0219 	bic.w	r2, r3, #25
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	493f      	ldr	r1, [pc, #252]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026a0:	4313      	orrs	r3, r2
 80026a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fe8a 	bl	80013bc <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fe86 	bl	80013bc <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e37c      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026be:	4b37      	ldr	r3, [pc, #220]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ca:	f7fe fea7 	bl	800141c <HAL_GetREVID>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d817      	bhi.n	8002708 <HAL_RCC_OscConfig+0x1f4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	2b40      	cmp	r3, #64	@ 0x40
 80026de:	d108      	bne.n	80026f2 <HAL_RCC_OscConfig+0x1de>
 80026e0:	4b2e      	ldr	r3, [pc, #184]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026e8:	4a2c      	ldr	r2, [pc, #176]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ee:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f0:	e07a      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	4b2a      	ldr	r3, [pc, #168]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4926      	ldr	r1, [pc, #152]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002706:	e06f      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002708:	4b24      	ldr	r3, [pc, #144]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	691b      	ldr	r3, [r3, #16]
 8002714:	061b      	lsls	r3, r3, #24
 8002716:	4921      	ldr	r1, [pc, #132]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800271c:	e064      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d047      	beq.n	80027b6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002726:	4b1d      	ldr	r3, [pc, #116]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f023 0219 	bic.w	r2, r3, #25
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	491a      	ldr	r1, [pc, #104]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002734:	4313      	orrs	r3, r2
 8002736:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002738:	f7fe fe40 	bl	80013bc <HAL_GetTick>
 800273c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002740:	f7fe fe3c 	bl	80013bc <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e332      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002752:	4b12      	ldr	r3, [pc, #72]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800275e:	f7fe fe5d 	bl	800141c <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d819      	bhi.n	80027a0 <HAL_RCC_OscConfig+0x28c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b40      	cmp	r3, #64	@ 0x40
 8002772:	d108      	bne.n	8002786 <HAL_RCC_OscConfig+0x272>
 8002774:	4b09      	ldr	r3, [pc, #36]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800277c:	4a07      	ldr	r2, [pc, #28]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 800277e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002782:	6053      	str	r3, [r2, #4]
 8002784:	e030      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
 8002786:	4b05      	ldr	r3, [pc, #20]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	031b      	lsls	r3, r3, #12
 8002794:	4901      	ldr	r1, [pc, #4]	@ (800279c <HAL_RCC_OscConfig+0x288>)
 8002796:	4313      	orrs	r3, r2
 8002798:	604b      	str	r3, [r1, #4]
 800279a:	e025      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
 800279c:	58024400 	.word	0x58024400
 80027a0:	4b9a      	ldr	r3, [pc, #616]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	061b      	lsls	r3, r3, #24
 80027ae:	4997      	ldr	r1, [pc, #604]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	604b      	str	r3, [r1, #4]
 80027b4:	e018      	b.n	80027e8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b6:	4b95      	ldr	r3, [pc, #596]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a94      	ldr	r2, [pc, #592]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	f023 0301 	bic.w	r3, r3, #1
 80027c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c2:	f7fe fdfb 	bl	80013bc <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fdf7 	bl	80013bc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e2ed      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027dc:	4b8b      	ldr	r3, [pc, #556]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0310 	and.w	r3, r3, #16
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	f000 80a9 	beq.w	8002948 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027f6:	4b85      	ldr	r3, [pc, #532]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027fe:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002800:	4b82      	ldr	r3, [pc, #520]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002804:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	2b08      	cmp	r3, #8
 800280a:	d007      	beq.n	800281c <HAL_RCC_OscConfig+0x308>
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b18      	cmp	r3, #24
 8002810:	d13a      	bne.n	8002888 <HAL_RCC_OscConfig+0x374>
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b01      	cmp	r3, #1
 800281a:	d135      	bne.n	8002888 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_OscConfig+0x320>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	2b80      	cmp	r3, #128	@ 0x80
 800282e:	d001      	beq.n	8002834 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e2c1      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002834:	f7fe fdf2 	bl	800141c <HAL_GetREVID>
 8002838:	4603      	mov	r3, r0
 800283a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800283e:	4293      	cmp	r3, r2
 8002840:	d817      	bhi.n	8002872 <HAL_RCC_OscConfig+0x35e>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	2b20      	cmp	r3, #32
 8002848:	d108      	bne.n	800285c <HAL_RCC_OscConfig+0x348>
 800284a:	4b70      	ldr	r3, [pc, #448]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002852:	4a6e      	ldr	r2, [pc, #440]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002858:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800285a:	e075      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800285c:	4b6b      	ldr	r3, [pc, #428]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	069b      	lsls	r3, r3, #26
 800286a:	4968      	ldr	r1, [pc, #416]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800286c:	4313      	orrs	r3, r2
 800286e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002870:	e06a      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002872:	4b66      	ldr	r3, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	061b      	lsls	r3, r3, #24
 8002880:	4962      	ldr	r1, [pc, #392]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002882:	4313      	orrs	r3, r2
 8002884:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002886:	e05f      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d042      	beq.n	8002916 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002890:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a5d      	ldr	r2, [pc, #372]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002896:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800289a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800289c:	f7fe fd8e 	bl	80013bc <HAL_GetTick>
 80028a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028a2:	e008      	b.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028a4:	f7fe fd8a 	bl	80013bc <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d901      	bls.n	80028b6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028b2:	2303      	movs	r3, #3
 80028b4:	e280      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028b6:	4b55      	ldr	r3, [pc, #340]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d0f0      	beq.n	80028a4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028c2:	f7fe fdab 	bl	800141c <HAL_GetREVID>
 80028c6:	4603      	mov	r3, r0
 80028c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d817      	bhi.n	8002900 <HAL_RCC_OscConfig+0x3ec>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d108      	bne.n	80028ea <HAL_RCC_OscConfig+0x3d6>
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028e0:	4a4a      	ldr	r2, [pc, #296]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028e6:	6053      	str	r3, [r2, #4]
 80028e8:	e02e      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
 80028ea:	4b48      	ldr	r3, [pc, #288]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	069b      	lsls	r3, r3, #26
 80028f8:	4944      	ldr	r1, [pc, #272]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
 80028fe:	e023      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
 8002900:	4b42      	ldr	r3, [pc, #264]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	493f      	ldr	r1, [pc, #252]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002910:	4313      	orrs	r3, r2
 8002912:	60cb      	str	r3, [r1, #12]
 8002914:	e018      	b.n	8002948 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002916:	4b3d      	ldr	r3, [pc, #244]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a3c      	ldr	r2, [pc, #240]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800291c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002920:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002922:	f7fe fd4b 	bl	80013bc <HAL_GetTick>
 8002926:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002928:	e008      	b.n	800293c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800292a:	f7fe fd47 	bl	80013bc <HAL_GetTick>
 800292e:	4602      	mov	r2, r0
 8002930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e23d      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800293c:	4b33      	ldr	r3, [pc, #204]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d1f0      	bne.n	800292a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d036      	beq.n	80029c2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d019      	beq.n	8002990 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295c:	4b2b      	ldr	r3, [pc, #172]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 800295e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002960:	4a2a      	ldr	r2, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002962:	f043 0301 	orr.w	r3, r3, #1
 8002966:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7fe fd28 	bl	80013bc <HAL_GetTick>
 800296c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fd24 	bl	80013bc <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e21a      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002982:	4b22      	ldr	r3, [pc, #136]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x45c>
 800298e:	e018      	b.n	80029c2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b1e      	ldr	r3, [pc, #120]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002992:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002994:	4a1d      	ldr	r2, [pc, #116]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe fd0e 	bl	80013bc <HAL_GetTick>
 80029a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029a2:	e008      	b.n	80029b6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a4:	f7fe fd0a 	bl	80013bc <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	2b02      	cmp	r3, #2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e200      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029b6:	4b15      	ldr	r3, [pc, #84]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f0      	bne.n	80029a4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d039      	beq.n	8002a42 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01c      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a0c      	ldr	r2, [pc, #48]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029e0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029e2:	f7fe fceb 	bl	80013bc <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029e8:	e008      	b.n	80029fc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029ea:	f7fe fce7 	bl	80013bc <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d901      	bls.n	80029fc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e1dd      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCC_OscConfig+0x4f8>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0f0      	beq.n	80029ea <HAL_RCC_OscConfig+0x4d6>
 8002a08:	e01b      	b.n	8002a42 <HAL_RCC_OscConfig+0x52e>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a10:	4b9b      	ldr	r3, [pc, #620]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a9a      	ldr	r2, [pc, #616]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a1c:	f7fe fcce 	bl	80013bc <HAL_GetTick>
 8002a20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a24:	f7fe fcca 	bl	80013bc <HAL_GetTick>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e1c0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a36:	4b92      	ldr	r3, [pc, #584]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d1f0      	bne.n	8002a24 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0304 	and.w	r3, r3, #4
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8081 	beq.w	8002b52 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a50:	4b8c      	ldr	r3, [pc, #560]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a8b      	ldr	r2, [pc, #556]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a5a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a5c:	f7fe fcae 	bl	80013bc <HAL_GetTick>
 8002a60:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a64:	f7fe fcaa 	bl	80013bc <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b64      	cmp	r3, #100	@ 0x64
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e1a0      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a76:	4b83      	ldr	r3, [pc, #524]	@ (8002c84 <HAL_RCC_OscConfig+0x770>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0f0      	beq.n	8002a64 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d106      	bne.n	8002a98 <HAL_RCC_OscConfig+0x584>
 8002a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	f043 0301 	orr.w	r3, r3, #1
 8002a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a96:	e02d      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10c      	bne.n	8002aba <HAL_RCC_OscConfig+0x5a6>
 8002aa0:	4b77      	ldr	r3, [pc, #476]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	4a76      	ldr	r2, [pc, #472]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	f023 0301 	bic.w	r3, r3, #1
 8002aaa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aac:	4b74      	ldr	r3, [pc, #464]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a73      	ldr	r2, [pc, #460]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ab2:	f023 0304 	bic.w	r3, r3, #4
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x5c8>
 8002ac2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	4b6c      	ldr	r3, [pc, #432]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x5e0>
 8002adc:	4b68      	ldr	r3, [pc, #416]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a67      	ldr	r2, [pc, #412]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b65      	ldr	r3, [pc, #404]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a64      	ldr	r2, [pc, #400]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fc5e 	bl	80013bc <HAL_GetTick>
 8002b00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fc5a 	bl	80013bc <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e14e      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b1a:	4b59      	ldr	r3, [pc, #356]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x5f0>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fc48 	bl	80013bc <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fc44 	bl	80013bc <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e138      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b46:	4b4e      	ldr	r3, [pc, #312]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 812d 	beq.w	8002db6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b5c:	4b48      	ldr	r3, [pc, #288]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b64:	2b18      	cmp	r3, #24
 8002b66:	f000 80bd 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	f040 809e 	bne.w	8002cb0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b74:	4b42      	ldr	r3, [pc, #264]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a41      	ldr	r2, [pc, #260]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b7a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fc1c 	bl	80013bc <HAL_GetTick>
 8002b84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b88:	f7fe fc18 	bl	80013bc <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e10e      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b9a:	4b39      	ldr	r3, [pc, #228]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002ba6:	4b36      	ldr	r3, [pc, #216]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002baa:	4b37      	ldr	r3, [pc, #220]	@ (8002c88 <HAL_RCC_OscConfig+0x774>)
 8002bac:	4013      	ands	r3, r2
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002bb2:	687a      	ldr	r2, [r7, #4]
 8002bb4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bb6:	0112      	lsls	r2, r2, #4
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	4931      	ldr	r1, [pc, #196]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	628b      	str	r3, [r1, #40]	@ 0x28
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	431a      	orrs	r2, r3
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	041b      	lsls	r3, r3, #16
 8002bde:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002be2:	431a      	orrs	r2, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be8:	3b01      	subs	r3, #1
 8002bea:	061b      	lsls	r3, r3, #24
 8002bec:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002bf0:	4923      	ldr	r1, [pc, #140]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002bf6:	4b22      	ldr	r3, [pc, #136]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfa:	4a21      	ldr	r2, [pc, #132]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002bfc:	f023 0301 	bic.w	r3, r3, #1
 8002c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c02:	4b1f      	ldr	r3, [pc, #124]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c06:	4b21      	ldr	r3, [pc, #132]	@ (8002c8c <HAL_RCC_OscConfig+0x778>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c0e:	00d2      	lsls	r2, r2, #3
 8002c10:	491b      	ldr	r1, [pc, #108]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c16:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f023 020c 	bic.w	r2, r3, #12
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	4917      	ldr	r1, [pc, #92]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c28:	4b15      	ldr	r3, [pc, #84]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2c:	f023 0202 	bic.w	r2, r3, #2
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c34:	4912      	ldr	r1, [pc, #72]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c3a:	4b11      	ldr	r3, [pc, #68]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c3e:	4a10      	ldr	r2, [pc, #64]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c44:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c46:	4b0e      	ldr	r3, [pc, #56]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c52:	4b0b      	ldr	r3, [pc, #44]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c5e:	4b08      	ldr	r3, [pc, #32]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a04      	ldr	r2, [pc, #16]	@ (8002c80 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c76:	f7fe fba1 	bl	80013bc <HAL_GetTick>
 8002c7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c7c:	e011      	b.n	8002ca2 <HAL_RCC_OscConfig+0x78e>
 8002c7e:	bf00      	nop
 8002c80:	58024400 	.word	0x58024400
 8002c84:	58024800 	.word	0x58024800
 8002c88:	fffffc0c 	.word	0xfffffc0c
 8002c8c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe fb94 	bl	80013bc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e08a      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x77c>
 8002cae:	e082      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cb0:	4b43      	ldr	r3, [pc, #268]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a42      	ldr	r2, [pc, #264]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cb6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cbc:	f7fe fb7e 	bl	80013bc <HAL_GetTick>
 8002cc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cc2:	e008      	b.n	8002cd6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cc4:	f7fe fb7a 	bl	80013bc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e070      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd6:	4b3a      	ldr	r3, [pc, #232]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f0      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x7b0>
 8002ce2:	e068      	b.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002ce4:	4b36      	ldr	r3, [pc, #216]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002cea:	4b35      	ldr	r3, [pc, #212]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d031      	beq.n	8002d5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d12a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	091b      	lsrs	r3, r3, #4
 8002d0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d122      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11a      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	0a5b      	lsrs	r3, r3, #9
 8002d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d111      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	0c1b      	lsrs	r3, r3, #16
 8002d3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d108      	bne.n	8002d5c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e02b      	b.n	8002db8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d60:	4b17      	ldr	r3, [pc, #92]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d64:	08db      	lsrs	r3, r3, #3
 8002d66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d70:	693a      	ldr	r2, [r7, #16]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d01f      	beq.n	8002db6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d76:	4b12      	ldr	r3, [pc, #72]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7a:	4a11      	ldr	r2, [pc, #68]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d7c:	f023 0301 	bic.w	r3, r3, #1
 8002d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d82:	f7fe fb1b 	bl	80013bc <HAL_GetTick>
 8002d86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d88:	bf00      	nop
 8002d8a:	f7fe fb17 	bl	80013bc <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d0f9      	beq.n	8002d8a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d96:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_RCC_OscConfig+0x8b0>)
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002da2:	00d2      	lsls	r2, r2, #3
 8002da4:	4906      	ldr	r1, [pc, #24]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002daa:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_RCC_OscConfig+0x8ac>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3730      	adds	r7, #48	@ 0x30
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	ffff0007 	.word	0xffff0007

08002dc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e19c      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ddc:	4b8a      	ldr	r3, [pc, #552]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 030f 	and.w	r3, r3, #15
 8002de4:	683a      	ldr	r2, [r7, #0]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d910      	bls.n	8002e0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dea:	4b87      	ldr	r3, [pc, #540]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 020f 	bic.w	r2, r3, #15
 8002df2:	4985      	ldr	r1, [pc, #532]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfa:	4b83      	ldr	r3, [pc, #524]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 030f 	and.w	r3, r3, #15
 8002e02:	683a      	ldr	r2, [r7, #0]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	d001      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e184      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	4b7b      	ldr	r3, [pc, #492]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e28:	4b78      	ldr	r3, [pc, #480]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	4975      	ldr	r1, [pc, #468]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695a      	ldr	r2, [r3, #20]
 8002e4a:	4b70      	ldr	r3, [pc, #448]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e4c:	69db      	ldr	r3, [r3, #28]
 8002e4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d908      	bls.n	8002e68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e56:	4b6d      	ldr	r3, [pc, #436]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	496a      	ldr	r1, [pc, #424]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0310 	and.w	r3, r3, #16
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d010      	beq.n	8002e96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	4b64      	ldr	r3, [pc, #400]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d908      	bls.n	8002e96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e84:	4b61      	ldr	r3, [pc, #388]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e86:	69db      	ldr	r3, [r3, #28]
 8002e88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	495e      	ldr	r1, [pc, #376]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002e92:	4313      	orrs	r3, r2
 8002e94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0320 	and.w	r3, r3, #32
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d010      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69da      	ldr	r2, [r3, #28]
 8002ea6:	4b59      	ldr	r3, [pc, #356]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d908      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002eb2:	4b56      	ldr	r3, [pc, #344]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	4953      	ldr	r1, [pc, #332]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0302 	and.w	r3, r3, #2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	4b4d      	ldr	r3, [pc, #308]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 030f 	and.w	r3, r3, #15
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d908      	bls.n	8002ef2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee0:	4b4a      	ldr	r3, [pc, #296]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f023 020f 	bic.w	r2, r3, #15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4947      	ldr	r1, [pc, #284]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d055      	beq.n	8002faa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002efe:	4b43      	ldr	r3, [pc, #268]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	4940      	ldr	r1, [pc, #256]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d107      	bne.n	8002f28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f18:	4b3c      	ldr	r3, [pc, #240]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d121      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0f6      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	2b03      	cmp	r3, #3
 8002f2e:	d107      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f30:	4b36      	ldr	r3, [pc, #216]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d115      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e0ea      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d107      	bne.n	8002f58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f48:	4b30      	ldr	r3, [pc, #192]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d109      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e0de      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f58:	4b2c      	ldr	r3, [pc, #176]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0d6      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f68:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	f023 0207 	bic.w	r2, r3, #7
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	4925      	ldr	r1, [pc, #148]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f76:	4313      	orrs	r3, r2
 8002f78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f7a:	f7fe fa1f 	bl	80013bc <HAL_GetTick>
 8002f7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f80:	e00a      	b.n	8002f98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f82:	f7fe fa1b 	bl	80013bc <HAL_GetTick>
 8002f86:	4602      	mov	r2, r0
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d901      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f94:	2303      	movs	r3, #3
 8002f96:	e0be      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f98:	4b1c      	ldr	r3, [pc, #112]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d1eb      	bne.n	8002f82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d010      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	4b14      	ldr	r3, [pc, #80]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d208      	bcs.n	8002fd8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fc6:	4b11      	ldr	r3, [pc, #68]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f023 020f 	bic.w	r2, r3, #15
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	490e      	ldr	r1, [pc, #56]	@ (800300c <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d214      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b08      	ldr	r3, [pc, #32]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 020f 	bic.w	r2, r3, #15
 8002fee:	4906      	ldr	r1, [pc, #24]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff6:	4b04      	ldr	r3, [pc, #16]	@ (8003008 <HAL_RCC_ClockConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	429a      	cmp	r2, r3
 8003002:	d005      	beq.n	8003010 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e086      	b.n	8003116 <HAL_RCC_ClockConfig+0x34e>
 8003008:	52002000 	.word	0x52002000
 800300c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d010      	beq.n	800303e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	691a      	ldr	r2, [r3, #16]
 8003020:	4b3f      	ldr	r3, [pc, #252]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003028:	429a      	cmp	r2, r3
 800302a:	d208      	bcs.n	800303e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800302c:	4b3c      	ldr	r3, [pc, #240]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	4939      	ldr	r1, [pc, #228]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800303a:	4313      	orrs	r3, r2
 800303c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d010      	beq.n	800306c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	4b34      	ldr	r3, [pc, #208]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003056:	429a      	cmp	r2, r3
 8003058:	d208      	bcs.n	800306c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800305a:	4b31      	ldr	r3, [pc, #196]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800305c:	69db      	ldr	r3, [r3, #28]
 800305e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	492e      	ldr	r1, [pc, #184]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003068:	4313      	orrs	r3, r2
 800306a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0310 	and.w	r3, r3, #16
 8003074:	2b00      	cmp	r3, #0
 8003076:	d010      	beq.n	800309a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699a      	ldr	r2, [r3, #24]
 800307c:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003084:	429a      	cmp	r2, r3
 8003086:	d208      	bcs.n	800309a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	4922      	ldr	r1, [pc, #136]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 8003096:	4313      	orrs	r3, r2
 8003098:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d010      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d208      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	4917      	ldr	r1, [pc, #92]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c8:	f000 f834 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 80030cc:	4602      	mov	r2, r0
 80030ce:	4b14      	ldr	r3, [pc, #80]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	699b      	ldr	r3, [r3, #24]
 80030d2:	0a1b      	lsrs	r3, r3, #8
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	4912      	ldr	r1, [pc, #72]	@ (8003124 <HAL_RCC_ClockConfig+0x35c>)
 80030da:	5ccb      	ldrb	r3, [r1, r3]
 80030dc:	f003 031f 	and.w	r3, r3, #31
 80030e0:	fa22 f303 	lsr.w	r3, r2, r3
 80030e4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a0d      	ldr	r2, [pc, #52]	@ (8003124 <HAL_RCC_ClockConfig+0x35c>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
 80030fc:	4a0a      	ldr	r2, [pc, #40]	@ (8003128 <HAL_RCC_ClockConfig+0x360>)
 80030fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003100:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <HAL_RCC_ClockConfig+0x364>)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003106:	4b0a      	ldr	r3, [pc, #40]	@ (8003130 <HAL_RCC_ClockConfig+0x368>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f7fe f90c 	bl	8001328 <HAL_InitTick>
 8003110:	4603      	mov	r3, r0
 8003112:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003114:	7bfb      	ldrb	r3, [r7, #15]
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	58024400 	.word	0x58024400
 8003124:	08008734 	.word	0x08008734
 8003128:	24000004 	.word	0x24000004
 800312c:	24000000 	.word	0x24000000
 8003130:	24000008 	.word	0x24000008

08003134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003134:	b480      	push	{r7}
 8003136:	b089      	sub	sp, #36	@ 0x24
 8003138:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800313a:	4bb3      	ldr	r3, [pc, #716]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003142:	2b18      	cmp	r3, #24
 8003144:	f200 8155 	bhi.w	80033f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8003148:	a201      	add	r2, pc, #4	@ (adr r2, 8003150 <HAL_RCC_GetSysClockFreq+0x1c>)
 800314a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314e:	bf00      	nop
 8003150:	080031b5 	.word	0x080031b5
 8003154:	080033f3 	.word	0x080033f3
 8003158:	080033f3 	.word	0x080033f3
 800315c:	080033f3 	.word	0x080033f3
 8003160:	080033f3 	.word	0x080033f3
 8003164:	080033f3 	.word	0x080033f3
 8003168:	080033f3 	.word	0x080033f3
 800316c:	080033f3 	.word	0x080033f3
 8003170:	080031db 	.word	0x080031db
 8003174:	080033f3 	.word	0x080033f3
 8003178:	080033f3 	.word	0x080033f3
 800317c:	080033f3 	.word	0x080033f3
 8003180:	080033f3 	.word	0x080033f3
 8003184:	080033f3 	.word	0x080033f3
 8003188:	080033f3 	.word	0x080033f3
 800318c:	080033f3 	.word	0x080033f3
 8003190:	080031e1 	.word	0x080031e1
 8003194:	080033f3 	.word	0x080033f3
 8003198:	080033f3 	.word	0x080033f3
 800319c:	080033f3 	.word	0x080033f3
 80031a0:	080033f3 	.word	0x080033f3
 80031a4:	080033f3 	.word	0x080033f3
 80031a8:	080033f3 	.word	0x080033f3
 80031ac:	080033f3 	.word	0x080033f3
 80031b0:	080031e7 	.word	0x080031e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031b4:	4b94      	ldr	r3, [pc, #592]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0320 	and.w	r3, r3, #32
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d009      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031c0:	4b91      	ldr	r3, [pc, #580]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	08db      	lsrs	r3, r3, #3
 80031c6:	f003 0303 	and.w	r3, r3, #3
 80031ca:	4a90      	ldr	r2, [pc, #576]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031cc:	fa22 f303 	lsr.w	r3, r2, r3
 80031d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031d2:	e111      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031d4:	4b8d      	ldr	r3, [pc, #564]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031d6:	61bb      	str	r3, [r7, #24]
      break;
 80031d8:	e10e      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031da:	4b8d      	ldr	r3, [pc, #564]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80031dc:	61bb      	str	r3, [r7, #24]
      break;
 80031de:	e10b      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80031e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003414 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80031e2:	61bb      	str	r3, [r7, #24]
      break;
 80031e4:	e108      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80031e6:	4b88      	ldr	r3, [pc, #544]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80031f0:	4b85      	ldr	r3, [pc, #532]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f4:	091b      	lsrs	r3, r3, #4
 80031f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80031fc:	4b82      	ldr	r3, [pc, #520]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003206:	4b80      	ldr	r3, [pc, #512]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003208:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003210:	68fa      	ldr	r2, [r7, #12]
 8003212:	fb02 f303 	mul.w	r3, r2, r3
 8003216:	ee07 3a90 	vmov	s15, r3
 800321a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800321e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	2b00      	cmp	r3, #0
 8003226:	f000 80e1 	beq.w	80033ec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	f000 8083 	beq.w	8003338 <HAL_RCC_GetSysClockFreq+0x204>
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b02      	cmp	r3, #2
 8003236:	f200 80a1 	bhi.w	800337c <HAL_RCC_GetSysClockFreq+0x248>
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x114>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d056      	beq.n	80032f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003246:	e099      	b.n	800337c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003248:	4b6f      	ldr	r3, [pc, #444]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d02d      	beq.n	80032b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003254:	4b6c      	ldr	r3, [pc, #432]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	08db      	lsrs	r3, r3, #3
 800325a:	f003 0303 	and.w	r3, r3, #3
 800325e:	4a6b      	ldr	r2, [pc, #428]	@ (800340c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003260:	fa22 f303 	lsr.w	r3, r2, r3
 8003264:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	ee07 3a90 	vmov	s15, r3
 800326c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800327a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800327e:	4b62      	ldr	r3, [pc, #392]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003282:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003286:	ee07 3a90 	vmov	s15, r3
 800328a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800328e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003292:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003296:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800329a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800329e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032ae:	e087      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	ee07 3a90 	vmov	s15, r3
 80032b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800341c <HAL_RCC_GetSysClockFreq+0x2e8>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	4b51      	ldr	r3, [pc, #324]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ca:	ee07 3a90 	vmov	s15, r3
 80032ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032f2:	e065      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	ee07 3a90 	vmov	s15, r3
 80032fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003420 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003302:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003306:	4b40      	ldr	r3, [pc, #256]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800330e:	ee07 3a90 	vmov	s15, r3
 8003312:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003316:	ed97 6a02 	vldr	s12, [r7, #8]
 800331a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 800331e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003326:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800332a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800332e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003332:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003336:	e043      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003424 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003346:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800334a:	4b2f      	ldr	r3, [pc, #188]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003352:	ee07 3a90 	vmov	s15, r3
 8003356:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800335a:	ed97 6a02 	vldr	s12, [r7, #8]
 800335e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003362:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003366:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800336a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800336e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003372:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003376:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800337a:	e021      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	ee07 3a90 	vmov	s15, r3
 8003382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003386:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003420 <HAL_RCC_GetSysClockFreq+0x2ec>
 800338a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338e:	4b1e      	ldr	r3, [pc, #120]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003396:	ee07 3a90 	vmov	s15, r3
 800339a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339e:	ed97 6a02 	vldr	s12, [r7, #8]
 80033a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003418 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033c0:	4b11      	ldr	r3, [pc, #68]	@ (8003408 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c4:	0a5b      	lsrs	r3, r3, #9
 80033c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80033ca:	3301      	adds	r3, #1
 80033cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	ee07 3a90 	vmov	s15, r3
 80033d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80033dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80033e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033e4:	ee17 3a90 	vmov	r3, s15
 80033e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80033ea:	e005      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
      break;
 80033f0:	e002      	b.n	80033f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80033f2:	4b07      	ldr	r3, [pc, #28]	@ (8003410 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80033f4:	61bb      	str	r3, [r7, #24]
      break;
 80033f6:	bf00      	nop
  }

  return sysclockfreq;
 80033f8:	69bb      	ldr	r3, [r7, #24]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	@ 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	58024400 	.word	0x58024400
 800340c:	03d09000 	.word	0x03d09000
 8003410:	003d0900 	.word	0x003d0900
 8003414:	007a1200 	.word	0x007a1200
 8003418:	46000000 	.word	0x46000000
 800341c:	4c742400 	.word	0x4c742400
 8003420:	4a742400 	.word	0x4a742400
 8003424:	4af42400 	.word	0x4af42400

08003428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800342e:	f7ff fe81 	bl	8003134 <HAL_RCC_GetSysClockFreq>
 8003432:	4602      	mov	r2, r0
 8003434:	4b10      	ldr	r3, [pc, #64]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x50>)
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	0a1b      	lsrs	r3, r3, #8
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	490f      	ldr	r1, [pc, #60]	@ (800347c <HAL_RCC_GetHCLKFreq+0x54>)
 8003440:	5ccb      	ldrb	r3, [r1, r3]
 8003442:	f003 031f 	and.w	r3, r3, #31
 8003446:	fa22 f303 	lsr.w	r3, r2, r3
 800344a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800344c:	4b0a      	ldr	r3, [pc, #40]	@ (8003478 <HAL_RCC_GetHCLKFreq+0x50>)
 800344e:	699b      	ldr	r3, [r3, #24]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	4a09      	ldr	r2, [pc, #36]	@ (800347c <HAL_RCC_GetHCLKFreq+0x54>)
 8003456:	5cd3      	ldrb	r3, [r2, r3]
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	fa22 f303 	lsr.w	r3, r2, r3
 8003462:	4a07      	ldr	r2, [pc, #28]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x58>)
 8003464:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003466:	4a07      	ldr	r2, [pc, #28]	@ (8003484 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800346c:	4b04      	ldr	r3, [pc, #16]	@ (8003480 <HAL_RCC_GetHCLKFreq+0x58>)
 800346e:	681b      	ldr	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	58024400 	.word	0x58024400
 800347c:	08008734 	.word	0x08008734
 8003480:	24000004 	.word	0x24000004
 8003484:	24000000 	.word	0x24000000

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800348c:	f7ff ffcc 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 8003490:	4602      	mov	r2, r0
 8003492:	4b06      	ldr	r3, [pc, #24]	@ (80034ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	091b      	lsrs	r3, r3, #4
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800349e:	5ccb      	ldrb	r3, [r1, r3]
 80034a0:	f003 031f 	and.w	r3, r3, #31
 80034a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	58024400 	.word	0x58024400
 80034b0:	08008734 	.word	0x08008734

080034b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80034b8:	f7ff ffb6 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 80034bc:	4602      	mov	r2, r0
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f003 0307 	and.w	r3, r3, #7
 80034c8:	4904      	ldr	r1, [pc, #16]	@ (80034dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ca:	5ccb      	ldrb	r3, [r1, r3]
 80034cc:	f003 031f 	and.w	r3, r3, #31
 80034d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	58024400 	.word	0x58024400
 80034dc:	08008734 	.word	0x08008734

080034e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b0ca      	sub	sp, #296	@ 0x128
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80034ec:	2300      	movs	r3, #0
 80034ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003500:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003504:	2500      	movs	r5, #0
 8003506:	ea54 0305 	orrs.w	r3, r4, r5
 800350a:	d049      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800350c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003510:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003512:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003516:	d02f      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003518:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800351c:	d828      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800351e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003522:	d01a      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003528:	d822      	bhi.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800352a:	2b00      	cmp	r3, #0
 800352c:	d003      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800352e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003532:	d007      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003534:	e01c      	b.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003536:	4bb8      	ldr	r3, [pc, #736]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800353a:	4ab7      	ldr	r2, [pc, #732]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003540:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003542:	e01a      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	3308      	adds	r3, #8
 800354a:	2102      	movs	r1, #2
 800354c:	4618      	mov	r0, r3
 800354e:	f001 fc8f 	bl	8004e70 <RCCEx_PLL2_Config>
 8003552:	4603      	mov	r3, r0
 8003554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003558:	e00f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	3328      	adds	r3, #40	@ 0x28
 8003560:	2102      	movs	r1, #2
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fd36 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003568:	4603      	mov	r3, r0
 800356a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800356e:	e004      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003576:	e000      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800357a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800357e:	2b00      	cmp	r3, #0
 8003580:	d10a      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003582:	4ba5      	ldr	r3, [pc, #660]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800358a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800358e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003590:	4aa1      	ldr	r2, [pc, #644]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003592:	430b      	orrs	r3, r1
 8003594:	6513      	str	r3, [r2, #80]	@ 0x50
 8003596:	e003      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80035ac:	f04f 0900 	mov.w	r9, #0
 80035b0:	ea58 0309 	orrs.w	r3, r8, r9
 80035b4:	d047      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80035b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035bc:	2b04      	cmp	r3, #4
 80035be:	d82a      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80035c0:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	080035dd 	.word	0x080035dd
 80035cc:	080035eb 	.word	0x080035eb
 80035d0:	08003601 	.word	0x08003601
 80035d4:	0800361f 	.word	0x0800361f
 80035d8:	0800361f 	.word	0x0800361f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4b8e      	ldr	r3, [pc, #568]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4a8d      	ldr	r2, [pc, #564]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035e8:	e01a      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ee:	3308      	adds	r3, #8
 80035f0:	2100      	movs	r1, #0
 80035f2:	4618      	mov	r0, r3
 80035f4:	f001 fc3c 	bl	8004e70 <RCCEx_PLL2_Config>
 80035f8:	4603      	mov	r3, r0
 80035fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035fe:	e00f      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003604:	3328      	adds	r3, #40	@ 0x28
 8003606:	2100      	movs	r1, #0
 8003608:	4618      	mov	r0, r3
 800360a:	f001 fce3 	bl	8004fd4 <RCCEx_PLL3_Config>
 800360e:	4603      	mov	r3, r0
 8003610:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003614:	e004      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003628:	4b7b      	ldr	r3, [pc, #492]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800362a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800362c:	f023 0107 	bic.w	r1, r3, #7
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003636:	4a78      	ldr	r2, [pc, #480]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003638:	430b      	orrs	r3, r1
 800363a:	6513      	str	r3, [r2, #80]	@ 0x50
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003652:	f04f 0b00 	mov.w	fp, #0
 8003656:	ea5a 030b 	orrs.w	r3, sl, fp
 800365a:	d04c      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800365c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003662:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003666:	d030      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800366c:	d829      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800366e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003670:	d02d      	beq.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003672:	2bc0      	cmp	r3, #192	@ 0xc0
 8003674:	d825      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003676:	2b80      	cmp	r3, #128	@ 0x80
 8003678:	d018      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800367a:	2b80      	cmp	r3, #128	@ 0x80
 800367c:	d821      	bhi.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003682:	2b40      	cmp	r3, #64	@ 0x40
 8003684:	d007      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003686:	e01c      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003688:	4b63      	ldr	r3, [pc, #396]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368c:	4a62      	ldr	r2, [pc, #392]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800368e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003694:	e01c      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369a:	3308      	adds	r3, #8
 800369c:	2100      	movs	r1, #0
 800369e:	4618      	mov	r0, r3
 80036a0:	f001 fbe6 	bl	8004e70 <RCCEx_PLL2_Config>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b0:	3328      	adds	r3, #40	@ 0x28
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 fc8d 	bl	8004fd4 <RCCEx_PLL3_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80036c0:	e006      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036c8:	e002      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ca:	bf00      	nop
 80036cc:	e000      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80036ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80036d8:	4b4f      	ldr	r3, [pc, #316]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036dc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	430b      	orrs	r3, r1
 80036ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ec:	e003      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fe:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003702:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003706:	2300      	movs	r3, #0
 8003708:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800370c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003710:	460b      	mov	r3, r1
 8003712:	4313      	orrs	r3, r2
 8003714:	d053      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800371e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003722:	d035      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003724:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003728:	d82e      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800372a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800372e:	d031      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003730:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003734:	d828      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003736:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800373a:	d01a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800373c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003740:	d822      	bhi.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800374a:	d007      	beq.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800374c:	e01c      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374e:	4b32      	ldr	r3, [pc, #200]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003752:	4a31      	ldr	r2, [pc, #196]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003754:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003758:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800375a:	e01c      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003760:	3308      	adds	r3, #8
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f001 fb83 	bl	8004e70 <RCCEx_PLL2_Config>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003770:	e011      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	3328      	adds	r3, #40	@ 0x28
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fc2a 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003786:	e006      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800378e:	e002      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003790:	bf00      	nop
 8003792:	e000      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800379e:	4b1e      	ldr	r3, [pc, #120]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037a2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80037ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003818 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b0:	430b      	orrs	r3, r1
 80037b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80037b4:	e003      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80037ca:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80037d4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80037d8:	460b      	mov	r3, r1
 80037da:	4313      	orrs	r3, r2
 80037dc:	d056      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ea:	d038      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80037ec:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037f0:	d831      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037f2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037f6:	d034      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80037f8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80037fc:	d82b      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003802:	d01d      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003804:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003808:	d825      	bhi.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d006      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800380e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003812:	d00a      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003814:	e01f      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003816:	bf00      	nop
 8003818:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381c:	4ba2      	ldr	r3, [pc, #648]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003820:	4aa1      	ldr	r2, [pc, #644]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003828:	e01c      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800382a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800382e:	3308      	adds	r3, #8
 8003830:	2100      	movs	r1, #0
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fb1c 	bl	8004e70 <RCCEx_PLL2_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800383e:	e011      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	3328      	adds	r3, #40	@ 0x28
 8003846:	2100      	movs	r1, #0
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fbc3 	bl	8004fd4 <RCCEx_PLL3_Config>
 800384e:	4603      	mov	r3, r0
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003854:	e006      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800385c:	e002      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800385e:	bf00      	nop
 8003860:	e000      	b.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800386c:	4b8e      	ldr	r3, [pc, #568]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800386e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003870:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003874:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003878:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800387c:	4a8a      	ldr	r2, [pc, #552]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800387e:	430b      	orrs	r3, r1
 8003880:	6593      	str	r3, [r2, #88]	@ 0x58
 8003882:	e003      	b.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003894:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003898:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80038a2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80038a6:	460b      	mov	r3, r1
 80038a8:	4313      	orrs	r3, r2
 80038aa:	d03a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	2b30      	cmp	r3, #48	@ 0x30
 80038b4:	d01f      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80038b6:	2b30      	cmp	r3, #48	@ 0x30
 80038b8:	d819      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d815      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d019      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d111      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ca:	4b77      	ldr	r3, [pc, #476]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ce:	4a76      	ldr	r2, [pc, #472]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038d6:	e011      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038dc:	3308      	adds	r3, #8
 80038de:	2102      	movs	r1, #2
 80038e0:	4618      	mov	r0, r3
 80038e2:	f001 fac5 	bl	8004e70 <RCCEx_PLL2_Config>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80038ec:	e006      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038f4:	e002      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038f6:	bf00      	nop
 80038f8:	e000      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80038fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003904:	4b68      	ldr	r3, [pc, #416]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003906:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003908:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800390c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003912:	4a65      	ldr	r2, [pc, #404]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003914:	430b      	orrs	r3, r1
 8003916:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003918:	e003      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800391a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800392e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003932:	2300      	movs	r3, #0
 8003934:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003938:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800393c:	460b      	mov	r3, r1
 800393e:	4313      	orrs	r3, r2
 8003940:	d051      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003942:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003946:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003948:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800394c:	d035      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800394e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003952:	d82e      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003954:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003958:	d031      	beq.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800395a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800395e:	d828      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003960:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003964:	d01a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003966:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396a:	d822      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003974:	d007      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003976:	e01c      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003978:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397c:	4a4a      	ldr	r2, [pc, #296]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003982:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003984:	e01c      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398a:	3308      	adds	r3, #8
 800398c:	2100      	movs	r1, #0
 800398e:	4618      	mov	r0, r3
 8003990:	f001 fa6e 	bl	8004e70 <RCCEx_PLL2_Config>
 8003994:	4603      	mov	r3, r0
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800399a:	e011      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800399c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a0:	3328      	adds	r3, #40	@ 0x28
 80039a2:	2100      	movs	r1, #0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f001 fb15 	bl	8004fd4 <RCCEx_PLL3_Config>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039b0:	e006      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039b8:	e002      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039ba:	bf00      	nop
 80039bc:	e000      	b.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80039be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d10a      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c8:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039cc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039d6:	4a34      	ldr	r2, [pc, #208]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d8:	430b      	orrs	r3, r1
 80039da:	6513      	str	r3, [r2, #80]	@ 0x50
 80039dc:	e003      	b.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80039f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039f6:	2300      	movs	r3, #0
 80039f8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80039fc:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a00:	460b      	mov	r3, r1
 8003a02:	4313      	orrs	r3, r2
 8003a04:	d056      	beq.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a0a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a10:	d033      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a12:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a16:	d82c      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a1c:	d02f      	beq.n	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a1e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a22:	d826      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a24:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a28:	d02b      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003a2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a2e:	d820      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a34:	d012      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003a36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a3a:	d81a      	bhi.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d022      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a44:	d115      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4a:	3308      	adds	r3, #8
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f001 fa0e 	bl	8004e70 <RCCEx_PLL2_Config>
 8003a54:	4603      	mov	r3, r0
 8003a56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a5a:	e015      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a60:	3328      	adds	r3, #40	@ 0x28
 8003a62:	2101      	movs	r1, #1
 8003a64:	4618      	mov	r0, r3
 8003a66:	f001 fab5 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a70:	e00a      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7a:	bf00      	nop
 8003a7c:	e004      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10d      	bne.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a90:	4b05      	ldr	r3, [pc, #20]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a94:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a9e:	4a02      	ldr	r2, [pc, #8]	@ (8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6513      	str	r3, [r2, #80]	@ 0x50
 8003aa4:	e006      	b.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003aa6:	bf00      	nop
 8003aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003aca:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	d055      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003adc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003ae2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ae6:	d82c      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aec:	d02f      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003af2:	d826      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003af4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003af8:	d02b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003afa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003afe:	d820      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b04:	d012      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b06:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b0a:	d81a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d022      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b14:	d115      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f9a6 	bl	8004e70 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	3328      	adds	r3, #40	@ 0x28
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f001 fa4d 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b60:	4ba3      	ldr	r3, [pc, #652]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b64:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b70:	4a9f      	ldr	r2, [pc, #636]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b72:	430b      	orrs	r3, r1
 8003b74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b76:	e003      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b96:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	d037      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003baa:	d00e      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003bac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003bb0:	d816      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d018      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003bb6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003bba:	d111      	bne.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4a8b      	ldr	r2, [pc, #556]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bc8:	e00f      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bce:	3308      	adds	r3, #8
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f001 f94c 	bl	8004e70 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003bf2:	4b7f      	ldr	r3, [pc, #508]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bf6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c00:	4a7b      	ldr	r2, [pc, #492]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c26:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	d039      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d81c      	bhi.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003c40 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c40:	08003c7d 	.word	0x08003c7d
 8003c44:	08003c51 	.word	0x08003c51
 8003c48:	08003c5f 	.word	0x08003c5f
 8003c4c:	08003c7d 	.word	0x08003c7d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c50:	4b67      	ldr	r3, [pc, #412]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c54:	4a66      	ldr	r2, [pc, #408]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c5c:	e00f      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c62:	3308      	adds	r3, #8
 8003c64:	2102      	movs	r1, #2
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f902 	bl	8004e70 <RCCEx_PLL2_Config>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c72:	e004      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c7a:	e000      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c86:	4b5a      	ldr	r3, [pc, #360]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c8a:	f023 0103 	bic.w	r1, r3, #3
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c94:	4a56      	ldr	r2, [pc, #344]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c96:	430b      	orrs	r3, r1
 8003c98:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c9a:	e003      	b.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cac:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003cba:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	f000 809f 	beq.w	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cc6:	4b4b      	ldr	r3, [pc, #300]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a4a      	ldr	r2, [pc, #296]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003cd0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003cd2:	f7fd fb73 	bl	80013bc <HAL_GetTick>
 8003cd6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cda:	e00b      	b.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cdc:	f7fd fb6e 	bl	80013bc <HAL_GetTick>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	2b64      	cmp	r3, #100	@ 0x64
 8003cea:	d903      	bls.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003cec:	2303      	movs	r3, #3
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e005      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003cf4:	4b3f      	ldr	r3, [pc, #252]	@ (8003df4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d0ed      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d179      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d08:	4b39      	ldr	r3, [pc, #228]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d14:	4053      	eors	r3, r2
 8003d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d015      	beq.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d1e:	4b34      	ldr	r3, [pc, #208]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d26:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003d2a:	4b31      	ldr	r3, [pc, #196]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d2e:	4a30      	ldr	r2, [pc, #192]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d34:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003d36:	4b2e      	ldr	r3, [pc, #184]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d40:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003d42:	4a2b      	ldr	r2, [pc, #172]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003d48:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d52:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d56:	d118      	bne.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d58:	f7fd fb30 	bl	80013bc <HAL_GetTick>
 8003d5c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d60:	e00d      	b.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d62:	f7fd fb2b 	bl	80013bc <HAL_GetTick>
 8003d66:	4602      	mov	r2, r0
 8003d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d6c:	1ad2      	subs	r2, r2, r3
 8003d6e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d903      	bls.n	8003d7e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d7c:	e005      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d7e:	4b1c      	ldr	r3, [pc, #112]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0eb      	beq.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d129      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003da2:	d10e      	bne.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003da4:	4b12      	ldr	r3, [pc, #72]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003db4:	091a      	lsrs	r2, r3, #4
 8003db6:	4b10      	ldr	r3, [pc, #64]	@ (8003df8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003db8:	4013      	ands	r3, r2
 8003dba:	4a0d      	ldr	r2, [pc, #52]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbc:	430b      	orrs	r3, r1
 8003dbe:	6113      	str	r3, [r2, #16]
 8003dc0:	e005      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dc8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003dcc:	6113      	str	r3, [r2, #16]
 8003dce:	4b08      	ldr	r3, [pc, #32]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dd0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dde:	4a04      	ldr	r2, [pc, #16]	@ (8003df0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de0:	430b      	orrs	r3, r1
 8003de2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de4:	e00e      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003de6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003dee:	e009      	b.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003df0:	58024400 	.word	0x58024400
 8003df4:	58024800 	.word	0x58024800
 8003df8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f002 0301 	and.w	r3, r2, #1
 8003e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e14:	2300      	movs	r3, #0
 8003e16:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e1a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e1e:	460b      	mov	r3, r1
 8003e20:	4313      	orrs	r3, r2
 8003e22:	f000 8089 	beq.w	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e2c:	2b28      	cmp	r3, #40	@ 0x28
 8003e2e:	d86b      	bhi.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003e30:	a201      	add	r2, pc, #4	@ (adr r2, 8003e38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e36:	bf00      	nop
 8003e38:	08003f11 	.word	0x08003f11
 8003e3c:	08003f09 	.word	0x08003f09
 8003e40:	08003f09 	.word	0x08003f09
 8003e44:	08003f09 	.word	0x08003f09
 8003e48:	08003f09 	.word	0x08003f09
 8003e4c:	08003f09 	.word	0x08003f09
 8003e50:	08003f09 	.word	0x08003f09
 8003e54:	08003f09 	.word	0x08003f09
 8003e58:	08003edd 	.word	0x08003edd
 8003e5c:	08003f09 	.word	0x08003f09
 8003e60:	08003f09 	.word	0x08003f09
 8003e64:	08003f09 	.word	0x08003f09
 8003e68:	08003f09 	.word	0x08003f09
 8003e6c:	08003f09 	.word	0x08003f09
 8003e70:	08003f09 	.word	0x08003f09
 8003e74:	08003f09 	.word	0x08003f09
 8003e78:	08003ef3 	.word	0x08003ef3
 8003e7c:	08003f09 	.word	0x08003f09
 8003e80:	08003f09 	.word	0x08003f09
 8003e84:	08003f09 	.word	0x08003f09
 8003e88:	08003f09 	.word	0x08003f09
 8003e8c:	08003f09 	.word	0x08003f09
 8003e90:	08003f09 	.word	0x08003f09
 8003e94:	08003f09 	.word	0x08003f09
 8003e98:	08003f11 	.word	0x08003f11
 8003e9c:	08003f09 	.word	0x08003f09
 8003ea0:	08003f09 	.word	0x08003f09
 8003ea4:	08003f09 	.word	0x08003f09
 8003ea8:	08003f09 	.word	0x08003f09
 8003eac:	08003f09 	.word	0x08003f09
 8003eb0:	08003f09 	.word	0x08003f09
 8003eb4:	08003f09 	.word	0x08003f09
 8003eb8:	08003f11 	.word	0x08003f11
 8003ebc:	08003f09 	.word	0x08003f09
 8003ec0:	08003f09 	.word	0x08003f09
 8003ec4:	08003f09 	.word	0x08003f09
 8003ec8:	08003f09 	.word	0x08003f09
 8003ecc:	08003f09 	.word	0x08003f09
 8003ed0:	08003f09 	.word	0x08003f09
 8003ed4:	08003f09 	.word	0x08003f09
 8003ed8:	08003f11 	.word	0x08003f11
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee0:	3308      	adds	r3, #8
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f000 ffc3 	bl	8004e70 <RCCEx_PLL2_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003ef0:	e00f      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef6:	3328      	adds	r3, #40	@ 0x28
 8003ef8:	2101      	movs	r1, #1
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f86a 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003f00:	4603      	mov	r3, r0
 8003f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f06:	e004      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0e:	e000      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f1a:	4bbf      	ldr	r3, [pc, #764]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f1e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f28:	4abb      	ldr	r2, [pc, #748]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f2e:	e003      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	f002 0302 	and.w	r3, r2, #2
 8003f44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f48:	2300      	movs	r3, #0
 8003f4a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003f4e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003f52:	460b      	mov	r3, r1
 8003f54:	4313      	orrs	r3, r2
 8003f56:	d041      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d824      	bhi.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003f62:	a201      	add	r2, pc, #4	@ (adr r2, 8003f68 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f68:	08003fb5 	.word	0x08003fb5
 8003f6c:	08003f81 	.word	0x08003f81
 8003f70:	08003f97 	.word	0x08003f97
 8003f74:	08003fb5 	.word	0x08003fb5
 8003f78:	08003fb5 	.word	0x08003fb5
 8003f7c:	08003fb5 	.word	0x08003fb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f84:	3308      	adds	r3, #8
 8003f86:	2101      	movs	r1, #1
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 ff71 	bl	8004e70 <RCCEx_PLL2_Config>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f94:	e00f      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9a:	3328      	adds	r3, #40	@ 0x28
 8003f9c:	2101      	movs	r1, #1
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f001 f818 	bl	8004fd4 <RCCEx_PLL3_Config>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003faa:	e004      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fb2:	e000      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003fb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003fbe:	4b96      	ldr	r3, [pc, #600]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	f023 0107 	bic.w	r1, r3, #7
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fcc:	4a92      	ldr	r2, [pc, #584]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f002 0304 	and.w	r3, r2, #4
 8003fe8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fec:	2300      	movs	r3, #0
 8003fee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ff2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	d044      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004004:	2b05      	cmp	r3, #5
 8004006:	d825      	bhi.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004008:	a201      	add	r2, pc, #4	@ (adr r2, 8004010 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800400e:	bf00      	nop
 8004010:	0800405d 	.word	0x0800405d
 8004014:	08004029 	.word	0x08004029
 8004018:	0800403f 	.word	0x0800403f
 800401c:	0800405d 	.word	0x0800405d
 8004020:	0800405d 	.word	0x0800405d
 8004024:	0800405d 	.word	0x0800405d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402c:	3308      	adds	r3, #8
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f000 ff1d 	bl	8004e70 <RCCEx_PLL2_Config>
 8004036:	4603      	mov	r3, r0
 8004038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800403c:	e00f      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	3328      	adds	r3, #40	@ 0x28
 8004044:	2101      	movs	r1, #1
 8004046:	4618      	mov	r0, r3
 8004048:	f000 ffc4 	bl	8004fd4 <RCCEx_PLL3_Config>
 800404c:	4603      	mov	r3, r0
 800404e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004052:	e004      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800405a:	e000      	b.n	800405e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800405c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	2b00      	cmp	r3, #0
 8004064:	d10b      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004066:	4b6c      	ldr	r3, [pc, #432]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004068:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800406a:	f023 0107 	bic.w	r1, r3, #7
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004076:	4a68      	ldr	r2, [pc, #416]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004078:	430b      	orrs	r3, r1
 800407a:	6593      	str	r3, [r2, #88]	@ 0x58
 800407c:	e003      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800408e:	f002 0320 	and.w	r3, r2, #32
 8004092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004096:	2300      	movs	r3, #0
 8004098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800409c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040a0:	460b      	mov	r3, r1
 80040a2:	4313      	orrs	r3, r2
 80040a4:	d055      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b2:	d033      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80040b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80040b8:	d82c      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040be:	d02f      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80040c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040c4:	d826      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040c6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040ca:	d02b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80040cc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80040d0:	d820      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040d6:	d012      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040dc:	d81a      	bhi.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d022      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80040e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80040e6:	d115      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ec:	3308      	adds	r3, #8
 80040ee:	2100      	movs	r1, #0
 80040f0:	4618      	mov	r0, r3
 80040f2:	f000 febd 	bl	8004e70 <RCCEx_PLL2_Config>
 80040f6:	4603      	mov	r3, r0
 80040f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040fc:	e015      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	3328      	adds	r3, #40	@ 0x28
 8004104:	2102      	movs	r1, #2
 8004106:	4618      	mov	r0, r3
 8004108:	f000 ff64 	bl	8004fd4 <RCCEx_PLL3_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004112:	e00a      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800411a:	e006      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800411c:	bf00      	nop
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004120:	bf00      	nop
 8004122:	e002      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004124:	bf00      	nop
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b39      	ldr	r3, [pc, #228]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004134:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004136:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	4a35      	ldr	r2, [pc, #212]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6553      	str	r3, [r2, #84]	@ 0x54
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800415e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004162:	2300      	movs	r3, #0
 8004164:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004168:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800416c:	460b      	mov	r3, r1
 800416e:	4313      	orrs	r3, r2
 8004170:	d058      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800417a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800417e:	d033      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004180:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004184:	d82c      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004186:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800418a:	d02f      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800418c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004190:	d826      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004192:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004196:	d02b      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004198:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800419c:	d820      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800419e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a2:	d012      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80041a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041a8:	d81a      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d022      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80041ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041b2:	d115      	bne.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2100      	movs	r1, #0
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 fe57 	bl	8004e70 <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041c8:	e015      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2102      	movs	r1, #2
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fefe 	bl	8004fd4 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80041de:	e00a      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e006      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041e8:	bf00      	nop
 80041ea:	e004      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041ec:	bf00      	nop
 80041ee:	e002      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f0:	bf00      	nop
 80041f2:	e000      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80041f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10e      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80041fe:	4b06      	ldr	r3, [pc, #24]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004202:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004206:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800420e:	4a02      	ldr	r2, [pc, #8]	@ (8004218 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004210:	430b      	orrs	r3, r1
 8004212:	6593      	str	r3, [r2, #88]	@ 0x58
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004216:	bf00      	nop
 8004218:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004230:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004234:	2300      	movs	r3, #0
 8004236:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800423a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800423e:	460b      	mov	r3, r1
 8004240:	4313      	orrs	r3, r2
 8004242:	d055      	beq.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800424c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004250:	d033      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004252:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004256:	d82c      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004258:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800425c:	d02f      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800425e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004262:	d826      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004264:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004268:	d02b      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800426a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800426e:	d820      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004270:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004274:	d012      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004276:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800427a:	d81a      	bhi.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800427c:	2b00      	cmp	r3, #0
 800427e:	d022      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	d115      	bne.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	3308      	adds	r3, #8
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fdee 	bl	8004e70 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800429a:	e015      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	3328      	adds	r3, #40	@ 0x28
 80042a2:	2102      	movs	r1, #2
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fe95 	bl	8004fd4 <RCCEx_PLL3_Config>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80042b0:	e00a      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042b8:	e006      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042ba:	bf00      	nop
 80042bc:	e004      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042be:	bf00      	nop
 80042c0:	e002      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c2:	bf00      	nop
 80042c4:	e000      	b.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80042c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d10b      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80042d0:	4ba1      	ldr	r3, [pc, #644]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042e0:	4a9d      	ldr	r2, [pc, #628]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80042e6:	e003      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80042f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f8:	f002 0308 	and.w	r3, r2, #8
 80042fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004300:	2300      	movs	r3, #0
 8004302:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004306:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800430a:	460b      	mov	r3, r1
 800430c:	4313      	orrs	r3, r2
 800430e:	d01e      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d10c      	bne.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004322:	3328      	adds	r3, #40	@ 0x28
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fe54 	bl	8004fd4 <RCCEx_PLL3_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004338:	4b87      	ldr	r3, [pc, #540]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800433c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004348:	4a83      	ldr	r2, [pc, #524]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	430b      	orrs	r3, r1
 800434c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	f002 0310 	and.w	r3, r2, #16
 800435a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800435e:	2300      	movs	r3, #0
 8004360:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004364:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004368:	460b      	mov	r3, r1
 800436a:	4313      	orrs	r3, r2
 800436c:	d01e      	beq.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004376:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800437a:	d10c      	bne.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	3328      	adds	r3, #40	@ 0x28
 8004382:	2102      	movs	r1, #2
 8004384:	4618      	mov	r0, r3
 8004386:	f000 fe25 	bl	8004fd4 <RCCEx_PLL3_Config>
 800438a:	4603      	mov	r3, r0
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004396:	4b70      	ldr	r3, [pc, #448]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800439a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043a6:	4a6c      	ldr	r2, [pc, #432]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80043ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80043b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043bc:	2300      	movs	r3, #0
 80043be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043c2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80043c6:	460b      	mov	r3, r1
 80043c8:	4313      	orrs	r3, r2
 80043ca:	d03e      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80043cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043d8:	d022      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80043da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80043de:	d81b      	bhi.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80043e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043e8:	d00b      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80043ea:	e015      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f0:	3308      	adds	r3, #8
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd3b 	bl	8004e70 <RCCEx_PLL2_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004400:	e00f      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2102      	movs	r1, #2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fde2 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004416:	e004      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800441e:	e000      	b.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004420:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004422:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800442a:	4b4b      	ldr	r3, [pc, #300]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800442e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004436:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800443a:	4a47      	ldr	r2, [pc, #284]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800443c:	430b      	orrs	r3, r1
 800443e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004440:	e003      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004442:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004446:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800444a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004452:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004456:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004458:	2300      	movs	r3, #0
 800445a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800445c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004460:	460b      	mov	r3, r1
 8004462:	4313      	orrs	r3, r2
 8004464:	d03b      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004472:	d01f      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004474:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004478:	d818      	bhi.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800447e:	d003      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004480:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004484:	d007      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004486:	e011      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004488:	4b33      	ldr	r3, [pc, #204]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800448c:	4a32      	ldr	r2, [pc, #200]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004492:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004494:	e00f      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3328      	adds	r3, #40	@ 0x28
 800449c:	2101      	movs	r1, #1
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fd98 	bl	8004fd4 <RCCEx_PLL3_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80044aa:	e004      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044b2:	e000      	b.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80044b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10b      	bne.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80044be:	4b26      	ldr	r3, [pc, #152]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d0:	430b      	orrs	r3, r1
 80044d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80044d4:	e003      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80044ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80044ec:	2300      	movs	r3, #0
 80044ee:	677b      	str	r3, [r7, #116]	@ 0x74
 80044f0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d034      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004500:	2b00      	cmp	r3, #0
 8004502:	d003      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004508:	d007      	beq.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800450a:	e011      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b12      	ldr	r3, [pc, #72]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800450e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004510:	4a11      	ldr	r2, [pc, #68]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004518:	e00e      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451e:	3308      	adds	r3, #8
 8004520:	2102      	movs	r1, #2
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fca4 	bl	8004e70 <RCCEx_PLL2_Config>
 8004528:	4603      	mov	r3, r0
 800452a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800452e:	e003      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004536:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004538:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10d      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004540:	4b05      	ldr	r3, [pc, #20]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004544:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	4a02      	ldr	r2, [pc, #8]	@ (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004550:	430b      	orrs	r3, r1
 8004552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004554:	e006      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004556:	bf00      	nop
 8004558:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800455c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004572:	2300      	movs	r3, #0
 8004574:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004576:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800457a:	460b      	mov	r3, r1
 800457c:	4313      	orrs	r3, r2
 800457e:	d00c      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004580:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004584:	3328      	adds	r3, #40	@ 0x28
 8004586:	2102      	movs	r1, #2
 8004588:	4618      	mov	r0, r3
 800458a:	f000 fd23 	bl	8004fd4 <RCCEx_PLL3_Config>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800459a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80045a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a8:	2300      	movs	r3, #0
 80045aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80045ac:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80045b0:	460b      	mov	r3, r1
 80045b2:	4313      	orrs	r3, r2
 80045b4:	d038      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80045b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c2:	d018      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80045c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045c8:	d811      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ce:	d014      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80045d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045d4:	d80b      	bhi.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d011      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80045da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045de:	d106      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045e0:	4bc3      	ldr	r3, [pc, #780]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e4:	4ac2      	ldr	r2, [pc, #776]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80045ec:	e008      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045f4:	e004      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045f6:	bf00      	nop
 80045f8:	e002      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80045fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004604:	2b00      	cmp	r3, #0
 8004606:	d10b      	bne.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004608:	4bb9      	ldr	r3, [pc, #740]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004618:	4ab5      	ldr	r2, [pc, #724]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461a:	430b      	orrs	r3, r1
 800461c:	6553      	str	r3, [r2, #84]	@ 0x54
 800461e:	e003      	b.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004630:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004634:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004636:	2300      	movs	r3, #0
 8004638:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800463a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800463e:	460b      	mov	r3, r1
 8004640:	4313      	orrs	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004644:	4baa      	ldr	r3, [pc, #680]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004648:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800464c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004650:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004652:	4aa7      	ldr	r2, [pc, #668]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004654:	430b      	orrs	r3, r1
 8004656:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800465c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004660:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004664:	653b      	str	r3, [r7, #80]	@ 0x50
 8004666:	2300      	movs	r3, #0
 8004668:	657b      	str	r3, [r7, #84]	@ 0x54
 800466a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800466e:	460b      	mov	r3, r1
 8004670:	4313      	orrs	r3, r2
 8004672:	d00a      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004674:	4b9e      	ldr	r3, [pc, #632]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800467c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004680:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004684:	4a9a      	ldr	r2, [pc, #616]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004686:	430b      	orrs	r3, r1
 8004688:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800468a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004698:	2300      	movs	r3, #0
 800469a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800469c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80046a0:	460b      	mov	r3, r1
 80046a2:	4313      	orrs	r3, r2
 80046a4:	d009      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80046a6:	4b92      	ldr	r3, [pc, #584]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046aa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80046ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b4:	4a8e      	ldr	r2, [pc, #568]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b6:	430b      	orrs	r3, r1
 80046b8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80046c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80046c8:	2300      	movs	r3, #0
 80046ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80046cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80046d0:	460b      	mov	r3, r1
 80046d2:	4313      	orrs	r3, r2
 80046d4:	d00e      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046d6:	4b86      	ldr	r3, [pc, #536]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	4a85      	ldr	r2, [pc, #532]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046dc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80046e0:	6113      	str	r3, [r2, #16]
 80046e2:	4b83      	ldr	r3, [pc, #524]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e4:	6919      	ldr	r1, [r3, #16]
 80046e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80046ee:	4a80      	ldr	r2, [pc, #512]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046f0:	430b      	orrs	r3, r1
 80046f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046fc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004702:	2300      	movs	r3, #0
 8004704:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004706:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800470a:	460b      	mov	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004710:	4b77      	ldr	r3, [pc, #476]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004712:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004714:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800471c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800471e:	4a74      	ldr	r2, [pc, #464]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004720:	430b      	orrs	r3, r1
 8004722:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004730:	633b      	str	r3, [r7, #48]	@ 0x30
 8004732:	2300      	movs	r3, #0
 8004734:	637b      	str	r3, [r7, #52]	@ 0x34
 8004736:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800473a:	460b      	mov	r3, r1
 800473c:	4313      	orrs	r3, r2
 800473e:	d00a      	beq.n	8004756 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004740:	4b6b      	ldr	r3, [pc, #428]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004742:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004744:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004750:	4a67      	ldr	r2, [pc, #412]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004752:	430b      	orrs	r3, r1
 8004754:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800475a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475e:	2100      	movs	r1, #0
 8004760:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004768:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800476c:	460b      	mov	r3, r1
 800476e:	4313      	orrs	r3, r2
 8004770:	d011      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004776:	3308      	adds	r3, #8
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f000 fb78 	bl	8004e70 <RCCEx_PLL2_Config>
 8004780:	4603      	mov	r3, r0
 8004782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004786:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800479a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800479e:	2100      	movs	r1, #0
 80047a0:	6239      	str	r1, [r7, #32]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80047ac:	460b      	mov	r3, r1
 80047ae:	4313      	orrs	r3, r2
 80047b0:	d011      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b6:	3308      	adds	r3, #8
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fb58 	bl	8004e70 <RCCEx_PLL2_Config>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80047d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047de:	2100      	movs	r1, #0
 80047e0:	61b9      	str	r1, [r7, #24]
 80047e2:	f003 0304 	and.w	r3, r3, #4
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80047ec:	460b      	mov	r3, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	d011      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80047f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047f6:	3308      	adds	r3, #8
 80047f8:	2102      	movs	r1, #2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f000 fb38 	bl	8004e70 <RCCEx_PLL2_Config>
 8004800:	4603      	mov	r3, r0
 8004802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	2100      	movs	r1, #0
 8004820:	6139      	str	r1, [r7, #16]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d011      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004832:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004836:	3328      	adds	r3, #40	@ 0x28
 8004838:	2100      	movs	r1, #0
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fbca 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004840:	4603      	mov	r3, r0
 8004842:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800484e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800485a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800485e:	2100      	movs	r1, #0
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	60fb      	str	r3, [r7, #12]
 8004868:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800486c:	460b      	mov	r3, r1
 800486e:	4313      	orrs	r3, r2
 8004870:	d011      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	3328      	adds	r3, #40	@ 0x28
 8004878:	2101      	movs	r1, #1
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fbaa 	bl	8004fd4 <RCCEx_PLL3_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800488e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800489a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489e:	2100      	movs	r1, #0
 80048a0:	6039      	str	r1, [r7, #0]
 80048a2:	f003 0320 	and.w	r3, r3, #32
 80048a6:	607b      	str	r3, [r7, #4]
 80048a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80048ac:	460b      	mov	r3, r1
 80048ae:	4313      	orrs	r3, r2
 80048b0:	d011      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80048b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b6:	3328      	adds	r3, #40	@ 0x28
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f000 fb8a 	bl	8004fd4 <RCCEx_PLL3_Config>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80048d6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80048de:	2300      	movs	r3, #0
 80048e0:	e000      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80048ea:	46bd      	mov	sp, r7
 80048ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048f0:	58024400 	.word	0x58024400

080048f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80048f8:	f7fe fd96 	bl	8003428 <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4904      	ldr	r1, [pc, #16]	@ (800491c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	f003 031f 	and.w	r3, r3, #31
 8004910:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004914:	4618      	mov	r0, r3
 8004916:	bd80      	pop	{r7, pc}
 8004918:	58024400 	.word	0x58024400
 800491c:	08008734 	.word	0x08008734

08004920 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004920:	b480      	push	{r7}
 8004922:	b089      	sub	sp, #36	@ 0x24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004928:	4ba1      	ldr	r3, [pc, #644]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492c:	f003 0303 	and.w	r3, r3, #3
 8004930:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004932:	4b9f      	ldr	r3, [pc, #636]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004936:	0b1b      	lsrs	r3, r3, #12
 8004938:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800493c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800493e:	4b9c      	ldr	r3, [pc, #624]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	091b      	lsrs	r3, r3, #4
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800494a:	4b99      	ldr	r3, [pc, #612]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800494c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494e:	08db      	lsrs	r3, r3, #3
 8004950:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004954:	693a      	ldr	r2, [r7, #16]
 8004956:	fb02 f303 	mul.w	r3, r2, r3
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004962:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8111 	beq.w	8004b90 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	2b02      	cmp	r3, #2
 8004972:	f000 8083 	beq.w	8004a7c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	2b02      	cmp	r3, #2
 800497a:	f200 80a1 	bhi.w	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d003      	beq.n	800498c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	2b01      	cmp	r3, #1
 8004988:	d056      	beq.n	8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800498a:	e099      	b.n	8004ac0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0320 	and.w	r3, r3, #32
 8004994:	2b00      	cmp	r3, #0
 8004996:	d02d      	beq.n	80049f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004998:	4b85      	ldr	r3, [pc, #532]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	08db      	lsrs	r3, r3, #3
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	4a84      	ldr	r2, [pc, #528]	@ (8004bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80049a4:	fa22 f303 	lsr.w	r3, r2, r3
 80049a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	ee07 3a90 	vmov	s15, r3
 80049b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	ee07 3a90 	vmov	s15, r3
 80049ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049c2:	4b7b      	ldr	r3, [pc, #492]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049d6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049f2:	e087      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004bbc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a06:	4b6a      	ldr	r3, [pc, #424]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a1a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a36:	e065      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	ee07 3a90 	vmov	s15, r3
 8004a3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a42:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b59      	ldr	r3, [pc, #356]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a7a:	e043      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b48      	ldr	r3, [pc, #288]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abe:	e021      	b.n	8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b37      	ldr	r3, [pc, #220]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b02:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b04:	4b2a      	ldr	r3, [pc, #168]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b08:	0a5b      	lsrs	r3, r3, #9
 8004b0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2a:	ee17 2a90 	vmov	r2, s15
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004b32:	4b1f      	ldr	r3, [pc, #124]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b36:	0c1b      	lsrs	r3, r3, #16
 8004b38:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3c:	ee07 3a90 	vmov	s15, r3
 8004b40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b48:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b50:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b58:	ee17 2a90 	vmov	r2, s15
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004b60:	4b13      	ldr	r3, [pc, #76]	@ (8004bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b64:	0e1b      	lsrs	r3, r3, #24
 8004b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b6a:	ee07 3a90 	vmov	s15, r3
 8004b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b72:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b86:	ee17 2a90 	vmov	r2, s15
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
}
 8004ba2:	bf00      	nop
 8004ba4:	3724      	adds	r7, #36	@ 0x24
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	58024400 	.word	0x58024400
 8004bb4:	03d09000 	.word	0x03d09000
 8004bb8:	46000000 	.word	0x46000000
 8004bbc:	4c742400 	.word	0x4c742400
 8004bc0:	4a742400 	.word	0x4a742400
 8004bc4:	4af42400 	.word	0x4af42400

08004bc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b089      	sub	sp, #36	@ 0x24
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004bd0:	4ba1      	ldr	r3, [pc, #644]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004bda:	4b9f      	ldr	r3, [pc, #636]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	0d1b      	lsrs	r3, r3, #20
 8004be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004be4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004be6:	4b9c      	ldr	r3, [pc, #624]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bea:	0a1b      	lsrs	r3, r3, #8
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004bf2:	4b99      	ldr	r3, [pc, #612]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	08db      	lsrs	r3, r3, #3
 8004bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	fb02 f303 	mul.w	r3, r2, r3
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f000 8111 	beq.w	8004e38 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	f000 8083 	beq.w	8004d24 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	f200 80a1 	bhi.w	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c26:	69bb      	ldr	r3, [r7, #24]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d056      	beq.n	8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004c32:	e099      	b.n	8004d68 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004c34:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0320 	and.w	r3, r3, #32
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d02d      	beq.n	8004c9c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c40:	4b85      	ldr	r3, [pc, #532]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	08db      	lsrs	r3, r3, #3
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	4a84      	ldr	r2, [pc, #528]	@ (8004e5c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	ee07 3a90 	vmov	s15, r3
 8004c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	ee07 3a90 	vmov	s15, r3
 8004c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c6a:	4b7b      	ldr	r3, [pc, #492]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c72:	ee07 3a90 	vmov	s15, r3
 8004c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004c9a:	e087      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	ee07 3a90 	vmov	s15, r3
 8004ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004e64 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cae:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cb6:	ee07 3a90 	vmov	s15, r3
 8004cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cc2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cde:	e065      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	ee07 3a90 	vmov	s15, r3
 8004ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cf2:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cfa:	ee07 3a90 	vmov	s15, r3
 8004cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d22:	e043      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	ee07 3a90 	vmov	s15, r3
 8004d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d36:	4b48      	ldr	r3, [pc, #288]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d3e:	ee07 3a90 	vmov	s15, r3
 8004d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d46:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d66:	e021      	b.n	8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	ee07 3a90 	vmov	s15, r3
 8004d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d7a:	4b37      	ldr	r3, [pc, #220]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d82:	ee07 3a90 	vmov	s15, r3
 8004d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004e60 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004daa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004dac:	4b2a      	ldr	r3, [pc, #168]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	0a5b      	lsrs	r3, r3, #9
 8004db2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004dc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd2:	ee17 2a90 	vmov	r2, s15
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004dda:	4b1f      	ldr	r3, [pc, #124]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	0c1b      	lsrs	r3, r3, #16
 8004de0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de4:	ee07 3a90 	vmov	s15, r3
 8004de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004df0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004df4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e00:	ee17 2a90 	vmov	r2, s15
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e08:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	0e1b      	lsrs	r3, r3, #24
 8004e0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e12:	ee07 3a90 	vmov	s15, r3
 8004e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e22:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e2e:	ee17 2a90 	vmov	r2, s15
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004e36:	e008      	b.n	8004e4a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	609a      	str	r2, [r3, #8]
}
 8004e4a:	bf00      	nop
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	58024400 	.word	0x58024400
 8004e5c:	03d09000 	.word	0x03d09000
 8004e60:	46000000 	.word	0x46000000
 8004e64:	4c742400 	.word	0x4c742400
 8004e68:	4a742400 	.word	0x4a742400
 8004e6c:	4af42400 	.word	0x4af42400

08004e70 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b084      	sub	sp, #16
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
 8004e78:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e7e:	4b53      	ldr	r3, [pc, #332]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d101      	bne.n	8004e8e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e099      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004e8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a4e      	ldr	r2, [pc, #312]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004e94:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004e98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e9a:	f7fc fa8f 	bl	80013bc <HAL_GetTick>
 8004e9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ea0:	e008      	b.n	8004eb4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ea2:	f7fc fa8b 	bl	80013bc <HAL_GetTick>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	1ad3      	subs	r3, r2, r3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d901      	bls.n	8004eb4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	e086      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004eb4:	4b45      	ldr	r3, [pc, #276]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f0      	bne.n	8004ea2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ec0:	4b42      	ldr	r3, [pc, #264]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ec4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	031b      	lsls	r3, r3, #12
 8004ece:	493f      	ldr	r1, [pc, #252]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	025b      	lsls	r3, r3, #9
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	061b      	lsls	r3, r3, #24
 8004f00:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f04:	4931      	ldr	r1, [pc, #196]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f0a:	4b30      	ldr	r3, [pc, #192]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	492d      	ldr	r1, [pc, #180]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f1c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f20:	f023 0220 	bic.w	r2, r3, #32
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	4928      	ldr	r1, [pc, #160]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004f2e:	4b27      	ldr	r3, [pc, #156]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f32:	4a26      	ldr	r2, [pc, #152]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f34:	f023 0310 	bic.w	r3, r3, #16
 8004f38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004f3a:	4b24      	ldr	r3, [pc, #144]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004f3e:	4b24      	ldr	r3, [pc, #144]	@ (8004fd0 <RCCEx_PLL2_Config+0x160>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	69d2      	ldr	r2, [r2, #28]
 8004f46:	00d2      	lsls	r2, r2, #3
 8004f48:	4920      	ldr	r1, [pc, #128]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f52:	4a1e      	ldr	r2, [pc, #120]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f54:	f043 0310 	orr.w	r3, r3, #16
 8004f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004f60:	4b1a      	ldr	r3, [pc, #104]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f64:	4a19      	ldr	r2, [pc, #100]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f66:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f6c:	e00f      	b.n	8004f8e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d106      	bne.n	8004f82 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004f74:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f78:	4a14      	ldr	r2, [pc, #80]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f80:	e005      	b.n	8004f8e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004f82:	4b12      	ldr	r3, [pc, #72]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	4a11      	ldr	r2, [pc, #68]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f88:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004f8c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a0e      	ldr	r2, [pc, #56]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004f94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f9a:	f7fc fa0f 	bl	80013bc <HAL_GetTick>
 8004f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004fa2:	f7fc fa0b 	bl	80013bc <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e006      	b.n	8004fc2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004fb4:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <RCCEx_PLL2_Config+0x15c>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3710      	adds	r7, #16
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bd80      	pop	{r7, pc}
 8004fca:	bf00      	nop
 8004fcc:	58024400 	.word	0x58024400
 8004fd0:	ffff0007 	.word	0xffff0007

08004fd4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004fe2:	4b53      	ldr	r3, [pc, #332]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe6:	f003 0303 	and.w	r3, r3, #3
 8004fea:	2b03      	cmp	r3, #3
 8004fec:	d101      	bne.n	8004ff2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e099      	b.n	8005126 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ff2:	4b4f      	ldr	r3, [pc, #316]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a4e      	ldr	r2, [pc, #312]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8004ff8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ffc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffe:	f7fc f9dd 	bl	80013bc <HAL_GetTick>
 8005002:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005004:	e008      	b.n	8005018 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005006:	f7fc f9d9 	bl	80013bc <HAL_GetTick>
 800500a:	4602      	mov	r2, r0
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	2b02      	cmp	r3, #2
 8005012:	d901      	bls.n	8005018 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e086      	b.n	8005126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005018:	4b45      	ldr	r3, [pc, #276]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1f0      	bne.n	8005006 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005024:	4b42      	ldr	r3, [pc, #264]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005028:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	051b      	lsls	r3, r3, #20
 8005032:	493f      	ldr	r1, [pc, #252]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005034:	4313      	orrs	r3, r2
 8005036:	628b      	str	r3, [r1, #40]	@ 0x28
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	3b01      	subs	r3, #1
 800503e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	3b01      	subs	r3, #1
 8005048:	025b      	lsls	r3, r3, #9
 800504a:	b29b      	uxth	r3, r3
 800504c:	431a      	orrs	r2, r3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	3b01      	subs	r3, #1
 8005054:	041b      	lsls	r3, r3, #16
 8005056:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	3b01      	subs	r3, #1
 8005062:	061b      	lsls	r3, r3, #24
 8005064:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005068:	4931      	ldr	r1, [pc, #196]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800506a:	4313      	orrs	r3, r2
 800506c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800506e:	4b30      	ldr	r3, [pc, #192]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005072:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	695b      	ldr	r3, [r3, #20]
 800507a:	492d      	ldr	r1, [pc, #180]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800507c:	4313      	orrs	r3, r2
 800507e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005080:	4b2b      	ldr	r3, [pc, #172]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005084:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	4928      	ldr	r1, [pc, #160]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800508e:	4313      	orrs	r3, r2
 8005090:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005092:	4b27      	ldr	r3, [pc, #156]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005094:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005096:	4a26      	ldr	r2, [pc, #152]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 8005098:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800509c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800509e:	4b24      	ldr	r3, [pc, #144]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050a2:	4b24      	ldr	r3, [pc, #144]	@ (8005134 <RCCEx_PLL3_Config+0x160>)
 80050a4:	4013      	ands	r3, r2
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	69d2      	ldr	r2, [r2, #28]
 80050aa:	00d2      	lsls	r2, r2, #3
 80050ac:	4920      	ldr	r1, [pc, #128]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80050b2:	4b1f      	ldr	r3, [pc, #124]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b6:	4a1e      	ldr	r2, [pc, #120]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d106      	bne.n	80050d2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80050c4:	4b1a      	ldr	r3, [pc, #104]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050c8:	4a19      	ldr	r2, [pc, #100]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80050ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050d0:	e00f      	b.n	80050f2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d106      	bne.n	80050e6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80050d8:	4b15      	ldr	r3, [pc, #84]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050dc:	4a14      	ldr	r2, [pc, #80]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050de:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80050e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050e4:	e005      	b.n	80050f2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80050e6:	4b12      	ldr	r3, [pc, #72]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	4a11      	ldr	r2, [pc, #68]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050ec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80050f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80050f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0e      	ldr	r2, [pc, #56]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 80050f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fe:	f7fc f95d 	bl	80013bc <HAL_GetTick>
 8005102:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005104:	e008      	b.n	8005118 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005106:	f7fc f959 	bl	80013bc <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d901      	bls.n	8005118 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e006      	b.n	8005126 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005118:	4b05      	ldr	r3, [pc, #20]	@ (8005130 <RCCEx_PLL3_Config+0x15c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0f0      	beq.n	8005106 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005124:	7bfb      	ldrb	r3, [r7, #15]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	58024400 	.word	0x58024400
 8005134:	ffff0007 	.word	0xffff0007

08005138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e042      	b.n	80051d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005150:	2b00      	cmp	r3, #0
 8005152:	d106      	bne.n	8005162 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f7fb fea9 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2224      	movs	r2, #36	@ 0x24
 8005166:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0201 	bic.w	r2, r2, #1
 8005178:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fee6 	bl	8005f54 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f97b 	bl	8005484 <UART_SetConfig>
 800518e:	4603      	mov	r3, r0
 8005190:	2b01      	cmp	r3, #1
 8005192:	d101      	bne.n	8005198 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e01b      	b.n	80051d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 ff65 	bl	8006098 <UART_CheckIdleState>
 80051ce:	4603      	mov	r3, r0
}
 80051d0:	4618      	mov	r0, r3
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b08a      	sub	sp, #40	@ 0x28
 80051dc:	af02      	add	r7, sp, #8
 80051de:	60f8      	str	r0, [r7, #12]
 80051e0:	60b9      	str	r1, [r7, #8]
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	4613      	mov	r3, r2
 80051e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ee:	2b20      	cmp	r3, #32
 80051f0:	d17b      	bne.n	80052ea <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d002      	beq.n	80051fe <HAL_UART_Transmit+0x26>
 80051f8:	88fb      	ldrh	r3, [r7, #6]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e074      	b.n	80052ec <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	@ 0x21
 800520e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005212:	f7fc f8d3 	bl	80013bc <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	88fa      	ldrh	r2, [r7, #6]
 8005224:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005230:	d108      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	61bb      	str	r3, [r7, #24]
 8005242:	e003      	b.n	800524c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005248:	2300      	movs	r3, #0
 800524a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800524c:	e030      	b.n	80052b0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	9300      	str	r3, [sp, #0]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2200      	movs	r2, #0
 8005256:	2180      	movs	r1, #128	@ 0x80
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f000 ffc7 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 800525e:	4603      	mov	r3, r0
 8005260:	2b00      	cmp	r3, #0
 8005262:	d005      	beq.n	8005270 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2220      	movs	r2, #32
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e03d      	b.n	80052ec <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10b      	bne.n	800528e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	881b      	ldrh	r3, [r3, #0]
 800527a:	461a      	mov	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005284:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	3302      	adds	r3, #2
 800528a:	61bb      	str	r3, [r7, #24]
 800528c:	e007      	b.n	800529e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	781a      	ldrb	r2, [r3, #0]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005298:	69fb      	ldr	r3, [r7, #28]
 800529a:	3301      	adds	r3, #1
 800529c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	3b01      	subs	r3, #1
 80052a8:	b29a      	uxth	r2, r3
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1c8      	bne.n	800524e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	2200      	movs	r2, #0
 80052c4:	2140      	movs	r1, #64	@ 0x40
 80052c6:	68f8      	ldr	r0, [r7, #12]
 80052c8:	f000 ff90 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d005      	beq.n	80052de <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2220      	movs	r2, #32
 80052d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e006      	b.n	80052ec <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	2220      	movs	r2, #32
 80052e2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	e000      	b.n	80052ec <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80052ea:	2302      	movs	r3, #2
  }
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b08a      	sub	sp, #40	@ 0x28
 80052f8:	af02      	add	r7, sp, #8
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800530a:	2b20      	cmp	r3, #32
 800530c:	f040 80b5 	bne.w	800547a <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d002      	beq.n	800531c <HAL_UART_Receive+0x28>
 8005316:	88fb      	ldrh	r3, [r7, #6]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d101      	bne.n	8005320 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e0ad      	b.n	800547c <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2222      	movs	r2, #34	@ 0x22
 800532c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005336:	f7fc f841 	bl	80013bc <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005354:	d10e      	bne.n	8005374 <HAL_UART_Receive+0x80>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d105      	bne.n	800536a <HAL_UART_Receive+0x76>
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8005364:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005368:	e02d      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	22ff      	movs	r2, #255	@ 0xff
 800536e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005372:	e028      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d10d      	bne.n	8005398 <HAL_UART_Receive+0xa4>
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d104      	bne.n	800538e <HAL_UART_Receive+0x9a>
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	22ff      	movs	r2, #255	@ 0xff
 8005388:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800538c:	e01b      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	227f      	movs	r2, #127	@ 0x7f
 8005392:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8005396:	e016      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80053a0:	d10d      	bne.n	80053be <HAL_UART_Receive+0xca>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	691b      	ldr	r3, [r3, #16]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d104      	bne.n	80053b4 <HAL_UART_Receive+0xc0>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	227f      	movs	r2, #127	@ 0x7f
 80053ae:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053b2:	e008      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	223f      	movs	r2, #63	@ 0x3f
 80053b8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80053bc:	e003      	b.n	80053c6 <HAL_UART_Receive+0xd2>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80053cc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d6:	d108      	bne.n	80053ea <HAL_UART_Receive+0xf6>
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d104      	bne.n	80053ea <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	61bb      	str	r3, [r7, #24]
 80053e8:	e003      	b.n	80053f2 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80053f2:	e036      	b.n	8005462 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	9300      	str	r3, [sp, #0]
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	2200      	movs	r2, #0
 80053fc:	2120      	movs	r1, #32
 80053fe:	68f8      	ldr	r0, [r7, #12]
 8005400:	f000 fef4 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2220      	movs	r2, #32
 800540e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e032      	b.n	800547c <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d10c      	bne.n	8005436 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	b29a      	uxth	r2, r3
 8005424:	8a7b      	ldrh	r3, [r7, #18]
 8005426:	4013      	ands	r3, r2
 8005428:	b29a      	uxth	r2, r3
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800542e:	69bb      	ldr	r3, [r7, #24]
 8005430:	3302      	adds	r3, #2
 8005432:	61bb      	str	r3, [r7, #24]
 8005434:	e00c      	b.n	8005450 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543c:	b2da      	uxtb	r2, r3
 800543e:	8a7b      	ldrh	r3, [r7, #18]
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4013      	ands	r3, r2
 8005444:	b2da      	uxtb	r2, r3
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	3301      	adds	r3, #1
 800544e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005456:	b29b      	uxth	r3, r3
 8005458:	3b01      	subs	r3, #1
 800545a:	b29a      	uxth	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005468:	b29b      	uxth	r3, r3
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1c2      	bne.n	80053f4 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2220      	movs	r2, #32
 8005472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 8005476:	2300      	movs	r3, #0
 8005478:	e000      	b.n	800547c <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
  }
}
 800547c:	4618      	mov	r0, r3
 800547e:	3720      	adds	r7, #32
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005484:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005488:	b092      	sub	sp, #72	@ 0x48
 800548a:	af00      	add	r7, sp, #0
 800548c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	689a      	ldr	r2, [r3, #8]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	431a      	orrs	r2, r3
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	69db      	ldr	r3, [r3, #28]
 80054a8:	4313      	orrs	r3, r2
 80054aa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	681a      	ldr	r2, [r3, #0]
 80054b2:	4bbe      	ldr	r3, [pc, #760]	@ (80057ac <UART_SetConfig+0x328>)
 80054b4:	4013      	ands	r3, r2
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	6812      	ldr	r2, [r2, #0]
 80054ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054bc:	430b      	orrs	r3, r1
 80054be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	68da      	ldr	r2, [r3, #12]
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	430a      	orrs	r2, r1
 80054d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4ab3      	ldr	r2, [pc, #716]	@ (80057b0 <UART_SetConfig+0x32c>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054ec:	4313      	orrs	r3, r2
 80054ee:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4baf      	ldr	r3, [pc, #700]	@ (80057b4 <UART_SetConfig+0x330>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005500:	430b      	orrs	r3, r1
 8005502:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550a:	f023 010f 	bic.w	r1, r3, #15
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	430a      	orrs	r2, r1
 8005518:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4aa6      	ldr	r2, [pc, #664]	@ (80057b8 <UART_SetConfig+0x334>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d177      	bne.n	8005614 <UART_SetConfig+0x190>
 8005524:	4ba5      	ldr	r3, [pc, #660]	@ (80057bc <UART_SetConfig+0x338>)
 8005526:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005528:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800552c:	2b28      	cmp	r3, #40	@ 0x28
 800552e:	d86d      	bhi.n	800560c <UART_SetConfig+0x188>
 8005530:	a201      	add	r2, pc, #4	@ (adr r2, 8005538 <UART_SetConfig+0xb4>)
 8005532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005536:	bf00      	nop
 8005538:	080055dd 	.word	0x080055dd
 800553c:	0800560d 	.word	0x0800560d
 8005540:	0800560d 	.word	0x0800560d
 8005544:	0800560d 	.word	0x0800560d
 8005548:	0800560d 	.word	0x0800560d
 800554c:	0800560d 	.word	0x0800560d
 8005550:	0800560d 	.word	0x0800560d
 8005554:	0800560d 	.word	0x0800560d
 8005558:	080055e5 	.word	0x080055e5
 800555c:	0800560d 	.word	0x0800560d
 8005560:	0800560d 	.word	0x0800560d
 8005564:	0800560d 	.word	0x0800560d
 8005568:	0800560d 	.word	0x0800560d
 800556c:	0800560d 	.word	0x0800560d
 8005570:	0800560d 	.word	0x0800560d
 8005574:	0800560d 	.word	0x0800560d
 8005578:	080055ed 	.word	0x080055ed
 800557c:	0800560d 	.word	0x0800560d
 8005580:	0800560d 	.word	0x0800560d
 8005584:	0800560d 	.word	0x0800560d
 8005588:	0800560d 	.word	0x0800560d
 800558c:	0800560d 	.word	0x0800560d
 8005590:	0800560d 	.word	0x0800560d
 8005594:	0800560d 	.word	0x0800560d
 8005598:	080055f5 	.word	0x080055f5
 800559c:	0800560d 	.word	0x0800560d
 80055a0:	0800560d 	.word	0x0800560d
 80055a4:	0800560d 	.word	0x0800560d
 80055a8:	0800560d 	.word	0x0800560d
 80055ac:	0800560d 	.word	0x0800560d
 80055b0:	0800560d 	.word	0x0800560d
 80055b4:	0800560d 	.word	0x0800560d
 80055b8:	080055fd 	.word	0x080055fd
 80055bc:	0800560d 	.word	0x0800560d
 80055c0:	0800560d 	.word	0x0800560d
 80055c4:	0800560d 	.word	0x0800560d
 80055c8:	0800560d 	.word	0x0800560d
 80055cc:	0800560d 	.word	0x0800560d
 80055d0:	0800560d 	.word	0x0800560d
 80055d4:	0800560d 	.word	0x0800560d
 80055d8:	08005605 	.word	0x08005605
 80055dc:	2301      	movs	r3, #1
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e222      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e21e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e21a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e216      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80055fc:	2320      	movs	r3, #32
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e212      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005604:	2340      	movs	r3, #64	@ 0x40
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e20e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e20a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a69      	ldr	r2, [pc, #420]	@ (80057c0 <UART_SetConfig+0x33c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d130      	bne.n	8005680 <UART_SetConfig+0x1fc>
 800561e:	4b67      	ldr	r3, [pc, #412]	@ (80057bc <UART_SetConfig+0x338>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b05      	cmp	r3, #5
 8005628:	d826      	bhi.n	8005678 <UART_SetConfig+0x1f4>
 800562a:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <UART_SetConfig+0x1ac>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005649 	.word	0x08005649
 8005634:	08005651 	.word	0x08005651
 8005638:	08005659 	.word	0x08005659
 800563c:	08005661 	.word	0x08005661
 8005640:	08005669 	.word	0x08005669
 8005644:	08005671 	.word	0x08005671
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e1ec      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e1e8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e1e4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e1e0      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005668:	2320      	movs	r3, #32
 800566a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566e:	e1dc      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005670:	2340      	movs	r3, #64	@ 0x40
 8005672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005676:	e1d8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005678:	2380      	movs	r3, #128	@ 0x80
 800567a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567e:	e1d4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a4f      	ldr	r2, [pc, #316]	@ (80057c4 <UART_SetConfig+0x340>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d130      	bne.n	80056ec <UART_SetConfig+0x268>
 800568a:	4b4c      	ldr	r3, [pc, #304]	@ (80057bc <UART_SetConfig+0x338>)
 800568c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568e:	f003 0307 	and.w	r3, r3, #7
 8005692:	2b05      	cmp	r3, #5
 8005694:	d826      	bhi.n	80056e4 <UART_SetConfig+0x260>
 8005696:	a201      	add	r2, pc, #4	@ (adr r2, 800569c <UART_SetConfig+0x218>)
 8005698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800569c:	080056b5 	.word	0x080056b5
 80056a0:	080056bd 	.word	0x080056bd
 80056a4:	080056c5 	.word	0x080056c5
 80056a8:	080056cd 	.word	0x080056cd
 80056ac:	080056d5 	.word	0x080056d5
 80056b0:	080056dd 	.word	0x080056dd
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e1b6      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c2:	e1b2      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e1ae      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e1aa      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056d4:	2320      	movs	r3, #32
 80056d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056da:	e1a6      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056dc:	2340      	movs	r3, #64	@ 0x40
 80056de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e2:	e1a2      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ea:	e19e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a35      	ldr	r2, [pc, #212]	@ (80057c8 <UART_SetConfig+0x344>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d130      	bne.n	8005758 <UART_SetConfig+0x2d4>
 80056f6:	4b31      	ldr	r3, [pc, #196]	@ (80057bc <UART_SetConfig+0x338>)
 80056f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056fa:	f003 0307 	and.w	r3, r3, #7
 80056fe:	2b05      	cmp	r3, #5
 8005700:	d826      	bhi.n	8005750 <UART_SetConfig+0x2cc>
 8005702:	a201      	add	r2, pc, #4	@ (adr r2, 8005708 <UART_SetConfig+0x284>)
 8005704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005708:	08005721 	.word	0x08005721
 800570c:	08005729 	.word	0x08005729
 8005710:	08005731 	.word	0x08005731
 8005714:	08005739 	.word	0x08005739
 8005718:	08005741 	.word	0x08005741
 800571c:	08005749 	.word	0x08005749
 8005720:	2300      	movs	r3, #0
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e180      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005728:	2304      	movs	r3, #4
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e17c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005730:	2308      	movs	r3, #8
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e178      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005738:	2310      	movs	r3, #16
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e174      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005740:	2320      	movs	r3, #32
 8005742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005746:	e170      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005748:	2340      	movs	r3, #64	@ 0x40
 800574a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574e:	e16c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005750:	2380      	movs	r3, #128	@ 0x80
 8005752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005756:	e168      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1b      	ldr	r2, [pc, #108]	@ (80057cc <UART_SetConfig+0x348>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d142      	bne.n	80057e8 <UART_SetConfig+0x364>
 8005762:	4b16      	ldr	r3, [pc, #88]	@ (80057bc <UART_SetConfig+0x338>)
 8005764:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b05      	cmp	r3, #5
 800576c:	d838      	bhi.n	80057e0 <UART_SetConfig+0x35c>
 800576e:	a201      	add	r2, pc, #4	@ (adr r2, 8005774 <UART_SetConfig+0x2f0>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005795 	.word	0x08005795
 800577c:	0800579d 	.word	0x0800579d
 8005780:	080057a5 	.word	0x080057a5
 8005784:	080057d1 	.word	0x080057d1
 8005788:	080057d9 	.word	0x080057d9
 800578c:	2300      	movs	r3, #0
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e14a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005794:	2304      	movs	r3, #4
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e146      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800579c:	2308      	movs	r3, #8
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e142      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057a4:	2310      	movs	r3, #16
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e13e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057ac:	cfff69f3 	.word	0xcfff69f3
 80057b0:	58000c00 	.word	0x58000c00
 80057b4:	11fff4ff 	.word	0x11fff4ff
 80057b8:	40011000 	.word	0x40011000
 80057bc:	58024400 	.word	0x58024400
 80057c0:	40004400 	.word	0x40004400
 80057c4:	40004800 	.word	0x40004800
 80057c8:	40004c00 	.word	0x40004c00
 80057cc:	40005000 	.word	0x40005000
 80057d0:	2320      	movs	r3, #32
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e128      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057d8:	2340      	movs	r3, #64	@ 0x40
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057de:	e124      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057e0:	2380      	movs	r3, #128	@ 0x80
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e120      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4acb      	ldr	r2, [pc, #812]	@ (8005b1c <UART_SetConfig+0x698>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d176      	bne.n	80058e0 <UART_SetConfig+0x45c>
 80057f2:	4bcb      	ldr	r3, [pc, #812]	@ (8005b20 <UART_SetConfig+0x69c>)
 80057f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057fa:	2b28      	cmp	r3, #40	@ 0x28
 80057fc:	d86c      	bhi.n	80058d8 <UART_SetConfig+0x454>
 80057fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005804 <UART_SetConfig+0x380>)
 8005800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005804:	080058a9 	.word	0x080058a9
 8005808:	080058d9 	.word	0x080058d9
 800580c:	080058d9 	.word	0x080058d9
 8005810:	080058d9 	.word	0x080058d9
 8005814:	080058d9 	.word	0x080058d9
 8005818:	080058d9 	.word	0x080058d9
 800581c:	080058d9 	.word	0x080058d9
 8005820:	080058d9 	.word	0x080058d9
 8005824:	080058b1 	.word	0x080058b1
 8005828:	080058d9 	.word	0x080058d9
 800582c:	080058d9 	.word	0x080058d9
 8005830:	080058d9 	.word	0x080058d9
 8005834:	080058d9 	.word	0x080058d9
 8005838:	080058d9 	.word	0x080058d9
 800583c:	080058d9 	.word	0x080058d9
 8005840:	080058d9 	.word	0x080058d9
 8005844:	080058b9 	.word	0x080058b9
 8005848:	080058d9 	.word	0x080058d9
 800584c:	080058d9 	.word	0x080058d9
 8005850:	080058d9 	.word	0x080058d9
 8005854:	080058d9 	.word	0x080058d9
 8005858:	080058d9 	.word	0x080058d9
 800585c:	080058d9 	.word	0x080058d9
 8005860:	080058d9 	.word	0x080058d9
 8005864:	080058c1 	.word	0x080058c1
 8005868:	080058d9 	.word	0x080058d9
 800586c:	080058d9 	.word	0x080058d9
 8005870:	080058d9 	.word	0x080058d9
 8005874:	080058d9 	.word	0x080058d9
 8005878:	080058d9 	.word	0x080058d9
 800587c:	080058d9 	.word	0x080058d9
 8005880:	080058d9 	.word	0x080058d9
 8005884:	080058c9 	.word	0x080058c9
 8005888:	080058d9 	.word	0x080058d9
 800588c:	080058d9 	.word	0x080058d9
 8005890:	080058d9 	.word	0x080058d9
 8005894:	080058d9 	.word	0x080058d9
 8005898:	080058d9 	.word	0x080058d9
 800589c:	080058d9 	.word	0x080058d9
 80058a0:	080058d9 	.word	0x080058d9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	2301      	movs	r3, #1
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e0bc      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b6:	e0b8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e0b4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e0b0      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058c8:	2320      	movs	r3, #32
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e0ac      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058d0:	2340      	movs	r3, #64	@ 0x40
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e0a8      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e0a4      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a8f      	ldr	r2, [pc, #572]	@ (8005b24 <UART_SetConfig+0x6a0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d130      	bne.n	800594c <UART_SetConfig+0x4c8>
 80058ea:	4b8d      	ldr	r3, [pc, #564]	@ (8005b20 <UART_SetConfig+0x69c>)
 80058ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ee:	f003 0307 	and.w	r3, r3, #7
 80058f2:	2b05      	cmp	r3, #5
 80058f4:	d826      	bhi.n	8005944 <UART_SetConfig+0x4c0>
 80058f6:	a201      	add	r2, pc, #4	@ (adr r2, 80058fc <UART_SetConfig+0x478>)
 80058f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fc:	08005915 	.word	0x08005915
 8005900:	0800591d 	.word	0x0800591d
 8005904:	08005925 	.word	0x08005925
 8005908:	0800592d 	.word	0x0800592d
 800590c:	08005935 	.word	0x08005935
 8005910:	0800593d 	.word	0x0800593d
 8005914:	2300      	movs	r3, #0
 8005916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591a:	e086      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800591c:	2304      	movs	r3, #4
 800591e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005922:	e082      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005924:	2308      	movs	r3, #8
 8005926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592a:	e07e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800592c:	2310      	movs	r3, #16
 800592e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005932:	e07a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005934:	2320      	movs	r3, #32
 8005936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593a:	e076      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800593c:	2340      	movs	r3, #64	@ 0x40
 800593e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005942:	e072      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005944:	2380      	movs	r3, #128	@ 0x80
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e06e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a75      	ldr	r2, [pc, #468]	@ (8005b28 <UART_SetConfig+0x6a4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d130      	bne.n	80059b8 <UART_SetConfig+0x534>
 8005956:	4b72      	ldr	r3, [pc, #456]	@ (8005b20 <UART_SetConfig+0x69c>)
 8005958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800595a:	f003 0307 	and.w	r3, r3, #7
 800595e:	2b05      	cmp	r3, #5
 8005960:	d826      	bhi.n	80059b0 <UART_SetConfig+0x52c>
 8005962:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <UART_SetConfig+0x4e4>)
 8005964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005968:	08005981 	.word	0x08005981
 800596c:	08005989 	.word	0x08005989
 8005970:	08005991 	.word	0x08005991
 8005974:	08005999 	.word	0x08005999
 8005978:	080059a1 	.word	0x080059a1
 800597c:	080059a9 	.word	0x080059a9
 8005980:	2300      	movs	r3, #0
 8005982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005986:	e050      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005988:	2304      	movs	r3, #4
 800598a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598e:	e04c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005990:	2308      	movs	r3, #8
 8005992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005996:	e048      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005998:	2310      	movs	r3, #16
 800599a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599e:	e044      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059a0:	2320      	movs	r3, #32
 80059a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a6:	e040      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059a8:	2340      	movs	r3, #64	@ 0x40
 80059aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ae:	e03c      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059b0:	2380      	movs	r3, #128	@ 0x80
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e038      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a5b      	ldr	r2, [pc, #364]	@ (8005b2c <UART_SetConfig+0x6a8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d130      	bne.n	8005a24 <UART_SetConfig+0x5a0>
 80059c2:	4b57      	ldr	r3, [pc, #348]	@ (8005b20 <UART_SetConfig+0x69c>)
 80059c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c6:	f003 0307 	and.w	r3, r3, #7
 80059ca:	2b05      	cmp	r3, #5
 80059cc:	d826      	bhi.n	8005a1c <UART_SetConfig+0x598>
 80059ce:	a201      	add	r2, pc, #4	@ (adr r2, 80059d4 <UART_SetConfig+0x550>)
 80059d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d4:	080059ed 	.word	0x080059ed
 80059d8:	080059f5 	.word	0x080059f5
 80059dc:	080059fd 	.word	0x080059fd
 80059e0:	08005a05 	.word	0x08005a05
 80059e4:	08005a0d 	.word	0x08005a0d
 80059e8:	08005a15 	.word	0x08005a15
 80059ec:	2302      	movs	r3, #2
 80059ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f2:	e01a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059f4:	2304      	movs	r3, #4
 80059f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fa:	e016      	b.n	8005a2a <UART_SetConfig+0x5a6>
 80059fc:	2308      	movs	r3, #8
 80059fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a02:	e012      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a04:	2310      	movs	r3, #16
 8005a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0a:	e00e      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a0c:	2320      	movs	r3, #32
 8005a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a12:	e00a      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a14:	2340      	movs	r3, #64	@ 0x40
 8005a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1a:	e006      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a1c:	2380      	movs	r3, #128	@ 0x80
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e002      	b.n	8005a2a <UART_SetConfig+0x5a6>
 8005a24:	2380      	movs	r3, #128	@ 0x80
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a3f      	ldr	r2, [pc, #252]	@ (8005b2c <UART_SetConfig+0x6a8>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	f040 80f8 	bne.w	8005c26 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a36:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	2b20      	cmp	r3, #32
 8005a3c:	dc46      	bgt.n	8005acc <UART_SetConfig+0x648>
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	f2c0 8082 	blt.w	8005b48 <UART_SetConfig+0x6c4>
 8005a44:	3b02      	subs	r3, #2
 8005a46:	2b1e      	cmp	r3, #30
 8005a48:	d87e      	bhi.n	8005b48 <UART_SetConfig+0x6c4>
 8005a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a50 <UART_SetConfig+0x5cc>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005ad3 	.word	0x08005ad3
 8005a54:	08005b49 	.word	0x08005b49
 8005a58:	08005adb 	.word	0x08005adb
 8005a5c:	08005b49 	.word	0x08005b49
 8005a60:	08005b49 	.word	0x08005b49
 8005a64:	08005b49 	.word	0x08005b49
 8005a68:	08005aeb 	.word	0x08005aeb
 8005a6c:	08005b49 	.word	0x08005b49
 8005a70:	08005b49 	.word	0x08005b49
 8005a74:	08005b49 	.word	0x08005b49
 8005a78:	08005b49 	.word	0x08005b49
 8005a7c:	08005b49 	.word	0x08005b49
 8005a80:	08005b49 	.word	0x08005b49
 8005a84:	08005b49 	.word	0x08005b49
 8005a88:	08005afb 	.word	0x08005afb
 8005a8c:	08005b49 	.word	0x08005b49
 8005a90:	08005b49 	.word	0x08005b49
 8005a94:	08005b49 	.word	0x08005b49
 8005a98:	08005b49 	.word	0x08005b49
 8005a9c:	08005b49 	.word	0x08005b49
 8005aa0:	08005b49 	.word	0x08005b49
 8005aa4:	08005b49 	.word	0x08005b49
 8005aa8:	08005b49 	.word	0x08005b49
 8005aac:	08005b49 	.word	0x08005b49
 8005ab0:	08005b49 	.word	0x08005b49
 8005ab4:	08005b49 	.word	0x08005b49
 8005ab8:	08005b49 	.word	0x08005b49
 8005abc:	08005b49 	.word	0x08005b49
 8005ac0:	08005b49 	.word	0x08005b49
 8005ac4:	08005b49 	.word	0x08005b49
 8005ac8:	08005b3b 	.word	0x08005b3b
 8005acc:	2b40      	cmp	r3, #64	@ 0x40
 8005ace:	d037      	beq.n	8005b40 <UART_SetConfig+0x6bc>
 8005ad0:	e03a      	b.n	8005b48 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ad2:	f7fe ff0f 	bl	80048f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ad6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ad8:	e03c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f7fe ff1e 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae8:	e034      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005aea:	f107 0318 	add.w	r3, r7, #24
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff f86a 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005af4:	69fb      	ldr	r3, [r7, #28]
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af8:	e02c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005afa:	4b09      	ldr	r3, [pc, #36]	@ (8005b20 <UART_SetConfig+0x69c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0320 	and.w	r3, r3, #32
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d016      	beq.n	8005b34 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b06:	4b06      	ldr	r3, [pc, #24]	@ (8005b20 <UART_SetConfig+0x69c>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	08db      	lsrs	r3, r3, #3
 8005b0c:	f003 0303 	and.w	r3, r3, #3
 8005b10:	4a07      	ldr	r2, [pc, #28]	@ (8005b30 <UART_SetConfig+0x6ac>)
 8005b12:	fa22 f303 	lsr.w	r3, r2, r3
 8005b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b18:	e01c      	b.n	8005b54 <UART_SetConfig+0x6d0>
 8005b1a:	bf00      	nop
 8005b1c:	40011400 	.word	0x40011400
 8005b20:	58024400 	.word	0x58024400
 8005b24:	40007800 	.word	0x40007800
 8005b28:	40007c00 	.word	0x40007c00
 8005b2c:	58000c00 	.word	0x58000c00
 8005b30:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b34:	4b9d      	ldr	r3, [pc, #628]	@ (8005dac <UART_SetConfig+0x928>)
 8005b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b38:	e00c      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b3a:	4b9d      	ldr	r3, [pc, #628]	@ (8005db0 <UART_SetConfig+0x92c>)
 8005b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3e:	e009      	b.n	8005b54 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b46:	e005      	b.n	8005b54 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b52:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 81de 	beq.w	8005f18 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	4a94      	ldr	r2, [pc, #592]	@ (8005db4 <UART_SetConfig+0x930>)
 8005b62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b6a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b6e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d305      	bcc.n	8005b8c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	685b      	ldr	r3, [r3, #4]
 8005b84:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d903      	bls.n	8005b94 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b92:	e1c1      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b96:	2200      	movs	r2, #0
 8005b98:	60bb      	str	r3, [r7, #8]
 8005b9a:	60fa      	str	r2, [r7, #12]
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ba0:	4a84      	ldr	r2, [pc, #528]	@ (8005db4 <UART_SetConfig+0x930>)
 8005ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2200      	movs	r2, #0
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	607a      	str	r2, [r7, #4]
 8005bae:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bb2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bb6:	f7fa fbe3 	bl	8000380 <__aeabi_uldivmod>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	460b      	mov	r3, r1
 8005bbe:	4610      	mov	r0, r2
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f04f 0200 	mov.w	r2, #0
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	020b      	lsls	r3, r1, #8
 8005bcc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bd0:	0202      	lsls	r2, r0, #8
 8005bd2:	6979      	ldr	r1, [r7, #20]
 8005bd4:	6849      	ldr	r1, [r1, #4]
 8005bd6:	0849      	lsrs	r1, r1, #1
 8005bd8:	2000      	movs	r0, #0
 8005bda:	460c      	mov	r4, r1
 8005bdc:	4605      	mov	r5, r0
 8005bde:	eb12 0804 	adds.w	r8, r2, r4
 8005be2:	eb43 0905 	adc.w	r9, r3, r5
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	469a      	mov	sl, r3
 8005bee:	4693      	mov	fp, r2
 8005bf0:	4652      	mov	r2, sl
 8005bf2:	465b      	mov	r3, fp
 8005bf4:	4640      	mov	r0, r8
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	f7fa fbc2 	bl	8000380 <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4613      	mov	r3, r2
 8005c02:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c0a:	d308      	bcc.n	8005c1e <UART_SetConfig+0x79a>
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c12:	d204      	bcs.n	8005c1e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e17c      	b.n	8005f18 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c24:	e178      	b.n	8005f18 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2e:	f040 80c5 	bne.w	8005dbc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c36:	2b20      	cmp	r3, #32
 8005c38:	dc48      	bgt.n	8005ccc <UART_SetConfig+0x848>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	db7b      	blt.n	8005d36 <UART_SetConfig+0x8b2>
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d879      	bhi.n	8005d36 <UART_SetConfig+0x8b2>
 8005c42:	a201      	add	r2, pc, #4	@ (adr r2, 8005c48 <UART_SetConfig+0x7c4>)
 8005c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c48:	08005cd3 	.word	0x08005cd3
 8005c4c:	08005cdb 	.word	0x08005cdb
 8005c50:	08005d37 	.word	0x08005d37
 8005c54:	08005d37 	.word	0x08005d37
 8005c58:	08005ce3 	.word	0x08005ce3
 8005c5c:	08005d37 	.word	0x08005d37
 8005c60:	08005d37 	.word	0x08005d37
 8005c64:	08005d37 	.word	0x08005d37
 8005c68:	08005cf3 	.word	0x08005cf3
 8005c6c:	08005d37 	.word	0x08005d37
 8005c70:	08005d37 	.word	0x08005d37
 8005c74:	08005d37 	.word	0x08005d37
 8005c78:	08005d37 	.word	0x08005d37
 8005c7c:	08005d37 	.word	0x08005d37
 8005c80:	08005d37 	.word	0x08005d37
 8005c84:	08005d37 	.word	0x08005d37
 8005c88:	08005d03 	.word	0x08005d03
 8005c8c:	08005d37 	.word	0x08005d37
 8005c90:	08005d37 	.word	0x08005d37
 8005c94:	08005d37 	.word	0x08005d37
 8005c98:	08005d37 	.word	0x08005d37
 8005c9c:	08005d37 	.word	0x08005d37
 8005ca0:	08005d37 	.word	0x08005d37
 8005ca4:	08005d37 	.word	0x08005d37
 8005ca8:	08005d37 	.word	0x08005d37
 8005cac:	08005d37 	.word	0x08005d37
 8005cb0:	08005d37 	.word	0x08005d37
 8005cb4:	08005d37 	.word	0x08005d37
 8005cb8:	08005d37 	.word	0x08005d37
 8005cbc:	08005d37 	.word	0x08005d37
 8005cc0:	08005d37 	.word	0x08005d37
 8005cc4:	08005d37 	.word	0x08005d37
 8005cc8:	08005d29 	.word	0x08005d29
 8005ccc:	2b40      	cmp	r3, #64	@ 0x40
 8005cce:	d02e      	beq.n	8005d2e <UART_SetConfig+0x8aa>
 8005cd0:	e031      	b.n	8005d36 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd2:	f7fd fbd9 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8005cd6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd8:	e033      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cda:	f7fd fbeb 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8005cde:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ce0:	e02f      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7fe fe1a 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cf0:	e027      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cf2:	f107 0318 	add.w	r3, r7, #24
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f7fe ff66 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d00:	e01f      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d02:	4b2d      	ldr	r3, [pc, #180]	@ (8005db8 <UART_SetConfig+0x934>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 0320 	and.w	r3, r3, #32
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d009      	beq.n	8005d22 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8005db8 <UART_SetConfig+0x934>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	08db      	lsrs	r3, r3, #3
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	4a24      	ldr	r2, [pc, #144]	@ (8005dac <UART_SetConfig+0x928>)
 8005d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d20:	e00f      	b.n	8005d42 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d22:	4b22      	ldr	r3, [pc, #136]	@ (8005dac <UART_SetConfig+0x928>)
 8005d24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d26:	e00c      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d28:	4b21      	ldr	r3, [pc, #132]	@ (8005db0 <UART_SetConfig+0x92c>)
 8005d2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d2c:	e009      	b.n	8005d42 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d34:	e005      	b.n	8005d42 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80e7 	beq.w	8005f18 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4e:	4a19      	ldr	r2, [pc, #100]	@ (8005db4 <UART_SetConfig+0x930>)
 8005d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d54:	461a      	mov	r2, r3
 8005d56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d58:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d5c:	005a      	lsls	r2, r3, #1
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	085b      	lsrs	r3, r3, #1
 8005d64:	441a      	add	r2, r3
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	2b0f      	cmp	r3, #15
 8005d74:	d916      	bls.n	8005da4 <UART_SetConfig+0x920>
 8005d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d7c:	d212      	bcs.n	8005da4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	f023 030f 	bic.w	r3, r3, #15
 8005d86:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	f003 0307 	and.w	r3, r3, #7
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d96:	4313      	orrs	r3, r2
 8005d98:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005da0:	60da      	str	r2, [r3, #12]
 8005da2:	e0b9      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005daa:	e0b5      	b.n	8005f18 <UART_SetConfig+0xa94>
 8005dac:	03d09000 	.word	0x03d09000
 8005db0:	003d0900 	.word	0x003d0900
 8005db4:	08008744 	.word	0x08008744
 8005db8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dbc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	dc49      	bgt.n	8005e58 <UART_SetConfig+0x9d4>
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	db7c      	blt.n	8005ec2 <UART_SetConfig+0xa3e>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d87a      	bhi.n	8005ec2 <UART_SetConfig+0xa3e>
 8005dcc:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd4 <UART_SetConfig+0x950>)
 8005dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd2:	bf00      	nop
 8005dd4:	08005e5f 	.word	0x08005e5f
 8005dd8:	08005e67 	.word	0x08005e67
 8005ddc:	08005ec3 	.word	0x08005ec3
 8005de0:	08005ec3 	.word	0x08005ec3
 8005de4:	08005e6f 	.word	0x08005e6f
 8005de8:	08005ec3 	.word	0x08005ec3
 8005dec:	08005ec3 	.word	0x08005ec3
 8005df0:	08005ec3 	.word	0x08005ec3
 8005df4:	08005e7f 	.word	0x08005e7f
 8005df8:	08005ec3 	.word	0x08005ec3
 8005dfc:	08005ec3 	.word	0x08005ec3
 8005e00:	08005ec3 	.word	0x08005ec3
 8005e04:	08005ec3 	.word	0x08005ec3
 8005e08:	08005ec3 	.word	0x08005ec3
 8005e0c:	08005ec3 	.word	0x08005ec3
 8005e10:	08005ec3 	.word	0x08005ec3
 8005e14:	08005e8f 	.word	0x08005e8f
 8005e18:	08005ec3 	.word	0x08005ec3
 8005e1c:	08005ec3 	.word	0x08005ec3
 8005e20:	08005ec3 	.word	0x08005ec3
 8005e24:	08005ec3 	.word	0x08005ec3
 8005e28:	08005ec3 	.word	0x08005ec3
 8005e2c:	08005ec3 	.word	0x08005ec3
 8005e30:	08005ec3 	.word	0x08005ec3
 8005e34:	08005ec3 	.word	0x08005ec3
 8005e38:	08005ec3 	.word	0x08005ec3
 8005e3c:	08005ec3 	.word	0x08005ec3
 8005e40:	08005ec3 	.word	0x08005ec3
 8005e44:	08005ec3 	.word	0x08005ec3
 8005e48:	08005ec3 	.word	0x08005ec3
 8005e4c:	08005ec3 	.word	0x08005ec3
 8005e50:	08005ec3 	.word	0x08005ec3
 8005e54:	08005eb5 	.word	0x08005eb5
 8005e58:	2b40      	cmp	r3, #64	@ 0x40
 8005e5a:	d02e      	beq.n	8005eba <UART_SetConfig+0xa36>
 8005e5c:	e031      	b.n	8005ec2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5e:	f7fd fb13 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8005e62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e64:	e033      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e66:	f7fd fb25 	bl	80034b4 <HAL_RCC_GetPCLK2Freq>
 8005e6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e6c:	e02f      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e72:	4618      	mov	r0, r3
 8005e74:	f7fe fd54 	bl	8004920 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e7c:	e027      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7e:	f107 0318 	add.w	r3, r7, #24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe fea0 	bl	8004bc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e8c:	e01f      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8e:	4b2d      	ldr	r3, [pc, #180]	@ (8005f44 <UART_SetConfig+0xac0>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d009      	beq.n	8005eae <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <UART_SetConfig+0xac0>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	08db      	lsrs	r3, r3, #3
 8005ea0:	f003 0303 	and.w	r3, r3, #3
 8005ea4:	4a28      	ldr	r2, [pc, #160]	@ (8005f48 <UART_SetConfig+0xac4>)
 8005ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8005eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005eac:	e00f      	b.n	8005ece <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005eae:	4b26      	ldr	r3, [pc, #152]	@ (8005f48 <UART_SetConfig+0xac4>)
 8005eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb2:	e00c      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eb4:	4b25      	ldr	r3, [pc, #148]	@ (8005f4c <UART_SetConfig+0xac8>)
 8005eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb8:	e009      	b.n	8005ece <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ec0:	e005      	b.n	8005ece <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ecc:	bf00      	nop
    }

    if (pclk != 0U)
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d021      	beq.n	8005f18 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f50 <UART_SetConfig+0xacc>)
 8005eda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ee2:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	085b      	lsrs	r3, r3, #1
 8005eec:	441a      	add	r2, r3
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	2b0f      	cmp	r3, #15
 8005efc:	d909      	bls.n	8005f12 <UART_SetConfig+0xa8e>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f04:	d205      	bcs.n	8005f12 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f08:	b29a      	uxth	r2, r3
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	60da      	str	r2, [r3, #12]
 8005f10:	e002      	b.n	8005f18 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	2201      	movs	r2, #1
 8005f24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2200      	movs	r2, #0
 8005f32:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f34:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3748      	adds	r7, #72	@ 0x48
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f42:	bf00      	nop
 8005f44:	58024400 	.word	0x58024400
 8005f48:	03d09000 	.word	0x03d09000
 8005f4c:	003d0900 	.word	0x003d0900
 8005f50:	08008744 	.word	0x08008744

08005f54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
  }
}
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b098      	sub	sp, #96	@ 0x60
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a8:	f7fb f988 	bl	80013bc <HAL_GetTick>
 80060ac:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d12f      	bne.n	800611c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f88e 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d022      	beq.n	800611c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e063      	b.n	80061e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f003 0304 	and.w	r3, r3, #4
 8006126:	2b04      	cmp	r3, #4
 8006128:	d149      	bne.n	80061be <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800612a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800612e:	9300      	str	r3, [sp, #0]
 8006130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006132:	2200      	movs	r2, #0
 8006134:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 f857 	bl	80061ec <UART_WaitOnFlagUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d03c      	beq.n	80061be <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	623b      	str	r3, [r7, #32]
   return(result);
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006158:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006162:	633b      	str	r3, [r7, #48]	@ 0x30
 8006164:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006166:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006168:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800616a:	e841 2300 	strex	r3, r2, [r1]
 800616e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1e6      	bne.n	8006144 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	3308      	adds	r3, #8
 800617c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	e853 3f00 	ldrex	r3, [r3]
 8006184:	60fb      	str	r3, [r7, #12]
   return(result);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f023 0301 	bic.w	r3, r3, #1
 800618c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3308      	adds	r3, #8
 8006194:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006196:	61fa      	str	r2, [r7, #28]
 8006198:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800619a:	69b9      	ldr	r1, [r7, #24]
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	617b      	str	r3, [r7, #20]
   return(result);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d1e5      	bne.n	8006176 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e012      	b.n	80061e4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2220      	movs	r2, #32
 80061c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2220      	movs	r2, #32
 80061ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061e2:	2300      	movs	r3, #0
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3758      	adds	r7, #88	@ 0x58
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	603b      	str	r3, [r7, #0]
 80061f8:	4613      	mov	r3, r2
 80061fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061fc:	e04f      	b.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006204:	d04b      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006206:	f7fb f8d9 	bl	80013bc <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	429a      	cmp	r2, r3
 8006214:	d302      	bcc.n	800621c <UART_WaitOnFlagUntilTimeout+0x30>
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d101      	bne.n	8006220 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800621c:	2303      	movs	r3, #3
 800621e:	e04e      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f003 0304 	and.w	r3, r3, #4
 800622a:	2b00      	cmp	r3, #0
 800622c:	d037      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b80      	cmp	r3, #128	@ 0x80
 8006232:	d034      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	d031      	beq.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	69db      	ldr	r3, [r3, #28]
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b08      	cmp	r3, #8
 8006246:	d110      	bne.n	800626a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2208      	movs	r2, #8
 800624e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f000 f839 	bl	80062c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2208      	movs	r2, #8
 800625a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2200      	movs	r2, #0
 8006262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	e029      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	69db      	ldr	r3, [r3, #28]
 8006270:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006274:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006278:	d111      	bne.n	800629e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006282:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006284:	68f8      	ldr	r0, [r7, #12]
 8006286:	f000 f81f 	bl	80062c8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2220      	movs	r2, #32
 800628e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e00f      	b.n	80062be <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	69da      	ldr	r2, [r3, #28]
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4013      	ands	r3, r2
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	bf0c      	ite	eq
 80062ae:	2301      	moveq	r3, #1
 80062b0:	2300      	movne	r3, #0
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	79fb      	ldrb	r3, [r7, #7]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d0a0      	beq.n	80061fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b095      	sub	sp, #84	@ 0x54
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d8:	e853 3f00 	ldrex	r3, [r3]
 80062dc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80062f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f6:	e841 2300 	strex	r3, r2, [r1]
 80062fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1e6      	bne.n	80062d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	e853 3f00 	ldrex	r3, [r3]
 8006310:	61fb      	str	r3, [r7, #28]
   return(result);
 8006312:	69fa      	ldr	r2, [r7, #28]
 8006314:	4b1e      	ldr	r3, [pc, #120]	@ (8006390 <UART_EndRxTransfer+0xc8>)
 8006316:	4013      	ands	r3, r2
 8006318:	64bb      	str	r3, [r7, #72]	@ 0x48
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	3308      	adds	r3, #8
 8006320:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006322:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006324:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006328:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e5      	bne.n	8006302 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800633a:	2b01      	cmp	r3, #1
 800633c:	d118      	bne.n	8006370 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	60bb      	str	r3, [r7, #8]
   return(result);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f023 0310 	bic.w	r3, r3, #16
 8006352:	647b      	str	r3, [r7, #68]	@ 0x44
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	461a      	mov	r2, r3
 800635a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	e841 2300 	strex	r3, r2, [r1]
 8006368:	613b      	str	r3, [r7, #16]
   return(result);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e6      	bne.n	800633e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2220      	movs	r2, #32
 8006374:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006384:	bf00      	nop
 8006386:	3754      	adds	r7, #84	@ 0x54
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr
 8006390:	effffffe 	.word	0xeffffffe

08006394 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d101      	bne.n	80063aa <HAL_UARTEx_DisableFifoMode+0x16>
 80063a6:	2302      	movs	r3, #2
 80063a8:	e027      	b.n	80063fa <HAL_UARTEx_DisableFifoMode+0x66>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2224      	movs	r2, #36	@ 0x24
 80063b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0201 	bic.w	r2, r2, #1
 80063d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063f8:	2300      	movs	r3, #0
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006416:	2b01      	cmp	r3, #1
 8006418:	d101      	bne.n	800641e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800641a:	2302      	movs	r3, #2
 800641c:	e02d      	b.n	800647a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2201      	movs	r2, #1
 8006422:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2224      	movs	r2, #36	@ 0x24
 800642a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f022 0201 	bic.w	r2, r2, #1
 8006444:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	430a      	orrs	r2, r1
 8006458:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f850 	bl	8006500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006478:	2300      	movs	r3, #0
}
 800647a:	4618      	mov	r0, r3
 800647c:	3710      	adds	r7, #16
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b084      	sub	sp, #16
 8006486:	af00      	add	r7, sp, #0
 8006488:	6078      	str	r0, [r7, #4]
 800648a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006492:	2b01      	cmp	r3, #1
 8006494:	d101      	bne.n	800649a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006496:	2302      	movs	r3, #2
 8006498:	e02d      	b.n	80064f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2201      	movs	r2, #1
 800649e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2224      	movs	r2, #36	@ 0x24
 80064a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0201 	bic.w	r2, r2, #1
 80064c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f812 	bl	8006500 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2220      	movs	r2, #32
 80064e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
	...

08006500 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800650c:	2b00      	cmp	r3, #0
 800650e:	d108      	bne.n	8006522 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2201      	movs	r2, #1
 8006514:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006520:	e031      	b.n	8006586 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006522:	2310      	movs	r3, #16
 8006524:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006526:	2310      	movs	r3, #16
 8006528:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	0e5b      	lsrs	r3, r3, #25
 8006532:	b2db      	uxtb	r3, r3
 8006534:	f003 0307 	and.w	r3, r3, #7
 8006538:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	0f5b      	lsrs	r3, r3, #29
 8006542:	b2db      	uxtb	r3, r3
 8006544:	f003 0307 	and.w	r3, r3, #7
 8006548:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800654a:	7bbb      	ldrb	r3, [r7, #14]
 800654c:	7b3a      	ldrb	r2, [r7, #12]
 800654e:	4911      	ldr	r1, [pc, #68]	@ (8006594 <UARTEx_SetNbDataToProcess+0x94>)
 8006550:	5c8a      	ldrb	r2, [r1, r2]
 8006552:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006556:	7b3a      	ldrb	r2, [r7, #12]
 8006558:	490f      	ldr	r1, [pc, #60]	@ (8006598 <UARTEx_SetNbDataToProcess+0x98>)
 800655a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800655c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	7b7a      	ldrb	r2, [r7, #13]
 800656c:	4909      	ldr	r1, [pc, #36]	@ (8006594 <UARTEx_SetNbDataToProcess+0x94>)
 800656e:	5c8a      	ldrb	r2, [r1, r2]
 8006570:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006574:	7b7a      	ldrb	r2, [r7, #13]
 8006576:	4908      	ldr	r1, [pc, #32]	@ (8006598 <UARTEx_SetNbDataToProcess+0x98>)
 8006578:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800657a:	fb93 f3f2 	sdiv	r3, r3, r2
 800657e:	b29a      	uxth	r2, r3
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006586:	bf00      	nop
 8006588:	3714      	adds	r7, #20
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	0800875c 	.word	0x0800875c
 8006598:	08008764 	.word	0x08008764

0800659c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800659c:	b084      	sub	sp, #16
 800659e:	b580      	push	{r7, lr}
 80065a0:	b084      	sub	sp, #16
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	f107 001c 	add.w	r0, r7, #28
 80065aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065ae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80065b2:	2b01      	cmp	r3, #1
 80065b4:	d121      	bne.n	80065fa <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006678 <USB_CoreInit+0xdc>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68db      	ldr	r3, [r3, #12]
 80065d2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80065da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d105      	bne.n	80065ee <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68db      	ldr	r3, [r3, #12]
 80065e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 faaa 	bl	8006b48 <USB_CoreReset>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e01b      	b.n	8006632 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa9e 	bl	8006b48 <USB_CoreReset>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006610:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006614:	2b00      	cmp	r3, #0
 8006616:	d106      	bne.n	8006626 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800661c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	639a      	str	r2, [r3, #56]	@ 0x38
 8006624:	e005      	b.n	8006632 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800662a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006632:	7fbb      	ldrb	r3, [r7, #30]
 8006634:	2b01      	cmp	r3, #1
 8006636:	d116      	bne.n	8006666 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800663c:	b29a      	uxth	r2, r3
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006646:	4b0d      	ldr	r3, [pc, #52]	@ (800667c <USB_CoreInit+0xe0>)
 8006648:	4313      	orrs	r3, r2
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689b      	ldr	r3, [r3, #8]
 8006652:	f043 0206 	orr.w	r2, r3, #6
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f043 0220 	orr.w	r2, r3, #32
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006666:	7bfb      	ldrb	r3, [r7, #15]
}
 8006668:	4618      	mov	r0, r3
 800666a:	3710      	adds	r7, #16
 800666c:	46bd      	mov	sp, r7
 800666e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006672:	b004      	add	sp, #16
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	ffbdffbf 	.word	0xffbdffbf
 800667c:	03ee0000 	.word	0x03ee0000

08006680 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 0201 	bic.w	r2, r3, #1
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	370c      	adds	r7, #12
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr

080066a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b084      	sub	sp, #16
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	460b      	mov	r3, r1
 80066ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	2b01      	cmp	r3, #1
 80066c2:	d115      	bne.n	80066f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80066d0:	200a      	movs	r0, #10
 80066d2:	f7fa fe7f 	bl	80013d4 <HAL_Delay>
      ms += 10U;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	330a      	adds	r3, #10
 80066da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 fa25 	bl	8006b2c <USB_GetMode>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d01e      	beq.n	8006726 <USB_SetCurrentMode+0x84>
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2bc7      	cmp	r3, #199	@ 0xc7
 80066ec:	d9f0      	bls.n	80066d0 <USB_SetCurrentMode+0x2e>
 80066ee:	e01a      	b.n	8006726 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80066f0:	78fb      	ldrb	r3, [r7, #3]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d115      	bne.n	8006722 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006702:	200a      	movs	r0, #10
 8006704:	f7fa fe66 	bl	80013d4 <HAL_Delay>
      ms += 10U;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	330a      	adds	r3, #10
 800670c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f000 fa0c 	bl	8006b2c <USB_GetMode>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d005      	beq.n	8006726 <USB_SetCurrentMode+0x84>
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2bc7      	cmp	r3, #199	@ 0xc7
 800671e:	d9f0      	bls.n	8006702 <USB_SetCurrentMode+0x60>
 8006720:	e001      	b.n	8006726 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e005      	b.n	8006732 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2bc8      	cmp	r3, #200	@ 0xc8
 800672a:	d101      	bne.n	8006730 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
	...

0800673c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800673c:	b084      	sub	sp, #16
 800673e:	b580      	push	{r7, lr}
 8006740:	b086      	sub	sp, #24
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800674a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800674e:	2300      	movs	r3, #0
 8006750:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	e009      	b.n	8006770 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800675c:	687a      	ldr	r2, [r7, #4]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	3340      	adds	r3, #64	@ 0x40
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	2200      	movs	r2, #0
 8006768:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	3301      	adds	r3, #1
 800676e:	613b      	str	r3, [r7, #16]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	2b0e      	cmp	r3, #14
 8006774:	d9f2      	bls.n	800675c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006776:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800677a:	2b00      	cmp	r3, #0
 800677c:	d11c      	bne.n	80067b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800678c:	f043 0302 	orr.w	r3, r3, #2
 8006790:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006796:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e005      	b.n	80067c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80067ca:	461a      	mov	r2, r3
 80067cc:	2300      	movs	r3, #0
 80067ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d10d      	bne.n	80067f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80067d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80067e0:	2100      	movs	r1, #0
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f968 	bl	8006ab8 <USB_SetDevSpeed>
 80067e8:	e008      	b.n	80067fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80067ea:	2101      	movs	r1, #1
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f963 	bl	8006ab8 <USB_SetDevSpeed>
 80067f2:	e003      	b.n	80067fc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80067f4:	2103      	movs	r1, #3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f95e 	bl	8006ab8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80067fc:	2110      	movs	r1, #16
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 f8fa 	bl	80069f8 <USB_FlushTxFifo>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 f924 	bl	8006a5c <USB_FlushRxFifo>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006824:	461a      	mov	r2, r3
 8006826:	2300      	movs	r3, #0
 8006828:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006830:	461a      	mov	r2, r3
 8006832:	2300      	movs	r3, #0
 8006834:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800683c:	461a      	mov	r2, r3
 800683e:	2300      	movs	r3, #0
 8006840:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006842:	2300      	movs	r3, #0
 8006844:	613b      	str	r3, [r7, #16]
 8006846:	e043      	b.n	80068d0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800685a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800685e:	d118      	bne.n	8006892 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006872:	461a      	mov	r2, r3
 8006874:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006878:	6013      	str	r3, [r2, #0]
 800687a:	e013      	b.n	80068a4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	015a      	lsls	r2, r3, #5
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4413      	add	r3, r2
 8006884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006888:	461a      	mov	r2, r3
 800688a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	e008      	b.n	80068a4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800689e:	461a      	mov	r2, r3
 80068a0:	2300      	movs	r3, #0
 80068a2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	015a      	lsls	r2, r3, #5
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	4413      	add	r3, r2
 80068ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068b0:	461a      	mov	r2, r3
 80068b2:	2300      	movs	r3, #0
 80068b4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068c2:	461a      	mov	r2, r3
 80068c4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80068c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	3301      	adds	r3, #1
 80068ce:	613b      	str	r3, [r7, #16]
 80068d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80068d4:	461a      	mov	r2, r3
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	4293      	cmp	r3, r2
 80068da:	d3b5      	bcc.n	8006848 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80068dc:	2300      	movs	r3, #0
 80068de:	613b      	str	r3, [r7, #16]
 80068e0:	e043      	b.n	800696a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068f8:	d118      	bne.n	800692c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80068fa:	693b      	ldr	r3, [r7, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690c:	461a      	mov	r2, r3
 800690e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	e013      	b.n	800693e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	4413      	add	r3, r2
 800691e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006922:	461a      	mov	r2, r3
 8006924:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006928:	6013      	str	r3, [r2, #0]
 800692a:	e008      	b.n	800693e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	015a      	lsls	r2, r3, #5
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	4413      	add	r3, r2
 8006934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006938:	461a      	mov	r2, r3
 800693a:	2300      	movs	r3, #0
 800693c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	2300      	movs	r3, #0
 800694e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006962:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	3301      	adds	r3, #1
 8006968:	613b      	str	r3, [r7, #16]
 800696a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800696e:	461a      	mov	r2, r3
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4293      	cmp	r3, r2
 8006974:	d3b5      	bcc.n	80068e2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006984:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006988:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006996:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006998:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800699c:	2b00      	cmp	r3, #0
 800699e:	d105      	bne.n	80069ac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	f043 0210 	orr.w	r2, r3, #16
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	4b0f      	ldr	r3, [pc, #60]	@ (80069f0 <USB_DevInit+0x2b4>)
 80069b2:	4313      	orrs	r3, r2
 80069b4:	687a      	ldr	r2, [r7, #4]
 80069b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80069b8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	699b      	ldr	r3, [r3, #24]
 80069c4:	f043 0208 	orr.w	r2, r3, #8
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80069cc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d105      	bne.n	80069e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	4b06      	ldr	r3, [pc, #24]	@ (80069f4 <USB_DevInit+0x2b8>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80069e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3718      	adds	r7, #24
 80069e6:	46bd      	mov	sp, r7
 80069e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80069ec:	b004      	add	sp, #16
 80069ee:	4770      	bx	lr
 80069f0:	803c3800 	.word	0x803c3800
 80069f4:	40000004 	.word	0x40000004

080069f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	3301      	adds	r3, #1
 8006a0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a12:	d901      	bls.n	8006a18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e01b      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	daf2      	bge.n	8006a06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006a20:	2300      	movs	r3, #0
 8006a22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	019b      	lsls	r3, r3, #6
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	3301      	adds	r3, #1
 8006a34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a3c:	d901      	bls.n	8006a42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e006      	b.n	8006a50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0320 	and.w	r3, r3, #32
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d0f0      	beq.n	8006a30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3714      	adds	r7, #20
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a64:	2300      	movs	r3, #0
 8006a66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a74:	d901      	bls.n	8006a7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006a76:	2303      	movs	r3, #3
 8006a78:	e018      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	daf2      	bge.n	8006a68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2210      	movs	r2, #16
 8006a8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006a98:	d901      	bls.n	8006a9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e006      	b.n	8006aac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b10      	cmp	r3, #16
 8006aa8:	d0f0      	beq.n	8006a8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006aaa:	2300      	movs	r3, #0
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
 8006ac0:	460b      	mov	r3, r1
 8006ac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	78fb      	ldrb	r3, [r7, #3]
 8006ad2:	68f9      	ldr	r1, [r7, #12]
 8006ad4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3714      	adds	r7, #20
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006b04:	f023 0303 	bic.w	r3, r3, #3
 8006b08:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b18:	f043 0302 	orr.w	r3, r3, #2
 8006b1c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
}
 8006b20:	4618      	mov	r0, r3
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b083      	sub	sp, #12
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	695b      	ldr	r3, [r3, #20]
 8006b38:	f003 0301 	and.w	r3, r3, #1
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	3301      	adds	r3, #1
 8006b58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b60:	d901      	bls.n	8006b66 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e01b      	b.n	8006b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	daf2      	bge.n	8006b54 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	691b      	ldr	r3, [r3, #16]
 8006b76:	f043 0201 	orr.w	r2, r3, #1
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3301      	adds	r3, #1
 8006b82:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006b8a:	d901      	bls.n	8006b90 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e006      	b.n	8006b9e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	f003 0301 	and.w	r3, r3, #1
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d0f0      	beq.n	8006b7e <USB_CoreReset+0x36>

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
	...

08006bac <std>:
 8006bac:	2300      	movs	r3, #0
 8006bae:	b510      	push	{r4, lr}
 8006bb0:	4604      	mov	r4, r0
 8006bb2:	e9c0 3300 	strd	r3, r3, [r0]
 8006bb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bba:	6083      	str	r3, [r0, #8]
 8006bbc:	8181      	strh	r1, [r0, #12]
 8006bbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bc0:	81c2      	strh	r2, [r0, #14]
 8006bc2:	6183      	str	r3, [r0, #24]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	2208      	movs	r2, #8
 8006bc8:	305c      	adds	r0, #92	@ 0x5c
 8006bca:	f000 f9cc 	bl	8006f66 <memset>
 8006bce:	4b0d      	ldr	r3, [pc, #52]	@ (8006c04 <std+0x58>)
 8006bd0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	@ (8006c08 <std+0x5c>)
 8006bd4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8006c0c <std+0x60>)
 8006bd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x64>)
 8006bdc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bde:	4b0d      	ldr	r3, [pc, #52]	@ (8006c14 <std+0x68>)
 8006be0:	6224      	str	r4, [r4, #32]
 8006be2:	429c      	cmp	r4, r3
 8006be4:	d006      	beq.n	8006bf4 <std+0x48>
 8006be6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bea:	4294      	cmp	r4, r2
 8006bec:	d002      	beq.n	8006bf4 <std+0x48>
 8006bee:	33d0      	adds	r3, #208	@ 0xd0
 8006bf0:	429c      	cmp	r4, r3
 8006bf2:	d105      	bne.n	8006c00 <std+0x54>
 8006bf4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfc:	f000 ba2c 	b.w	8007058 <__retarget_lock_init_recursive>
 8006c00:	bd10      	pop	{r4, pc}
 8006c02:	bf00      	nop
 8006c04:	08006ee1 	.word	0x08006ee1
 8006c08:	08006f03 	.word	0x08006f03
 8006c0c:	08006f3b 	.word	0x08006f3b
 8006c10:	08006f5f 	.word	0x08006f5f
 8006c14:	240007bc 	.word	0x240007bc

08006c18 <stdio_exit_handler>:
 8006c18:	4a02      	ldr	r2, [pc, #8]	@ (8006c24 <stdio_exit_handler+0xc>)
 8006c1a:	4903      	ldr	r1, [pc, #12]	@ (8006c28 <stdio_exit_handler+0x10>)
 8006c1c:	4803      	ldr	r0, [pc, #12]	@ (8006c2c <stdio_exit_handler+0x14>)
 8006c1e:	f000 b869 	b.w	8006cf4 <_fwalk_sglue>
 8006c22:	bf00      	nop
 8006c24:	24000010 	.word	0x24000010
 8006c28:	08007f05 	.word	0x08007f05
 8006c2c:	24000020 	.word	0x24000020

08006c30 <cleanup_stdio>:
 8006c30:	6841      	ldr	r1, [r0, #4]
 8006c32:	4b0c      	ldr	r3, [pc, #48]	@ (8006c64 <cleanup_stdio+0x34>)
 8006c34:	4299      	cmp	r1, r3
 8006c36:	b510      	push	{r4, lr}
 8006c38:	4604      	mov	r4, r0
 8006c3a:	d001      	beq.n	8006c40 <cleanup_stdio+0x10>
 8006c3c:	f001 f962 	bl	8007f04 <_fflush_r>
 8006c40:	68a1      	ldr	r1, [r4, #8]
 8006c42:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <cleanup_stdio+0x38>)
 8006c44:	4299      	cmp	r1, r3
 8006c46:	d002      	beq.n	8006c4e <cleanup_stdio+0x1e>
 8006c48:	4620      	mov	r0, r4
 8006c4a:	f001 f95b 	bl	8007f04 <_fflush_r>
 8006c4e:	68e1      	ldr	r1, [r4, #12]
 8006c50:	4b06      	ldr	r3, [pc, #24]	@ (8006c6c <cleanup_stdio+0x3c>)
 8006c52:	4299      	cmp	r1, r3
 8006c54:	d004      	beq.n	8006c60 <cleanup_stdio+0x30>
 8006c56:	4620      	mov	r0, r4
 8006c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c5c:	f001 b952 	b.w	8007f04 <_fflush_r>
 8006c60:	bd10      	pop	{r4, pc}
 8006c62:	bf00      	nop
 8006c64:	240007bc 	.word	0x240007bc
 8006c68:	24000824 	.word	0x24000824
 8006c6c:	2400088c 	.word	0x2400088c

08006c70 <global_stdio_init.part.0>:
 8006c70:	b510      	push	{r4, lr}
 8006c72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca0 <global_stdio_init.part.0+0x30>)
 8006c74:	4c0b      	ldr	r4, [pc, #44]	@ (8006ca4 <global_stdio_init.part.0+0x34>)
 8006c76:	4a0c      	ldr	r2, [pc, #48]	@ (8006ca8 <global_stdio_init.part.0+0x38>)
 8006c78:	601a      	str	r2, [r3, #0]
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2104      	movs	r1, #4
 8006c80:	f7ff ff94 	bl	8006bac <std>
 8006c84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c88:	2201      	movs	r2, #1
 8006c8a:	2109      	movs	r1, #9
 8006c8c:	f7ff ff8e 	bl	8006bac <std>
 8006c90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c94:	2202      	movs	r2, #2
 8006c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c9a:	2112      	movs	r1, #18
 8006c9c:	f7ff bf86 	b.w	8006bac <std>
 8006ca0:	240008f4 	.word	0x240008f4
 8006ca4:	240007bc 	.word	0x240007bc
 8006ca8:	08006c19 	.word	0x08006c19

08006cac <__sfp_lock_acquire>:
 8006cac:	4801      	ldr	r0, [pc, #4]	@ (8006cb4 <__sfp_lock_acquire+0x8>)
 8006cae:	f000 b9d4 	b.w	800705a <__retarget_lock_acquire_recursive>
 8006cb2:	bf00      	nop
 8006cb4:	240008fd 	.word	0x240008fd

08006cb8 <__sfp_lock_release>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__sfp_lock_release+0x8>)
 8006cba:	f000 b9cf 	b.w	800705c <__retarget_lock_release_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	240008fd 	.word	0x240008fd

08006cc4 <__sinit>:
 8006cc4:	b510      	push	{r4, lr}
 8006cc6:	4604      	mov	r4, r0
 8006cc8:	f7ff fff0 	bl	8006cac <__sfp_lock_acquire>
 8006ccc:	6a23      	ldr	r3, [r4, #32]
 8006cce:	b11b      	cbz	r3, 8006cd8 <__sinit+0x14>
 8006cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cd4:	f7ff bff0 	b.w	8006cb8 <__sfp_lock_release>
 8006cd8:	4b04      	ldr	r3, [pc, #16]	@ (8006cec <__sinit+0x28>)
 8006cda:	6223      	str	r3, [r4, #32]
 8006cdc:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <__sinit+0x2c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1f5      	bne.n	8006cd0 <__sinit+0xc>
 8006ce4:	f7ff ffc4 	bl	8006c70 <global_stdio_init.part.0>
 8006ce8:	e7f2      	b.n	8006cd0 <__sinit+0xc>
 8006cea:	bf00      	nop
 8006cec:	08006c31 	.word	0x08006c31
 8006cf0:	240008f4 	.word	0x240008f4

08006cf4 <_fwalk_sglue>:
 8006cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf8:	4607      	mov	r7, r0
 8006cfa:	4688      	mov	r8, r1
 8006cfc:	4614      	mov	r4, r2
 8006cfe:	2600      	movs	r6, #0
 8006d00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d04:	f1b9 0901 	subs.w	r9, r9, #1
 8006d08:	d505      	bpl.n	8006d16 <_fwalk_sglue+0x22>
 8006d0a:	6824      	ldr	r4, [r4, #0]
 8006d0c:	2c00      	cmp	r4, #0
 8006d0e:	d1f7      	bne.n	8006d00 <_fwalk_sglue+0xc>
 8006d10:	4630      	mov	r0, r6
 8006d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d16:	89ab      	ldrh	r3, [r5, #12]
 8006d18:	2b01      	cmp	r3, #1
 8006d1a:	d907      	bls.n	8006d2c <_fwalk_sglue+0x38>
 8006d1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d20:	3301      	adds	r3, #1
 8006d22:	d003      	beq.n	8006d2c <_fwalk_sglue+0x38>
 8006d24:	4629      	mov	r1, r5
 8006d26:	4638      	mov	r0, r7
 8006d28:	47c0      	blx	r8
 8006d2a:	4306      	orrs	r6, r0
 8006d2c:	3568      	adds	r5, #104	@ 0x68
 8006d2e:	e7e9      	b.n	8006d04 <_fwalk_sglue+0x10>

08006d30 <iprintf>:
 8006d30:	b40f      	push	{r0, r1, r2, r3}
 8006d32:	b507      	push	{r0, r1, r2, lr}
 8006d34:	4906      	ldr	r1, [pc, #24]	@ (8006d50 <iprintf+0x20>)
 8006d36:	ab04      	add	r3, sp, #16
 8006d38:	6808      	ldr	r0, [r1, #0]
 8006d3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d3e:	6881      	ldr	r1, [r0, #8]
 8006d40:	9301      	str	r3, [sp, #4]
 8006d42:	f000 fab7 	bl	80072b4 <_vfiprintf_r>
 8006d46:	b003      	add	sp, #12
 8006d48:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d4c:	b004      	add	sp, #16
 8006d4e:	4770      	bx	lr
 8006d50:	2400001c 	.word	0x2400001c

08006d54 <iscanf>:
 8006d54:	b40f      	push	{r0, r1, r2, r3}
 8006d56:	b507      	push	{r0, r1, r2, lr}
 8006d58:	4906      	ldr	r1, [pc, #24]	@ (8006d74 <iscanf+0x20>)
 8006d5a:	ab04      	add	r3, sp, #16
 8006d5c:	6808      	ldr	r0, [r1, #0]
 8006d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d62:	6841      	ldr	r1, [r0, #4]
 8006d64:	9301      	str	r3, [sp, #4]
 8006d66:	f000 fee7 	bl	8007b38 <_vfiscanf_r>
 8006d6a:	b003      	add	sp, #12
 8006d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d70:	b004      	add	sp, #16
 8006d72:	4770      	bx	lr
 8006d74:	2400001c 	.word	0x2400001c

08006d78 <setvbuf>:
 8006d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d7c:	461d      	mov	r5, r3
 8006d7e:	4b57      	ldr	r3, [pc, #348]	@ (8006edc <setvbuf+0x164>)
 8006d80:	681f      	ldr	r7, [r3, #0]
 8006d82:	4604      	mov	r4, r0
 8006d84:	460e      	mov	r6, r1
 8006d86:	4690      	mov	r8, r2
 8006d88:	b127      	cbz	r7, 8006d94 <setvbuf+0x1c>
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	b913      	cbnz	r3, 8006d94 <setvbuf+0x1c>
 8006d8e:	4638      	mov	r0, r7
 8006d90:	f7ff ff98 	bl	8006cc4 <__sinit>
 8006d94:	f1b8 0f02 	cmp.w	r8, #2
 8006d98:	d006      	beq.n	8006da8 <setvbuf+0x30>
 8006d9a:	f1b8 0f01 	cmp.w	r8, #1
 8006d9e:	f200 809a 	bhi.w	8006ed6 <setvbuf+0x15e>
 8006da2:	2d00      	cmp	r5, #0
 8006da4:	f2c0 8097 	blt.w	8006ed6 <setvbuf+0x15e>
 8006da8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006daa:	07d9      	lsls	r1, r3, #31
 8006dac:	d405      	bmi.n	8006dba <setvbuf+0x42>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	059a      	lsls	r2, r3, #22
 8006db2:	d402      	bmi.n	8006dba <setvbuf+0x42>
 8006db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db6:	f000 f950 	bl	800705a <__retarget_lock_acquire_recursive>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4638      	mov	r0, r7
 8006dbe:	f001 f8a1 	bl	8007f04 <_fflush_r>
 8006dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006dc4:	b141      	cbz	r1, 8006dd8 <setvbuf+0x60>
 8006dc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006dca:	4299      	cmp	r1, r3
 8006dcc:	d002      	beq.n	8006dd4 <setvbuf+0x5c>
 8006dce:	4638      	mov	r0, r7
 8006dd0:	f000 f946 	bl	8007060 <_free_r>
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8006dd8:	2300      	movs	r3, #0
 8006dda:	61a3      	str	r3, [r4, #24]
 8006ddc:	6063      	str	r3, [r4, #4]
 8006dde:	89a3      	ldrh	r3, [r4, #12]
 8006de0:	061b      	lsls	r3, r3, #24
 8006de2:	d503      	bpl.n	8006dec <setvbuf+0x74>
 8006de4:	6921      	ldr	r1, [r4, #16]
 8006de6:	4638      	mov	r0, r7
 8006de8:	f000 f93a 	bl	8007060 <_free_r>
 8006dec:	89a3      	ldrh	r3, [r4, #12]
 8006dee:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8006df2:	f023 0303 	bic.w	r3, r3, #3
 8006df6:	f1b8 0f02 	cmp.w	r8, #2
 8006dfa:	81a3      	strh	r3, [r4, #12]
 8006dfc:	d061      	beq.n	8006ec2 <setvbuf+0x14a>
 8006dfe:	ab01      	add	r3, sp, #4
 8006e00:	466a      	mov	r2, sp
 8006e02:	4621      	mov	r1, r4
 8006e04:	4638      	mov	r0, r7
 8006e06:	f001 f8a5 	bl	8007f54 <__swhatbuf_r>
 8006e0a:	89a3      	ldrh	r3, [r4, #12]
 8006e0c:	4318      	orrs	r0, r3
 8006e0e:	81a0      	strh	r0, [r4, #12]
 8006e10:	bb2d      	cbnz	r5, 8006e5e <setvbuf+0xe6>
 8006e12:	9d00      	ldr	r5, [sp, #0]
 8006e14:	4628      	mov	r0, r5
 8006e16:	f000 f96d 	bl	80070f4 <malloc>
 8006e1a:	4606      	mov	r6, r0
 8006e1c:	2800      	cmp	r0, #0
 8006e1e:	d152      	bne.n	8006ec6 <setvbuf+0x14e>
 8006e20:	f8dd 9000 	ldr.w	r9, [sp]
 8006e24:	45a9      	cmp	r9, r5
 8006e26:	d140      	bne.n	8006eaa <setvbuf+0x132>
 8006e28:	f04f 35ff 	mov.w	r5, #4294967295
 8006e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e30:	f043 0202 	orr.w	r2, r3, #2
 8006e34:	81a2      	strh	r2, [r4, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	60a2      	str	r2, [r4, #8]
 8006e3a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8006e3e:	6022      	str	r2, [r4, #0]
 8006e40:	6122      	str	r2, [r4, #16]
 8006e42:	2201      	movs	r2, #1
 8006e44:	6162      	str	r2, [r4, #20]
 8006e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e48:	07d6      	lsls	r6, r2, #31
 8006e4a:	d404      	bmi.n	8006e56 <setvbuf+0xde>
 8006e4c:	0598      	lsls	r0, r3, #22
 8006e4e:	d402      	bmi.n	8006e56 <setvbuf+0xde>
 8006e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e52:	f000 f903 	bl	800705c <__retarget_lock_release_recursive>
 8006e56:	4628      	mov	r0, r5
 8006e58:	b003      	add	sp, #12
 8006e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006e5e:	2e00      	cmp	r6, #0
 8006e60:	d0d8      	beq.n	8006e14 <setvbuf+0x9c>
 8006e62:	6a3b      	ldr	r3, [r7, #32]
 8006e64:	b913      	cbnz	r3, 8006e6c <setvbuf+0xf4>
 8006e66:	4638      	mov	r0, r7
 8006e68:	f7ff ff2c 	bl	8006cc4 <__sinit>
 8006e6c:	f1b8 0f01 	cmp.w	r8, #1
 8006e70:	bf08      	it	eq
 8006e72:	89a3      	ldrheq	r3, [r4, #12]
 8006e74:	6026      	str	r6, [r4, #0]
 8006e76:	bf04      	itt	eq
 8006e78:	f043 0301 	orreq.w	r3, r3, #1
 8006e7c:	81a3      	strheq	r3, [r4, #12]
 8006e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e82:	f013 0208 	ands.w	r2, r3, #8
 8006e86:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8006e8a:	d01e      	beq.n	8006eca <setvbuf+0x152>
 8006e8c:	07d9      	lsls	r1, r3, #31
 8006e8e:	bf41      	itttt	mi
 8006e90:	2200      	movmi	r2, #0
 8006e92:	426d      	negmi	r5, r5
 8006e94:	60a2      	strmi	r2, [r4, #8]
 8006e96:	61a5      	strmi	r5, [r4, #24]
 8006e98:	bf58      	it	pl
 8006e9a:	60a5      	strpl	r5, [r4, #8]
 8006e9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e9e:	07d2      	lsls	r2, r2, #31
 8006ea0:	d401      	bmi.n	8006ea6 <setvbuf+0x12e>
 8006ea2:	059b      	lsls	r3, r3, #22
 8006ea4:	d513      	bpl.n	8006ece <setvbuf+0x156>
 8006ea6:	2500      	movs	r5, #0
 8006ea8:	e7d5      	b.n	8006e56 <setvbuf+0xde>
 8006eaa:	4648      	mov	r0, r9
 8006eac:	f000 f922 	bl	80070f4 <malloc>
 8006eb0:	4606      	mov	r6, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d0b8      	beq.n	8006e28 <setvbuf+0xb0>
 8006eb6:	89a3      	ldrh	r3, [r4, #12]
 8006eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	464d      	mov	r5, r9
 8006ec0:	e7cf      	b.n	8006e62 <setvbuf+0xea>
 8006ec2:	2500      	movs	r5, #0
 8006ec4:	e7b2      	b.n	8006e2c <setvbuf+0xb4>
 8006ec6:	46a9      	mov	r9, r5
 8006ec8:	e7f5      	b.n	8006eb6 <setvbuf+0x13e>
 8006eca:	60a2      	str	r2, [r4, #8]
 8006ecc:	e7e6      	b.n	8006e9c <setvbuf+0x124>
 8006ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ed0:	f000 f8c4 	bl	800705c <__retarget_lock_release_recursive>
 8006ed4:	e7e7      	b.n	8006ea6 <setvbuf+0x12e>
 8006ed6:	f04f 35ff 	mov.w	r5, #4294967295
 8006eda:	e7bc      	b.n	8006e56 <setvbuf+0xde>
 8006edc:	2400001c 	.word	0x2400001c

08006ee0 <__sread>:
 8006ee0:	b510      	push	{r4, lr}
 8006ee2:	460c      	mov	r4, r1
 8006ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ee8:	f000 f868 	bl	8006fbc <_read_r>
 8006eec:	2800      	cmp	r0, #0
 8006eee:	bfab      	itete	ge
 8006ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef4:	181b      	addge	r3, r3, r0
 8006ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006efa:	bfac      	ite	ge
 8006efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006efe:	81a3      	strhlt	r3, [r4, #12]
 8006f00:	bd10      	pop	{r4, pc}

08006f02 <__swrite>:
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	461f      	mov	r7, r3
 8006f08:	898b      	ldrh	r3, [r1, #12]
 8006f0a:	05db      	lsls	r3, r3, #23
 8006f0c:	4605      	mov	r5, r0
 8006f0e:	460c      	mov	r4, r1
 8006f10:	4616      	mov	r6, r2
 8006f12:	d505      	bpl.n	8006f20 <__swrite+0x1e>
 8006f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f18:	2302      	movs	r3, #2
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f000 f83c 	bl	8006f98 <_lseek_r>
 8006f20:	89a3      	ldrh	r3, [r4, #12]
 8006f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f2a:	81a3      	strh	r3, [r4, #12]
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	463b      	mov	r3, r7
 8006f30:	4628      	mov	r0, r5
 8006f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f36:	f000 b853 	b.w	8006fe0 <_write_r>

08006f3a <__sseek>:
 8006f3a:	b510      	push	{r4, lr}
 8006f3c:	460c      	mov	r4, r1
 8006f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f42:	f000 f829 	bl	8006f98 <_lseek_r>
 8006f46:	1c43      	adds	r3, r0, #1
 8006f48:	89a3      	ldrh	r3, [r4, #12]
 8006f4a:	bf15      	itete	ne
 8006f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f56:	81a3      	strheq	r3, [r4, #12]
 8006f58:	bf18      	it	ne
 8006f5a:	81a3      	strhne	r3, [r4, #12]
 8006f5c:	bd10      	pop	{r4, pc}

08006f5e <__sclose>:
 8006f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f62:	f000 b809 	b.w	8006f78 <_close_r>

08006f66 <memset>:
 8006f66:	4402      	add	r2, r0
 8006f68:	4603      	mov	r3, r0
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d100      	bne.n	8006f70 <memset+0xa>
 8006f6e:	4770      	bx	lr
 8006f70:	f803 1b01 	strb.w	r1, [r3], #1
 8006f74:	e7f9      	b.n	8006f6a <memset+0x4>
	...

08006f78 <_close_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d06      	ldr	r5, [pc, #24]	@ (8006f94 <_close_r+0x1c>)
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	4604      	mov	r4, r0
 8006f80:	4608      	mov	r0, r1
 8006f82:	602b      	str	r3, [r5, #0]
 8006f84:	f7f9 fe42 	bl	8000c0c <_close>
 8006f88:	1c43      	adds	r3, r0, #1
 8006f8a:	d102      	bne.n	8006f92 <_close_r+0x1a>
 8006f8c:	682b      	ldr	r3, [r5, #0]
 8006f8e:	b103      	cbz	r3, 8006f92 <_close_r+0x1a>
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	bd38      	pop	{r3, r4, r5, pc}
 8006f94:	240008f8 	.word	0x240008f8

08006f98 <_lseek_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	4d07      	ldr	r5, [pc, #28]	@ (8006fb8 <_lseek_r+0x20>)
 8006f9c:	4604      	mov	r4, r0
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	602a      	str	r2, [r5, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f7f9 fe47 	bl	8000c3a <_lseek>
 8006fac:	1c43      	adds	r3, r0, #1
 8006fae:	d102      	bne.n	8006fb6 <_lseek_r+0x1e>
 8006fb0:	682b      	ldr	r3, [r5, #0]
 8006fb2:	b103      	cbz	r3, 8006fb6 <_lseek_r+0x1e>
 8006fb4:	6023      	str	r3, [r4, #0]
 8006fb6:	bd38      	pop	{r3, r4, r5, pc}
 8006fb8:	240008f8 	.word	0x240008f8

08006fbc <_read_r>:
 8006fbc:	b538      	push	{r3, r4, r5, lr}
 8006fbe:	4d07      	ldr	r5, [pc, #28]	@ (8006fdc <_read_r+0x20>)
 8006fc0:	4604      	mov	r4, r0
 8006fc2:	4608      	mov	r0, r1
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	602a      	str	r2, [r5, #0]
 8006fca:	461a      	mov	r2, r3
 8006fcc:	f7f9 fe46 	bl	8000c5c <_read>
 8006fd0:	1c43      	adds	r3, r0, #1
 8006fd2:	d102      	bne.n	8006fda <_read_r+0x1e>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	b103      	cbz	r3, 8006fda <_read_r+0x1e>
 8006fd8:	6023      	str	r3, [r4, #0]
 8006fda:	bd38      	pop	{r3, r4, r5, pc}
 8006fdc:	240008f8 	.word	0x240008f8

08006fe0 <_write_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d07      	ldr	r5, [pc, #28]	@ (8007000 <_write_r+0x20>)
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	4608      	mov	r0, r1
 8006fe8:	4611      	mov	r1, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	602a      	str	r2, [r5, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f7f9 fde0 	bl	8000bb4 <_write>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_write_r+0x1e>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_write_r+0x1e>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	240008f8 	.word	0x240008f8

08007004 <__errno>:
 8007004:	4b01      	ldr	r3, [pc, #4]	@ (800700c <__errno+0x8>)
 8007006:	6818      	ldr	r0, [r3, #0]
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	2400001c 	.word	0x2400001c

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4d0d      	ldr	r5, [pc, #52]	@ (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	@ (800704c <__libc_init_array+0x3c>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2600      	movs	r6, #0
 800701c:	42a6      	cmp	r6, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4d0b      	ldr	r5, [pc, #44]	@ (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	@ (8007054 <__libc_init_array+0x44>)
 8007024:	f001 fb62 	bl	80086ec <_init>
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2600      	movs	r6, #0
 800702e:	42a6      	cmp	r6, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f855 3b04 	ldr.w	r3, [r5], #4
 8007038:	4798      	blx	r3
 800703a:	3601      	adds	r6, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007042:	4798      	blx	r3
 8007044:	3601      	adds	r6, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	080088c4 	.word	0x080088c4
 800704c:	080088c4 	.word	0x080088c4
 8007050:	080088c4 	.word	0x080088c4
 8007054:	080088c8 	.word	0x080088c8

08007058 <__retarget_lock_init_recursive>:
 8007058:	4770      	bx	lr

0800705a <__retarget_lock_acquire_recursive>:
 800705a:	4770      	bx	lr

0800705c <__retarget_lock_release_recursive>:
 800705c:	4770      	bx	lr
	...

08007060 <_free_r>:
 8007060:	b538      	push	{r3, r4, r5, lr}
 8007062:	4605      	mov	r5, r0
 8007064:	2900      	cmp	r1, #0
 8007066:	d041      	beq.n	80070ec <_free_r+0x8c>
 8007068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800706c:	1f0c      	subs	r4, r1, #4
 800706e:	2b00      	cmp	r3, #0
 8007070:	bfb8      	it	lt
 8007072:	18e4      	addlt	r4, r4, r3
 8007074:	f000 f8e8 	bl	8007248 <__malloc_lock>
 8007078:	4a1d      	ldr	r2, [pc, #116]	@ (80070f0 <_free_r+0x90>)
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	b933      	cbnz	r3, 800708c <_free_r+0x2c>
 800707e:	6063      	str	r3, [r4, #4]
 8007080:	6014      	str	r4, [r2, #0]
 8007082:	4628      	mov	r0, r5
 8007084:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007088:	f000 b8e4 	b.w	8007254 <__malloc_unlock>
 800708c:	42a3      	cmp	r3, r4
 800708e:	d908      	bls.n	80070a2 <_free_r+0x42>
 8007090:	6820      	ldr	r0, [r4, #0]
 8007092:	1821      	adds	r1, r4, r0
 8007094:	428b      	cmp	r3, r1
 8007096:	bf01      	itttt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	1809      	addeq	r1, r1, r0
 800709e:	6021      	streq	r1, [r4, #0]
 80070a0:	e7ed      	b.n	800707e <_free_r+0x1e>
 80070a2:	461a      	mov	r2, r3
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	b10b      	cbz	r3, 80070ac <_free_r+0x4c>
 80070a8:	42a3      	cmp	r3, r4
 80070aa:	d9fa      	bls.n	80070a2 <_free_r+0x42>
 80070ac:	6811      	ldr	r1, [r2, #0]
 80070ae:	1850      	adds	r0, r2, r1
 80070b0:	42a0      	cmp	r0, r4
 80070b2:	d10b      	bne.n	80070cc <_free_r+0x6c>
 80070b4:	6820      	ldr	r0, [r4, #0]
 80070b6:	4401      	add	r1, r0
 80070b8:	1850      	adds	r0, r2, r1
 80070ba:	4283      	cmp	r3, r0
 80070bc:	6011      	str	r1, [r2, #0]
 80070be:	d1e0      	bne.n	8007082 <_free_r+0x22>
 80070c0:	6818      	ldr	r0, [r3, #0]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	6053      	str	r3, [r2, #4]
 80070c6:	4408      	add	r0, r1
 80070c8:	6010      	str	r0, [r2, #0]
 80070ca:	e7da      	b.n	8007082 <_free_r+0x22>
 80070cc:	d902      	bls.n	80070d4 <_free_r+0x74>
 80070ce:	230c      	movs	r3, #12
 80070d0:	602b      	str	r3, [r5, #0]
 80070d2:	e7d6      	b.n	8007082 <_free_r+0x22>
 80070d4:	6820      	ldr	r0, [r4, #0]
 80070d6:	1821      	adds	r1, r4, r0
 80070d8:	428b      	cmp	r3, r1
 80070da:	bf04      	itt	eq
 80070dc:	6819      	ldreq	r1, [r3, #0]
 80070de:	685b      	ldreq	r3, [r3, #4]
 80070e0:	6063      	str	r3, [r4, #4]
 80070e2:	bf04      	itt	eq
 80070e4:	1809      	addeq	r1, r1, r0
 80070e6:	6021      	streq	r1, [r4, #0]
 80070e8:	6054      	str	r4, [r2, #4]
 80070ea:	e7ca      	b.n	8007082 <_free_r+0x22>
 80070ec:	bd38      	pop	{r3, r4, r5, pc}
 80070ee:	bf00      	nop
 80070f0:	24000904 	.word	0x24000904

080070f4 <malloc>:
 80070f4:	4b02      	ldr	r3, [pc, #8]	@ (8007100 <malloc+0xc>)
 80070f6:	4601      	mov	r1, r0
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	f000 b825 	b.w	8007148 <_malloc_r>
 80070fe:	bf00      	nop
 8007100:	2400001c 	.word	0x2400001c

08007104 <sbrk_aligned>:
 8007104:	b570      	push	{r4, r5, r6, lr}
 8007106:	4e0f      	ldr	r6, [pc, #60]	@ (8007144 <sbrk_aligned+0x40>)
 8007108:	460c      	mov	r4, r1
 800710a:	6831      	ldr	r1, [r6, #0]
 800710c:	4605      	mov	r5, r0
 800710e:	b911      	cbnz	r1, 8007116 <sbrk_aligned+0x12>
 8007110:	f001 f9ac 	bl	800846c <_sbrk_r>
 8007114:	6030      	str	r0, [r6, #0]
 8007116:	4621      	mov	r1, r4
 8007118:	4628      	mov	r0, r5
 800711a:	f001 f9a7 	bl	800846c <_sbrk_r>
 800711e:	1c43      	adds	r3, r0, #1
 8007120:	d103      	bne.n	800712a <sbrk_aligned+0x26>
 8007122:	f04f 34ff 	mov.w	r4, #4294967295
 8007126:	4620      	mov	r0, r4
 8007128:	bd70      	pop	{r4, r5, r6, pc}
 800712a:	1cc4      	adds	r4, r0, #3
 800712c:	f024 0403 	bic.w	r4, r4, #3
 8007130:	42a0      	cmp	r0, r4
 8007132:	d0f8      	beq.n	8007126 <sbrk_aligned+0x22>
 8007134:	1a21      	subs	r1, r4, r0
 8007136:	4628      	mov	r0, r5
 8007138:	f001 f998 	bl	800846c <_sbrk_r>
 800713c:	3001      	adds	r0, #1
 800713e:	d1f2      	bne.n	8007126 <sbrk_aligned+0x22>
 8007140:	e7ef      	b.n	8007122 <sbrk_aligned+0x1e>
 8007142:	bf00      	nop
 8007144:	24000900 	.word	0x24000900

08007148 <_malloc_r>:
 8007148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800714c:	1ccd      	adds	r5, r1, #3
 800714e:	f025 0503 	bic.w	r5, r5, #3
 8007152:	3508      	adds	r5, #8
 8007154:	2d0c      	cmp	r5, #12
 8007156:	bf38      	it	cc
 8007158:	250c      	movcc	r5, #12
 800715a:	2d00      	cmp	r5, #0
 800715c:	4606      	mov	r6, r0
 800715e:	db01      	blt.n	8007164 <_malloc_r+0x1c>
 8007160:	42a9      	cmp	r1, r5
 8007162:	d904      	bls.n	800716e <_malloc_r+0x26>
 8007164:	230c      	movs	r3, #12
 8007166:	6033      	str	r3, [r6, #0]
 8007168:	2000      	movs	r0, #0
 800716a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800716e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007244 <_malloc_r+0xfc>
 8007172:	f000 f869 	bl	8007248 <__malloc_lock>
 8007176:	f8d8 3000 	ldr.w	r3, [r8]
 800717a:	461c      	mov	r4, r3
 800717c:	bb44      	cbnz	r4, 80071d0 <_malloc_r+0x88>
 800717e:	4629      	mov	r1, r5
 8007180:	4630      	mov	r0, r6
 8007182:	f7ff ffbf 	bl	8007104 <sbrk_aligned>
 8007186:	1c43      	adds	r3, r0, #1
 8007188:	4604      	mov	r4, r0
 800718a:	d158      	bne.n	800723e <_malloc_r+0xf6>
 800718c:	f8d8 4000 	ldr.w	r4, [r8]
 8007190:	4627      	mov	r7, r4
 8007192:	2f00      	cmp	r7, #0
 8007194:	d143      	bne.n	800721e <_malloc_r+0xd6>
 8007196:	2c00      	cmp	r4, #0
 8007198:	d04b      	beq.n	8007232 <_malloc_r+0xea>
 800719a:	6823      	ldr	r3, [r4, #0]
 800719c:	4639      	mov	r1, r7
 800719e:	4630      	mov	r0, r6
 80071a0:	eb04 0903 	add.w	r9, r4, r3
 80071a4:	f001 f962 	bl	800846c <_sbrk_r>
 80071a8:	4581      	cmp	r9, r0
 80071aa:	d142      	bne.n	8007232 <_malloc_r+0xea>
 80071ac:	6821      	ldr	r1, [r4, #0]
 80071ae:	1a6d      	subs	r5, r5, r1
 80071b0:	4629      	mov	r1, r5
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ffa6 	bl	8007104 <sbrk_aligned>
 80071b8:	3001      	adds	r0, #1
 80071ba:	d03a      	beq.n	8007232 <_malloc_r+0xea>
 80071bc:	6823      	ldr	r3, [r4, #0]
 80071be:	442b      	add	r3, r5
 80071c0:	6023      	str	r3, [r4, #0]
 80071c2:	f8d8 3000 	ldr.w	r3, [r8]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	bb62      	cbnz	r2, 8007224 <_malloc_r+0xdc>
 80071ca:	f8c8 7000 	str.w	r7, [r8]
 80071ce:	e00f      	b.n	80071f0 <_malloc_r+0xa8>
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	1b52      	subs	r2, r2, r5
 80071d4:	d420      	bmi.n	8007218 <_malloc_r+0xd0>
 80071d6:	2a0b      	cmp	r2, #11
 80071d8:	d917      	bls.n	800720a <_malloc_r+0xc2>
 80071da:	1961      	adds	r1, r4, r5
 80071dc:	42a3      	cmp	r3, r4
 80071de:	6025      	str	r5, [r4, #0]
 80071e0:	bf18      	it	ne
 80071e2:	6059      	strne	r1, [r3, #4]
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	bf08      	it	eq
 80071e8:	f8c8 1000 	streq.w	r1, [r8]
 80071ec:	5162      	str	r2, [r4, r5]
 80071ee:	604b      	str	r3, [r1, #4]
 80071f0:	4630      	mov	r0, r6
 80071f2:	f000 f82f 	bl	8007254 <__malloc_unlock>
 80071f6:	f104 000b 	add.w	r0, r4, #11
 80071fa:	1d23      	adds	r3, r4, #4
 80071fc:	f020 0007 	bic.w	r0, r0, #7
 8007200:	1ac2      	subs	r2, r0, r3
 8007202:	bf1c      	itt	ne
 8007204:	1a1b      	subne	r3, r3, r0
 8007206:	50a3      	strne	r3, [r4, r2]
 8007208:	e7af      	b.n	800716a <_malloc_r+0x22>
 800720a:	6862      	ldr	r2, [r4, #4]
 800720c:	42a3      	cmp	r3, r4
 800720e:	bf0c      	ite	eq
 8007210:	f8c8 2000 	streq.w	r2, [r8]
 8007214:	605a      	strne	r2, [r3, #4]
 8007216:	e7eb      	b.n	80071f0 <_malloc_r+0xa8>
 8007218:	4623      	mov	r3, r4
 800721a:	6864      	ldr	r4, [r4, #4]
 800721c:	e7ae      	b.n	800717c <_malloc_r+0x34>
 800721e:	463c      	mov	r4, r7
 8007220:	687f      	ldr	r7, [r7, #4]
 8007222:	e7b6      	b.n	8007192 <_malloc_r+0x4a>
 8007224:	461a      	mov	r2, r3
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	42a3      	cmp	r3, r4
 800722a:	d1fb      	bne.n	8007224 <_malloc_r+0xdc>
 800722c:	2300      	movs	r3, #0
 800722e:	6053      	str	r3, [r2, #4]
 8007230:	e7de      	b.n	80071f0 <_malloc_r+0xa8>
 8007232:	230c      	movs	r3, #12
 8007234:	6033      	str	r3, [r6, #0]
 8007236:	4630      	mov	r0, r6
 8007238:	f000 f80c 	bl	8007254 <__malloc_unlock>
 800723c:	e794      	b.n	8007168 <_malloc_r+0x20>
 800723e:	6005      	str	r5, [r0, #0]
 8007240:	e7d6      	b.n	80071f0 <_malloc_r+0xa8>
 8007242:	bf00      	nop
 8007244:	24000904 	.word	0x24000904

08007248 <__malloc_lock>:
 8007248:	4801      	ldr	r0, [pc, #4]	@ (8007250 <__malloc_lock+0x8>)
 800724a:	f7ff bf06 	b.w	800705a <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	240008fc 	.word	0x240008fc

08007254 <__malloc_unlock>:
 8007254:	4801      	ldr	r0, [pc, #4]	@ (800725c <__malloc_unlock+0x8>)
 8007256:	f7ff bf01 	b.w	800705c <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	240008fc 	.word	0x240008fc

08007260 <__sfputc_r>:
 8007260:	6893      	ldr	r3, [r2, #8]
 8007262:	3b01      	subs	r3, #1
 8007264:	2b00      	cmp	r3, #0
 8007266:	b410      	push	{r4}
 8007268:	6093      	str	r3, [r2, #8]
 800726a:	da08      	bge.n	800727e <__sfputc_r+0x1e>
 800726c:	6994      	ldr	r4, [r2, #24]
 800726e:	42a3      	cmp	r3, r4
 8007270:	db01      	blt.n	8007276 <__sfputc_r+0x16>
 8007272:	290a      	cmp	r1, #10
 8007274:	d103      	bne.n	800727e <__sfputc_r+0x1e>
 8007276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800727a:	f001 b841 	b.w	8008300 <__swbuf_r>
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	1c58      	adds	r0, r3, #1
 8007282:	6010      	str	r0, [r2, #0]
 8007284:	7019      	strb	r1, [r3, #0]
 8007286:	4608      	mov	r0, r1
 8007288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800728c:	4770      	bx	lr

0800728e <__sfputs_r>:
 800728e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007290:	4606      	mov	r6, r0
 8007292:	460f      	mov	r7, r1
 8007294:	4614      	mov	r4, r2
 8007296:	18d5      	adds	r5, r2, r3
 8007298:	42ac      	cmp	r4, r5
 800729a:	d101      	bne.n	80072a0 <__sfputs_r+0x12>
 800729c:	2000      	movs	r0, #0
 800729e:	e007      	b.n	80072b0 <__sfputs_r+0x22>
 80072a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072a4:	463a      	mov	r2, r7
 80072a6:	4630      	mov	r0, r6
 80072a8:	f7ff ffda 	bl	8007260 <__sfputc_r>
 80072ac:	1c43      	adds	r3, r0, #1
 80072ae:	d1f3      	bne.n	8007298 <__sfputs_r+0xa>
 80072b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080072b4 <_vfiprintf_r>:
 80072b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b8:	460d      	mov	r5, r1
 80072ba:	b09d      	sub	sp, #116	@ 0x74
 80072bc:	4614      	mov	r4, r2
 80072be:	4698      	mov	r8, r3
 80072c0:	4606      	mov	r6, r0
 80072c2:	b118      	cbz	r0, 80072cc <_vfiprintf_r+0x18>
 80072c4:	6a03      	ldr	r3, [r0, #32]
 80072c6:	b90b      	cbnz	r3, 80072cc <_vfiprintf_r+0x18>
 80072c8:	f7ff fcfc 	bl	8006cc4 <__sinit>
 80072cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072ce:	07d9      	lsls	r1, r3, #31
 80072d0:	d405      	bmi.n	80072de <_vfiprintf_r+0x2a>
 80072d2:	89ab      	ldrh	r3, [r5, #12]
 80072d4:	059a      	lsls	r2, r3, #22
 80072d6:	d402      	bmi.n	80072de <_vfiprintf_r+0x2a>
 80072d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072da:	f7ff febe 	bl	800705a <__retarget_lock_acquire_recursive>
 80072de:	89ab      	ldrh	r3, [r5, #12]
 80072e0:	071b      	lsls	r3, r3, #28
 80072e2:	d501      	bpl.n	80072e8 <_vfiprintf_r+0x34>
 80072e4:	692b      	ldr	r3, [r5, #16]
 80072e6:	b99b      	cbnz	r3, 8007310 <_vfiprintf_r+0x5c>
 80072e8:	4629      	mov	r1, r5
 80072ea:	4630      	mov	r0, r6
 80072ec:	f001 f846 	bl	800837c <__swsetup_r>
 80072f0:	b170      	cbz	r0, 8007310 <_vfiprintf_r+0x5c>
 80072f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072f4:	07dc      	lsls	r4, r3, #31
 80072f6:	d504      	bpl.n	8007302 <_vfiprintf_r+0x4e>
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295
 80072fc:	b01d      	add	sp, #116	@ 0x74
 80072fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	0598      	lsls	r0, r3, #22
 8007306:	d4f7      	bmi.n	80072f8 <_vfiprintf_r+0x44>
 8007308:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800730a:	f7ff fea7 	bl	800705c <__retarget_lock_release_recursive>
 800730e:	e7f3      	b.n	80072f8 <_vfiprintf_r+0x44>
 8007310:	2300      	movs	r3, #0
 8007312:	9309      	str	r3, [sp, #36]	@ 0x24
 8007314:	2320      	movs	r3, #32
 8007316:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800731a:	f8cd 800c 	str.w	r8, [sp, #12]
 800731e:	2330      	movs	r3, #48	@ 0x30
 8007320:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074d0 <_vfiprintf_r+0x21c>
 8007324:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007328:	f04f 0901 	mov.w	r9, #1
 800732c:	4623      	mov	r3, r4
 800732e:	469a      	mov	sl, r3
 8007330:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007334:	b10a      	cbz	r2, 800733a <_vfiprintf_r+0x86>
 8007336:	2a25      	cmp	r2, #37	@ 0x25
 8007338:	d1f9      	bne.n	800732e <_vfiprintf_r+0x7a>
 800733a:	ebba 0b04 	subs.w	fp, sl, r4
 800733e:	d00b      	beq.n	8007358 <_vfiprintf_r+0xa4>
 8007340:	465b      	mov	r3, fp
 8007342:	4622      	mov	r2, r4
 8007344:	4629      	mov	r1, r5
 8007346:	4630      	mov	r0, r6
 8007348:	f7ff ffa1 	bl	800728e <__sfputs_r>
 800734c:	3001      	adds	r0, #1
 800734e:	f000 80a7 	beq.w	80074a0 <_vfiprintf_r+0x1ec>
 8007352:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007354:	445a      	add	r2, fp
 8007356:	9209      	str	r2, [sp, #36]	@ 0x24
 8007358:	f89a 3000 	ldrb.w	r3, [sl]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 809f 	beq.w	80074a0 <_vfiprintf_r+0x1ec>
 8007362:	2300      	movs	r3, #0
 8007364:	f04f 32ff 	mov.w	r2, #4294967295
 8007368:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800736c:	f10a 0a01 	add.w	sl, sl, #1
 8007370:	9304      	str	r3, [sp, #16]
 8007372:	9307      	str	r3, [sp, #28]
 8007374:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007378:	931a      	str	r3, [sp, #104]	@ 0x68
 800737a:	4654      	mov	r4, sl
 800737c:	2205      	movs	r2, #5
 800737e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007382:	4853      	ldr	r0, [pc, #332]	@ (80074d0 <_vfiprintf_r+0x21c>)
 8007384:	f7f8 ffac 	bl	80002e0 <memchr>
 8007388:	9a04      	ldr	r2, [sp, #16]
 800738a:	b9d8      	cbnz	r0, 80073c4 <_vfiprintf_r+0x110>
 800738c:	06d1      	lsls	r1, r2, #27
 800738e:	bf44      	itt	mi
 8007390:	2320      	movmi	r3, #32
 8007392:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007396:	0713      	lsls	r3, r2, #28
 8007398:	bf44      	itt	mi
 800739a:	232b      	movmi	r3, #43	@ 0x2b
 800739c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80073a0:	f89a 3000 	ldrb.w	r3, [sl]
 80073a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a6:	d015      	beq.n	80073d4 <_vfiprintf_r+0x120>
 80073a8:	9a07      	ldr	r2, [sp, #28]
 80073aa:	4654      	mov	r4, sl
 80073ac:	2000      	movs	r0, #0
 80073ae:	f04f 0c0a 	mov.w	ip, #10
 80073b2:	4621      	mov	r1, r4
 80073b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073b8:	3b30      	subs	r3, #48	@ 0x30
 80073ba:	2b09      	cmp	r3, #9
 80073bc:	d94b      	bls.n	8007456 <_vfiprintf_r+0x1a2>
 80073be:	b1b0      	cbz	r0, 80073ee <_vfiprintf_r+0x13a>
 80073c0:	9207      	str	r2, [sp, #28]
 80073c2:	e014      	b.n	80073ee <_vfiprintf_r+0x13a>
 80073c4:	eba0 0308 	sub.w	r3, r0, r8
 80073c8:	fa09 f303 	lsl.w	r3, r9, r3
 80073cc:	4313      	orrs	r3, r2
 80073ce:	9304      	str	r3, [sp, #16]
 80073d0:	46a2      	mov	sl, r4
 80073d2:	e7d2      	b.n	800737a <_vfiprintf_r+0xc6>
 80073d4:	9b03      	ldr	r3, [sp, #12]
 80073d6:	1d19      	adds	r1, r3, #4
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	9103      	str	r1, [sp, #12]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	bfbb      	ittet	lt
 80073e0:	425b      	neglt	r3, r3
 80073e2:	f042 0202 	orrlt.w	r2, r2, #2
 80073e6:	9307      	strge	r3, [sp, #28]
 80073e8:	9307      	strlt	r3, [sp, #28]
 80073ea:	bfb8      	it	lt
 80073ec:	9204      	strlt	r2, [sp, #16]
 80073ee:	7823      	ldrb	r3, [r4, #0]
 80073f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073f2:	d10a      	bne.n	800740a <_vfiprintf_r+0x156>
 80073f4:	7863      	ldrb	r3, [r4, #1]
 80073f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073f8:	d132      	bne.n	8007460 <_vfiprintf_r+0x1ac>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	1d1a      	adds	r2, r3, #4
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	9203      	str	r2, [sp, #12]
 8007402:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007406:	3402      	adds	r4, #2
 8007408:	9305      	str	r3, [sp, #20]
 800740a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074e0 <_vfiprintf_r+0x22c>
 800740e:	7821      	ldrb	r1, [r4, #0]
 8007410:	2203      	movs	r2, #3
 8007412:	4650      	mov	r0, sl
 8007414:	f7f8 ff64 	bl	80002e0 <memchr>
 8007418:	b138      	cbz	r0, 800742a <_vfiprintf_r+0x176>
 800741a:	9b04      	ldr	r3, [sp, #16]
 800741c:	eba0 000a 	sub.w	r0, r0, sl
 8007420:	2240      	movs	r2, #64	@ 0x40
 8007422:	4082      	lsls	r2, r0
 8007424:	4313      	orrs	r3, r2
 8007426:	3401      	adds	r4, #1
 8007428:	9304      	str	r3, [sp, #16]
 800742a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800742e:	4829      	ldr	r0, [pc, #164]	@ (80074d4 <_vfiprintf_r+0x220>)
 8007430:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007434:	2206      	movs	r2, #6
 8007436:	f7f8 ff53 	bl	80002e0 <memchr>
 800743a:	2800      	cmp	r0, #0
 800743c:	d03f      	beq.n	80074be <_vfiprintf_r+0x20a>
 800743e:	4b26      	ldr	r3, [pc, #152]	@ (80074d8 <_vfiprintf_r+0x224>)
 8007440:	bb1b      	cbnz	r3, 800748a <_vfiprintf_r+0x1d6>
 8007442:	9b03      	ldr	r3, [sp, #12]
 8007444:	3307      	adds	r3, #7
 8007446:	f023 0307 	bic.w	r3, r3, #7
 800744a:	3308      	adds	r3, #8
 800744c:	9303      	str	r3, [sp, #12]
 800744e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007450:	443b      	add	r3, r7
 8007452:	9309      	str	r3, [sp, #36]	@ 0x24
 8007454:	e76a      	b.n	800732c <_vfiprintf_r+0x78>
 8007456:	fb0c 3202 	mla	r2, ip, r2, r3
 800745a:	460c      	mov	r4, r1
 800745c:	2001      	movs	r0, #1
 800745e:	e7a8      	b.n	80073b2 <_vfiprintf_r+0xfe>
 8007460:	2300      	movs	r3, #0
 8007462:	3401      	adds	r4, #1
 8007464:	9305      	str	r3, [sp, #20]
 8007466:	4619      	mov	r1, r3
 8007468:	f04f 0c0a 	mov.w	ip, #10
 800746c:	4620      	mov	r0, r4
 800746e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007472:	3a30      	subs	r2, #48	@ 0x30
 8007474:	2a09      	cmp	r2, #9
 8007476:	d903      	bls.n	8007480 <_vfiprintf_r+0x1cc>
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0c6      	beq.n	800740a <_vfiprintf_r+0x156>
 800747c:	9105      	str	r1, [sp, #20]
 800747e:	e7c4      	b.n	800740a <_vfiprintf_r+0x156>
 8007480:	fb0c 2101 	mla	r1, ip, r1, r2
 8007484:	4604      	mov	r4, r0
 8007486:	2301      	movs	r3, #1
 8007488:	e7f0      	b.n	800746c <_vfiprintf_r+0x1b8>
 800748a:	ab03      	add	r3, sp, #12
 800748c:	9300      	str	r3, [sp, #0]
 800748e:	462a      	mov	r2, r5
 8007490:	4b12      	ldr	r3, [pc, #72]	@ (80074dc <_vfiprintf_r+0x228>)
 8007492:	a904      	add	r1, sp, #16
 8007494:	4630      	mov	r0, r6
 8007496:	f3af 8000 	nop.w
 800749a:	4607      	mov	r7, r0
 800749c:	1c78      	adds	r0, r7, #1
 800749e:	d1d6      	bne.n	800744e <_vfiprintf_r+0x19a>
 80074a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074a2:	07d9      	lsls	r1, r3, #31
 80074a4:	d405      	bmi.n	80074b2 <_vfiprintf_r+0x1fe>
 80074a6:	89ab      	ldrh	r3, [r5, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d402      	bmi.n	80074b2 <_vfiprintf_r+0x1fe>
 80074ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074ae:	f7ff fdd5 	bl	800705c <__retarget_lock_release_recursive>
 80074b2:	89ab      	ldrh	r3, [r5, #12]
 80074b4:	065b      	lsls	r3, r3, #25
 80074b6:	f53f af1f 	bmi.w	80072f8 <_vfiprintf_r+0x44>
 80074ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80074bc:	e71e      	b.n	80072fc <_vfiprintf_r+0x48>
 80074be:	ab03      	add	r3, sp, #12
 80074c0:	9300      	str	r3, [sp, #0]
 80074c2:	462a      	mov	r2, r5
 80074c4:	4b05      	ldr	r3, [pc, #20]	@ (80074dc <_vfiprintf_r+0x228>)
 80074c6:	a904      	add	r1, sp, #16
 80074c8:	4630      	mov	r0, r6
 80074ca:	f000 f879 	bl	80075c0 <_printf_i>
 80074ce:	e7e4      	b.n	800749a <_vfiprintf_r+0x1e6>
 80074d0:	0800876c 	.word	0x0800876c
 80074d4:	08008776 	.word	0x08008776
 80074d8:	00000000 	.word	0x00000000
 80074dc:	0800728f 	.word	0x0800728f
 80074e0:	08008772 	.word	0x08008772

080074e4 <_printf_common>:
 80074e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074e8:	4616      	mov	r6, r2
 80074ea:	4698      	mov	r8, r3
 80074ec:	688a      	ldr	r2, [r1, #8]
 80074ee:	690b      	ldr	r3, [r1, #16]
 80074f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074f4:	4293      	cmp	r3, r2
 80074f6:	bfb8      	it	lt
 80074f8:	4613      	movlt	r3, r2
 80074fa:	6033      	str	r3, [r6, #0]
 80074fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007500:	4607      	mov	r7, r0
 8007502:	460c      	mov	r4, r1
 8007504:	b10a      	cbz	r2, 800750a <_printf_common+0x26>
 8007506:	3301      	adds	r3, #1
 8007508:	6033      	str	r3, [r6, #0]
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	0699      	lsls	r1, r3, #26
 800750e:	bf42      	ittt	mi
 8007510:	6833      	ldrmi	r3, [r6, #0]
 8007512:	3302      	addmi	r3, #2
 8007514:	6033      	strmi	r3, [r6, #0]
 8007516:	6825      	ldr	r5, [r4, #0]
 8007518:	f015 0506 	ands.w	r5, r5, #6
 800751c:	d106      	bne.n	800752c <_printf_common+0x48>
 800751e:	f104 0a19 	add.w	sl, r4, #25
 8007522:	68e3      	ldr	r3, [r4, #12]
 8007524:	6832      	ldr	r2, [r6, #0]
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	42ab      	cmp	r3, r5
 800752a:	dc26      	bgt.n	800757a <_printf_common+0x96>
 800752c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007530:	6822      	ldr	r2, [r4, #0]
 8007532:	3b00      	subs	r3, #0
 8007534:	bf18      	it	ne
 8007536:	2301      	movne	r3, #1
 8007538:	0692      	lsls	r2, r2, #26
 800753a:	d42b      	bmi.n	8007594 <_printf_common+0xb0>
 800753c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007540:	4641      	mov	r1, r8
 8007542:	4638      	mov	r0, r7
 8007544:	47c8      	blx	r9
 8007546:	3001      	adds	r0, #1
 8007548:	d01e      	beq.n	8007588 <_printf_common+0xa4>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	6922      	ldr	r2, [r4, #16]
 800754e:	f003 0306 	and.w	r3, r3, #6
 8007552:	2b04      	cmp	r3, #4
 8007554:	bf02      	ittt	eq
 8007556:	68e5      	ldreq	r5, [r4, #12]
 8007558:	6833      	ldreq	r3, [r6, #0]
 800755a:	1aed      	subeq	r5, r5, r3
 800755c:	68a3      	ldr	r3, [r4, #8]
 800755e:	bf0c      	ite	eq
 8007560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007564:	2500      	movne	r5, #0
 8007566:	4293      	cmp	r3, r2
 8007568:	bfc4      	itt	gt
 800756a:	1a9b      	subgt	r3, r3, r2
 800756c:	18ed      	addgt	r5, r5, r3
 800756e:	2600      	movs	r6, #0
 8007570:	341a      	adds	r4, #26
 8007572:	42b5      	cmp	r5, r6
 8007574:	d11a      	bne.n	80075ac <_printf_common+0xc8>
 8007576:	2000      	movs	r0, #0
 8007578:	e008      	b.n	800758c <_printf_common+0xa8>
 800757a:	2301      	movs	r3, #1
 800757c:	4652      	mov	r2, sl
 800757e:	4641      	mov	r1, r8
 8007580:	4638      	mov	r0, r7
 8007582:	47c8      	blx	r9
 8007584:	3001      	adds	r0, #1
 8007586:	d103      	bne.n	8007590 <_printf_common+0xac>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007590:	3501      	adds	r5, #1
 8007592:	e7c6      	b.n	8007522 <_printf_common+0x3e>
 8007594:	18e1      	adds	r1, r4, r3
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	2030      	movs	r0, #48	@ 0x30
 800759a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800759e:	4422      	add	r2, r4
 80075a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80075a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80075a8:	3302      	adds	r3, #2
 80075aa:	e7c7      	b.n	800753c <_printf_common+0x58>
 80075ac:	2301      	movs	r3, #1
 80075ae:	4622      	mov	r2, r4
 80075b0:	4641      	mov	r1, r8
 80075b2:	4638      	mov	r0, r7
 80075b4:	47c8      	blx	r9
 80075b6:	3001      	adds	r0, #1
 80075b8:	d0e6      	beq.n	8007588 <_printf_common+0xa4>
 80075ba:	3601      	adds	r6, #1
 80075bc:	e7d9      	b.n	8007572 <_printf_common+0x8e>
	...

080075c0 <_printf_i>:
 80075c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075c4:	7e0f      	ldrb	r7, [r1, #24]
 80075c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80075c8:	2f78      	cmp	r7, #120	@ 0x78
 80075ca:	4691      	mov	r9, r2
 80075cc:	4680      	mov	r8, r0
 80075ce:	460c      	mov	r4, r1
 80075d0:	469a      	mov	sl, r3
 80075d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075d6:	d807      	bhi.n	80075e8 <_printf_i+0x28>
 80075d8:	2f62      	cmp	r7, #98	@ 0x62
 80075da:	d80a      	bhi.n	80075f2 <_printf_i+0x32>
 80075dc:	2f00      	cmp	r7, #0
 80075de:	f000 80d1 	beq.w	8007784 <_printf_i+0x1c4>
 80075e2:	2f58      	cmp	r7, #88	@ 0x58
 80075e4:	f000 80b8 	beq.w	8007758 <_printf_i+0x198>
 80075e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075f0:	e03a      	b.n	8007668 <_printf_i+0xa8>
 80075f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075f6:	2b15      	cmp	r3, #21
 80075f8:	d8f6      	bhi.n	80075e8 <_printf_i+0x28>
 80075fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007600 <_printf_i+0x40>)
 80075fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007600:	08007659 	.word	0x08007659
 8007604:	0800766d 	.word	0x0800766d
 8007608:	080075e9 	.word	0x080075e9
 800760c:	080075e9 	.word	0x080075e9
 8007610:	080075e9 	.word	0x080075e9
 8007614:	080075e9 	.word	0x080075e9
 8007618:	0800766d 	.word	0x0800766d
 800761c:	080075e9 	.word	0x080075e9
 8007620:	080075e9 	.word	0x080075e9
 8007624:	080075e9 	.word	0x080075e9
 8007628:	080075e9 	.word	0x080075e9
 800762c:	0800776b 	.word	0x0800776b
 8007630:	08007697 	.word	0x08007697
 8007634:	08007725 	.word	0x08007725
 8007638:	080075e9 	.word	0x080075e9
 800763c:	080075e9 	.word	0x080075e9
 8007640:	0800778d 	.word	0x0800778d
 8007644:	080075e9 	.word	0x080075e9
 8007648:	08007697 	.word	0x08007697
 800764c:	080075e9 	.word	0x080075e9
 8007650:	080075e9 	.word	0x080075e9
 8007654:	0800772d 	.word	0x0800772d
 8007658:	6833      	ldr	r3, [r6, #0]
 800765a:	1d1a      	adds	r2, r3, #4
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	6032      	str	r2, [r6, #0]
 8007660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007668:	2301      	movs	r3, #1
 800766a:	e09c      	b.n	80077a6 <_printf_i+0x1e6>
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	6820      	ldr	r0, [r4, #0]
 8007670:	1d19      	adds	r1, r3, #4
 8007672:	6031      	str	r1, [r6, #0]
 8007674:	0606      	lsls	r6, r0, #24
 8007676:	d501      	bpl.n	800767c <_printf_i+0xbc>
 8007678:	681d      	ldr	r5, [r3, #0]
 800767a:	e003      	b.n	8007684 <_printf_i+0xc4>
 800767c:	0645      	lsls	r5, r0, #25
 800767e:	d5fb      	bpl.n	8007678 <_printf_i+0xb8>
 8007680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007684:	2d00      	cmp	r5, #0
 8007686:	da03      	bge.n	8007690 <_printf_i+0xd0>
 8007688:	232d      	movs	r3, #45	@ 0x2d
 800768a:	426d      	negs	r5, r5
 800768c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007690:	4858      	ldr	r0, [pc, #352]	@ (80077f4 <_printf_i+0x234>)
 8007692:	230a      	movs	r3, #10
 8007694:	e011      	b.n	80076ba <_printf_i+0xfa>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	6833      	ldr	r3, [r6, #0]
 800769a:	0608      	lsls	r0, r1, #24
 800769c:	f853 5b04 	ldr.w	r5, [r3], #4
 80076a0:	d402      	bmi.n	80076a8 <_printf_i+0xe8>
 80076a2:	0649      	lsls	r1, r1, #25
 80076a4:	bf48      	it	mi
 80076a6:	b2ad      	uxthmi	r5, r5
 80076a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80076aa:	4852      	ldr	r0, [pc, #328]	@ (80077f4 <_printf_i+0x234>)
 80076ac:	6033      	str	r3, [r6, #0]
 80076ae:	bf14      	ite	ne
 80076b0:	230a      	movne	r3, #10
 80076b2:	2308      	moveq	r3, #8
 80076b4:	2100      	movs	r1, #0
 80076b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80076ba:	6866      	ldr	r6, [r4, #4]
 80076bc:	60a6      	str	r6, [r4, #8]
 80076be:	2e00      	cmp	r6, #0
 80076c0:	db05      	blt.n	80076ce <_printf_i+0x10e>
 80076c2:	6821      	ldr	r1, [r4, #0]
 80076c4:	432e      	orrs	r6, r5
 80076c6:	f021 0104 	bic.w	r1, r1, #4
 80076ca:	6021      	str	r1, [r4, #0]
 80076cc:	d04b      	beq.n	8007766 <_printf_i+0x1a6>
 80076ce:	4616      	mov	r6, r2
 80076d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80076d4:	fb03 5711 	mls	r7, r3, r1, r5
 80076d8:	5dc7      	ldrb	r7, [r0, r7]
 80076da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076de:	462f      	mov	r7, r5
 80076e0:	42bb      	cmp	r3, r7
 80076e2:	460d      	mov	r5, r1
 80076e4:	d9f4      	bls.n	80076d0 <_printf_i+0x110>
 80076e6:	2b08      	cmp	r3, #8
 80076e8:	d10b      	bne.n	8007702 <_printf_i+0x142>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	07df      	lsls	r7, r3, #31
 80076ee:	d508      	bpl.n	8007702 <_printf_i+0x142>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	6861      	ldr	r1, [r4, #4]
 80076f4:	4299      	cmp	r1, r3
 80076f6:	bfde      	ittt	le
 80076f8:	2330      	movle	r3, #48	@ 0x30
 80076fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007702:	1b92      	subs	r2, r2, r6
 8007704:	6122      	str	r2, [r4, #16]
 8007706:	f8cd a000 	str.w	sl, [sp]
 800770a:	464b      	mov	r3, r9
 800770c:	aa03      	add	r2, sp, #12
 800770e:	4621      	mov	r1, r4
 8007710:	4640      	mov	r0, r8
 8007712:	f7ff fee7 	bl	80074e4 <_printf_common>
 8007716:	3001      	adds	r0, #1
 8007718:	d14a      	bne.n	80077b0 <_printf_i+0x1f0>
 800771a:	f04f 30ff 	mov.w	r0, #4294967295
 800771e:	b004      	add	sp, #16
 8007720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007724:	6823      	ldr	r3, [r4, #0]
 8007726:	f043 0320 	orr.w	r3, r3, #32
 800772a:	6023      	str	r3, [r4, #0]
 800772c:	4832      	ldr	r0, [pc, #200]	@ (80077f8 <_printf_i+0x238>)
 800772e:	2778      	movs	r7, #120	@ 0x78
 8007730:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007734:	6823      	ldr	r3, [r4, #0]
 8007736:	6831      	ldr	r1, [r6, #0]
 8007738:	061f      	lsls	r7, r3, #24
 800773a:	f851 5b04 	ldr.w	r5, [r1], #4
 800773e:	d402      	bmi.n	8007746 <_printf_i+0x186>
 8007740:	065f      	lsls	r7, r3, #25
 8007742:	bf48      	it	mi
 8007744:	b2ad      	uxthmi	r5, r5
 8007746:	6031      	str	r1, [r6, #0]
 8007748:	07d9      	lsls	r1, r3, #31
 800774a:	bf44      	itt	mi
 800774c:	f043 0320 	orrmi.w	r3, r3, #32
 8007750:	6023      	strmi	r3, [r4, #0]
 8007752:	b11d      	cbz	r5, 800775c <_printf_i+0x19c>
 8007754:	2310      	movs	r3, #16
 8007756:	e7ad      	b.n	80076b4 <_printf_i+0xf4>
 8007758:	4826      	ldr	r0, [pc, #152]	@ (80077f4 <_printf_i+0x234>)
 800775a:	e7e9      	b.n	8007730 <_printf_i+0x170>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	f023 0320 	bic.w	r3, r3, #32
 8007762:	6023      	str	r3, [r4, #0]
 8007764:	e7f6      	b.n	8007754 <_printf_i+0x194>
 8007766:	4616      	mov	r6, r2
 8007768:	e7bd      	b.n	80076e6 <_printf_i+0x126>
 800776a:	6833      	ldr	r3, [r6, #0]
 800776c:	6825      	ldr	r5, [r4, #0]
 800776e:	6961      	ldr	r1, [r4, #20]
 8007770:	1d18      	adds	r0, r3, #4
 8007772:	6030      	str	r0, [r6, #0]
 8007774:	062e      	lsls	r6, r5, #24
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	d501      	bpl.n	800777e <_printf_i+0x1be>
 800777a:	6019      	str	r1, [r3, #0]
 800777c:	e002      	b.n	8007784 <_printf_i+0x1c4>
 800777e:	0668      	lsls	r0, r5, #25
 8007780:	d5fb      	bpl.n	800777a <_printf_i+0x1ba>
 8007782:	8019      	strh	r1, [r3, #0]
 8007784:	2300      	movs	r3, #0
 8007786:	6123      	str	r3, [r4, #16]
 8007788:	4616      	mov	r6, r2
 800778a:	e7bc      	b.n	8007706 <_printf_i+0x146>
 800778c:	6833      	ldr	r3, [r6, #0]
 800778e:	1d1a      	adds	r2, r3, #4
 8007790:	6032      	str	r2, [r6, #0]
 8007792:	681e      	ldr	r6, [r3, #0]
 8007794:	6862      	ldr	r2, [r4, #4]
 8007796:	2100      	movs	r1, #0
 8007798:	4630      	mov	r0, r6
 800779a:	f7f8 fda1 	bl	80002e0 <memchr>
 800779e:	b108      	cbz	r0, 80077a4 <_printf_i+0x1e4>
 80077a0:	1b80      	subs	r0, r0, r6
 80077a2:	6060      	str	r0, [r4, #4]
 80077a4:	6863      	ldr	r3, [r4, #4]
 80077a6:	6123      	str	r3, [r4, #16]
 80077a8:	2300      	movs	r3, #0
 80077aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ae:	e7aa      	b.n	8007706 <_printf_i+0x146>
 80077b0:	6923      	ldr	r3, [r4, #16]
 80077b2:	4632      	mov	r2, r6
 80077b4:	4649      	mov	r1, r9
 80077b6:	4640      	mov	r0, r8
 80077b8:	47d0      	blx	sl
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0ad      	beq.n	800771a <_printf_i+0x15a>
 80077be:	6823      	ldr	r3, [r4, #0]
 80077c0:	079b      	lsls	r3, r3, #30
 80077c2:	d413      	bmi.n	80077ec <_printf_i+0x22c>
 80077c4:	68e0      	ldr	r0, [r4, #12]
 80077c6:	9b03      	ldr	r3, [sp, #12]
 80077c8:	4298      	cmp	r0, r3
 80077ca:	bfb8      	it	lt
 80077cc:	4618      	movlt	r0, r3
 80077ce:	e7a6      	b.n	800771e <_printf_i+0x15e>
 80077d0:	2301      	movs	r3, #1
 80077d2:	4632      	mov	r2, r6
 80077d4:	4649      	mov	r1, r9
 80077d6:	4640      	mov	r0, r8
 80077d8:	47d0      	blx	sl
 80077da:	3001      	adds	r0, #1
 80077dc:	d09d      	beq.n	800771a <_printf_i+0x15a>
 80077de:	3501      	adds	r5, #1
 80077e0:	68e3      	ldr	r3, [r4, #12]
 80077e2:	9903      	ldr	r1, [sp, #12]
 80077e4:	1a5b      	subs	r3, r3, r1
 80077e6:	42ab      	cmp	r3, r5
 80077e8:	dcf2      	bgt.n	80077d0 <_printf_i+0x210>
 80077ea:	e7eb      	b.n	80077c4 <_printf_i+0x204>
 80077ec:	2500      	movs	r5, #0
 80077ee:	f104 0619 	add.w	r6, r4, #25
 80077f2:	e7f5      	b.n	80077e0 <_printf_i+0x220>
 80077f4:	0800877d 	.word	0x0800877d
 80077f8:	0800878e 	.word	0x0800878e

080077fc <__svfiscanf_r>:
 80077fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007800:	461d      	mov	r5, r3
 8007802:	6e4b      	ldr	r3, [r1, #100]	@ 0x64
 8007804:	07df      	lsls	r7, r3, #31
 8007806:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800780a:	4606      	mov	r6, r0
 800780c:	460c      	mov	r4, r1
 800780e:	4692      	mov	sl, r2
 8007810:	d405      	bmi.n	800781e <__svfiscanf_r+0x22>
 8007812:	898b      	ldrh	r3, [r1, #12]
 8007814:	0598      	lsls	r0, r3, #22
 8007816:	d402      	bmi.n	800781e <__svfiscanf_r+0x22>
 8007818:	6d88      	ldr	r0, [r1, #88]	@ 0x58
 800781a:	f7ff fc1e 	bl	800705a <__retarget_lock_acquire_recursive>
 800781e:	2300      	movs	r3, #0
 8007820:	e9cd 3344 	strd	r3, r3, [sp, #272]	@ 0x110
 8007824:	4ba8      	ldr	r3, [pc, #672]	@ (8007ac8 <__svfiscanf_r+0x2cc>)
 8007826:	93a0      	str	r3, [sp, #640]	@ 0x280
 8007828:	f10d 0804 	add.w	r8, sp, #4
 800782c:	4ba7      	ldr	r3, [pc, #668]	@ (8007acc <__svfiscanf_r+0x2d0>)
 800782e:	4fa8      	ldr	r7, [pc, #672]	@ (8007ad0 <__svfiscanf_r+0x2d4>)
 8007830:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8007834:	93a1      	str	r3, [sp, #644]	@ 0x284
 8007836:	9500      	str	r5, [sp, #0]
 8007838:	f89a 9000 	ldrb.w	r9, [sl]
 800783c:	f1b9 0f00 	cmp.w	r9, #0
 8007840:	f000 816d 	beq.w	8007b1e <__svfiscanf_r+0x322>
 8007844:	f817 3009 	ldrb.w	r3, [r7, r9]
 8007848:	f013 0308 	ands.w	r3, r3, #8
 800784c:	f10a 0501 	add.w	r5, sl, #1
 8007850:	d019      	beq.n	8007886 <__svfiscanf_r+0x8a>
 8007852:	6863      	ldr	r3, [r4, #4]
 8007854:	2b00      	cmp	r3, #0
 8007856:	dd0f      	ble.n	8007878 <__svfiscanf_r+0x7c>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	781a      	ldrb	r2, [r3, #0]
 800785c:	5cba      	ldrb	r2, [r7, r2]
 800785e:	0711      	lsls	r1, r2, #28
 8007860:	d401      	bmi.n	8007866 <__svfiscanf_r+0x6a>
 8007862:	46aa      	mov	sl, r5
 8007864:	e7e8      	b.n	8007838 <__svfiscanf_r+0x3c>
 8007866:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007868:	3201      	adds	r2, #1
 800786a:	9245      	str	r2, [sp, #276]	@ 0x114
 800786c:	6862      	ldr	r2, [r4, #4]
 800786e:	3301      	adds	r3, #1
 8007870:	3a01      	subs	r2, #1
 8007872:	6062      	str	r2, [r4, #4]
 8007874:	6023      	str	r3, [r4, #0]
 8007876:	e7ec      	b.n	8007852 <__svfiscanf_r+0x56>
 8007878:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800787a:	4621      	mov	r1, r4
 800787c:	4630      	mov	r0, r6
 800787e:	4798      	blx	r3
 8007880:	2800      	cmp	r0, #0
 8007882:	d0e9      	beq.n	8007858 <__svfiscanf_r+0x5c>
 8007884:	e7ed      	b.n	8007862 <__svfiscanf_r+0x66>
 8007886:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800788a:	f040 8088 	bne.w	800799e <__svfiscanf_r+0x1a2>
 800788e:	9341      	str	r3, [sp, #260]	@ 0x104
 8007890:	9343      	str	r3, [sp, #268]	@ 0x10c
 8007892:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007896:	2b2a      	cmp	r3, #42	@ 0x2a
 8007898:	bf02      	ittt	eq
 800789a:	2310      	moveq	r3, #16
 800789c:	9341      	streq	r3, [sp, #260]	@ 0x104
 800789e:	f10a 0502 	addeq.w	r5, sl, #2
 80078a2:	220a      	movs	r2, #10
 80078a4:	46aa      	mov	sl, r5
 80078a6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80078aa:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80078ae:	2b09      	cmp	r3, #9
 80078b0:	d91f      	bls.n	80078f2 <__svfiscanf_r+0xf6>
 80078b2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007ad4 <__svfiscanf_r+0x2d8>
 80078b6:	2203      	movs	r2, #3
 80078b8:	4658      	mov	r0, fp
 80078ba:	f7f8 fd11 	bl	80002e0 <memchr>
 80078be:	b138      	cbz	r0, 80078d0 <__svfiscanf_r+0xd4>
 80078c0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80078c2:	eba0 000b 	sub.w	r0, r0, fp
 80078c6:	2301      	movs	r3, #1
 80078c8:	4083      	lsls	r3, r0
 80078ca:	4313      	orrs	r3, r2
 80078cc:	9341      	str	r3, [sp, #260]	@ 0x104
 80078ce:	4655      	mov	r5, sl
 80078d0:	f815 3b01 	ldrb.w	r3, [r5], #1
 80078d4:	2b78      	cmp	r3, #120	@ 0x78
 80078d6:	d807      	bhi.n	80078e8 <__svfiscanf_r+0xec>
 80078d8:	2b57      	cmp	r3, #87	@ 0x57
 80078da:	d811      	bhi.n	8007900 <__svfiscanf_r+0x104>
 80078dc:	2b25      	cmp	r3, #37	@ 0x25
 80078de:	d05e      	beq.n	800799e <__svfiscanf_r+0x1a2>
 80078e0:	d858      	bhi.n	8007994 <__svfiscanf_r+0x198>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80d2 	beq.w	8007a8c <__svfiscanf_r+0x290>
 80078e8:	2303      	movs	r3, #3
 80078ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 80078ec:	230a      	movs	r3, #10
 80078ee:	9342      	str	r3, [sp, #264]	@ 0x108
 80078f0:	e08f      	b.n	8007a12 <__svfiscanf_r+0x216>
 80078f2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80078f4:	fb02 1103 	mla	r1, r2, r3, r1
 80078f8:	3930      	subs	r1, #48	@ 0x30
 80078fa:	9143      	str	r1, [sp, #268]	@ 0x10c
 80078fc:	4655      	mov	r5, sl
 80078fe:	e7d1      	b.n	80078a4 <__svfiscanf_r+0xa8>
 8007900:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8007904:	2a20      	cmp	r2, #32
 8007906:	d8ef      	bhi.n	80078e8 <__svfiscanf_r+0xec>
 8007908:	a101      	add	r1, pc, #4	@ (adr r1, 8007910 <__svfiscanf_r+0x114>)
 800790a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800790e:	bf00      	nop
 8007910:	080079f1 	.word	0x080079f1
 8007914:	080078e9 	.word	0x080078e9
 8007918:	080078e9 	.word	0x080078e9
 800791c:	08007a4b 	.word	0x08007a4b
 8007920:	080078e9 	.word	0x080078e9
 8007924:	080078e9 	.word	0x080078e9
 8007928:	080078e9 	.word	0x080078e9
 800792c:	080078e9 	.word	0x080078e9
 8007930:	080078e9 	.word	0x080078e9
 8007934:	080078e9 	.word	0x080078e9
 8007938:	080078e9 	.word	0x080078e9
 800793c:	08007a61 	.word	0x08007a61
 8007940:	08007a47 	.word	0x08007a47
 8007944:	0800799b 	.word	0x0800799b
 8007948:	0800799b 	.word	0x0800799b
 800794c:	0800799b 	.word	0x0800799b
 8007950:	080078e9 	.word	0x080078e9
 8007954:	08007a03 	.word	0x08007a03
 8007958:	080078e9 	.word	0x080078e9
 800795c:	080078e9 	.word	0x080078e9
 8007960:	080078e9 	.word	0x080078e9
 8007964:	080078e9 	.word	0x080078e9
 8007968:	08007a71 	.word	0x08007a71
 800796c:	08007a0b 	.word	0x08007a0b
 8007970:	080079e9 	.word	0x080079e9
 8007974:	080078e9 	.word	0x080078e9
 8007978:	080078e9 	.word	0x080078e9
 800797c:	08007a6d 	.word	0x08007a6d
 8007980:	080078e9 	.word	0x080078e9
 8007984:	08007a47 	.word	0x08007a47
 8007988:	080078e9 	.word	0x080078e9
 800798c:	080078e9 	.word	0x080078e9
 8007990:	080079f1 	.word	0x080079f1
 8007994:	3b45      	subs	r3, #69	@ 0x45
 8007996:	2b02      	cmp	r3, #2
 8007998:	d8a6      	bhi.n	80078e8 <__svfiscanf_r+0xec>
 800799a:	2305      	movs	r3, #5
 800799c:	e038      	b.n	8007a10 <__svfiscanf_r+0x214>
 800799e:	6863      	ldr	r3, [r4, #4]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	dd0d      	ble.n	80079c0 <__svfiscanf_r+0x1c4>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	781a      	ldrb	r2, [r3, #0]
 80079a8:	454a      	cmp	r2, r9
 80079aa:	f040 80b8 	bne.w	8007b1e <__svfiscanf_r+0x322>
 80079ae:	3301      	adds	r3, #1
 80079b0:	6862      	ldr	r2, [r4, #4]
 80079b2:	6023      	str	r3, [r4, #0]
 80079b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80079b6:	3a01      	subs	r2, #1
 80079b8:	3301      	adds	r3, #1
 80079ba:	6062      	str	r2, [r4, #4]
 80079bc:	9345      	str	r3, [sp, #276]	@ 0x114
 80079be:	e750      	b.n	8007862 <__svfiscanf_r+0x66>
 80079c0:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80079c2:	4621      	mov	r1, r4
 80079c4:	4630      	mov	r0, r6
 80079c6:	4798      	blx	r3
 80079c8:	2800      	cmp	r0, #0
 80079ca:	d0eb      	beq.n	80079a4 <__svfiscanf_r+0x1a8>
 80079cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079ce:	07da      	lsls	r2, r3, #31
 80079d0:	f140 809d 	bpl.w	8007b0e <__svfiscanf_r+0x312>
 80079d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80079d6:	2800      	cmp	r0, #0
 80079d8:	d061      	beq.n	8007a9e <__svfiscanf_r+0x2a2>
 80079da:	89a3      	ldrh	r3, [r4, #12]
 80079dc:	0659      	lsls	r1, r3, #25
 80079de:	d45e      	bmi.n	8007a9e <__svfiscanf_r+0x2a2>
 80079e0:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 80079e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80079ea:	f042 0220 	orr.w	r2, r2, #32
 80079ee:	9241      	str	r2, [sp, #260]	@ 0x104
 80079f0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80079f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80079f6:	9241      	str	r2, [sp, #260]	@ 0x104
 80079f8:	2210      	movs	r2, #16
 80079fa:	2b6e      	cmp	r3, #110	@ 0x6e
 80079fc:	9242      	str	r2, [sp, #264]	@ 0x108
 80079fe:	d902      	bls.n	8007a06 <__svfiscanf_r+0x20a>
 8007a00:	e005      	b.n	8007a0e <__svfiscanf_r+0x212>
 8007a02:	2300      	movs	r3, #0
 8007a04:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a06:	2303      	movs	r3, #3
 8007a08:	e002      	b.n	8007a10 <__svfiscanf_r+0x214>
 8007a0a:	2308      	movs	r3, #8
 8007a0c:	9342      	str	r3, [sp, #264]	@ 0x108
 8007a0e:	2304      	movs	r3, #4
 8007a10:	9347      	str	r3, [sp, #284]	@ 0x11c
 8007a12:	6863      	ldr	r3, [r4, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	dd45      	ble.n	8007aa4 <__svfiscanf_r+0x2a8>
 8007a18:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a1a:	0659      	lsls	r1, r3, #25
 8007a1c:	d404      	bmi.n	8007a28 <__svfiscanf_r+0x22c>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	781a      	ldrb	r2, [r3, #0]
 8007a22:	5cba      	ldrb	r2, [r7, r2]
 8007a24:	0712      	lsls	r2, r2, #28
 8007a26:	d444      	bmi.n	8007ab2 <__svfiscanf_r+0x2b6>
 8007a28:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8007a2a:	2b02      	cmp	r3, #2
 8007a2c:	dc5b      	bgt.n	8007ae6 <__svfiscanf_r+0x2ea>
 8007a2e:	466b      	mov	r3, sp
 8007a30:	4622      	mov	r2, r4
 8007a32:	a941      	add	r1, sp, #260	@ 0x104
 8007a34:	4630      	mov	r0, r6
 8007a36:	f000 f893 	bl	8007b60 <_scanf_chars>
 8007a3a:	2801      	cmp	r0, #1
 8007a3c:	d06f      	beq.n	8007b1e <__svfiscanf_r+0x322>
 8007a3e:	2802      	cmp	r0, #2
 8007a40:	f47f af0f 	bne.w	8007862 <__svfiscanf_r+0x66>
 8007a44:	e7c2      	b.n	80079cc <__svfiscanf_r+0x1d0>
 8007a46:	220a      	movs	r2, #10
 8007a48:	e7d7      	b.n	80079fa <__svfiscanf_r+0x1fe>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	4640      	mov	r0, r8
 8007a4e:	f000 fb65 	bl	800811c <__sccl>
 8007a52:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a58:	9341      	str	r3, [sp, #260]	@ 0x104
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	e7d7      	b.n	8007a10 <__svfiscanf_r+0x214>
 8007a60:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8007a62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a66:	9341      	str	r3, [sp, #260]	@ 0x104
 8007a68:	2300      	movs	r3, #0
 8007a6a:	e7d1      	b.n	8007a10 <__svfiscanf_r+0x214>
 8007a6c:	2302      	movs	r3, #2
 8007a6e:	e7cf      	b.n	8007a10 <__svfiscanf_r+0x214>
 8007a70:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8007a72:	06c3      	lsls	r3, r0, #27
 8007a74:	f53f aef5 	bmi.w	8007862 <__svfiscanf_r+0x66>
 8007a78:	9b00      	ldr	r3, [sp, #0]
 8007a7a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007a7c:	1d19      	adds	r1, r3, #4
 8007a7e:	9100      	str	r1, [sp, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	07c0      	lsls	r0, r0, #31
 8007a84:	bf4c      	ite	mi
 8007a86:	801a      	strhmi	r2, [r3, #0]
 8007a88:	601a      	strpl	r2, [r3, #0]
 8007a8a:	e6ea      	b.n	8007862 <__svfiscanf_r+0x66>
 8007a8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a8e:	07de      	lsls	r6, r3, #31
 8007a90:	d405      	bmi.n	8007a9e <__svfiscanf_r+0x2a2>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059d      	lsls	r5, r3, #22
 8007a96:	d402      	bmi.n	8007a9e <__svfiscanf_r+0x2a2>
 8007a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a9a:	f7ff fadf 	bl	800705c <__retarget_lock_release_recursive>
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	e79d      	b.n	80079e0 <__svfiscanf_r+0x1e4>
 8007aa4:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	4798      	blx	r3
 8007aac:	2800      	cmp	r0, #0
 8007aae:	d0b3      	beq.n	8007a18 <__svfiscanf_r+0x21c>
 8007ab0:	e78c      	b.n	80079cc <__svfiscanf_r+0x1d0>
 8007ab2:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8007ab4:	3201      	adds	r2, #1
 8007ab6:	9245      	str	r2, [sp, #276]	@ 0x114
 8007ab8:	6862      	ldr	r2, [r4, #4]
 8007aba:	3a01      	subs	r2, #1
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	6062      	str	r2, [r4, #4]
 8007ac0:	dd0a      	ble.n	8007ad8 <__svfiscanf_r+0x2dc>
 8007ac2:	3301      	adds	r3, #1
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	e7aa      	b.n	8007a1e <__svfiscanf_r+0x222>
 8007ac8:	08008203 	.word	0x08008203
 8007acc:	08008035 	.word	0x08008035
 8007ad0:	080087bb 	.word	0x080087bb
 8007ad4:	08008772 	.word	0x08008772
 8007ad8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8007ada:	4621      	mov	r1, r4
 8007adc:	4630      	mov	r0, r6
 8007ade:	4798      	blx	r3
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d09c      	beq.n	8007a1e <__svfiscanf_r+0x222>
 8007ae4:	e772      	b.n	80079cc <__svfiscanf_r+0x1d0>
 8007ae6:	2b04      	cmp	r3, #4
 8007ae8:	dc06      	bgt.n	8007af8 <__svfiscanf_r+0x2fc>
 8007aea:	466b      	mov	r3, sp
 8007aec:	4622      	mov	r2, r4
 8007aee:	a941      	add	r1, sp, #260	@ 0x104
 8007af0:	4630      	mov	r0, r6
 8007af2:	f000 f88f 	bl	8007c14 <_scanf_i>
 8007af6:	e7a0      	b.n	8007a3a <__svfiscanf_r+0x23e>
 8007af8:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <__svfiscanf_r+0x338>)
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f43f aeb1 	beq.w	8007862 <__svfiscanf_r+0x66>
 8007b00:	466b      	mov	r3, sp
 8007b02:	4622      	mov	r2, r4
 8007b04:	a941      	add	r1, sp, #260	@ 0x104
 8007b06:	4630      	mov	r0, r6
 8007b08:	f3af 8000 	nop.w
 8007b0c:	e795      	b.n	8007a3a <__svfiscanf_r+0x23e>
 8007b0e:	89a3      	ldrh	r3, [r4, #12]
 8007b10:	0598      	lsls	r0, r3, #22
 8007b12:	f53f af5f 	bmi.w	80079d4 <__svfiscanf_r+0x1d8>
 8007b16:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b18:	f7ff faa0 	bl	800705c <__retarget_lock_release_recursive>
 8007b1c:	e75a      	b.n	80079d4 <__svfiscanf_r+0x1d8>
 8007b1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b20:	07da      	lsls	r2, r3, #31
 8007b22:	d405      	bmi.n	8007b30 <__svfiscanf_r+0x334>
 8007b24:	89a3      	ldrh	r3, [r4, #12]
 8007b26:	059b      	lsls	r3, r3, #22
 8007b28:	d402      	bmi.n	8007b30 <__svfiscanf_r+0x334>
 8007b2a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b2c:	f7ff fa96 	bl	800705c <__retarget_lock_release_recursive>
 8007b30:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8007b32:	e755      	b.n	80079e0 <__svfiscanf_r+0x1e4>
 8007b34:	00000000 	.word	0x00000000

08007b38 <_vfiscanf_r>:
 8007b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	4616      	mov	r6, r2
 8007b40:	461f      	mov	r7, r3
 8007b42:	4604      	mov	r4, r0
 8007b44:	b118      	cbz	r0, 8007b4e <_vfiscanf_r+0x16>
 8007b46:	6a03      	ldr	r3, [r0, #32]
 8007b48:	b90b      	cbnz	r3, 8007b4e <_vfiscanf_r+0x16>
 8007b4a:	f7ff f8bb 	bl	8006cc4 <__sinit>
 8007b4e:	463b      	mov	r3, r7
 8007b50:	4632      	mov	r2, r6
 8007b52:	4629      	mov	r1, r5
 8007b54:	4620      	mov	r0, r4
 8007b56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b5a:	f7ff be4f 	b.w	80077fc <__svfiscanf_r>
	...

08007b60 <_scanf_chars>:
 8007b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b64:	4615      	mov	r5, r2
 8007b66:	688a      	ldr	r2, [r1, #8]
 8007b68:	4680      	mov	r8, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b932      	cbnz	r2, 8007b7c <_scanf_chars+0x1c>
 8007b6e:	698a      	ldr	r2, [r1, #24]
 8007b70:	2a00      	cmp	r2, #0
 8007b72:	bf14      	ite	ne
 8007b74:	f04f 32ff 	movne.w	r2, #4294967295
 8007b78:	2201      	moveq	r2, #1
 8007b7a:	608a      	str	r2, [r1, #8]
 8007b7c:	6822      	ldr	r2, [r4, #0]
 8007b7e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8007c10 <_scanf_chars+0xb0>
 8007b82:	06d1      	lsls	r1, r2, #27
 8007b84:	bf5f      	itttt	pl
 8007b86:	681a      	ldrpl	r2, [r3, #0]
 8007b88:	1d11      	addpl	r1, r2, #4
 8007b8a:	6019      	strpl	r1, [r3, #0]
 8007b8c:	6816      	ldrpl	r6, [r2, #0]
 8007b8e:	2700      	movs	r7, #0
 8007b90:	69a0      	ldr	r0, [r4, #24]
 8007b92:	b188      	cbz	r0, 8007bb8 <_scanf_chars+0x58>
 8007b94:	2801      	cmp	r0, #1
 8007b96:	d107      	bne.n	8007ba8 <_scanf_chars+0x48>
 8007b98:	682b      	ldr	r3, [r5, #0]
 8007b9a:	781a      	ldrb	r2, [r3, #0]
 8007b9c:	6963      	ldr	r3, [r4, #20]
 8007b9e:	5c9b      	ldrb	r3, [r3, r2]
 8007ba0:	b953      	cbnz	r3, 8007bb8 <_scanf_chars+0x58>
 8007ba2:	2f00      	cmp	r7, #0
 8007ba4:	d031      	beq.n	8007c0a <_scanf_chars+0xaa>
 8007ba6:	e022      	b.n	8007bee <_scanf_chars+0x8e>
 8007ba8:	2802      	cmp	r0, #2
 8007baa:	d120      	bne.n	8007bee <_scanf_chars+0x8e>
 8007bac:	682b      	ldr	r3, [r5, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	f819 3003 	ldrb.w	r3, [r9, r3]
 8007bb4:	071b      	lsls	r3, r3, #28
 8007bb6:	d41a      	bmi.n	8007bee <_scanf_chars+0x8e>
 8007bb8:	6823      	ldr	r3, [r4, #0]
 8007bba:	06da      	lsls	r2, r3, #27
 8007bbc:	bf5e      	ittt	pl
 8007bbe:	682b      	ldrpl	r3, [r5, #0]
 8007bc0:	781b      	ldrbpl	r3, [r3, #0]
 8007bc2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007bc6:	682a      	ldr	r2, [r5, #0]
 8007bc8:	686b      	ldr	r3, [r5, #4]
 8007bca:	3201      	adds	r2, #1
 8007bcc:	602a      	str	r2, [r5, #0]
 8007bce:	68a2      	ldr	r2, [r4, #8]
 8007bd0:	3b01      	subs	r3, #1
 8007bd2:	3a01      	subs	r2, #1
 8007bd4:	606b      	str	r3, [r5, #4]
 8007bd6:	3701      	adds	r7, #1
 8007bd8:	60a2      	str	r2, [r4, #8]
 8007bda:	b142      	cbz	r2, 8007bee <_scanf_chars+0x8e>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	dcd7      	bgt.n	8007b90 <_scanf_chars+0x30>
 8007be0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007be4:	4629      	mov	r1, r5
 8007be6:	4640      	mov	r0, r8
 8007be8:	4798      	blx	r3
 8007bea:	2800      	cmp	r0, #0
 8007bec:	d0d0      	beq.n	8007b90 <_scanf_chars+0x30>
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	f013 0310 	ands.w	r3, r3, #16
 8007bf4:	d105      	bne.n	8007c02 <_scanf_chars+0xa2>
 8007bf6:	68e2      	ldr	r2, [r4, #12]
 8007bf8:	3201      	adds	r2, #1
 8007bfa:	60e2      	str	r2, [r4, #12]
 8007bfc:	69a2      	ldr	r2, [r4, #24]
 8007bfe:	b102      	cbz	r2, 8007c02 <_scanf_chars+0xa2>
 8007c00:	7033      	strb	r3, [r6, #0]
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	443b      	add	r3, r7
 8007c06:	6123      	str	r3, [r4, #16]
 8007c08:	2000      	movs	r0, #0
 8007c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0e:	bf00      	nop
 8007c10:	080087bb 	.word	0x080087bb

08007c14 <_scanf_i>:
 8007c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c18:	4698      	mov	r8, r3
 8007c1a:	4b74      	ldr	r3, [pc, #464]	@ (8007dec <_scanf_i+0x1d8>)
 8007c1c:	460c      	mov	r4, r1
 8007c1e:	4682      	mov	sl, r0
 8007c20:	4616      	mov	r6, r2
 8007c22:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007c26:	b087      	sub	sp, #28
 8007c28:	ab03      	add	r3, sp, #12
 8007c2a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c2e:	4b70      	ldr	r3, [pc, #448]	@ (8007df0 <_scanf_i+0x1dc>)
 8007c30:	69a1      	ldr	r1, [r4, #24]
 8007c32:	4a70      	ldr	r2, [pc, #448]	@ (8007df4 <_scanf_i+0x1e0>)
 8007c34:	2903      	cmp	r1, #3
 8007c36:	bf08      	it	eq
 8007c38:	461a      	moveq	r2, r3
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	9201      	str	r2, [sp, #4]
 8007c3e:	1e5a      	subs	r2, r3, #1
 8007c40:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c44:	bf88      	it	hi
 8007c46:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c4a:	4627      	mov	r7, r4
 8007c4c:	bf82      	ittt	hi
 8007c4e:	eb03 0905 	addhi.w	r9, r3, r5
 8007c52:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c56:	60a3      	strhi	r3, [r4, #8]
 8007c58:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007c5c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8007c60:	bf98      	it	ls
 8007c62:	f04f 0900 	movls.w	r9, #0
 8007c66:	6023      	str	r3, [r4, #0]
 8007c68:	463d      	mov	r5, r7
 8007c6a:	f04f 0b00 	mov.w	fp, #0
 8007c6e:	6831      	ldr	r1, [r6, #0]
 8007c70:	ab03      	add	r3, sp, #12
 8007c72:	7809      	ldrb	r1, [r1, #0]
 8007c74:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	f7f8 fb31 	bl	80002e0 <memchr>
 8007c7e:	b328      	cbz	r0, 8007ccc <_scanf_i+0xb8>
 8007c80:	f1bb 0f01 	cmp.w	fp, #1
 8007c84:	d159      	bne.n	8007d3a <_scanf_i+0x126>
 8007c86:	6862      	ldr	r2, [r4, #4]
 8007c88:	b92a      	cbnz	r2, 8007c96 <_scanf_i+0x82>
 8007c8a:	6822      	ldr	r2, [r4, #0]
 8007c8c:	2108      	movs	r1, #8
 8007c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007c92:	6061      	str	r1, [r4, #4]
 8007c94:	6022      	str	r2, [r4, #0]
 8007c96:	6822      	ldr	r2, [r4, #0]
 8007c98:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8007c9c:	6022      	str	r2, [r4, #0]
 8007c9e:	68a2      	ldr	r2, [r4, #8]
 8007ca0:	1e51      	subs	r1, r2, #1
 8007ca2:	60a1      	str	r1, [r4, #8]
 8007ca4:	b192      	cbz	r2, 8007ccc <_scanf_i+0xb8>
 8007ca6:	6832      	ldr	r2, [r6, #0]
 8007ca8:	1c51      	adds	r1, r2, #1
 8007caa:	6031      	str	r1, [r6, #0]
 8007cac:	7812      	ldrb	r2, [r2, #0]
 8007cae:	f805 2b01 	strb.w	r2, [r5], #1
 8007cb2:	6872      	ldr	r2, [r6, #4]
 8007cb4:	3a01      	subs	r2, #1
 8007cb6:	2a00      	cmp	r2, #0
 8007cb8:	6072      	str	r2, [r6, #4]
 8007cba:	dc07      	bgt.n	8007ccc <_scanf_i+0xb8>
 8007cbc:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8007cc0:	4631      	mov	r1, r6
 8007cc2:	4650      	mov	r0, sl
 8007cc4:	4790      	blx	r2
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8085 	bne.w	8007dd6 <_scanf_i+0x1c2>
 8007ccc:	f10b 0b01 	add.w	fp, fp, #1
 8007cd0:	f1bb 0f03 	cmp.w	fp, #3
 8007cd4:	d1cb      	bne.n	8007c6e <_scanf_i+0x5a>
 8007cd6:	6863      	ldr	r3, [r4, #4]
 8007cd8:	b90b      	cbnz	r3, 8007cde <_scanf_i+0xca>
 8007cda:	230a      	movs	r3, #10
 8007cdc:	6063      	str	r3, [r4, #4]
 8007cde:	6863      	ldr	r3, [r4, #4]
 8007ce0:	4945      	ldr	r1, [pc, #276]	@ (8007df8 <_scanf_i+0x1e4>)
 8007ce2:	6960      	ldr	r0, [r4, #20]
 8007ce4:	1ac9      	subs	r1, r1, r3
 8007ce6:	f000 fa19 	bl	800811c <__sccl>
 8007cea:	f04f 0b00 	mov.w	fp, #0
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	6822      	ldr	r2, [r4, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d03d      	beq.n	8007d72 <_scanf_i+0x15e>
 8007cf6:	6831      	ldr	r1, [r6, #0]
 8007cf8:	6960      	ldr	r0, [r4, #20]
 8007cfa:	f891 c000 	ldrb.w	ip, [r1]
 8007cfe:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d035      	beq.n	8007d72 <_scanf_i+0x15e>
 8007d06:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8007d0a:	d124      	bne.n	8007d56 <_scanf_i+0x142>
 8007d0c:	0510      	lsls	r0, r2, #20
 8007d0e:	d522      	bpl.n	8007d56 <_scanf_i+0x142>
 8007d10:	f10b 0b01 	add.w	fp, fp, #1
 8007d14:	f1b9 0f00 	cmp.w	r9, #0
 8007d18:	d003      	beq.n	8007d22 <_scanf_i+0x10e>
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	f109 39ff 	add.w	r9, r9, #4294967295
 8007d20:	60a3      	str	r3, [r4, #8]
 8007d22:	6873      	ldr	r3, [r6, #4]
 8007d24:	3b01      	subs	r3, #1
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	6073      	str	r3, [r6, #4]
 8007d2a:	dd1b      	ble.n	8007d64 <_scanf_i+0x150>
 8007d2c:	6833      	ldr	r3, [r6, #0]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	6033      	str	r3, [r6, #0]
 8007d32:	68a3      	ldr	r3, [r4, #8]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	e7d9      	b.n	8007cee <_scanf_i+0xda>
 8007d3a:	f1bb 0f02 	cmp.w	fp, #2
 8007d3e:	d1ae      	bne.n	8007c9e <_scanf_i+0x8a>
 8007d40:	6822      	ldr	r2, [r4, #0]
 8007d42:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007d46:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8007d4a:	d1c4      	bne.n	8007cd6 <_scanf_i+0xc2>
 8007d4c:	2110      	movs	r1, #16
 8007d4e:	6061      	str	r1, [r4, #4]
 8007d50:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d54:	e7a2      	b.n	8007c9c <_scanf_i+0x88>
 8007d56:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8007d5a:	6022      	str	r2, [r4, #0]
 8007d5c:	780b      	ldrb	r3, [r1, #0]
 8007d5e:	f805 3b01 	strb.w	r3, [r5], #1
 8007d62:	e7de      	b.n	8007d22 <_scanf_i+0x10e>
 8007d64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007d68:	4631      	mov	r1, r6
 8007d6a:	4650      	mov	r0, sl
 8007d6c:	4798      	blx	r3
 8007d6e:	2800      	cmp	r0, #0
 8007d70:	d0df      	beq.n	8007d32 <_scanf_i+0x11e>
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	05d9      	lsls	r1, r3, #23
 8007d76:	d50d      	bpl.n	8007d94 <_scanf_i+0x180>
 8007d78:	42bd      	cmp	r5, r7
 8007d7a:	d909      	bls.n	8007d90 <_scanf_i+0x17c>
 8007d7c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007d80:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d84:	4632      	mov	r2, r6
 8007d86:	4650      	mov	r0, sl
 8007d88:	4798      	blx	r3
 8007d8a:	f105 39ff 	add.w	r9, r5, #4294967295
 8007d8e:	464d      	mov	r5, r9
 8007d90:	42bd      	cmp	r5, r7
 8007d92:	d028      	beq.n	8007de6 <_scanf_i+0x1d2>
 8007d94:	6822      	ldr	r2, [r4, #0]
 8007d96:	f012 0210 	ands.w	r2, r2, #16
 8007d9a:	d113      	bne.n	8007dc4 <_scanf_i+0x1b0>
 8007d9c:	702a      	strb	r2, [r5, #0]
 8007d9e:	6863      	ldr	r3, [r4, #4]
 8007da0:	9e01      	ldr	r6, [sp, #4]
 8007da2:	4639      	mov	r1, r7
 8007da4:	4650      	mov	r0, sl
 8007da6:	47b0      	blx	r6
 8007da8:	f8d8 3000 	ldr.w	r3, [r8]
 8007dac:	6821      	ldr	r1, [r4, #0]
 8007dae:	1d1a      	adds	r2, r3, #4
 8007db0:	f8c8 2000 	str.w	r2, [r8]
 8007db4:	f011 0f20 	tst.w	r1, #32
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	d00f      	beq.n	8007ddc <_scanf_i+0x1c8>
 8007dbc:	6018      	str	r0, [r3, #0]
 8007dbe:	68e3      	ldr	r3, [r4, #12]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	60e3      	str	r3, [r4, #12]
 8007dc4:	6923      	ldr	r3, [r4, #16]
 8007dc6:	1bed      	subs	r5, r5, r7
 8007dc8:	445d      	add	r5, fp
 8007dca:	442b      	add	r3, r5
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	2000      	movs	r0, #0
 8007dd0:	b007      	add	sp, #28
 8007dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd6:	f04f 0b00 	mov.w	fp, #0
 8007dda:	e7ca      	b.n	8007d72 <_scanf_i+0x15e>
 8007ddc:	07ca      	lsls	r2, r1, #31
 8007dde:	bf4c      	ite	mi
 8007de0:	8018      	strhmi	r0, [r3, #0]
 8007de2:	6018      	strpl	r0, [r3, #0]
 8007de4:	e7eb      	b.n	8007dbe <_scanf_i+0x1aa>
 8007de6:	2001      	movs	r0, #1
 8007de8:	e7f2      	b.n	8007dd0 <_scanf_i+0x1bc>
 8007dea:	bf00      	nop
 8007dec:	08008728 	.word	0x08008728
 8007df0:	080085f9 	.word	0x080085f9
 8007df4:	080086d9 	.word	0x080086d9
 8007df8:	080087af 	.word	0x080087af

08007dfc <__sflush_r>:
 8007dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e04:	0716      	lsls	r6, r2, #28
 8007e06:	4605      	mov	r5, r0
 8007e08:	460c      	mov	r4, r1
 8007e0a:	d454      	bmi.n	8007eb6 <__sflush_r+0xba>
 8007e0c:	684b      	ldr	r3, [r1, #4]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	dc02      	bgt.n	8007e18 <__sflush_r+0x1c>
 8007e12:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	dd48      	ble.n	8007eaa <__sflush_r+0xae>
 8007e18:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e1a:	2e00      	cmp	r6, #0
 8007e1c:	d045      	beq.n	8007eaa <__sflush_r+0xae>
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007e24:	682f      	ldr	r7, [r5, #0]
 8007e26:	6a21      	ldr	r1, [r4, #32]
 8007e28:	602b      	str	r3, [r5, #0]
 8007e2a:	d030      	beq.n	8007e8e <__sflush_r+0x92>
 8007e2c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007e2e:	89a3      	ldrh	r3, [r4, #12]
 8007e30:	0759      	lsls	r1, r3, #29
 8007e32:	d505      	bpl.n	8007e40 <__sflush_r+0x44>
 8007e34:	6863      	ldr	r3, [r4, #4]
 8007e36:	1ad2      	subs	r2, r2, r3
 8007e38:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007e3a:	b10b      	cbz	r3, 8007e40 <__sflush_r+0x44>
 8007e3c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007e3e:	1ad2      	subs	r2, r2, r3
 8007e40:	2300      	movs	r3, #0
 8007e42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007e44:	6a21      	ldr	r1, [r4, #32]
 8007e46:	4628      	mov	r0, r5
 8007e48:	47b0      	blx	r6
 8007e4a:	1c43      	adds	r3, r0, #1
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	d106      	bne.n	8007e5e <__sflush_r+0x62>
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	291d      	cmp	r1, #29
 8007e54:	d82b      	bhi.n	8007eae <__sflush_r+0xb2>
 8007e56:	4a2a      	ldr	r2, [pc, #168]	@ (8007f00 <__sflush_r+0x104>)
 8007e58:	40ca      	lsrs	r2, r1
 8007e5a:	07d6      	lsls	r6, r2, #31
 8007e5c:	d527      	bpl.n	8007eae <__sflush_r+0xb2>
 8007e5e:	2200      	movs	r2, #0
 8007e60:	6062      	str	r2, [r4, #4]
 8007e62:	04d9      	lsls	r1, r3, #19
 8007e64:	6922      	ldr	r2, [r4, #16]
 8007e66:	6022      	str	r2, [r4, #0]
 8007e68:	d504      	bpl.n	8007e74 <__sflush_r+0x78>
 8007e6a:	1c42      	adds	r2, r0, #1
 8007e6c:	d101      	bne.n	8007e72 <__sflush_r+0x76>
 8007e6e:	682b      	ldr	r3, [r5, #0]
 8007e70:	b903      	cbnz	r3, 8007e74 <__sflush_r+0x78>
 8007e72:	6560      	str	r0, [r4, #84]	@ 0x54
 8007e74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e76:	602f      	str	r7, [r5, #0]
 8007e78:	b1b9      	cbz	r1, 8007eaa <__sflush_r+0xae>
 8007e7a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e7e:	4299      	cmp	r1, r3
 8007e80:	d002      	beq.n	8007e88 <__sflush_r+0x8c>
 8007e82:	4628      	mov	r0, r5
 8007e84:	f7ff f8ec 	bl	8007060 <_free_r>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e8c:	e00d      	b.n	8007eaa <__sflush_r+0xae>
 8007e8e:	2301      	movs	r3, #1
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b0      	blx	r6
 8007e94:	4602      	mov	r2, r0
 8007e96:	1c50      	adds	r0, r2, #1
 8007e98:	d1c9      	bne.n	8007e2e <__sflush_r+0x32>
 8007e9a:	682b      	ldr	r3, [r5, #0]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0c6      	beq.n	8007e2e <__sflush_r+0x32>
 8007ea0:	2b1d      	cmp	r3, #29
 8007ea2:	d001      	beq.n	8007ea8 <__sflush_r+0xac>
 8007ea4:	2b16      	cmp	r3, #22
 8007ea6:	d11e      	bne.n	8007ee6 <__sflush_r+0xea>
 8007ea8:	602f      	str	r7, [r5, #0]
 8007eaa:	2000      	movs	r0, #0
 8007eac:	e022      	b.n	8007ef4 <__sflush_r+0xf8>
 8007eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eb2:	b21b      	sxth	r3, r3
 8007eb4:	e01b      	b.n	8007eee <__sflush_r+0xf2>
 8007eb6:	690f      	ldr	r7, [r1, #16]
 8007eb8:	2f00      	cmp	r7, #0
 8007eba:	d0f6      	beq.n	8007eaa <__sflush_r+0xae>
 8007ebc:	0793      	lsls	r3, r2, #30
 8007ebe:	680e      	ldr	r6, [r1, #0]
 8007ec0:	bf08      	it	eq
 8007ec2:	694b      	ldreq	r3, [r1, #20]
 8007ec4:	600f      	str	r7, [r1, #0]
 8007ec6:	bf18      	it	ne
 8007ec8:	2300      	movne	r3, #0
 8007eca:	eba6 0807 	sub.w	r8, r6, r7
 8007ece:	608b      	str	r3, [r1, #8]
 8007ed0:	f1b8 0f00 	cmp.w	r8, #0
 8007ed4:	dde9      	ble.n	8007eaa <__sflush_r+0xae>
 8007ed6:	6a21      	ldr	r1, [r4, #32]
 8007ed8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007eda:	4643      	mov	r3, r8
 8007edc:	463a      	mov	r2, r7
 8007ede:	4628      	mov	r0, r5
 8007ee0:	47b0      	blx	r6
 8007ee2:	2800      	cmp	r0, #0
 8007ee4:	dc08      	bgt.n	8007ef8 <__sflush_r+0xfc>
 8007ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007eee:	81a3      	strh	r3, [r4, #12]
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef8:	4407      	add	r7, r0
 8007efa:	eba8 0800 	sub.w	r8, r8, r0
 8007efe:	e7e7      	b.n	8007ed0 <__sflush_r+0xd4>
 8007f00:	20400001 	.word	0x20400001

08007f04 <_fflush_r>:
 8007f04:	b538      	push	{r3, r4, r5, lr}
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	4605      	mov	r5, r0
 8007f0a:	460c      	mov	r4, r1
 8007f0c:	b913      	cbnz	r3, 8007f14 <_fflush_r+0x10>
 8007f0e:	2500      	movs	r5, #0
 8007f10:	4628      	mov	r0, r5
 8007f12:	bd38      	pop	{r3, r4, r5, pc}
 8007f14:	b118      	cbz	r0, 8007f1e <_fflush_r+0x1a>
 8007f16:	6a03      	ldr	r3, [r0, #32]
 8007f18:	b90b      	cbnz	r3, 8007f1e <_fflush_r+0x1a>
 8007f1a:	f7fe fed3 	bl	8006cc4 <__sinit>
 8007f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d0f3      	beq.n	8007f0e <_fflush_r+0xa>
 8007f26:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007f28:	07d0      	lsls	r0, r2, #31
 8007f2a:	d404      	bmi.n	8007f36 <_fflush_r+0x32>
 8007f2c:	0599      	lsls	r1, r3, #22
 8007f2e:	d402      	bmi.n	8007f36 <_fflush_r+0x32>
 8007f30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f32:	f7ff f892 	bl	800705a <__retarget_lock_acquire_recursive>
 8007f36:	4628      	mov	r0, r5
 8007f38:	4621      	mov	r1, r4
 8007f3a:	f7ff ff5f 	bl	8007dfc <__sflush_r>
 8007f3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f40:	07da      	lsls	r2, r3, #31
 8007f42:	4605      	mov	r5, r0
 8007f44:	d4e4      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	059b      	lsls	r3, r3, #22
 8007f4a:	d4e1      	bmi.n	8007f10 <_fflush_r+0xc>
 8007f4c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007f4e:	f7ff f885 	bl	800705c <__retarget_lock_release_recursive>
 8007f52:	e7dd      	b.n	8007f10 <_fflush_r+0xc>

08007f54 <__swhatbuf_r>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	460c      	mov	r4, r1
 8007f58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5c:	2900      	cmp	r1, #0
 8007f5e:	b096      	sub	sp, #88	@ 0x58
 8007f60:	4615      	mov	r5, r2
 8007f62:	461e      	mov	r6, r3
 8007f64:	da0d      	bge.n	8007f82 <__swhatbuf_r+0x2e>
 8007f66:	89a3      	ldrh	r3, [r4, #12]
 8007f68:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f6c:	f04f 0100 	mov.w	r1, #0
 8007f70:	bf14      	ite	ne
 8007f72:	2340      	movne	r3, #64	@ 0x40
 8007f74:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f78:	2000      	movs	r0, #0
 8007f7a:	6031      	str	r1, [r6, #0]
 8007f7c:	602b      	str	r3, [r5, #0]
 8007f7e:	b016      	add	sp, #88	@ 0x58
 8007f80:	bd70      	pop	{r4, r5, r6, pc}
 8007f82:	466a      	mov	r2, sp
 8007f84:	f000 fa50 	bl	8008428 <_fstat_r>
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	dbec      	blt.n	8007f66 <__swhatbuf_r+0x12>
 8007f8c:	9901      	ldr	r1, [sp, #4]
 8007f8e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007f92:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007f96:	4259      	negs	r1, r3
 8007f98:	4159      	adcs	r1, r3
 8007f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007f9e:	e7eb      	b.n	8007f78 <__swhatbuf_r+0x24>

08007fa0 <__smakebuf_r>:
 8007fa0:	898b      	ldrh	r3, [r1, #12]
 8007fa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa4:	079d      	lsls	r5, r3, #30
 8007fa6:	4606      	mov	r6, r0
 8007fa8:	460c      	mov	r4, r1
 8007faa:	d507      	bpl.n	8007fbc <__smakebuf_r+0x1c>
 8007fac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fb0:	6023      	str	r3, [r4, #0]
 8007fb2:	6123      	str	r3, [r4, #16]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	6163      	str	r3, [r4, #20]
 8007fb8:	b003      	add	sp, #12
 8007fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fbc:	ab01      	add	r3, sp, #4
 8007fbe:	466a      	mov	r2, sp
 8007fc0:	f7ff ffc8 	bl	8007f54 <__swhatbuf_r>
 8007fc4:	9f00      	ldr	r7, [sp, #0]
 8007fc6:	4605      	mov	r5, r0
 8007fc8:	4639      	mov	r1, r7
 8007fca:	4630      	mov	r0, r6
 8007fcc:	f7ff f8bc 	bl	8007148 <_malloc_r>
 8007fd0:	b948      	cbnz	r0, 8007fe6 <__smakebuf_r+0x46>
 8007fd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fd6:	059a      	lsls	r2, r3, #22
 8007fd8:	d4ee      	bmi.n	8007fb8 <__smakebuf_r+0x18>
 8007fda:	f023 0303 	bic.w	r3, r3, #3
 8007fde:	f043 0302 	orr.w	r3, r3, #2
 8007fe2:	81a3      	strh	r3, [r4, #12]
 8007fe4:	e7e2      	b.n	8007fac <__smakebuf_r+0xc>
 8007fe6:	89a3      	ldrh	r3, [r4, #12]
 8007fe8:	6020      	str	r0, [r4, #0]
 8007fea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fee:	81a3      	strh	r3, [r4, #12]
 8007ff0:	9b01      	ldr	r3, [sp, #4]
 8007ff2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007ff6:	b15b      	cbz	r3, 8008010 <__smakebuf_r+0x70>
 8007ff8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ffc:	4630      	mov	r0, r6
 8007ffe:	f000 fa25 	bl	800844c <_isatty_r>
 8008002:	b128      	cbz	r0, 8008010 <__smakebuf_r+0x70>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	f023 0303 	bic.w	r3, r3, #3
 800800a:	f043 0301 	orr.w	r3, r3, #1
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	89a3      	ldrh	r3, [r4, #12]
 8008012:	431d      	orrs	r5, r3
 8008014:	81a5      	strh	r5, [r4, #12]
 8008016:	e7cf      	b.n	8007fb8 <__smakebuf_r+0x18>

08008018 <lflush>:
 8008018:	898b      	ldrh	r3, [r1, #12]
 800801a:	f003 0309 	and.w	r3, r3, #9
 800801e:	2b09      	cmp	r3, #9
 8008020:	d103      	bne.n	800802a <lflush+0x12>
 8008022:	4b03      	ldr	r3, [pc, #12]	@ (8008030 <lflush+0x18>)
 8008024:	6818      	ldr	r0, [r3, #0]
 8008026:	f7ff bf6d 	b.w	8007f04 <_fflush_r>
 800802a:	2000      	movs	r0, #0
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	2400001c 	.word	0x2400001c

08008034 <__srefill_r>:
 8008034:	b570      	push	{r4, r5, r6, lr}
 8008036:	460c      	mov	r4, r1
 8008038:	4605      	mov	r5, r0
 800803a:	b118      	cbz	r0, 8008044 <__srefill_r+0x10>
 800803c:	6a03      	ldr	r3, [r0, #32]
 800803e:	b90b      	cbnz	r3, 8008044 <__srefill_r+0x10>
 8008040:	f7fe fe40 	bl	8006cc4 <__sinit>
 8008044:	2300      	movs	r3, #0
 8008046:	6063      	str	r3, [r4, #4]
 8008048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800804c:	069e      	lsls	r6, r3, #26
 800804e:	d408      	bmi.n	8008062 <__srefill_r+0x2e>
 8008050:	0758      	lsls	r0, r3, #29
 8008052:	d445      	bmi.n	80080e0 <__srefill_r+0xac>
 8008054:	06d9      	lsls	r1, r3, #27
 8008056:	d407      	bmi.n	8008068 <__srefill_r+0x34>
 8008058:	2209      	movs	r2, #9
 800805a:	602a      	str	r2, [r5, #0]
 800805c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008060:	81a3      	strh	r3, [r4, #12]
 8008062:	f04f 30ff 	mov.w	r0, #4294967295
 8008066:	bd70      	pop	{r4, r5, r6, pc}
 8008068:	071a      	lsls	r2, r3, #28
 800806a:	d50b      	bpl.n	8008084 <__srefill_r+0x50>
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f7ff ff48 	bl	8007f04 <_fflush_r>
 8008074:	2800      	cmp	r0, #0
 8008076:	d1f4      	bne.n	8008062 <__srefill_r+0x2e>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	60a0      	str	r0, [r4, #8]
 800807c:	f023 0308 	bic.w	r3, r3, #8
 8008080:	81a3      	strh	r3, [r4, #12]
 8008082:	61a0      	str	r0, [r4, #24]
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	f043 0304 	orr.w	r3, r3, #4
 800808a:	81a3      	strh	r3, [r4, #12]
 800808c:	6923      	ldr	r3, [r4, #16]
 800808e:	b91b      	cbnz	r3, 8008098 <__srefill_r+0x64>
 8008090:	4621      	mov	r1, r4
 8008092:	4628      	mov	r0, r5
 8008094:	f7ff ff84 	bl	8007fa0 <__smakebuf_r>
 8008098:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 800809c:	07b3      	lsls	r3, r6, #30
 800809e:	d00f      	beq.n	80080c0 <__srefill_r+0x8c>
 80080a0:	2301      	movs	r3, #1
 80080a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008110 <__srefill_r+0xdc>)
 80080a4:	491b      	ldr	r1, [pc, #108]	@ (8008114 <__srefill_r+0xe0>)
 80080a6:	481c      	ldr	r0, [pc, #112]	@ (8008118 <__srefill_r+0xe4>)
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	f7fe fe23 	bl	8006cf4 <_fwalk_sglue>
 80080ae:	81a6      	strh	r6, [r4, #12]
 80080b0:	f006 0609 	and.w	r6, r6, #9
 80080b4:	2e09      	cmp	r6, #9
 80080b6:	d103      	bne.n	80080c0 <__srefill_r+0x8c>
 80080b8:	4621      	mov	r1, r4
 80080ba:	4628      	mov	r0, r5
 80080bc:	f7ff fe9e 	bl	8007dfc <__sflush_r>
 80080c0:	6922      	ldr	r2, [r4, #16]
 80080c2:	6a66      	ldr	r6, [r4, #36]	@ 0x24
 80080c4:	6963      	ldr	r3, [r4, #20]
 80080c6:	6a21      	ldr	r1, [r4, #32]
 80080c8:	6022      	str	r2, [r4, #0]
 80080ca:	4628      	mov	r0, r5
 80080cc:	47b0      	blx	r6
 80080ce:	2800      	cmp	r0, #0
 80080d0:	6060      	str	r0, [r4, #4]
 80080d2:	dc17      	bgt.n	8008104 <__srefill_r+0xd0>
 80080d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d8:	d116      	bne.n	8008108 <__srefill_r+0xd4>
 80080da:	f043 0320 	orr.w	r3, r3, #32
 80080de:	e7bf      	b.n	8008060 <__srefill_r+0x2c>
 80080e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080e2:	2900      	cmp	r1, #0
 80080e4:	d0d2      	beq.n	800808c <__srefill_r+0x58>
 80080e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ea:	4299      	cmp	r1, r3
 80080ec:	d002      	beq.n	80080f4 <__srefill_r+0xc0>
 80080ee:	4628      	mov	r0, r5
 80080f0:	f7fe ffb6 	bl	8007060 <_free_r>
 80080f4:	2300      	movs	r3, #0
 80080f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80080f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080fa:	6063      	str	r3, [r4, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d0c5      	beq.n	800808c <__srefill_r+0x58>
 8008100:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	2000      	movs	r0, #0
 8008106:	e7ae      	b.n	8008066 <__srefill_r+0x32>
 8008108:	2200      	movs	r2, #0
 800810a:	6062      	str	r2, [r4, #4]
 800810c:	e7a6      	b.n	800805c <__srefill_r+0x28>
 800810e:	bf00      	nop
 8008110:	24000010 	.word	0x24000010
 8008114:	08008019 	.word	0x08008019
 8008118:	24000020 	.word	0x24000020

0800811c <__sccl>:
 800811c:	b570      	push	{r4, r5, r6, lr}
 800811e:	780b      	ldrb	r3, [r1, #0]
 8008120:	4604      	mov	r4, r0
 8008122:	2b5e      	cmp	r3, #94	@ 0x5e
 8008124:	bf0b      	itete	eq
 8008126:	784b      	ldrbeq	r3, [r1, #1]
 8008128:	1c4a      	addne	r2, r1, #1
 800812a:	1c8a      	addeq	r2, r1, #2
 800812c:	2100      	movne	r1, #0
 800812e:	bf08      	it	eq
 8008130:	2101      	moveq	r1, #1
 8008132:	3801      	subs	r0, #1
 8008134:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8008138:	f800 1f01 	strb.w	r1, [r0, #1]!
 800813c:	42a8      	cmp	r0, r5
 800813e:	d1fb      	bne.n	8008138 <__sccl+0x1c>
 8008140:	b90b      	cbnz	r3, 8008146 <__sccl+0x2a>
 8008142:	1e50      	subs	r0, r2, #1
 8008144:	bd70      	pop	{r4, r5, r6, pc}
 8008146:	f081 0101 	eor.w	r1, r1, #1
 800814a:	54e1      	strb	r1, [r4, r3]
 800814c:	4610      	mov	r0, r2
 800814e:	4602      	mov	r2, r0
 8008150:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008154:	2d2d      	cmp	r5, #45	@ 0x2d
 8008156:	d005      	beq.n	8008164 <__sccl+0x48>
 8008158:	2d5d      	cmp	r5, #93	@ 0x5d
 800815a:	d016      	beq.n	800818a <__sccl+0x6e>
 800815c:	2d00      	cmp	r5, #0
 800815e:	d0f1      	beq.n	8008144 <__sccl+0x28>
 8008160:	462b      	mov	r3, r5
 8008162:	e7f2      	b.n	800814a <__sccl+0x2e>
 8008164:	7846      	ldrb	r6, [r0, #1]
 8008166:	2e5d      	cmp	r6, #93	@ 0x5d
 8008168:	d0fa      	beq.n	8008160 <__sccl+0x44>
 800816a:	42b3      	cmp	r3, r6
 800816c:	dcf8      	bgt.n	8008160 <__sccl+0x44>
 800816e:	3002      	adds	r0, #2
 8008170:	461a      	mov	r2, r3
 8008172:	3201      	adds	r2, #1
 8008174:	4296      	cmp	r6, r2
 8008176:	54a1      	strb	r1, [r4, r2]
 8008178:	dcfb      	bgt.n	8008172 <__sccl+0x56>
 800817a:	1af2      	subs	r2, r6, r3
 800817c:	3a01      	subs	r2, #1
 800817e:	1c5d      	adds	r5, r3, #1
 8008180:	42b3      	cmp	r3, r6
 8008182:	bfa8      	it	ge
 8008184:	2200      	movge	r2, #0
 8008186:	18ab      	adds	r3, r5, r2
 8008188:	e7e1      	b.n	800814e <__sccl+0x32>
 800818a:	4610      	mov	r0, r2
 800818c:	e7da      	b.n	8008144 <__sccl+0x28>

0800818e <__submore>:
 800818e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008192:	460c      	mov	r4, r1
 8008194:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008196:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800819a:	4299      	cmp	r1, r3
 800819c:	d11d      	bne.n	80081da <__submore+0x4c>
 800819e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80081a2:	f7fe ffd1 	bl	8007148 <_malloc_r>
 80081a6:	b918      	cbnz	r0, 80081b0 <__submore+0x22>
 80081a8:	f04f 30ff 	mov.w	r0, #4294967295
 80081ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80081b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80081ba:	6360      	str	r0, [r4, #52]	@ 0x34
 80081bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80081c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80081c4:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80081c8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80081cc:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80081d0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80081d4:	6020      	str	r0, [r4, #0]
 80081d6:	2000      	movs	r0, #0
 80081d8:	e7e8      	b.n	80081ac <__submore+0x1e>
 80081da:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80081dc:	0077      	lsls	r7, r6, #1
 80081de:	463a      	mov	r2, r7
 80081e0:	f000 f962 	bl	80084a8 <_realloc_r>
 80081e4:	4605      	mov	r5, r0
 80081e6:	2800      	cmp	r0, #0
 80081e8:	d0de      	beq.n	80081a8 <__submore+0x1a>
 80081ea:	eb00 0806 	add.w	r8, r0, r6
 80081ee:	4601      	mov	r1, r0
 80081f0:	4632      	mov	r2, r6
 80081f2:	4640      	mov	r0, r8
 80081f4:	f000 f94a 	bl	800848c <memcpy>
 80081f8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80081fc:	f8c4 8000 	str.w	r8, [r4]
 8008200:	e7e9      	b.n	80081d6 <__submore+0x48>

08008202 <_ungetc_r>:
 8008202:	b570      	push	{r4, r5, r6, lr}
 8008204:	460d      	mov	r5, r1
 8008206:	1c69      	adds	r1, r5, #1
 8008208:	4606      	mov	r6, r0
 800820a:	4614      	mov	r4, r2
 800820c:	d01e      	beq.n	800824c <_ungetc_r+0x4a>
 800820e:	b118      	cbz	r0, 8008218 <_ungetc_r+0x16>
 8008210:	6a03      	ldr	r3, [r0, #32]
 8008212:	b90b      	cbnz	r3, 8008218 <_ungetc_r+0x16>
 8008214:	f7fe fd56 	bl	8006cc4 <__sinit>
 8008218:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800821a:	07da      	lsls	r2, r3, #31
 800821c:	d405      	bmi.n	800822a <_ungetc_r+0x28>
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	059b      	lsls	r3, r3, #22
 8008222:	d402      	bmi.n	800822a <_ungetc_r+0x28>
 8008224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008226:	f7fe ff18 	bl	800705a <__retarget_lock_acquire_recursive>
 800822a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822e:	f023 0220 	bic.w	r2, r3, #32
 8008232:	0758      	lsls	r0, r3, #29
 8008234:	81a2      	strh	r2, [r4, #12]
 8008236:	d422      	bmi.n	800827e <_ungetc_r+0x7c>
 8008238:	06d9      	lsls	r1, r3, #27
 800823a:	d40a      	bmi.n	8008252 <_ungetc_r+0x50>
 800823c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800823e:	07d2      	lsls	r2, r2, #31
 8008240:	d404      	bmi.n	800824c <_ungetc_r+0x4a>
 8008242:	0599      	lsls	r1, r3, #22
 8008244:	d402      	bmi.n	800824c <_ungetc_r+0x4a>
 8008246:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008248:	f7fe ff08 	bl	800705c <__retarget_lock_release_recursive>
 800824c:	f04f 35ff 	mov.w	r5, #4294967295
 8008250:	e046      	b.n	80082e0 <_ungetc_r+0xde>
 8008252:	071b      	lsls	r3, r3, #28
 8008254:	d50f      	bpl.n	8008276 <_ungetc_r+0x74>
 8008256:	4621      	mov	r1, r4
 8008258:	4630      	mov	r0, r6
 800825a:	f7ff fe53 	bl	8007f04 <_fflush_r>
 800825e:	b120      	cbz	r0, 800826a <_ungetc_r+0x68>
 8008260:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008262:	07d8      	lsls	r0, r3, #31
 8008264:	d4f2      	bmi.n	800824c <_ungetc_r+0x4a>
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	e7eb      	b.n	8008242 <_ungetc_r+0x40>
 800826a:	89a3      	ldrh	r3, [r4, #12]
 800826c:	60a0      	str	r0, [r4, #8]
 800826e:	f023 0308 	bic.w	r3, r3, #8
 8008272:	81a3      	strh	r3, [r4, #12]
 8008274:	61a0      	str	r0, [r4, #24]
 8008276:	89a3      	ldrh	r3, [r4, #12]
 8008278:	f043 0304 	orr.w	r3, r3, #4
 800827c:	81a3      	strh	r3, [r4, #12]
 800827e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008280:	6862      	ldr	r2, [r4, #4]
 8008282:	b2ed      	uxtb	r5, r5
 8008284:	b1d3      	cbz	r3, 80082bc <_ungetc_r+0xba>
 8008286:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008288:	4293      	cmp	r3, r2
 800828a:	dc05      	bgt.n	8008298 <_ungetc_r+0x96>
 800828c:	4621      	mov	r1, r4
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ff7d 	bl	800818e <__submore>
 8008294:	2800      	cmp	r0, #0
 8008296:	d1e3      	bne.n	8008260 <_ungetc_r+0x5e>
 8008298:	6823      	ldr	r3, [r4, #0]
 800829a:	1e5a      	subs	r2, r3, #1
 800829c:	6022      	str	r2, [r4, #0]
 800829e:	f803 5c01 	strb.w	r5, [r3, #-1]
 80082a2:	6863      	ldr	r3, [r4, #4]
 80082a4:	3301      	adds	r3, #1
 80082a6:	6063      	str	r3, [r4, #4]
 80082a8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082aa:	07da      	lsls	r2, r3, #31
 80082ac:	d418      	bmi.n	80082e0 <_ungetc_r+0xde>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	059b      	lsls	r3, r3, #22
 80082b2:	d415      	bmi.n	80082e0 <_ungetc_r+0xde>
 80082b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082b6:	f7fe fed1 	bl	800705c <__retarget_lock_release_recursive>
 80082ba:	e011      	b.n	80082e0 <_ungetc_r+0xde>
 80082bc:	6e61      	ldr	r1, [r4, #100]	@ 0x64
 80082be:	6920      	ldr	r0, [r4, #16]
 80082c0:	6823      	ldr	r3, [r4, #0]
 80082c2:	f001 0101 	and.w	r1, r1, #1
 80082c6:	b168      	cbz	r0, 80082e4 <_ungetc_r+0xe2>
 80082c8:	4298      	cmp	r0, r3
 80082ca:	d20b      	bcs.n	80082e4 <_ungetc_r+0xe2>
 80082cc:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80082d0:	42a8      	cmp	r0, r5
 80082d2:	d107      	bne.n	80082e4 <_ungetc_r+0xe2>
 80082d4:	3b01      	subs	r3, #1
 80082d6:	3201      	adds	r2, #1
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	6062      	str	r2, [r4, #4]
 80082dc:	2900      	cmp	r1, #0
 80082de:	d0e6      	beq.n	80082ae <_ungetc_r+0xac>
 80082e0:	4628      	mov	r0, r5
 80082e2:	bd70      	pop	{r4, r5, r6, pc}
 80082e4:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80082e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ee:	2303      	movs	r3, #3
 80082f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80082f2:	4623      	mov	r3, r4
 80082f4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	2301      	movs	r3, #1
 80082fc:	6063      	str	r3, [r4, #4]
 80082fe:	e7ed      	b.n	80082dc <_ungetc_r+0xda>

08008300 <__swbuf_r>:
 8008300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008302:	460e      	mov	r6, r1
 8008304:	4614      	mov	r4, r2
 8008306:	4605      	mov	r5, r0
 8008308:	b118      	cbz	r0, 8008312 <__swbuf_r+0x12>
 800830a:	6a03      	ldr	r3, [r0, #32]
 800830c:	b90b      	cbnz	r3, 8008312 <__swbuf_r+0x12>
 800830e:	f7fe fcd9 	bl	8006cc4 <__sinit>
 8008312:	69a3      	ldr	r3, [r4, #24]
 8008314:	60a3      	str	r3, [r4, #8]
 8008316:	89a3      	ldrh	r3, [r4, #12]
 8008318:	071a      	lsls	r2, r3, #28
 800831a:	d501      	bpl.n	8008320 <__swbuf_r+0x20>
 800831c:	6923      	ldr	r3, [r4, #16]
 800831e:	b943      	cbnz	r3, 8008332 <__swbuf_r+0x32>
 8008320:	4621      	mov	r1, r4
 8008322:	4628      	mov	r0, r5
 8008324:	f000 f82a 	bl	800837c <__swsetup_r>
 8008328:	b118      	cbz	r0, 8008332 <__swbuf_r+0x32>
 800832a:	f04f 37ff 	mov.w	r7, #4294967295
 800832e:	4638      	mov	r0, r7
 8008330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008332:	6823      	ldr	r3, [r4, #0]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	1a98      	subs	r0, r3, r2
 8008338:	6963      	ldr	r3, [r4, #20]
 800833a:	b2f6      	uxtb	r6, r6
 800833c:	4283      	cmp	r3, r0
 800833e:	4637      	mov	r7, r6
 8008340:	dc05      	bgt.n	800834e <__swbuf_r+0x4e>
 8008342:	4621      	mov	r1, r4
 8008344:	4628      	mov	r0, r5
 8008346:	f7ff fddd 	bl	8007f04 <_fflush_r>
 800834a:	2800      	cmp	r0, #0
 800834c:	d1ed      	bne.n	800832a <__swbuf_r+0x2a>
 800834e:	68a3      	ldr	r3, [r4, #8]
 8008350:	3b01      	subs	r3, #1
 8008352:	60a3      	str	r3, [r4, #8]
 8008354:	6823      	ldr	r3, [r4, #0]
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	6022      	str	r2, [r4, #0]
 800835a:	701e      	strb	r6, [r3, #0]
 800835c:	6962      	ldr	r2, [r4, #20]
 800835e:	1c43      	adds	r3, r0, #1
 8008360:	429a      	cmp	r2, r3
 8008362:	d004      	beq.n	800836e <__swbuf_r+0x6e>
 8008364:	89a3      	ldrh	r3, [r4, #12]
 8008366:	07db      	lsls	r3, r3, #31
 8008368:	d5e1      	bpl.n	800832e <__swbuf_r+0x2e>
 800836a:	2e0a      	cmp	r6, #10
 800836c:	d1df      	bne.n	800832e <__swbuf_r+0x2e>
 800836e:	4621      	mov	r1, r4
 8008370:	4628      	mov	r0, r5
 8008372:	f7ff fdc7 	bl	8007f04 <_fflush_r>
 8008376:	2800      	cmp	r0, #0
 8008378:	d0d9      	beq.n	800832e <__swbuf_r+0x2e>
 800837a:	e7d6      	b.n	800832a <__swbuf_r+0x2a>

0800837c <__swsetup_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4b29      	ldr	r3, [pc, #164]	@ (8008424 <__swsetup_r+0xa8>)
 8008380:	4605      	mov	r5, r0
 8008382:	6818      	ldr	r0, [r3, #0]
 8008384:	460c      	mov	r4, r1
 8008386:	b118      	cbz	r0, 8008390 <__swsetup_r+0x14>
 8008388:	6a03      	ldr	r3, [r0, #32]
 800838a:	b90b      	cbnz	r3, 8008390 <__swsetup_r+0x14>
 800838c:	f7fe fc9a 	bl	8006cc4 <__sinit>
 8008390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008394:	0719      	lsls	r1, r3, #28
 8008396:	d422      	bmi.n	80083de <__swsetup_r+0x62>
 8008398:	06da      	lsls	r2, r3, #27
 800839a:	d407      	bmi.n	80083ac <__swsetup_r+0x30>
 800839c:	2209      	movs	r2, #9
 800839e:	602a      	str	r2, [r5, #0]
 80083a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a4:	81a3      	strh	r3, [r4, #12]
 80083a6:	f04f 30ff 	mov.w	r0, #4294967295
 80083aa:	e033      	b.n	8008414 <__swsetup_r+0x98>
 80083ac:	0758      	lsls	r0, r3, #29
 80083ae:	d512      	bpl.n	80083d6 <__swsetup_r+0x5a>
 80083b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083b2:	b141      	cbz	r1, 80083c6 <__swsetup_r+0x4a>
 80083b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083b8:	4299      	cmp	r1, r3
 80083ba:	d002      	beq.n	80083c2 <__swsetup_r+0x46>
 80083bc:	4628      	mov	r0, r5
 80083be:	f7fe fe4f 	bl	8007060 <_free_r>
 80083c2:	2300      	movs	r3, #0
 80083c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083cc:	81a3      	strh	r3, [r4, #12]
 80083ce:	2300      	movs	r3, #0
 80083d0:	6063      	str	r3, [r4, #4]
 80083d2:	6923      	ldr	r3, [r4, #16]
 80083d4:	6023      	str	r3, [r4, #0]
 80083d6:	89a3      	ldrh	r3, [r4, #12]
 80083d8:	f043 0308 	orr.w	r3, r3, #8
 80083dc:	81a3      	strh	r3, [r4, #12]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	b94b      	cbnz	r3, 80083f6 <__swsetup_r+0x7a>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083ec:	d003      	beq.n	80083f6 <__swsetup_r+0x7a>
 80083ee:	4621      	mov	r1, r4
 80083f0:	4628      	mov	r0, r5
 80083f2:	f7ff fdd5 	bl	8007fa0 <__smakebuf_r>
 80083f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fa:	f013 0201 	ands.w	r2, r3, #1
 80083fe:	d00a      	beq.n	8008416 <__swsetup_r+0x9a>
 8008400:	2200      	movs	r2, #0
 8008402:	60a2      	str	r2, [r4, #8]
 8008404:	6962      	ldr	r2, [r4, #20]
 8008406:	4252      	negs	r2, r2
 8008408:	61a2      	str	r2, [r4, #24]
 800840a:	6922      	ldr	r2, [r4, #16]
 800840c:	b942      	cbnz	r2, 8008420 <__swsetup_r+0xa4>
 800840e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008412:	d1c5      	bne.n	80083a0 <__swsetup_r+0x24>
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	0799      	lsls	r1, r3, #30
 8008418:	bf58      	it	pl
 800841a:	6962      	ldrpl	r2, [r4, #20]
 800841c:	60a2      	str	r2, [r4, #8]
 800841e:	e7f4      	b.n	800840a <__swsetup_r+0x8e>
 8008420:	2000      	movs	r0, #0
 8008422:	e7f7      	b.n	8008414 <__swsetup_r+0x98>
 8008424:	2400001c 	.word	0x2400001c

08008428 <_fstat_r>:
 8008428:	b538      	push	{r3, r4, r5, lr}
 800842a:	4d07      	ldr	r5, [pc, #28]	@ (8008448 <_fstat_r+0x20>)
 800842c:	2300      	movs	r3, #0
 800842e:	4604      	mov	r4, r0
 8008430:	4608      	mov	r0, r1
 8008432:	4611      	mov	r1, r2
 8008434:	602b      	str	r3, [r5, #0]
 8008436:	f7f8 fc39 	bl	8000cac <_fstat>
 800843a:	1c43      	adds	r3, r0, #1
 800843c:	d102      	bne.n	8008444 <_fstat_r+0x1c>
 800843e:	682b      	ldr	r3, [r5, #0]
 8008440:	b103      	cbz	r3, 8008444 <_fstat_r+0x1c>
 8008442:	6023      	str	r3, [r4, #0]
 8008444:	bd38      	pop	{r3, r4, r5, pc}
 8008446:	bf00      	nop
 8008448:	240008f8 	.word	0x240008f8

0800844c <_isatty_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4d06      	ldr	r5, [pc, #24]	@ (8008468 <_isatty_r+0x1c>)
 8008450:	2300      	movs	r3, #0
 8008452:	4604      	mov	r4, r0
 8008454:	4608      	mov	r0, r1
 8008456:	602b      	str	r3, [r5, #0]
 8008458:	f7f8 fb96 	bl	8000b88 <_isatty>
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	d102      	bne.n	8008466 <_isatty_r+0x1a>
 8008460:	682b      	ldr	r3, [r5, #0]
 8008462:	b103      	cbz	r3, 8008466 <_isatty_r+0x1a>
 8008464:	6023      	str	r3, [r4, #0]
 8008466:	bd38      	pop	{r3, r4, r5, pc}
 8008468:	240008f8 	.word	0x240008f8

0800846c <_sbrk_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d06      	ldr	r5, [pc, #24]	@ (8008488 <_sbrk_r+0x1c>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	602b      	str	r3, [r5, #0]
 8008478:	f7f8 fe32 	bl	80010e0 <_sbrk>
 800847c:	1c43      	adds	r3, r0, #1
 800847e:	d102      	bne.n	8008486 <_sbrk_r+0x1a>
 8008480:	682b      	ldr	r3, [r5, #0]
 8008482:	b103      	cbz	r3, 8008486 <_sbrk_r+0x1a>
 8008484:	6023      	str	r3, [r4, #0]
 8008486:	bd38      	pop	{r3, r4, r5, pc}
 8008488:	240008f8 	.word	0x240008f8

0800848c <memcpy>:
 800848c:	440a      	add	r2, r1
 800848e:	4291      	cmp	r1, r2
 8008490:	f100 33ff 	add.w	r3, r0, #4294967295
 8008494:	d100      	bne.n	8008498 <memcpy+0xc>
 8008496:	4770      	bx	lr
 8008498:	b510      	push	{r4, lr}
 800849a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800849e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a2:	4291      	cmp	r1, r2
 80084a4:	d1f9      	bne.n	800849a <memcpy+0xe>
 80084a6:	bd10      	pop	{r4, pc}

080084a8 <_realloc_r>:
 80084a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084ac:	4607      	mov	r7, r0
 80084ae:	4614      	mov	r4, r2
 80084b0:	460d      	mov	r5, r1
 80084b2:	b921      	cbnz	r1, 80084be <_realloc_r+0x16>
 80084b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	4611      	mov	r1, r2
 80084ba:	f7fe be45 	b.w	8007148 <_malloc_r>
 80084be:	b92a      	cbnz	r2, 80084cc <_realloc_r+0x24>
 80084c0:	f7fe fdce 	bl	8007060 <_free_r>
 80084c4:	4625      	mov	r5, r4
 80084c6:	4628      	mov	r0, r5
 80084c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084cc:	f000 f906 	bl	80086dc <_malloc_usable_size_r>
 80084d0:	4284      	cmp	r4, r0
 80084d2:	4606      	mov	r6, r0
 80084d4:	d802      	bhi.n	80084dc <_realloc_r+0x34>
 80084d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084da:	d8f4      	bhi.n	80084c6 <_realloc_r+0x1e>
 80084dc:	4621      	mov	r1, r4
 80084de:	4638      	mov	r0, r7
 80084e0:	f7fe fe32 	bl	8007148 <_malloc_r>
 80084e4:	4680      	mov	r8, r0
 80084e6:	b908      	cbnz	r0, 80084ec <_realloc_r+0x44>
 80084e8:	4645      	mov	r5, r8
 80084ea:	e7ec      	b.n	80084c6 <_realloc_r+0x1e>
 80084ec:	42b4      	cmp	r4, r6
 80084ee:	4622      	mov	r2, r4
 80084f0:	4629      	mov	r1, r5
 80084f2:	bf28      	it	cs
 80084f4:	4632      	movcs	r2, r6
 80084f6:	f7ff ffc9 	bl	800848c <memcpy>
 80084fa:	4629      	mov	r1, r5
 80084fc:	4638      	mov	r0, r7
 80084fe:	f7fe fdaf 	bl	8007060 <_free_r>
 8008502:	e7f1      	b.n	80084e8 <_realloc_r+0x40>

08008504 <_strtol_l.isra.0>:
 8008504:	2b24      	cmp	r3, #36	@ 0x24
 8008506:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800850a:	4686      	mov	lr, r0
 800850c:	4690      	mov	r8, r2
 800850e:	d801      	bhi.n	8008514 <_strtol_l.isra.0+0x10>
 8008510:	2b01      	cmp	r3, #1
 8008512:	d106      	bne.n	8008522 <_strtol_l.isra.0+0x1e>
 8008514:	f7fe fd76 	bl	8007004 <__errno>
 8008518:	2316      	movs	r3, #22
 800851a:	6003      	str	r3, [r0, #0]
 800851c:	2000      	movs	r0, #0
 800851e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008522:	4834      	ldr	r0, [pc, #208]	@ (80085f4 <_strtol_l.isra.0+0xf0>)
 8008524:	460d      	mov	r5, r1
 8008526:	462a      	mov	r2, r5
 8008528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800852c:	5d06      	ldrb	r6, [r0, r4]
 800852e:	f016 0608 	ands.w	r6, r6, #8
 8008532:	d1f8      	bne.n	8008526 <_strtol_l.isra.0+0x22>
 8008534:	2c2d      	cmp	r4, #45	@ 0x2d
 8008536:	d110      	bne.n	800855a <_strtol_l.isra.0+0x56>
 8008538:	782c      	ldrb	r4, [r5, #0]
 800853a:	2601      	movs	r6, #1
 800853c:	1c95      	adds	r5, r2, #2
 800853e:	f033 0210 	bics.w	r2, r3, #16
 8008542:	d115      	bne.n	8008570 <_strtol_l.isra.0+0x6c>
 8008544:	2c30      	cmp	r4, #48	@ 0x30
 8008546:	d10d      	bne.n	8008564 <_strtol_l.isra.0+0x60>
 8008548:	782a      	ldrb	r2, [r5, #0]
 800854a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800854e:	2a58      	cmp	r2, #88	@ 0x58
 8008550:	d108      	bne.n	8008564 <_strtol_l.isra.0+0x60>
 8008552:	786c      	ldrb	r4, [r5, #1]
 8008554:	3502      	adds	r5, #2
 8008556:	2310      	movs	r3, #16
 8008558:	e00a      	b.n	8008570 <_strtol_l.isra.0+0x6c>
 800855a:	2c2b      	cmp	r4, #43	@ 0x2b
 800855c:	bf04      	itt	eq
 800855e:	782c      	ldrbeq	r4, [r5, #0]
 8008560:	1c95      	addeq	r5, r2, #2
 8008562:	e7ec      	b.n	800853e <_strtol_l.isra.0+0x3a>
 8008564:	2b00      	cmp	r3, #0
 8008566:	d1f6      	bne.n	8008556 <_strtol_l.isra.0+0x52>
 8008568:	2c30      	cmp	r4, #48	@ 0x30
 800856a:	bf14      	ite	ne
 800856c:	230a      	movne	r3, #10
 800856e:	2308      	moveq	r3, #8
 8008570:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008574:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008578:	2200      	movs	r2, #0
 800857a:	fbbc f9f3 	udiv	r9, ip, r3
 800857e:	4610      	mov	r0, r2
 8008580:	fb03 ca19 	mls	sl, r3, r9, ip
 8008584:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008588:	2f09      	cmp	r7, #9
 800858a:	d80f      	bhi.n	80085ac <_strtol_l.isra.0+0xa8>
 800858c:	463c      	mov	r4, r7
 800858e:	42a3      	cmp	r3, r4
 8008590:	dd1b      	ble.n	80085ca <_strtol_l.isra.0+0xc6>
 8008592:	1c57      	adds	r7, r2, #1
 8008594:	d007      	beq.n	80085a6 <_strtol_l.isra.0+0xa2>
 8008596:	4581      	cmp	r9, r0
 8008598:	d314      	bcc.n	80085c4 <_strtol_l.isra.0+0xc0>
 800859a:	d101      	bne.n	80085a0 <_strtol_l.isra.0+0x9c>
 800859c:	45a2      	cmp	sl, r4
 800859e:	db11      	blt.n	80085c4 <_strtol_l.isra.0+0xc0>
 80085a0:	fb00 4003 	mla	r0, r0, r3, r4
 80085a4:	2201      	movs	r2, #1
 80085a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80085aa:	e7eb      	b.n	8008584 <_strtol_l.isra.0+0x80>
 80085ac:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80085b0:	2f19      	cmp	r7, #25
 80085b2:	d801      	bhi.n	80085b8 <_strtol_l.isra.0+0xb4>
 80085b4:	3c37      	subs	r4, #55	@ 0x37
 80085b6:	e7ea      	b.n	800858e <_strtol_l.isra.0+0x8a>
 80085b8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80085bc:	2f19      	cmp	r7, #25
 80085be:	d804      	bhi.n	80085ca <_strtol_l.isra.0+0xc6>
 80085c0:	3c57      	subs	r4, #87	@ 0x57
 80085c2:	e7e4      	b.n	800858e <_strtol_l.isra.0+0x8a>
 80085c4:	f04f 32ff 	mov.w	r2, #4294967295
 80085c8:	e7ed      	b.n	80085a6 <_strtol_l.isra.0+0xa2>
 80085ca:	1c53      	adds	r3, r2, #1
 80085cc:	d108      	bne.n	80085e0 <_strtol_l.isra.0+0xdc>
 80085ce:	2322      	movs	r3, #34	@ 0x22
 80085d0:	f8ce 3000 	str.w	r3, [lr]
 80085d4:	4660      	mov	r0, ip
 80085d6:	f1b8 0f00 	cmp.w	r8, #0
 80085da:	d0a0      	beq.n	800851e <_strtol_l.isra.0+0x1a>
 80085dc:	1e69      	subs	r1, r5, #1
 80085de:	e006      	b.n	80085ee <_strtol_l.isra.0+0xea>
 80085e0:	b106      	cbz	r6, 80085e4 <_strtol_l.isra.0+0xe0>
 80085e2:	4240      	negs	r0, r0
 80085e4:	f1b8 0f00 	cmp.w	r8, #0
 80085e8:	d099      	beq.n	800851e <_strtol_l.isra.0+0x1a>
 80085ea:	2a00      	cmp	r2, #0
 80085ec:	d1f6      	bne.n	80085dc <_strtol_l.isra.0+0xd8>
 80085ee:	f8c8 1000 	str.w	r1, [r8]
 80085f2:	e794      	b.n	800851e <_strtol_l.isra.0+0x1a>
 80085f4:	080087bb 	.word	0x080087bb

080085f8 <_strtol_r>:
 80085f8:	f7ff bf84 	b.w	8008504 <_strtol_l.isra.0>

080085fc <_strtoul_l.isra.0>:
 80085fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008600:	4e34      	ldr	r6, [pc, #208]	@ (80086d4 <_strtoul_l.isra.0+0xd8>)
 8008602:	4686      	mov	lr, r0
 8008604:	460d      	mov	r5, r1
 8008606:	4628      	mov	r0, r5
 8008608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800860c:	5d37      	ldrb	r7, [r6, r4]
 800860e:	f017 0708 	ands.w	r7, r7, #8
 8008612:	d1f8      	bne.n	8008606 <_strtoul_l.isra.0+0xa>
 8008614:	2c2d      	cmp	r4, #45	@ 0x2d
 8008616:	d110      	bne.n	800863a <_strtoul_l.isra.0+0x3e>
 8008618:	782c      	ldrb	r4, [r5, #0]
 800861a:	2701      	movs	r7, #1
 800861c:	1c85      	adds	r5, r0, #2
 800861e:	f033 0010 	bics.w	r0, r3, #16
 8008622:	d115      	bne.n	8008650 <_strtoul_l.isra.0+0x54>
 8008624:	2c30      	cmp	r4, #48	@ 0x30
 8008626:	d10d      	bne.n	8008644 <_strtoul_l.isra.0+0x48>
 8008628:	7828      	ldrb	r0, [r5, #0]
 800862a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800862e:	2858      	cmp	r0, #88	@ 0x58
 8008630:	d108      	bne.n	8008644 <_strtoul_l.isra.0+0x48>
 8008632:	786c      	ldrb	r4, [r5, #1]
 8008634:	3502      	adds	r5, #2
 8008636:	2310      	movs	r3, #16
 8008638:	e00a      	b.n	8008650 <_strtoul_l.isra.0+0x54>
 800863a:	2c2b      	cmp	r4, #43	@ 0x2b
 800863c:	bf04      	itt	eq
 800863e:	782c      	ldrbeq	r4, [r5, #0]
 8008640:	1c85      	addeq	r5, r0, #2
 8008642:	e7ec      	b.n	800861e <_strtoul_l.isra.0+0x22>
 8008644:	2b00      	cmp	r3, #0
 8008646:	d1f6      	bne.n	8008636 <_strtoul_l.isra.0+0x3a>
 8008648:	2c30      	cmp	r4, #48	@ 0x30
 800864a:	bf14      	ite	ne
 800864c:	230a      	movne	r3, #10
 800864e:	2308      	moveq	r3, #8
 8008650:	f04f 38ff 	mov.w	r8, #4294967295
 8008654:	2600      	movs	r6, #0
 8008656:	fbb8 f8f3 	udiv	r8, r8, r3
 800865a:	fb03 f908 	mul.w	r9, r3, r8
 800865e:	ea6f 0909 	mvn.w	r9, r9
 8008662:	4630      	mov	r0, r6
 8008664:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8008668:	f1bc 0f09 	cmp.w	ip, #9
 800866c:	d810      	bhi.n	8008690 <_strtoul_l.isra.0+0x94>
 800866e:	4664      	mov	r4, ip
 8008670:	42a3      	cmp	r3, r4
 8008672:	dd1e      	ble.n	80086b2 <_strtoul_l.isra.0+0xb6>
 8008674:	f1b6 3fff 	cmp.w	r6, #4294967295
 8008678:	d007      	beq.n	800868a <_strtoul_l.isra.0+0x8e>
 800867a:	4580      	cmp	r8, r0
 800867c:	d316      	bcc.n	80086ac <_strtoul_l.isra.0+0xb0>
 800867e:	d101      	bne.n	8008684 <_strtoul_l.isra.0+0x88>
 8008680:	45a1      	cmp	r9, r4
 8008682:	db13      	blt.n	80086ac <_strtoul_l.isra.0+0xb0>
 8008684:	fb00 4003 	mla	r0, r0, r3, r4
 8008688:	2601      	movs	r6, #1
 800868a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800868e:	e7e9      	b.n	8008664 <_strtoul_l.isra.0+0x68>
 8008690:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8008694:	f1bc 0f19 	cmp.w	ip, #25
 8008698:	d801      	bhi.n	800869e <_strtoul_l.isra.0+0xa2>
 800869a:	3c37      	subs	r4, #55	@ 0x37
 800869c:	e7e8      	b.n	8008670 <_strtoul_l.isra.0+0x74>
 800869e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80086a2:	f1bc 0f19 	cmp.w	ip, #25
 80086a6:	d804      	bhi.n	80086b2 <_strtoul_l.isra.0+0xb6>
 80086a8:	3c57      	subs	r4, #87	@ 0x57
 80086aa:	e7e1      	b.n	8008670 <_strtoul_l.isra.0+0x74>
 80086ac:	f04f 36ff 	mov.w	r6, #4294967295
 80086b0:	e7eb      	b.n	800868a <_strtoul_l.isra.0+0x8e>
 80086b2:	1c73      	adds	r3, r6, #1
 80086b4:	d106      	bne.n	80086c4 <_strtoul_l.isra.0+0xc8>
 80086b6:	2322      	movs	r3, #34	@ 0x22
 80086b8:	f8ce 3000 	str.w	r3, [lr]
 80086bc:	4630      	mov	r0, r6
 80086be:	b932      	cbnz	r2, 80086ce <_strtoul_l.isra.0+0xd2>
 80086c0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80086c4:	b107      	cbz	r7, 80086c8 <_strtoul_l.isra.0+0xcc>
 80086c6:	4240      	negs	r0, r0
 80086c8:	2a00      	cmp	r2, #0
 80086ca:	d0f9      	beq.n	80086c0 <_strtoul_l.isra.0+0xc4>
 80086cc:	b106      	cbz	r6, 80086d0 <_strtoul_l.isra.0+0xd4>
 80086ce:	1e69      	subs	r1, r5, #1
 80086d0:	6011      	str	r1, [r2, #0]
 80086d2:	e7f5      	b.n	80086c0 <_strtoul_l.isra.0+0xc4>
 80086d4:	080087bb 	.word	0x080087bb

080086d8 <_strtoul_r>:
 80086d8:	f7ff bf90 	b.w	80085fc <_strtoul_l.isra.0>

080086dc <_malloc_usable_size_r>:
 80086dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086e0:	1f18      	subs	r0, r3, #4
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	bfbc      	itt	lt
 80086e6:	580b      	ldrlt	r3, [r1, r0]
 80086e8:	18c0      	addlt	r0, r0, r3
 80086ea:	4770      	bx	lr

080086ec <_init>:
 80086ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ee:	bf00      	nop
 80086f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086f2:	bc08      	pop	{r3}
 80086f4:	469e      	mov	lr, r3
 80086f6:	4770      	bx	lr

080086f8 <_fini>:
 80086f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086fa:	bf00      	nop
 80086fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086fe:	bc08      	pop	{r3}
 8008700:	469e      	mov	lr, r3
 8008702:	4770      	bx	lr
