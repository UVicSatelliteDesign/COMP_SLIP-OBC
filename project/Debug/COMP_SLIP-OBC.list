
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ce64  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800d104  0800d104  0000e104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d1c0  0800d1c0  0000e1c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d1c8  0800d1c8  0000e1c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800d1cc  0800d1cc  0000e1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  0800d1d0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  0800d1e4  0000f014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  0800d244  0000f074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005070  240000d4  0800d2a4  0000f0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  24005144  0800d2a4  0000f144  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000f0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274a6  00000000  00000000  0000f102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dce  00000000  00000000  000365a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c48  00000000  00000000  0003b378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015b4  00000000  00000000  0003cfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000689a  00000000  00000000  0003e574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024c29  00000000  00000000  00044e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0016fc2c  00000000  00000000  00069a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001d9663  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000076e0  00000000  00000000  001d96a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  001e0d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d0ec 	.word	0x0800d0ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800d0ec 	.word	0x0800d0ec

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fdf1 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f83d 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f9a3 	bl	8000928 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e2:	f000 f8b9 	bl	8000758 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e6:	f000 f921 	bl	800082c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005ea:	f000 f96b 	bl	80008c4 <MX_USB_OTG_FS_PCD_Init>
  MX_FATFS_Init();
 80005ee:	f009 fa51 	bl	8009a94 <MX_FATFS_Init>
  MX_SDMMC1_SD_Init();
 80005f2:	f000 f8fd 	bl	80007f0 <MX_SDMMC1_SD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005f6:	f009 fd3d 	bl	800a074 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005fa:	4a10      	ldr	r2, [pc, #64]	@ (800063c <main+0x6c>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	4810      	ldr	r0, [pc, #64]	@ (8000640 <main+0x70>)
 8000600:	f009 fdb9 	bl	800a176 <osThreadNew>
 8000604:	4603      	mov	r3, r0
 8000606:	4a0f      	ldr	r2, [pc, #60]	@ (8000644 <main+0x74>)
 8000608:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */

  xTaskCreate(obc_notifications, "OBC Notifications", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, NULL);
 800060a:	2300      	movs	r3, #0
 800060c:	9301      	str	r3, [sp, #4]
 800060e:	2301      	movs	r3, #1
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	2300      	movs	r3, #0
 8000614:	2280      	movs	r2, #128	@ 0x80
 8000616:	490c      	ldr	r1, [pc, #48]	@ (8000648 <main+0x78>)
 8000618:	480c      	ldr	r0, [pc, #48]	@ (800064c <main+0x7c>)
 800061a:	f00a fe8b 	bl	800b334 <xTaskCreate>

  xTaskCreate(ttc_notifications, "TTC Notifications", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, NULL);
 800061e:	2300      	movs	r3, #0
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	2302      	movs	r3, #2
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	2280      	movs	r2, #128	@ 0x80
 800062a:	4909      	ldr	r1, [pc, #36]	@ (8000650 <main+0x80>)
 800062c:	4809      	ldr	r0, [pc, #36]	@ (8000654 <main+0x84>)
 800062e:	f00a fe81 	bl	800b334 <xTaskCreate>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000632:	f009 fd65 	bl	800a100 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000636:	bf00      	nop
 8000638:	e7fd      	b.n	8000636 <main+0x66>
 800063a:	bf00      	nop
 800063c:	0800d150 	.word	0x0800d150
 8000640:	08000ae1 	.word	0x08000ae1
 8000644:	240007cc 	.word	0x240007cc
 8000648:	0800d110 	.word	0x0800d110
 800064c:	08000afd 	.word	0x08000afd
 8000650:	0800d124 	.word	0x0800d124
 8000654:	08001155 	.word	0x08001155

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09c      	sub	sp, #112	@ 0x70
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000662:	224c      	movs	r2, #76	@ 0x4c
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f00c fd06 	bl	800d078 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2220      	movs	r2, #32
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f00c fd00 	bl	800d078 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000678:	2002      	movs	r0, #2
 800067a:	f001 fecb 	bl	8002414 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b33      	ldr	r3, [pc, #204]	@ (8000750 <SystemClock_Config+0xf8>)
 8000684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000686:	4a32      	ldr	r2, [pc, #200]	@ (8000750 <SystemClock_Config+0xf8>)
 8000688:	f023 0301 	bic.w	r3, r3, #1
 800068c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800068e:	4b30      	ldr	r3, [pc, #192]	@ (8000750 <SystemClock_Config+0xf8>)
 8000690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	4b2e      	ldr	r3, [pc, #184]	@ (8000754 <SystemClock_Config+0xfc>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006a0:	4a2c      	ldr	r2, [pc, #176]	@ (8000754 <SystemClock_Config+0xfc>)
 80006a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006a6:	6193      	str	r3, [r2, #24]
 80006a8:	4b2a      	ldr	r3, [pc, #168]	@ (8000754 <SystemClock_Config+0xfc>)
 80006aa:	699b      	ldr	r3, [r3, #24]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006b0:	603b      	str	r3, [r7, #0]
 80006b2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80006b4:	bf00      	nop
 80006b6:	4b27      	ldr	r3, [pc, #156]	@ (8000754 <SystemClock_Config+0xfc>)
 80006b8:	699b      	ldr	r3, [r3, #24]
 80006ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80006c2:	d1f8      	bne.n	80006b6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006c4:	2303      	movs	r3, #3
 80006c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006c8:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80006cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006ce:	2301      	movs	r3, #1
 80006d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2340      	movs	r3, #64	@ 0x40
 80006d4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d6:	2302      	movs	r3, #2
 80006d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006da:	2302      	movs	r3, #2
 80006dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006de:	2301      	movs	r3, #1
 80006e0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006e2:	2318      	movs	r3, #24
 80006e4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006ea:	2304      	movs	r3, #4
 80006ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006f2:	230c      	movs	r3, #12
 80006f4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f6:	2300      	movs	r3, #0
 80006f8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000702:	4618      	mov	r0, r3
 8000704:	f001 fed0 	bl	80024a8 <HAL_RCC_OscConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800070e:	f000 f9ef 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000712:	233f      	movs	r3, #63	@ 0x3f
 8000714:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000716:	2300      	movs	r3, #0
 8000718:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2101      	movs	r1, #1
 8000736:	4618      	mov	r0, r3
 8000738:	f002 fb10 	bl	8002d5c <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000742:	f000 f9d5 	bl	8000af0 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3770      	adds	r7, #112	@ 0x70
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	58000400 	.word	0x58000400
 8000754:	58024800 	.word	0x58024800

08000758 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800075c:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <MX_ETH_Init+0x80>)
 800075e:	4a1f      	ldr	r2, [pc, #124]	@ (80007dc <MX_ETH_Init+0x84>)
 8000760:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <MX_ETH_Init+0x88>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000768:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <MX_ETH_Init+0x88>)
 800076a:	2280      	movs	r2, #128	@ 0x80
 800076c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800076e:	4b1c      	ldr	r3, [pc, #112]	@ (80007e0 <MX_ETH_Init+0x88>)
 8000770:	22e1      	movs	r2, #225	@ 0xe1
 8000772:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000774:	4b1a      	ldr	r3, [pc, #104]	@ (80007e0 <MX_ETH_Init+0x88>)
 8000776:	2200      	movs	r2, #0
 8000778:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800077a:	4b19      	ldr	r3, [pc, #100]	@ (80007e0 <MX_ETH_Init+0x88>)
 800077c:	2200      	movs	r2, #0
 800077e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000780:	4b17      	ldr	r3, [pc, #92]	@ (80007e0 <MX_ETH_Init+0x88>)
 8000782:	2200      	movs	r2, #0
 8000784:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000786:	4b14      	ldr	r3, [pc, #80]	@ (80007d8 <MX_ETH_Init+0x80>)
 8000788:	4a15      	ldr	r2, [pc, #84]	@ (80007e0 <MX_ETH_Init+0x88>)
 800078a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800078c:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <MX_ETH_Init+0x80>)
 800078e:	2201      	movs	r2, #1
 8000790:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000792:	4b11      	ldr	r3, [pc, #68]	@ (80007d8 <MX_ETH_Init+0x80>)
 8000794:	4a13      	ldr	r2, [pc, #76]	@ (80007e4 <MX_ETH_Init+0x8c>)
 8000796:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000798:	4b0f      	ldr	r3, [pc, #60]	@ (80007d8 <MX_ETH_Init+0x80>)
 800079a:	4a13      	ldr	r2, [pc, #76]	@ (80007e8 <MX_ETH_Init+0x90>)
 800079c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <MX_ETH_Init+0x80>)
 80007a0:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80007a4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80007a6:	480c      	ldr	r0, [pc, #48]	@ (80007d8 <MX_ETH_Init+0x80>)
 80007a8:	f000 feee 	bl	8001588 <HAL_ETH_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80007b2:	f000 f99d 	bl	8000af0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80007b6:	2238      	movs	r2, #56	@ 0x38
 80007b8:	2100      	movs	r1, #0
 80007ba:	480c      	ldr	r0, [pc, #48]	@ (80007ec <MX_ETH_Init+0x94>)
 80007bc:	f00c fc5c 	bl	800d078 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80007c0:	4b0a      	ldr	r3, [pc, #40]	@ (80007ec <MX_ETH_Init+0x94>)
 80007c2:	2221      	movs	r2, #33	@ 0x21
 80007c4:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_ETH_Init+0x94>)
 80007c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80007cc:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80007ce:	4b07      	ldr	r3, [pc, #28]	@ (80007ec <MX_ETH_Init+0x94>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000128 	.word	0x24000128
 80007dc:	40028000 	.word	0x40028000
 80007e0:	240007d0 	.word	0x240007d0
 80007e4:	24000074 	.word	0x24000074
 80007e8:	24000014 	.word	0x24000014
 80007ec:	240000f0 	.word	0x240000f0

080007f0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80007f4:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 80007f6:	4a0c      	ldr	r2, [pc, #48]	@ (8000828 <MX_SDMMC1_SD_Init+0x38>)
 80007f8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000800:	4b08      	ldr	r3, [pc, #32]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000806:	4b07      	ldr	r3, [pc, #28]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000808:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800080c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800080e:	4b05      	ldr	r3, [pc, #20]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000814:	4b03      	ldr	r3, [pc, #12]	@ (8000824 <MX_SDMMC1_SD_Init+0x34>)
 8000816:	2200      	movs	r2, #0
 8000818:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	240001d8 	.word	0x240001d8
 8000828:	52007000 	.word	0x52007000

0800082c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000830:	4b22      	ldr	r3, [pc, #136]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000832:	4a23      	ldr	r2, [pc, #140]	@ (80008c0 <MX_USART3_UART_Init+0x94>)
 8000834:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000836:	4b21      	ldr	r3, [pc, #132]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000838:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800083c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800083e:	4b1f      	ldr	r3, [pc, #124]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000844:	4b1d      	ldr	r3, [pc, #116]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800084a:	4b1c      	ldr	r3, [pc, #112]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 800084c:	2200      	movs	r2, #0
 800084e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000850:	4b1a      	ldr	r3, [pc, #104]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000852:	220c      	movs	r2, #12
 8000854:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000856:	4b19      	ldr	r3, [pc, #100]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000858:	2200      	movs	r2, #0
 800085a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800085c:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 800085e:	2200      	movs	r2, #0
 8000860:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000862:	4b16      	ldr	r3, [pc, #88]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000864:	2200      	movs	r2, #0
 8000866:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 800086a:	2200      	movs	r2, #0
 800086c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000870:	2200      	movs	r2, #0
 8000872:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000874:	4811      	ldr	r0, [pc, #68]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000876:	f006 ff5f 	bl	8007738 <HAL_UART_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000880:	f000 f936 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000884:	2100      	movs	r1, #0
 8000886:	480d      	ldr	r0, [pc, #52]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 8000888:	f007 ff67 	bl	800875a <HAL_UARTEx_SetTxFifoThreshold>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000892:	f000 f92d 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000896:	2100      	movs	r1, #0
 8000898:	4808      	ldr	r0, [pc, #32]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 800089a:	f007 ff9c 	bl	80087d6 <HAL_UARTEx_SetRxFifoThreshold>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80008a4:	f000 f924 	bl	8000af0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80008a8:	4804      	ldr	r0, [pc, #16]	@ (80008bc <MX_USART3_UART_Init+0x90>)
 80008aa:	f007 ff1d 	bl	80086e8 <HAL_UARTEx_DisableFifoMode>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80008b4:	f000 f91c 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}
 80008bc:	24000254 	.word	0x24000254
 80008c0:	40004800 	.word	0x40004800

080008c4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80008c8:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ca:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80008cc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80008ce:	4b14      	ldr	r3, [pc, #80]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d0:	2209      	movs	r2, #9
 80008d2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80008d4:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008d6:	2202      	movs	r2, #2
 80008d8:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80008da:	4b11      	ldr	r3, [pc, #68]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e2:	2202      	movs	r2, #2
 80008e4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80008f8:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80008fa:	2201      	movs	r2, #1
 80008fc:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80008fe:	4b08      	ldr	r3, [pc, #32]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000900:	2201      	movs	r2, #1
 8000902:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000904:	4b06      	ldr	r3, [pc, #24]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000906:	2200      	movs	r2, #0
 8000908:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800090c:	f001 fc51 	bl	80021b2 <HAL_PCD_Init>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000916:	f000 f8eb 	bl	8000af0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	240002e8 	.word	0x240002e8
 8000924:	40080000 	.word	0x40080000

08000928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08c      	sub	sp, #48	@ 0x30
 800092c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800093e:	4b62      	ldr	r3, [pc, #392]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000944:	4a60      	ldr	r2, [pc, #384]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000946:	f043 0304 	orr.w	r3, r3, #4
 800094a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800094e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000954:	f003 0304 	and.w	r3, r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
 800095a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800095c:	4b5a      	ldr	r3, [pc, #360]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 800095e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000962:	4a59      	ldr	r2, [pc, #356]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000968:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800096c:	4b56      	ldr	r3, [pc, #344]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 800096e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000976:	617b      	str	r3, [r7, #20]
 8000978:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b53      	ldr	r3, [pc, #332]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 800097c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000980:	4a51      	ldr	r2, [pc, #324]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000982:	f043 0301 	orr.w	r3, r3, #1
 8000986:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800098a:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 800098c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000998:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 800099a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800099e:	4a4a      	ldr	r2, [pc, #296]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009a0:	f043 0302 	orr.w	r3, r3, #2
 80009a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009a8:	4b47      	ldr	r3, [pc, #284]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ae:	f003 0302 	and.w	r3, r3, #2
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009b6:	4b44      	ldr	r3, [pc, #272]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009bc:	4a42      	ldr	r2, [pc, #264]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009c6:	4b40      	ldr	r3, [pc, #256]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009cc:	f003 0308 	and.w	r3, r3, #8
 80009d0:	60bb      	str	r3, [r7, #8]
 80009d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009d4:	4b3c      	ldr	r3, [pc, #240]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009da:	4a3b      	ldr	r2, [pc, #236]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009e4:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009f2:	4b35      	ldr	r3, [pc, #212]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f8:	4a33      	ldr	r2, [pc, #204]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 80009fa:	f043 0310 	orr.w	r3, r3, #16
 80009fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a02:	4b31      	ldr	r3, [pc, #196]	@ (8000ac8 <MX_GPIO_Init+0x1a0>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a08:	f003 0310 	and.w	r3, r3, #16
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000a16:	482d      	ldr	r0, [pc, #180]	@ (8000acc <MX_GPIO_Init+0x1a4>)
 8000a18:	f001 fbb2 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a22:	482b      	ldr	r0, [pc, #172]	@ (8000ad0 <MX_GPIO_Init+0x1a8>)
 8000a24:	f001 fbac 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4829      	ldr	r0, [pc, #164]	@ (8000ad4 <MX_GPIO_Init+0x1ac>)
 8000a2e:	f001 fba7 	bl	8002180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4824      	ldr	r0, [pc, #144]	@ (8000ad8 <MX_GPIO_Init+0x1b0>)
 8000a48:	f001 f9d2 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000a4c:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	4819      	ldr	r0, [pc, #100]	@ (8000acc <MX_GPIO_Init+0x1a4>)
 8000a66:	f001 f9c3 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000a6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 031c 	add.w	r3, r7, #28
 8000a80:	4619      	mov	r1, r3
 8000a82:	4813      	ldr	r0, [pc, #76]	@ (8000ad0 <MX_GPIO_Init+0x1a8>)
 8000a84:	f001 f9b4 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a88:	2380      	movs	r3, #128	@ 0x80
 8000a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a8c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f107 031c 	add.w	r3, r7, #28
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480f      	ldr	r0, [pc, #60]	@ (8000adc <MX_GPIO_Init+0x1b4>)
 8000a9e:	f001 f9a7 	bl	8001df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4806      	ldr	r0, [pc, #24]	@ (8000ad4 <MX_GPIO_Init+0x1ac>)
 8000aba:	f001 f999 	bl	8001df0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	58024400 	.word	0x58024400
 8000acc:	58020400 	.word	0x58020400
 8000ad0:	58020c00 	.word	0x58020c00
 8000ad4:	58021000 	.word	0x58021000
 8000ad8:	58020800 	.word	0x58020800
 8000adc:	58021800 	.word	0x58021800

08000ae0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f009 fbd6 	bl	800a29a <osDelay>
 8000aee:	e7fb      	b.n	8000ae8 <StartDefaultTask+0x8>

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <obc_notifications>:
#include "obc.h"
#include "cmsis_os.h"

void obc_notifications(void *vpParameters) {
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
    uint32_t received_notification;
    
    while (1) {
        // Non-blocking check for notifications with a 0ms timeout
        received_notification = ulTaskNotifyTake(pdFALSE, 0);
 8000b04:	2100      	movs	r1, #0
 8000b06:	2000      	movs	r0, #0
 8000b08:	f00b fa7e 	bl	800c008 <ulTaskNotifyTake>
 8000b0c:	60f8      	str	r0, [r7, #12]
 8000b0e:	e7f9      	b.n	8000b04 <obc_notifications+0x8>

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <HAL_MspInit+0x38>)
 8000b18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_MspInit+0x38>)
 8000b1e:	f043 0302 	orr.w	r3, r3, #2
 8000b22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b26:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_MspInit+0x38>)
 8000b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b2c:	f003 0302 	and.w	r3, r3, #2
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	210f      	movs	r1, #15
 8000b38:	f06f 0001 	mvn.w	r0, #1
 8000b3c:	f000 fcef 	bl	800151e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	58024400 	.word	0x58024400

08000b4c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a59      	ldr	r2, [pc, #356]	@ (8000cd0 <HAL_ETH_MspInit+0x184>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	f040 80ab 	bne.w	8000cc6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b70:	4b58      	ldr	r3, [pc, #352]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b72:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b76:	4a57      	ldr	r2, [pc, #348]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b78:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b7c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b80:	4b54      	ldr	r3, [pc, #336]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b82:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b8a:	623b      	str	r3, [r7, #32]
 8000b8c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b8e:	4b51      	ldr	r3, [pc, #324]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b90:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b94:	4a4f      	ldr	r2, [pc, #316]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000b96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b9a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b9e:	4b4d      	ldr	r3, [pc, #308]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ba4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ba8:	61fb      	str	r3, [r7, #28]
 8000baa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000bac:	4b49      	ldr	r3, [pc, #292]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bb2:	4a48      	ldr	r2, [pc, #288]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bb8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000bbc:	4b45      	ldr	r3, [pc, #276]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bbe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000bc2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	4b42      	ldr	r3, [pc, #264]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a40      	ldr	r2, [pc, #256]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bd2:	f043 0304 	orr.w	r3, r3, #4
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b3e      	ldr	r3, [pc, #248]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0304 	and.w	r3, r3, #4
 8000be4:	617b      	str	r3, [r7, #20]
 8000be6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be8:	4b3a      	ldr	r3, [pc, #232]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a39      	ldr	r2, [pc, #228]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b36      	ldr	r3, [pc, #216]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	613b      	str	r3, [r7, #16]
 8000c04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	4b33      	ldr	r3, [pc, #204]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	4a31      	ldr	r2, [pc, #196]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c0e:	f043 0302 	orr.w	r3, r3, #2
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c16:	4b2f      	ldr	r3, [pc, #188]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	f003 0302 	and.w	r3, r3, #2
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c24:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2a:	4a2a      	ldr	r2, [pc, #168]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c34:	4b27      	ldr	r3, [pc, #156]	@ (8000cd4 <HAL_ETH_MspInit+0x188>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c42:	2332      	movs	r3, #50	@ 0x32
 8000c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	2302      	movs	r3, #2
 8000c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c52:	230b      	movs	r3, #11
 8000c54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481e      	ldr	r0, [pc, #120]	@ (8000cd8 <HAL_ETH_MspInit+0x18c>)
 8000c5e:	f001 f8c7 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c62:	2386      	movs	r3, #134	@ 0x86
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c72:	230b      	movs	r3, #11
 8000c74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4817      	ldr	r0, [pc, #92]	@ (8000cdc <HAL_ETH_MspInit+0x190>)
 8000c7e:	f001 f8b7 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4810      	ldr	r0, [pc, #64]	@ (8000ce0 <HAL_ETH_MspInit+0x194>)
 8000ca0:	f001 f8a6 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000ca4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb6:	230b      	movs	r3, #11
 8000cb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4808      	ldr	r0, [pc, #32]	@ (8000ce4 <HAL_ETH_MspInit+0x198>)
 8000cc2:	f001 f895 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3738      	adds	r7, #56	@ 0x38
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40028000 	.word	0x40028000
 8000cd4:	58024400 	.word	0x58024400
 8000cd8:	58020800 	.word	0x58020800
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	58020400 	.word	0x58020400
 8000ce4:	58021800 	.word	0x58021800

08000ce8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0bc      	sub	sp, #240	@ 0xf0
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d00:	f107 0318 	add.w	r3, r7, #24
 8000d04:	22c0      	movs	r2, #192	@ 0xc0
 8000d06:	2100      	movs	r1, #0
 8000d08:	4618      	mov	r0, r3
 8000d0a:	f00c f9b5 	bl	800d078 <memset>
  if(hsd->Instance==SDMMC1)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4a3c      	ldr	r2, [pc, #240]	@ (8000e04 <HAL_SD_MspInit+0x11c>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d171      	bne.n	8000dfc <HAL_SD_MspInit+0x114>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8000d18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000d1c:	f04f 0300 	mov.w	r3, #0
 8000d20:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d28:	f107 0318 	add.w	r3, r7, #24
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fba1 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_SD_MspInit+0x54>
    {
      Error_Handler();
 8000d38:	f7ff feda 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000d3c:	4b32      	ldr	r3, [pc, #200]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d42:	4a31      	ldr	r2, [pc, #196]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8000d4c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d60:	4a29      	ldr	r2, [pc, #164]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d6a:	4b27      	ldr	r3, [pc, #156]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7e:	4a22      	ldr	r2, [pc, #136]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d80:	f043 0308 	orr.w	r3, r3, #8
 8000d84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d88:	4b1f      	ldr	r3, [pc, #124]	@ (8000e08 <HAL_SD_MspInit+0x120>)
 8000d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8e:	f003 0308 	and.w	r3, r3, #8
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000d96:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000daa:	2303      	movs	r3, #3
 8000dac:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000db0:	230c      	movs	r3, #12
 8000db2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4813      	ldr	r0, [pc, #76]	@ (8000e0c <HAL_SD_MspInit+0x124>)
 8000dbe:	f001 f817 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000dda:	230c      	movs	r3, #12
 8000ddc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000de0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	@ (8000e10 <HAL_SD_MspInit+0x128>)
 8000de8:	f001 f802 	bl	8001df0 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2105      	movs	r1, #5
 8000df0:	2031      	movs	r0, #49	@ 0x31
 8000df2:	f000 fb94 	bl	800151e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000df6:	2031      	movs	r0, #49	@ 0x31
 8000df8:	f000 fbab 	bl	8001552 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	37f0      	adds	r7, #240	@ 0xf0
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	52007000 	.word	0x52007000
 8000e08:	58024400 	.word	0x58024400
 8000e0c:	58020800 	.word	0x58020800
 8000e10:	58020c00 	.word	0x58020c00

08000e14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b0ba      	sub	sp, #232	@ 0xe8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e2c:	f107 0310 	add.w	r3, r7, #16
 8000e30:	22c0      	movs	r2, #192	@ 0xc0
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f00c f91f 	bl	800d078 <memset>
  if(huart->Instance==USART3)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a27      	ldr	r2, [pc, #156]	@ (8000edc <HAL_UART_MspInit+0xc8>)
 8000e40:	4293      	cmp	r3, r2
 8000e42:	d146      	bne.n	8000ed2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e44:	f04f 0202 	mov.w	r2, #2
 8000e48:	f04f 0300 	mov.w	r3, #0
 8000e4c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e56:	f107 0310 	add.w	r3, r7, #16
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f002 fb0a 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000e66:	f7ff fe43 	bl	8000af0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e72:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e76:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e7c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e84:	60fb      	str	r3, [r7, #12]
 8000e86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e88:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8e:	4a14      	ldr	r2, [pc, #80]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e90:	f043 0308 	orr.w	r3, r3, #8
 8000e94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e98:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <HAL_UART_MspInit+0xcc>)
 8000e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e9e:	f003 0308 	and.w	r3, r3, #8
 8000ea2:	60bb      	str	r3, [r7, #8]
 8000ea4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ea6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000eaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ec0:	2307      	movs	r3, #7
 8000ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ec6:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eca:	4619      	mov	r1, r3
 8000ecc:	4805      	ldr	r0, [pc, #20]	@ (8000ee4 <HAL_UART_MspInit+0xd0>)
 8000ece:	f000 ff8f 	bl	8001df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	37e8      	adds	r7, #232	@ 0xe8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40004800 	.word	0x40004800
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020c00 	.word	0x58020c00

08000ee8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b0ba      	sub	sp, #232	@ 0xe8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
 8000efe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f00:	f107 0310 	add.w	r3, r7, #16
 8000f04:	22c0      	movs	r2, #192	@ 0xc0
 8000f06:	2100      	movs	r1, #0
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f00c f8b5 	bl	800d078 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a30      	ldr	r2, [pc, #192]	@ (8000fd4 <HAL_PCD_MspInit+0xec>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d159      	bne.n	8000fcc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000f18:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000f1c:	f04f 0300 	mov.w	r3, #0
 8000f20:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000f24:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f28:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4618      	mov	r0, r3
 8000f32:	f002 fa9f 	bl	8003474 <HAL_RCCEx_PeriphCLKConfig>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000f3c:	f7ff fdd8 	bl	8000af0 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f40:	f001 faa2 	bl	8002488 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f44:	4b24      	ldr	r3, [pc, #144]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4a:	4a23      	ldr	r2, [pc, #140]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f54:	4b20      	ldr	r3, [pc, #128]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f62:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f76:	2300      	movs	r3, #0
 8000f78:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f7c:	230a      	movs	r3, #10
 8000f7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4814      	ldr	r0, [pc, #80]	@ (8000fdc <HAL_PCD_MspInit+0xf4>)
 8000f8a:	f000 ff31 	bl	8001df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	480c      	ldr	r0, [pc, #48]	@ (8000fdc <HAL_PCD_MspInit+0xf4>)
 8000faa:	f000 ff21 	bl	8001df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000fae:	4b0a      	ldr	r3, [pc, #40]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000fb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb4:	4a08      	ldr	r2, [pc, #32]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000fb6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000fba:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fbe:	4b06      	ldr	r3, [pc, #24]	@ (8000fd8 <HAL_PCD_MspInit+0xf0>)
 8000fc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fcc:	bf00      	nop
 8000fce:	37e8      	adds	r7, #232	@ 0xe8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40080000 	.word	0x40080000
 8000fd8:	58024400 	.word	0x58024400
 8000fdc:	58020000 	.word	0x58020000

08000fe0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <NMI_Handler+0x4>

08000fe8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <BusFault_Handler+0x4>

08001000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <UsageFault_Handler+0x4>

08001008 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800101a:	f000 f941 	bl	80012a0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800101e:	f00a ff65 	bl	800beec <xTaskGetSchedulerState>
 8001022:	4603      	mov	r3, r0
 8001024:	2b01      	cmp	r3, #1
 8001026:	d001      	beq.n	800102c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001028:	f00b fda6 	bl	800cb78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <SDMMC1_IRQHandler+0x10>)
 8001036:	f005 f98b 	bl	8006350 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	240001d8 	.word	0x240001d8

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b37      	ldr	r3, [pc, #220]	@ (8001128 <SystemInit+0xe4>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a36      	ldr	r2, [pc, #216]	@ (8001128 <SystemInit+0xe4>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001058:	4b34      	ldr	r3, [pc, #208]	@ (800112c <SystemInit+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	2b06      	cmp	r3, #6
 8001062:	d807      	bhi.n	8001074 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001064:	4b31      	ldr	r3, [pc, #196]	@ (800112c <SystemInit+0xe8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 030f 	bic.w	r3, r3, #15
 800106c:	4a2f      	ldr	r2, [pc, #188]	@ (800112c <SystemInit+0xe8>)
 800106e:	f043 0307 	orr.w	r3, r3, #7
 8001072:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001074:	4b2e      	ldr	r3, [pc, #184]	@ (8001130 <SystemInit+0xec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2d      	ldr	r2, [pc, #180]	@ (8001130 <SystemInit+0xec>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001080:	4b2b      	ldr	r3, [pc, #172]	@ (8001130 <SystemInit+0xec>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001086:	4b2a      	ldr	r3, [pc, #168]	@ (8001130 <SystemInit+0xec>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4929      	ldr	r1, [pc, #164]	@ (8001130 <SystemInit+0xec>)
 800108c:	4b29      	ldr	r3, [pc, #164]	@ (8001134 <SystemInit+0xf0>)
 800108e:	4013      	ands	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001092:	4b26      	ldr	r3, [pc, #152]	@ (800112c <SystemInit+0xe8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109e:	4b23      	ldr	r3, [pc, #140]	@ (800112c <SystemInit+0xe8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 030f 	bic.w	r3, r3, #15
 80010a6:	4a21      	ldr	r2, [pc, #132]	@ (800112c <SystemInit+0xe8>)
 80010a8:	f043 0307 	orr.w	r3, r3, #7
 80010ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ae:	4b20      	ldr	r3, [pc, #128]	@ (8001130 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001130 <SystemInit+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	@ (8001130 <SystemInit+0xec>)
 80010c2:	4a1d      	ldr	r2, [pc, #116]	@ (8001138 <SystemInit+0xf4>)
 80010c4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <SystemInit+0xec>)
 80010c8:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <SystemInit+0xf8>)
 80010ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010cc:	4b18      	ldr	r3, [pc, #96]	@ (8001130 <SystemInit+0xec>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <SystemInit+0xfc>)
 80010d0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d2:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <SystemInit+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d8:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <SystemInit+0xec>)
 80010da:	4a19      	ldr	r2, [pc, #100]	@ (8001140 <SystemInit+0xfc>)
 80010dc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e4:	4b12      	ldr	r3, [pc, #72]	@ (8001130 <SystemInit+0xec>)
 80010e6:	4a16      	ldr	r2, [pc, #88]	@ (8001140 <SystemInit+0xfc>)
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <SystemInit+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	@ (8001130 <SystemInit+0xec>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <SystemInit+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001102:	4b10      	ldr	r3, [pc, #64]	@ (8001144 <SystemInit+0x100>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <SystemInit+0x104>)
 8001108:	4013      	ands	r3, r2
 800110a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800110e:	d202      	bcs.n	8001116 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001110:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <SystemInit+0x108>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001116:	4b0e      	ldr	r3, [pc, #56]	@ (8001150 <SystemInit+0x10c>)
 8001118:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800111c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	52002000 	.word	0x52002000
 8001130:	58024400 	.word	0x58024400
 8001134:	eaf6ed7f 	.word	0xeaf6ed7f
 8001138:	02020200 	.word	0x02020200
 800113c:	01ff0000 	.word	0x01ff0000
 8001140:	01010280 	.word	0x01010280
 8001144:	5c001000 	.word	0x5c001000
 8001148:	ffff0000 	.word	0xffff0000
 800114c:	51008108 	.word	0x51008108
 8001150:	52004000 	.word	0x52004000

08001154 <ttc_notifications>:
#include "ttc.h"
#include "obc.h"
#include "cmsis_os.h"

void ttc_notifications(void *vpParameters) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
    uint32_t received_notification;
    
    while (1) {
        // Non-blocking check for notifications with a 0ms timeout
        received_notification = ulTaskNotifyTake(pdFALSE, 0);
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f00a ff52 	bl	800c008 <ulTaskNotifyTake>
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	e7f9      	b.n	800115c <ttc_notifications+0x8>

08001168 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800116c:	f7ff ff6a 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001170:	480c      	ldr	r0, [pc, #48]	@ (80011a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001174:	4a0d      	ldr	r2, [pc, #52]	@ (80011ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001178:	e002      	b.n	8001180 <LoopCopyDataInit>

0800117a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800117c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117e:	3304      	adds	r3, #4

08001180 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001180:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001182:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001184:	d3f9      	bcc.n	800117a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001186:	4a0a      	ldr	r2, [pc, #40]	@ (80011b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001188:	4c0a      	ldr	r4, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800118c:	e001      	b.n	8001192 <LoopFillZerobss>

0800118e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001190:	3204      	adds	r2, #4

08001192 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001192:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001194:	d3fb      	bcc.n	800118e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001196:	f00b ff77 	bl	800d088 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119a:	f7ff fa19 	bl	80005d0 <main>
  bx  lr
 800119e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011a0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80011a4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a8:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 80011ac:	0800d1d0 	.word	0x0800d1d0
  ldr r2, =_sbss
 80011b0:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 80011b4:	24005144 	.word	0x24005144

080011b8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b8:	e7fe      	b.n	80011b8 <ADC3_IRQHandler>
	...

080011bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c2:	2003      	movs	r0, #3
 80011c4:	f000 f9a0 	bl	8001508 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c8:	f001 ff7e 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80011cc:	4602      	mov	r2, r0
 80011ce:	4b15      	ldr	r3, [pc, #84]	@ (8001224 <HAL_Init+0x68>)
 80011d0:	699b      	ldr	r3, [r3, #24]
 80011d2:	0a1b      	lsrs	r3, r3, #8
 80011d4:	f003 030f 	and.w	r3, r3, #15
 80011d8:	4913      	ldr	r1, [pc, #76]	@ (8001228 <HAL_Init+0x6c>)
 80011da:	5ccb      	ldrb	r3, [r1, r3]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa22 f303 	lsr.w	r3, r2, r3
 80011e4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001224 <HAL_Init+0x68>)
 80011e8:	699b      	ldr	r3, [r3, #24]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	4a0e      	ldr	r2, [pc, #56]	@ (8001228 <HAL_Init+0x6c>)
 80011f0:	5cd3      	ldrb	r3, [r2, r3]
 80011f2:	f003 031f 	and.w	r3, r3, #31
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	fa22 f303 	lsr.w	r3, r2, r3
 80011fc:	4a0b      	ldr	r2, [pc, #44]	@ (800122c <HAL_Init+0x70>)
 80011fe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001200:	4a0b      	ldr	r2, [pc, #44]	@ (8001230 <HAL_Init+0x74>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f814 	bl	8001234 <HAL_InitTick>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e002      	b.n	800121c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001216:	f7ff fc7b 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	58024400 	.word	0x58024400
 8001228:	0800d174 	.word	0x0800d174
 800122c:	24000004 	.word	0x24000004
 8001230:	24000000 	.word	0x24000000

08001234 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800123c:	4b15      	ldr	r3, [pc, #84]	@ (8001294 <HAL_InitTick+0x60>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d101      	bne.n	8001248 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e021      	b.n	800128c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001248:	4b13      	ldr	r3, [pc, #76]	@ (8001298 <HAL_InitTick+0x64>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <HAL_InitTick+0x60>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	4619      	mov	r1, r3
 8001252:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001256:	fbb3 f3f1 	udiv	r3, r3, r1
 800125a:	fbb2 f3f3 	udiv	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f985 	bl	800156e <HAL_SYSTICK_Config>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e00e      	b.n	800128c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b0f      	cmp	r3, #15
 8001272:	d80a      	bhi.n	800128a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001274:	2200      	movs	r2, #0
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295
 800127c:	f000 f94f 	bl	800151e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001280:	4a06      	ldr	r2, [pc, #24]	@ (800129c <HAL_InitTick+0x68>)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001286:	2300      	movs	r3, #0
 8001288:	e000      	b.n	800128c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	2400000c 	.word	0x2400000c
 8001298:	24000000 	.word	0x24000000
 800129c:	24000008 	.word	0x24000008

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	2400000c 	.word	0x2400000c
 80012c4:	240007d8 	.word	0x240007d8

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	@ (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	240007d8 	.word	0x240007d8

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2400000c 	.word	0x2400000c

08001328 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800132c:	4b03      	ldr	r3, [pc, #12]	@ (800133c <HAL_GetREVID+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0c1b      	lsrs	r3, r3, #16
}
 8001332:	4618      	mov	r0, r3
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	5c001000 	.word	0x5c001000

08001340 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001348:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001350:	4904      	ldr	r1, [pc, #16]	@ (8001364 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4313      	orrs	r3, r2
 8001356:	604b      	str	r3, [r1, #4]
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	58000400 	.word	0x58000400

08001368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001378:	4b0b      	ldr	r3, [pc, #44]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001384:	4013      	ands	r3, r2
 8001386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001390:	4b06      	ldr	r3, [pc, #24]	@ (80013ac <__NVIC_SetPriorityGrouping+0x44>)
 8001392:	4313      	orrs	r3, r2
 8001394:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001396:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <__NVIC_SetPriorityGrouping+0x40>)
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	60d3      	str	r3, [r2, #12]
}
 800139c:	bf00      	nop
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr
 80013a8:	e000ed00 	.word	0xe000ed00
 80013ac:	05fa0000 	.word	0x05fa0000

080013b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b4:	4b04      	ldr	r3, [pc, #16]	@ (80013c8 <__NVIC_GetPriorityGrouping+0x18>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	0a1b      	lsrs	r3, r3, #8
 80013ba:	f003 0307 	and.w	r3, r3, #7
}
 80013be:	4618      	mov	r0, r3
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	db0b      	blt.n	80013f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	f003 021f 	and.w	r2, r3, #31
 80013e4:	4907      	ldr	r1, [pc, #28]	@ (8001404 <__NVIC_EnableIRQ+0x38>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	095b      	lsrs	r3, r3, #5
 80013ec:	2001      	movs	r0, #1
 80013ee:	fa00 f202 	lsl.w	r2, r0, r2
 80013f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e100 	.word	0xe000e100

08001408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	6039      	str	r1, [r7, #0]
 8001412:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001418:	2b00      	cmp	r3, #0
 800141a:	db0a      	blt.n	8001432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <__NVIC_SetPriority+0x4c>)
 8001422:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001426:	0112      	lsls	r2, r2, #4
 8001428:	b2d2      	uxtb	r2, r2
 800142a:	440b      	add	r3, r1
 800142c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001430:	e00a      	b.n	8001448 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	b2da      	uxtb	r2, r3
 8001436:	4908      	ldr	r1, [pc, #32]	@ (8001458 <__NVIC_SetPriority+0x50>)
 8001438:	88fb      	ldrh	r3, [r7, #6]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	3b04      	subs	r3, #4
 8001440:	0112      	lsls	r2, r2, #4
 8001442:	b2d2      	uxtb	r2, r2
 8001444:	440b      	add	r3, r1
 8001446:	761a      	strb	r2, [r3, #24]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800145c:	b480      	push	{r7}
 800145e:	b089      	sub	sp, #36	@ 0x24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f1c3 0307 	rsb	r3, r3, #7
 8001476:	2b04      	cmp	r3, #4
 8001478:	bf28      	it	cs
 800147a:	2304      	movcs	r3, #4
 800147c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	3304      	adds	r3, #4
 8001482:	2b06      	cmp	r3, #6
 8001484:	d902      	bls.n	800148c <NVIC_EncodePriority+0x30>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	3b03      	subs	r3, #3
 800148a:	e000      	b.n	800148e <NVIC_EncodePriority+0x32>
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43da      	mvns	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	401a      	ands	r2, r3
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a4:	f04f 31ff 	mov.w	r1, #4294967295
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	fa01 f303 	lsl.w	r3, r1, r3
 80014ae:	43d9      	mvns	r1, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	4313      	orrs	r3, r2
         );
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3724      	adds	r7, #36	@ 0x24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014d4:	d301      	bcc.n	80014da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d6:	2301      	movs	r3, #1
 80014d8:	e00f      	b.n	80014fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014da:	4a0a      	ldr	r2, [pc, #40]	@ (8001504 <SysTick_Config+0x40>)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3b01      	subs	r3, #1
 80014e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014e2:	210f      	movs	r1, #15
 80014e4:	f04f 30ff 	mov.w	r0, #4294967295
 80014e8:	f7ff ff8e 	bl	8001408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014ec:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SysTick_Config+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SysTick_Config+0x40>)
 80014f4:	2207      	movs	r2, #7
 80014f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f8:	2300      	movs	r3, #0
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	e000e010 	.word	0xe000e010

08001508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff ff29 	bl	8001368 <__NVIC_SetPriorityGrouping>
}
 8001516:	bf00      	nop
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151e:	b580      	push	{r7, lr}
 8001520:	b086      	sub	sp, #24
 8001522:	af00      	add	r7, sp, #0
 8001524:	4603      	mov	r3, r0
 8001526:	60b9      	str	r1, [r7, #8]
 8001528:	607a      	str	r2, [r7, #4]
 800152a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800152c:	f7ff ff40 	bl	80013b0 <__NVIC_GetPriorityGrouping>
 8001530:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	68b9      	ldr	r1, [r7, #8]
 8001536:	6978      	ldr	r0, [r7, #20]
 8001538:	f7ff ff90 	bl	800145c <NVIC_EncodePriority>
 800153c:	4602      	mov	r2, r0
 800153e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001542:	4611      	mov	r1, r2
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff ff5f 	bl	8001408 <__NVIC_SetPriority>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	b082      	sub	sp, #8
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800155c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff33 	bl	80013cc <__NVIC_EnableIRQ>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f7ff ffa4 	bl	80014c4 <SysTick_Config>
 800157c:	4603      	mov	r3, r0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001596:	2301      	movs	r3, #1
 8001598:	e0e3      	b.n	8001762 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d106      	bne.n	80015b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2223      	movs	r2, #35	@ 0x23
 80015a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff facd 	bl	8000b4c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b2:	4b6e      	ldr	r3, [pc, #440]	@ (800176c <HAL_ETH_Init+0x1e4>)
 80015b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015b8:	4a6c      	ldr	r2, [pc, #432]	@ (800176c <HAL_ETH_Init+0x1e4>)
 80015ba:	f043 0302 	orr.w	r3, r3, #2
 80015be:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80015c2:	4b6a      	ldr	r3, [pc, #424]	@ (800176c <HAL_ETH_Init+0x1e4>)
 80015c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	7a1b      	ldrb	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d103      	bne.n	80015e0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80015d8:	2000      	movs	r0, #0
 80015da:	f7ff feb1 	bl	8001340 <HAL_SYSCFG_ETHInterfaceSelect>
 80015de:	e003      	b.n	80015e8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80015e0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80015e4:	f7ff feac 	bl	8001340 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80015e8:	4b61      	ldr	r3, [pc, #388]	@ (8001770 <HAL_ETH_Init+0x1e8>)
 80015ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001602:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff fe60 	bl	80012c8 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800160a:	e011      	b.n	8001630 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800160c:	f7ff fe5c 	bl	80012c8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800161a:	d909      	bls.n	8001630 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2204      	movs	r2, #4
 8001620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	22e0      	movs	r2, #224	@ 0xe0
 8001628:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e098      	b.n	8001762 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0301 	and.w	r3, r3, #1
 800163e:	2b00      	cmp	r3, #0
 8001640:	d1e4      	bne.n	800160c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 f89e 	bl	8001784 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001648:	f001 feb8 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 800164c:	4603      	mov	r3, r0
 800164e:	4a49      	ldr	r2, [pc, #292]	@ (8001774 <HAL_ETH_Init+0x1ec>)
 8001650:	fba2 2303 	umull	r2, r3, r2, r3
 8001654:	0c9a      	lsrs	r2, r3, #18
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3a01      	subs	r2, #1
 800165c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f000 fa81 	bl	8001b68 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800166e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001672:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6812      	ldr	r2, [r2, #0]
 800167a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800167e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001682:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d009      	beq.n	80016a6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	22e0      	movs	r2, #224	@ 0xe0
 800169e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e05d      	b.n	8001762 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016ae:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_ETH_Init+0x1f0>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6952      	ldr	r2, [r2, #20]
 80016ba:	0051      	lsls	r1, r2, #1
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	6812      	ldr	r2, [r2, #0]
 80016c0:	430b      	orrs	r3, r1
 80016c2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80016c6:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fae9 	bl	8001ca2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fb2f 	bl	8001d34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	3305      	adds	r3, #5
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	021a      	lsls	r2, r3, #8
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	3304      	adds	r3, #4
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	3303      	adds	r3, #3
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	061a      	lsls	r2, r3, #24
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	3302      	adds	r3, #2
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001714:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001722:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001724:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b11      	ldr	r3, [pc, #68]	@ (800177c <HAL_ETH_Init+0x1f4>)
 8001736:	430b      	orrs	r3, r1
 8001738:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_ETH_Init+0x1f8>)
 800174a:	430b      	orrs	r3, r1
 800174c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2210      	movs	r2, #16
 800175c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001760:	2300      	movs	r3, #0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3710      	adds	r7, #16
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	58024400 	.word	0x58024400
 8001770:	58000400 	.word	0x58000400
 8001774:	431bde83 	.word	0x431bde83
 8001778:	ffff8001 	.word	0xffff8001
 800177c:	0c020060 	.word	0x0c020060
 8001780:	0c20c000 	.word	0x0c20c000

08001784 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800179c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800179e:	f001 fe0d 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 80017a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001810 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d804      	bhi.n	80017b6 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	e022      	b.n	80017fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_ETH_SetMDIOClockRange+0x90>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d204      	bcs.n	80017c8 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e019      	b.n	80017fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	4a13      	ldr	r2, [pc, #76]	@ (8001818 <HAL_ETH_SetMDIOClockRange+0x94>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d915      	bls.n	80017fc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	4a12      	ldr	r2, [pc, #72]	@ (800181c <HAL_ETH_SetMDIOClockRange+0x98>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d804      	bhi.n	80017e2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e00c      	b.n	80017fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	4a0e      	ldr	r2, [pc, #56]	@ (8001820 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d804      	bhi.n	80017f4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	e003      	b.n	80017fc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80017fa:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	68fa      	ldr	r2, [r7, #12]
 8001802:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	02160ebf 	.word	0x02160ebf
 8001814:	03938700 	.word	0x03938700
 8001818:	05f5e0ff 	.word	0x05f5e0ff
 800181c:	08f0d17f 	.word	0x08f0d17f
 8001820:	0ee6b27f 	.word	0x0ee6b27f

08001824 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001836:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800183e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	7b1b      	ldrb	r3, [r3, #12]
 8001844:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	7b5b      	ldrb	r3, [r3, #13]
 800184c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b9b      	ldrb	r3, [r3, #14]
 8001854:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7bdb      	ldrb	r3, [r3, #15]
 800185c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800185e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	7c12      	ldrb	r2, [r2, #16]
 8001864:	2a00      	cmp	r2, #0
 8001866:	d102      	bne.n	800186e <ETH_SetMACConfig+0x4a>
 8001868:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800186c:	e000      	b.n	8001870 <ETH_SetMACConfig+0x4c>
 800186e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001870:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	7c52      	ldrb	r2, [r2, #17]
 8001876:	2a00      	cmp	r2, #0
 8001878:	d102      	bne.n	8001880 <ETH_SetMACConfig+0x5c>
 800187a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800187e:	e000      	b.n	8001882 <ETH_SetMACConfig+0x5e>
 8001880:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001882:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	7c9b      	ldrb	r3, [r3, #18]
 8001888:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800188a:	431a      	orrs	r2, r3
               macconf->Speed |
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001890:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001896:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	7f1b      	ldrb	r3, [r3, #28]
 800189c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800189e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	7f5b      	ldrb	r3, [r3, #29]
 80018a4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80018a6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	7f92      	ldrb	r2, [r2, #30]
 80018ac:	2a00      	cmp	r2, #0
 80018ae:	d102      	bne.n	80018b6 <ETH_SetMACConfig+0x92>
 80018b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018b4:	e000      	b.n	80018b8 <ETH_SetMACConfig+0x94>
 80018b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80018b8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	7fdb      	ldrb	r3, [r3, #31]
 80018be:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80018c0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80018c8:	2a00      	cmp	r2, #0
 80018ca:	d102      	bne.n	80018d2 <ETH_SetMACConfig+0xae>
 80018cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80018d0:	e000      	b.n	80018d4 <ETH_SetMACConfig+0xb0>
 80018d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80018d4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80018da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80018e2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80018e4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <ETH_SetMACConfig+0x22c>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	430b      	orrs	r3, r1
 8001900:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001906:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800190e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001910:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001918:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800191a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001922:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001924:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 800192c:	2a00      	cmp	r2, #0
 800192e:	d102      	bne.n	8001936 <ETH_SetMACConfig+0x112>
 8001930:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001934:	e000      	b.n	8001938 <ETH_SetMACConfig+0x114>
 8001936:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001938:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800193e:	4313      	orrs	r3, r2
 8001940:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4b42      	ldr	r3, [pc, #264]	@ (8001a54 <ETH_SetMACConfig+0x230>)
 800194a:	4013      	ands	r3, r2
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6812      	ldr	r2, [r2, #0]
 8001950:	68f9      	ldr	r1, [r7, #12]
 8001952:	430b      	orrs	r3, r1
 8001954:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800195c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001962:	4313      	orrs	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	68da      	ldr	r2, [r3, #12]
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <ETH_SetMACConfig+0x234>)
 800196e:	4013      	ands	r3, r2
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6812      	ldr	r2, [r2, #0]
 8001974:	68f9      	ldr	r1, [r7, #12]
 8001976:	430b      	orrs	r3, r1
 8001978:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001980:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001986:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001988:	683a      	ldr	r2, [r7, #0]
 800198a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800198e:	2a00      	cmp	r2, #0
 8001990:	d101      	bne.n	8001996 <ETH_SetMACConfig+0x172>
 8001992:	2280      	movs	r2, #128	@ 0x80
 8001994:	e000      	b.n	8001998 <ETH_SetMACConfig+0x174>
 8001996:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001998:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800199e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80019a0:	4313      	orrs	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80019aa:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80019ae:	4013      	ands	r3, r2
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6812      	ldr	r2, [r2, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	430b      	orrs	r3, r1
 80019b8:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80019c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80019c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019d6:	f023 0103 	bic.w	r1, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68fa      	ldr	r2, [r7, #12]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80019ee:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	430a      	orrs	r2, r1
 80019fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001a0a:	2a00      	cmp	r2, #0
 8001a0c:	d101      	bne.n	8001a12 <ETH_SetMACConfig+0x1ee>
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	e000      	b.n	8001a14 <ETH_SetMACConfig+0x1f0>
 8001a12:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001a14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001a1c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001a1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001a26:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001a34:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001a44:	bf00      	nop
 8001a46:	3714      	adds	r7, #20
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	00048083 	.word	0x00048083
 8001a54:	c0f88000 	.word	0xc0f88000
 8001a58:	fffffef0 	.word	0xfffffef0

08001a5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b38      	ldr	r3, [pc, #224]	@ (8001b54 <ETH_SetDMAConfig+0xf8>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6811      	ldr	r1, [r2, #0]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6812      	ldr	r2, [r2, #0]
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001a82:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	791b      	ldrb	r3, [r3, #4]
 8001a88:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	7b1b      	ldrb	r3, [r3, #12]
 8001a94:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001a96:	4313      	orrs	r3, r2
 8001a98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	@ (8001b58 <ETH_SetDMAConfig+0xfc>)
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	6812      	ldr	r2, [r2, #0]
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	430b      	orrs	r3, r1
 8001ab0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ab4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	7b5b      	ldrb	r3, [r3, #13]
 8001aba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001acc:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001ad0:	4b22      	ldr	r3, [pc, #136]	@ (8001b5c <ETH_SetDMAConfig+0x100>)
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	6812      	ldr	r2, [r2, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001ae0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	7d1b      	ldrb	r3, [r3, #20]
 8001aec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001aee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	7f5b      	ldrb	r3, [r3, #29]
 8001af4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001af6:	4313      	orrs	r3, r2
 8001af8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b02:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <ETH_SetDMAConfig+0x104>)
 8001b08:	4013      	ands	r3, r2
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	6812      	ldr	r2, [r2, #0]
 8001b0e:	68f9      	ldr	r1, [r7, #12]
 8001b10:	430b      	orrs	r3, r1
 8001b12:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b16:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	7f1b      	ldrb	r3, [r3, #28]
 8001b1e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001b24:	4313      	orrs	r3, r2
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b30:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001b34:	4b0b      	ldr	r3, [pc, #44]	@ (8001b64 <ETH_SetDMAConfig+0x108>)
 8001b36:	4013      	ands	r3, r2
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	68f9      	ldr	r1, [r7, #12]
 8001b3e:	430b      	orrs	r3, r1
 8001b40:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b44:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001b48:	bf00      	nop
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	ffff87fd 	.word	0xffff87fd
 8001b58:	ffff2ffe 	.word	0xffff2ffe
 8001b5c:	fffec000 	.word	0xfffec000
 8001b60:	ffc0efef 	.word	0xffc0efef
 8001b64:	7fc0ffff 	.word	0x7fc0ffff

08001b68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b0a4      	sub	sp, #144	@ 0x90
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001b70:	2301      	movs	r3, #1
 8001b72:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001b76:	2300      	movs	r3, #0
 8001b78:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001b92:	2301      	movs	r3, #1
 8001b94:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001ba4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ba8:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001bc0:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001bc4:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001be2:	2300      	movs	r3, #0
 8001be4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001bea:	2300      	movs	r3, #0
 8001bec:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001c00:	2320      	movs	r3, #32
 8001c02:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001c12:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001c18:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001c1c:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001c42:	2300      	movs	r3, #0
 8001c44:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001c4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c50:	4619      	mov	r1, r3
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f7ff fde6 	bl	8001824 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001c72:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001c7c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001c88:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001c8c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	4619      	mov	r1, r3
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff fee1 	bl	8001a5c <ETH_SetDMAConfig>
}
 8001c9a:	bf00      	nop
 8001c9c:	3790      	adds	r7, #144	@ 0x90
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e01d      	b.n	8001cec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68d9      	ldr	r1, [r3, #12]
 8001cb4:	68fa      	ldr	r2, [r7, #12]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	005b      	lsls	r3, r3, #1
 8001cba:	4413      	add	r3, r2
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	440b      	add	r3, r1
 8001cc0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	3206      	adds	r2, #6
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d9de      	bls.n	8001cb0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d00:	461a      	mov	r2, r3
 8001d02:	2303      	movs	r3, #3
 8001d04:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68da      	ldr	r2, [r3, #12]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d14:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001d24:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001d28:	bf00      	nop
 8001d2a:	3714      	adds	r7, #20
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b085      	sub	sp, #20
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	e023      	b.n	8001d8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6919      	ldr	r1, [r3, #16]
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4613      	mov	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	00db      	lsls	r3, r3, #3
 8001d50:	440b      	add	r3, r1
 8001d52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001d78:	68b9      	ldr	r1, [r7, #8]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	3212      	adds	r2, #18
 8001d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	3301      	adds	r3, #1
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d9d8      	bls.n	8001d42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001db6:	461a      	mov	r2, r3
 8001db8:	2303      	movs	r3, #3
 8001dba:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	691a      	ldr	r2, [r3, #16]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dca:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dde:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001dfe:	4b89      	ldr	r3, [pc, #548]	@ (8002024 <HAL_GPIO_Init+0x234>)
 8001e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e02:	e194      	b.n	800212e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8186 	beq.w	8002128 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f003 0303 	and.w	r3, r3, #3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d005      	beq.n	8001e34 <HAL_GPIO_Init+0x44>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d130      	bne.n	8001e96 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	68da      	ldr	r2, [r3, #12]
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	f003 0201 	and.w	r2, r3, #1
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b03      	cmp	r3, #3
 8001ea0:	d017      	beq.n	8001ed2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	2203      	movs	r2, #3
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	69ba      	ldr	r2, [r7, #24]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	005b      	lsls	r3, r3, #1
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d123      	bne.n	8001f26 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	08da      	lsrs	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3208      	adds	r2, #8
 8001ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	220f      	movs	r2, #15
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	43db      	mvns	r3, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4013      	ands	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	08da      	lsrs	r2, r3, #3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3208      	adds	r2, #8
 8001f20:	69b9      	ldr	r1, [r7, #24]
 8001f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	2203      	movs	r2, #3
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f003 0203 	and.w	r2, r3, #3
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f000 80e0 	beq.w	8002128 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f68:	4b2f      	ldr	r3, [pc, #188]	@ (8002028 <HAL_GPIO_Init+0x238>)
 8001f6a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f6e:	4a2e      	ldr	r2, [pc, #184]	@ (8002028 <HAL_GPIO_Init+0x238>)
 8001f70:	f043 0302 	orr.w	r3, r3, #2
 8001f74:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001f78:	4b2b      	ldr	r3, [pc, #172]	@ (8002028 <HAL_GPIO_Init+0x238>)
 8001f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f86:	4a29      	ldr	r2, [pc, #164]	@ (800202c <HAL_GPIO_Init+0x23c>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a20      	ldr	r2, [pc, #128]	@ (8002030 <HAL_GPIO_Init+0x240>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d052      	beq.n	8002058 <HAL_GPIO_Init+0x268>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a1f      	ldr	r2, [pc, #124]	@ (8002034 <HAL_GPIO_Init+0x244>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_GPIO_Init+0x22e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_GPIO_Init+0x248>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x22a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a1d      	ldr	r2, [pc, #116]	@ (800203c <HAL_GPIO_Init+0x24c>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x226>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <HAL_GPIO_Init+0x250>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x222>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_GPIO_Init+0x254>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x21e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a1a      	ldr	r2, [pc, #104]	@ (8002048 <HAL_GPIO_Init+0x258>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x21a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a19      	ldr	r2, [pc, #100]	@ (800204c <HAL_GPIO_Init+0x25c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x216>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_GPIO_Init+0x260>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x212>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <HAL_GPIO_Init+0x264>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x20e>
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	e02d      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8001ffe:	230a      	movs	r3, #10
 8002000:	e02b      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002002:	2308      	movs	r3, #8
 8002004:	e029      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002006:	2307      	movs	r3, #7
 8002008:	e027      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800200a:	2306      	movs	r3, #6
 800200c:	e025      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800200e:	2305      	movs	r3, #5
 8002010:	e023      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002012:	2304      	movs	r3, #4
 8002014:	e021      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002016:	2303      	movs	r3, #3
 8002018:	e01f      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800201a:	2302      	movs	r3, #2
 800201c:	e01d      	b.n	800205a <HAL_GPIO_Init+0x26a>
 800201e:	2301      	movs	r3, #1
 8002020:	e01b      	b.n	800205a <HAL_GPIO_Init+0x26a>
 8002022:	bf00      	nop
 8002024:	58000080 	.word	0x58000080
 8002028:	58024400 	.word	0x58024400
 800202c:	58000400 	.word	0x58000400
 8002030:	58020000 	.word	0x58020000
 8002034:	58020400 	.word	0x58020400
 8002038:	58020800 	.word	0x58020800
 800203c:	58020c00 	.word	0x58020c00
 8002040:	58021000 	.word	0x58021000
 8002044:	58021400 	.word	0x58021400
 8002048:	58021800 	.word	0x58021800
 800204c:	58021c00 	.word	0x58021c00
 8002050:	58022000 	.word	0x58022000
 8002054:	58022400 	.word	0x58022400
 8002058:	2300      	movs	r3, #0
 800205a:	69fa      	ldr	r2, [r7, #28]
 800205c:	f002 0203 	and.w	r2, r2, #3
 8002060:	0092      	lsls	r2, r2, #2
 8002062:	4093      	lsls	r3, r2
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	4313      	orrs	r3, r2
 8002068:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800206a:	4938      	ldr	r1, [pc, #224]	@ (800214c <HAL_GPIO_Init+0x35c>)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	089b      	lsrs	r3, r3, #2
 8002070:	3302      	adds	r3, #2
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002078:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	43db      	mvns	r3, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4013      	ands	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002096:	69ba      	ldr	r2, [r7, #24]
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800209e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80020a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80020cc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	43db      	mvns	r3, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4013      	ands	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	3301      	adds	r3, #1
 800212c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fa22 f303 	lsr.w	r3, r2, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	f47f ae63 	bne.w	8001e04 <HAL_GPIO_Init+0x14>
  }
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3724      	adds	r7, #36	@ 0x24
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	58000400 	.word	0x58000400

08002150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	887b      	ldrh	r3, [r7, #2]
 8002162:	4013      	ands	r3, r2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d002      	beq.n	800216e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002168:	2301      	movs	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e001      	b.n	8002172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800216e:	2300      	movs	r3, #0
 8002170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3714      	adds	r7, #20
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	460b      	mov	r3, r1
 800218a:	807b      	strh	r3, [r7, #2]
 800218c:	4613      	mov	r3, r2
 800218e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002190:	787b      	ldrb	r3, [r7, #1]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d003      	beq.n	800219e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002196:	887a      	ldrh	r2, [r7, #2]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800219c:	e003      	b.n	80021a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800219e:	887b      	ldrh	r3, [r7, #2]
 80021a0:	041a      	lsls	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b086      	sub	sp, #24
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d101      	bne.n	80021c4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e0fe      	b.n	80023c2 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d106      	bne.n	80021de <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f7fe fe85 	bl	8000ee8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2203      	movs	r2, #3
 80021e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f007 f9bc 	bl	8009568 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6818      	ldr	r0, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	7c1a      	ldrb	r2, [r3, #16]
 80021f8:	f88d 2000 	strb.w	r2, [sp]
 80021fc:	3304      	adds	r3, #4
 80021fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002200:	f007 f940 	bl	8009484 <USB_CoreInit>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d005      	beq.n	8002216 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2202      	movs	r2, #2
 800220e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e0d5      	b.n	80023c2 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2100      	movs	r1, #0
 800221c:	4618      	mov	r0, r3
 800221e:	f007 f9b4 	bl	800958a <USB_SetCurrentMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d005      	beq.n	8002234 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0c6      	b.n	80023c2 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002234:	2300      	movs	r3, #0
 8002236:	73fb      	strb	r3, [r7, #15]
 8002238:	e04a      	b.n	80022d0 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	00db      	lsls	r3, r3, #3
 8002242:	4413      	add	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	3315      	adds	r3, #21
 800224a:	2201      	movs	r2, #1
 800224c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	00db      	lsls	r3, r3, #3
 8002256:	4413      	add	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3314      	adds	r3, #20
 800225e:	7bfa      	ldrb	r2, [r7, #15]
 8002260:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002262:	7bfa      	ldrb	r2, [r7, #15]
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	b298      	uxth	r0, r3
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	00db      	lsls	r3, r3, #3
 800226e:	4413      	add	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	332e      	adds	r3, #46	@ 0x2e
 8002276:	4602      	mov	r2, r0
 8002278:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800227a:	7bfa      	ldrb	r2, [r7, #15]
 800227c:	6879      	ldr	r1, [r7, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	00db      	lsls	r3, r3, #3
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	3318      	adds	r3, #24
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800228e:	7bfa      	ldrb	r2, [r7, #15]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	331c      	adds	r3, #28
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80022a2:	7bfa      	ldrb	r2, [r7, #15]
 80022a4:	6879      	ldr	r1, [r7, #4]
 80022a6:	4613      	mov	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3320      	adds	r3, #32
 80022b2:	2200      	movs	r2, #0
 80022b4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80022b6:	7bfa      	ldrb	r2, [r7, #15]
 80022b8:	6879      	ldr	r1, [r7, #4]
 80022ba:	4613      	mov	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	4413      	add	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	440b      	add	r3, r1
 80022c4:	3324      	adds	r3, #36	@ 0x24
 80022c6:	2200      	movs	r2, #0
 80022c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	3301      	adds	r3, #1
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	791b      	ldrb	r3, [r3, #4]
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3af      	bcc.n	800223a <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022da:	2300      	movs	r3, #0
 80022dc:	73fb      	strb	r3, [r7, #15]
 80022de:	e044      	b.n	800236a <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80022e0:	7bfa      	ldrb	r2, [r7, #15]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	4413      	add	r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80022f2:	2200      	movs	r2, #0
 80022f4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80022f6:	7bfa      	ldrb	r2, [r7, #15]
 80022f8:	6879      	ldr	r1, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	00db      	lsls	r3, r3, #3
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002308:	7bfa      	ldrb	r2, [r7, #15]
 800230a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800230c:	7bfa      	ldrb	r2, [r7, #15]
 800230e:	6879      	ldr	r1, [r7, #4]
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	4413      	add	r3, r2
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	440b      	add	r3, r1
 800231a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002322:	7bfa      	ldrb	r2, [r7, #15]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	4413      	add	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002334:	2200      	movs	r2, #0
 8002336:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002338:	7bfa      	ldrb	r2, [r7, #15]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800234e:	7bfa      	ldrb	r2, [r7, #15]
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	3301      	adds	r3, #1
 8002368:	73fb      	strb	r3, [r7, #15]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	791b      	ldrb	r3, [r3, #4]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	429a      	cmp	r2, r3
 8002372:	d3b5      	bcc.n	80022e0 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6818      	ldr	r0, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7c1a      	ldrb	r2, [r3, #16]
 800237c:	f88d 2000 	strb.w	r2, [sp]
 8002380:	3304      	adds	r3, #4
 8002382:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002384:	f007 f94e 	bl	8009624 <USB_DevInit>
 8002388:	4603      	mov	r3, r0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e013      	b.n	80023c2 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7b1b      	ldrb	r3, [r3, #12]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d102      	bne.n	80023b6 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f80b 	bl	80023cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f007 fb09 	bl	80099d2 <USB_DevDisconnect>

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3710      	adds	r7, #16
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
	...

080023cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80023fa:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <HAL_PCDEx_ActivateLPM+0x44>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	68fa      	ldr	r2, [r7, #12]
 8002400:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002402:	2300      	movs	r3, #0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	10000003 	.word	0x10000003

08002414 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_PWREx_ConfigSupply+0x70>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0304 	and.w	r3, r3, #4
 8002424:	2b04      	cmp	r3, #4
 8002426:	d00a      	beq.n	800243e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002428:	4b16      	ldr	r3, [pc, #88]	@ (8002484 <HAL_PWREx_ConfigSupply+0x70>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e01f      	b.n	800247a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e01d      	b.n	800247a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800243e:	4b11      	ldr	r3, [pc, #68]	@ (8002484 <HAL_PWREx_ConfigSupply+0x70>)
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	490f      	ldr	r1, [pc, #60]	@ (8002484 <HAL_PWREx_ConfigSupply+0x70>)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4313      	orrs	r3, r2
 800244c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800244e:	f7fe ff3b 	bl	80012c8 <HAL_GetTick>
 8002452:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002454:	e009      	b.n	800246a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002456:	f7fe ff37 	bl	80012c8 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002464:	d901      	bls.n	800246a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e007      	b.n	800247a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800246a:	4b06      	ldr	r3, [pc, #24]	@ (8002484 <HAL_PWREx_ConfigSupply+0x70>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002476:	d1ee      	bne.n	8002456 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	58024800 	.word	0x58024800

08002488 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800248c:	4b05      	ldr	r3, [pc, #20]	@ (80024a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a04      	ldr	r2, [pc, #16]	@ (80024a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002492:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	58024800 	.word	0x58024800

080024a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d102      	bne.n	80024bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f000 bc48 	b.w	8002d4c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0301 	and.w	r3, r3, #1
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 8088 	beq.w	80025da <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ca:	4b99      	ldr	r3, [pc, #612]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024d4:	4b96      	ldr	r3, [pc, #600]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80024d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	2b10      	cmp	r3, #16
 80024de:	d007      	beq.n	80024f0 <HAL_RCC_OscConfig+0x48>
 80024e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024e2:	2b18      	cmp	r3, #24
 80024e4:	d111      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
 80024e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e8:	f003 0303 	and.w	r3, r3, #3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d06d      	beq.n	80025d8 <HAL_RCC_OscConfig+0x130>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d169      	bne.n	80025d8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f000 bc21 	b.w	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002512:	d106      	bne.n	8002522 <HAL_RCC_OscConfig+0x7a>
 8002514:	4b86      	ldr	r3, [pc, #536]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a85      	ldr	r2, [pc, #532]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800251a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251e:	6013      	str	r3, [r2, #0]
 8002520:	e02e      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x9c>
 800252a:	4b81      	ldr	r3, [pc, #516]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a80      	ldr	r2, [pc, #512]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b7e      	ldr	r3, [pc, #504]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7d      	ldr	r2, [pc, #500]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800253c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e01d      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800254c:	d10c      	bne.n	8002568 <HAL_RCC_OscConfig+0xc0>
 800254e:	4b78      	ldr	r3, [pc, #480]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a77      	ldr	r2, [pc, #476]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002554:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	4b75      	ldr	r3, [pc, #468]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a74      	ldr	r2, [pc, #464]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	e00b      	b.n	8002580 <HAL_RCC_OscConfig+0xd8>
 8002568:	4b71      	ldr	r3, [pc, #452]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a70      	ldr	r2, [pc, #448]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800256e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002572:	6013      	str	r3, [r2, #0]
 8002574:	4b6e      	ldr	r3, [pc, #440]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a6d      	ldr	r2, [pc, #436]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800257a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800257e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d013      	beq.n	80025b0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002588:	f7fe fe9e 	bl	80012c8 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002590:	f7fe fe9a 	bl	80012c8 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	@ 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e3d4      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025a2:	4b63      	ldr	r3, [pc, #396]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0xe8>
 80025ae:	e014      	b.n	80025da <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7fe fe8a 	bl	80012c8 <HAL_GetTick>
 80025b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025b8:	f7fe fe86 	bl	80012c8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b64      	cmp	r3, #100	@ 0x64
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e3c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025ca:	4b59      	ldr	r3, [pc, #356]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x110>
 80025d6:	e000      	b.n	80025da <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 80ca 	beq.w	800277c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e8:	4b51      	ldr	r3, [pc, #324]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80025ea:	691b      	ldr	r3, [r3, #16]
 80025ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025f0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025f2:	4b4f      	ldr	r3, [pc, #316]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80025f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d007      	beq.n	800260e <HAL_RCC_OscConfig+0x166>
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	2b18      	cmp	r3, #24
 8002602:	d156      	bne.n	80026b2 <HAL_RCC_OscConfig+0x20a>
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d151      	bne.n	80026b2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800260e:	4b48      	ldr	r3, [pc, #288]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0304 	and.w	r3, r3, #4
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_RCC_OscConfig+0x17e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68db      	ldr	r3, [r3, #12]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e392      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002626:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 0219 	bic.w	r2, r3, #25
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	493f      	ldr	r1, [pc, #252]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002634:	4313      	orrs	r3, r2
 8002636:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002638:	f7fe fe46 	bl	80012c8 <HAL_GetTick>
 800263c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002640:	f7fe fe42 	bl	80012c8 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d901      	bls.n	8002652 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800264e:	2303      	movs	r3, #3
 8002650:	e37c      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002652:	4b37      	ldr	r3, [pc, #220]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b00      	cmp	r3, #0
 800265c:	d0f0      	beq.n	8002640 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800265e:	f7fe fe63 	bl	8001328 <HAL_GetREVID>
 8002662:	4603      	mov	r3, r0
 8002664:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002668:	4293      	cmp	r3, r2
 800266a:	d817      	bhi.n	800269c <HAL_RCC_OscConfig+0x1f4>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	2b40      	cmp	r3, #64	@ 0x40
 8002672:	d108      	bne.n	8002686 <HAL_RCC_OscConfig+0x1de>
 8002674:	4b2e      	ldr	r3, [pc, #184]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800267c:	4a2c      	ldr	r2, [pc, #176]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800267e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002682:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002684:	e07a      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002686:	4b2a      	ldr	r3, [pc, #168]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	031b      	lsls	r3, r3, #12
 8002694:	4926      	ldr	r1, [pc, #152]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002696:	4313      	orrs	r3, r2
 8002698:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269a:	e06f      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b24      	ldr	r3, [pc, #144]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	061b      	lsls	r3, r3, #24
 80026aa:	4921      	ldr	r1, [pc, #132]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b0:	e064      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d047      	beq.n	800274a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 0219 	bic.w	r2, r3, #25
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	491a      	ldr	r1, [pc, #104]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80026c8:	4313      	orrs	r3, r2
 80026ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026cc:	f7fe fdfc 	bl	80012c8 <HAL_GetTick>
 80026d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d2:	e008      	b.n	80026e6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d4:	f7fe fdf8 	bl	80012c8 <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e332      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0304 	and.w	r3, r3, #4
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0f0      	beq.n	80026d4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f2:	f7fe fe19 	bl	8001328 <HAL_GetREVID>
 80026f6:	4603      	mov	r3, r0
 80026f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d819      	bhi.n	8002734 <HAL_RCC_OscConfig+0x28c>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	2b40      	cmp	r3, #64	@ 0x40
 8002706:	d108      	bne.n	800271a <HAL_RCC_OscConfig+0x272>
 8002708:	4b09      	ldr	r3, [pc, #36]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002710:	4a07      	ldr	r2, [pc, #28]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 8002712:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002716:	6053      	str	r3, [r2, #4]
 8002718:	e030      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
 800271a:	4b05      	ldr	r3, [pc, #20]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	031b      	lsls	r3, r3, #12
 8002728:	4901      	ldr	r1, [pc, #4]	@ (8002730 <HAL_RCC_OscConfig+0x288>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
 800272e:	e025      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
 8002730:	58024400 	.word	0x58024400
 8002734:	4b9a      	ldr	r3, [pc, #616]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	061b      	lsls	r3, r3, #24
 8002742:	4997      	ldr	r1, [pc, #604]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002744:	4313      	orrs	r3, r2
 8002746:	604b      	str	r3, [r1, #4]
 8002748:	e018      	b.n	800277c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b95      	ldr	r3, [pc, #596]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a94      	ldr	r2, [pc, #592]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002756:	f7fe fdb7 	bl	80012c8 <HAL_GetTick>
 800275a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800275c:	e008      	b.n	8002770 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800275e:	f7fe fdb3 	bl	80012c8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b02      	cmp	r3, #2
 800276a:	d901      	bls.n	8002770 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800276c:	2303      	movs	r3, #3
 800276e:	e2ed      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002770:	4b8b      	ldr	r3, [pc, #556]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1f0      	bne.n	800275e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	f000 80a9 	beq.w	80028dc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002792:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002794:	4b82      	ldr	r3, [pc, #520]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002798:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b08      	cmp	r3, #8
 800279e:	d007      	beq.n	80027b0 <HAL_RCC_OscConfig+0x308>
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b18      	cmp	r3, #24
 80027a4:	d13a      	bne.n	800281c <HAL_RCC_OscConfig+0x374>
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f003 0303 	and.w	r3, r3, #3
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d135      	bne.n	800281c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b0:	4b7b      	ldr	r3, [pc, #492]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d005      	beq.n	80027c8 <HAL_RCC_OscConfig+0x320>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	69db      	ldr	r3, [r3, #28]
 80027c0:	2b80      	cmp	r3, #128	@ 0x80
 80027c2:	d001      	beq.n	80027c8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e2c1      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027c8:	f7fe fdae 	bl	8001328 <HAL_GetREVID>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d817      	bhi.n	8002806 <HAL_RCC_OscConfig+0x35e>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b20      	cmp	r3, #32
 80027dc:	d108      	bne.n	80027f0 <HAL_RCC_OscConfig+0x348>
 80027de:	4b70      	ldr	r3, [pc, #448]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80027e6:	4a6e      	ldr	r2, [pc, #440]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027ec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ee:	e075      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027f0:	4b6b      	ldr	r3, [pc, #428]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	069b      	lsls	r3, r3, #26
 80027fe:	4968      	ldr	r1, [pc, #416]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002804:	e06a      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002806:	4b66      	ldr	r3, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	4962      	ldr	r1, [pc, #392]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281a:	e05f      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d042      	beq.n	80028aa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002824:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a5d      	ldr	r2, [pc, #372]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fd4a 	bl	80012c8 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002838:	f7fe fd46 	bl	80012c8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e280      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284a:	4b55      	ldr	r3, [pc, #340]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002856:	f7fe fd67 	bl	8001328 <HAL_GetREVID>
 800285a:	4603      	mov	r3, r0
 800285c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002860:	4293      	cmp	r3, r2
 8002862:	d817      	bhi.n	8002894 <HAL_RCC_OscConfig+0x3ec>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	2b20      	cmp	r3, #32
 800286a:	d108      	bne.n	800287e <HAL_RCC_OscConfig+0x3d6>
 800286c:	4b4c      	ldr	r3, [pc, #304]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002874:	4a4a      	ldr	r2, [pc, #296]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002876:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800287a:	6053      	str	r3, [r2, #4]
 800287c:	e02e      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
 800287e:	4b48      	ldr	r3, [pc, #288]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	069b      	lsls	r3, r3, #26
 800288c:	4944      	ldr	r1, [pc, #272]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
 8002892:	e023      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
 8002894:	4b42      	ldr	r3, [pc, #264]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	493f      	ldr	r1, [pc, #252]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
 80028a8:	e018      	b.n	80028dc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80028aa:	4b3d      	ldr	r3, [pc, #244]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a3c      	ldr	r2, [pc, #240]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80028b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b6:	f7fe fd07 	bl	80012c8 <HAL_GetTick>
 80028ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028bc:	e008      	b.n	80028d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028be:	f7fe fd03 	bl	80012c8 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	2b02      	cmp	r3, #2
 80028ca:	d901      	bls.n	80028d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e23d      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028d0:	4b33      	ldr	r3, [pc, #204]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1f0      	bne.n	80028be <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d036      	beq.n	8002956 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d019      	beq.n	8002924 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028f0:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028f4:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fce4 	bl	80012c8 <HAL_GetTick>
 8002900:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002904:	f7fe fce0 	bl	80012c8 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e21a      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002916:	4b22      	ldr	r3, [pc, #136]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002918:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f0      	beq.n	8002904 <HAL_RCC_OscConfig+0x45c>
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002924:	4b1e      	ldr	r3, [pc, #120]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002928:	4a1d      	ldr	r2, [pc, #116]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	f023 0301 	bic.w	r3, r3, #1
 800292e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fcca 	bl	80012c8 <HAL_GetTick>
 8002934:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002936:	e008      	b.n	800294a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002938:	f7fe fcc6 	bl	80012c8 <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d901      	bls.n	800294a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e200      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800294a:	4b15      	ldr	r3, [pc, #84]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800294c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294e:	f003 0302 	and.w	r3, r3, #2
 8002952:	2b00      	cmp	r3, #0
 8002954:	d1f0      	bne.n	8002938 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	2b00      	cmp	r3, #0
 8002960:	d039      	beq.n	80029d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296a:	4b0d      	ldr	r3, [pc, #52]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a0c      	ldr	r2, [pc, #48]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002970:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002974:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002976:	f7fe fca7 	bl	80012c8 <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800297e:	f7fe fca3 	bl	80012c8 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1dd      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002990:	4b03      	ldr	r3, [pc, #12]	@ (80029a0 <HAL_RCC_OscConfig+0x4f8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCC_OscConfig+0x4d6>
 800299c:	e01b      	b.n	80029d6 <HAL_RCC_OscConfig+0x52e>
 800299e:	bf00      	nop
 80029a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a4:	4b9b      	ldr	r3, [pc, #620]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a9a      	ldr	r2, [pc, #616]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80029b0:	f7fe fc8a 	bl	80012c8 <HAL_GetTick>
 80029b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029b8:	f7fe fc86 	bl	80012c8 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e1c0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80029ca:	4b92      	ldr	r3, [pc, #584]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0304 	and.w	r3, r3, #4
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8081 	beq.w	8002ae6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029e4:	4b8c      	ldr	r3, [pc, #560]	@ (8002c18 <HAL_RCC_OscConfig+0x770>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a8b      	ldr	r2, [pc, #556]	@ (8002c18 <HAL_RCC_OscConfig+0x770>)
 80029ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fc6a 	bl	80012c8 <HAL_GetTick>
 80029f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f8:	f7fe fc66 	bl	80012c8 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	@ 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e1a0      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a0a:	4b83      	ldr	r3, [pc, #524]	@ (8002c18 <HAL_RCC_OscConfig+0x770>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d106      	bne.n	8002a2c <HAL_RCC_OscConfig+0x584>
 8002a1e:	4b7d      	ldr	r3, [pc, #500]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a7c      	ldr	r2, [pc, #496]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	e02d      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10c      	bne.n	8002a4e <HAL_RCC_OscConfig+0x5a6>
 8002a34:	4b77      	ldr	r3, [pc, #476]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a38:	4a76      	ldr	r2, [pc, #472]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a40:	4b74      	ldr	r3, [pc, #464]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a44:	4a73      	ldr	r2, [pc, #460]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	f023 0304 	bic.w	r3, r3, #4
 8002a4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a4c:	e01c      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b05      	cmp	r3, #5
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x5c8>
 8002a56:	4b6f      	ldr	r3, [pc, #444]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a5a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	f043 0304 	orr.w	r3, r3, #4
 8002a60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a62:	4b6c      	ldr	r3, [pc, #432]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a6b      	ldr	r2, [pc, #428]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a68:	f043 0301 	orr.w	r3, r3, #1
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	e00b      	b.n	8002a88 <HAL_RCC_OscConfig+0x5e0>
 8002a70:	4b68      	ldr	r3, [pc, #416]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a74:	4a67      	ldr	r2, [pc, #412]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a76:	f023 0301 	bic.w	r3, r3, #1
 8002a7a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7c:	4b65      	ldr	r3, [pc, #404]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a64      	ldr	r2, [pc, #400]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002a82:	f023 0304 	bic.w	r3, r3, #4
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d015      	beq.n	8002abc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7fe fc1a 	bl	80012c8 <HAL_GetTick>
 8002a94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7fe fc16 	bl	80012c8 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e14e      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002aae:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d0ee      	beq.n	8002a98 <HAL_RCC_OscConfig+0x5f0>
 8002aba:	e014      	b.n	8002ae6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fc04 	bl	80012c8 <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac4:	f7fe fc00 	bl	80012c8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e138      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ada:	4b4e      	ldr	r3, [pc, #312]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002adc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1ee      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f000 812d 	beq.w	8002d4a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002af0:	4b48      	ldr	r3, [pc, #288]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002af8:	2b18      	cmp	r3, #24
 8002afa:	f000 80bd 	beq.w	8002c78 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	f040 809e 	bne.w	8002c44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b08:	4b42      	ldr	r3, [pc, #264]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a41      	ldr	r2, [pc, #260]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b14:	f7fe fbd8 	bl	80012c8 <HAL_GetTick>
 8002b18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b1a:	e008      	b.n	8002b2e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b1c:	f7fe fbd4 	bl	80012c8 <HAL_GetTick>
 8002b20:	4602      	mov	r2, r0
 8002b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b24:	1ad3      	subs	r3, r2, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e10e      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2e:	4b39      	ldr	r3, [pc, #228]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1f0      	bne.n	8002b1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b3a:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b3e:	4b37      	ldr	r3, [pc, #220]	@ (8002c1c <HAL_RCC_OscConfig+0x774>)
 8002b40:	4013      	ands	r3, r2
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	430a      	orrs	r2, r1
 8002b4e:	4931      	ldr	r1, [pc, #196]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b58:	3b01      	subs	r3, #1
 8002b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b62:	3b01      	subs	r3, #1
 8002b64:	025b      	lsls	r3, r3, #9
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b6e:	3b01      	subs	r3, #1
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	061b      	lsls	r3, r3, #24
 8002b80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b84:	4923      	ldr	r1, [pc, #140]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b8a:	4b22      	ldr	r3, [pc, #136]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	4a21      	ldr	r2, [pc, #132]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b96:	4b1f      	ldr	r3, [pc, #124]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002b98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b9a:	4b21      	ldr	r3, [pc, #132]	@ (8002c20 <HAL_RCC_OscConfig+0x778>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ba2:	00d2      	lsls	r2, r2, #3
 8002ba4:	491b      	ldr	r1, [pc, #108]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002baa:	4b1a      	ldr	r3, [pc, #104]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bae:	f023 020c 	bic.w	r2, r3, #12
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb6:	4917      	ldr	r1, [pc, #92]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002bbc:	4b15      	ldr	r3, [pc, #84]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc0:	f023 0202 	bic.w	r2, r3, #2
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bc8:	4912      	ldr	r1, [pc, #72]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd2:	4a10      	ldr	r2, [pc, #64]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bda:	4b0e      	ldr	r3, [pc, #56]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bde:	4a0d      	ldr	r2, [pc, #52]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002be4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bf2:	4b08      	ldr	r3, [pc, #32]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	4a07      	ldr	r2, [pc, #28]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002bf8:	f043 0301 	orr.w	r3, r3, #1
 8002bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCC_OscConfig+0x76c>)
 8002c04:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0a:	f7fe fb5d 	bl	80012c8 <HAL_GetTick>
 8002c0e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c10:	e011      	b.n	8002c36 <HAL_RCC_OscConfig+0x78e>
 8002c12:	bf00      	nop
 8002c14:	58024400 	.word	0x58024400
 8002c18:	58024800 	.word	0x58024800
 8002c1c:	fffffc0c 	.word	0xfffffc0c
 8002c20:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c24:	f7fe fb50 	bl	80012c8 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e08a      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c36:	4b47      	ldr	r3, [pc, #284]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0f0      	beq.n	8002c24 <HAL_RCC_OscConfig+0x77c>
 8002c42:	e082      	b.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c44:	4b43      	ldr	r3, [pc, #268]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a42      	ldr	r2, [pc, #264]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c4a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c50:	f7fe fb3a 	bl	80012c8 <HAL_GetTick>
 8002c54:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c56:	e008      	b.n	8002c6a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c58:	f7fe fb36 	bl	80012c8 <HAL_GetTick>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e070      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d1f0      	bne.n	8002c58 <HAL_RCC_OscConfig+0x7b0>
 8002c76:	e068      	b.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c78:	4b36      	ldr	r3, [pc, #216]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c7e:	4b35      	ldr	r3, [pc, #212]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d031      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d12a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	091b      	lsrs	r3, r3, #4
 8002c9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d122      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d11a      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d111      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	0c1b      	lsrs	r3, r3, #16
 8002cd0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cd8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d108      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0e1b      	lsrs	r3, r3, #24
 8002ce2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e02b      	b.n	8002d4c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cf4:	4b17      	ldr	r3, [pc, #92]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cf8:	08db      	lsrs	r3, r3, #3
 8002cfa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cfe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d01f      	beq.n	8002d4a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d0a:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d0e:	4a11      	ldr	r2, [pc, #68]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d10:	f023 0301 	bic.w	r3, r3, #1
 8002d14:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002d16:	f7fe fad7 	bl	80012c8 <HAL_GetTick>
 8002d1a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002d1c:	bf00      	nop
 8002d1e:	f7fe fad3 	bl	80012c8 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d0f9      	beq.n	8002d1e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_RCC_OscConfig+0x8b0>)
 8002d30:	4013      	ands	r3, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d36:	00d2      	lsls	r2, r2, #3
 8002d38:	4906      	ldr	r1, [pc, #24]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002d3e:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	4a04      	ldr	r2, [pc, #16]	@ (8002d54 <HAL_RCC_OscConfig+0x8ac>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3730      	adds	r7, #48	@ 0x30
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	58024400 	.word	0x58024400
 8002d58:	ffff0007 	.word	0xffff0007

08002d5c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e19c      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d70:	4b8a      	ldr	r3, [pc, #552]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 030f 	and.w	r3, r3, #15
 8002d78:	683a      	ldr	r2, [r7, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d910      	bls.n	8002da0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d7e:	4b87      	ldr	r3, [pc, #540]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f023 020f 	bic.w	r2, r3, #15
 8002d86:	4985      	ldr	r1, [pc, #532]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d8e:	4b83      	ldr	r3, [pc, #524]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 030f 	and.w	r3, r3, #15
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d001      	beq.n	8002da0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e184      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0304 	and.w	r3, r3, #4
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d010      	beq.n	8002dce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	691a      	ldr	r2, [r3, #16]
 8002db0:	4b7b      	ldr	r3, [pc, #492]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002db2:	699b      	ldr	r3, [r3, #24]
 8002db4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d908      	bls.n	8002dce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002dbc:	4b78      	ldr	r3, [pc, #480]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4975      	ldr	r1, [pc, #468]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	4b70      	ldr	r3, [pc, #448]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d908      	bls.n	8002dfc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	496a      	ldr	r1, [pc, #424]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0310 	and.w	r3, r3, #16
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d010      	beq.n	8002e2a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	699a      	ldr	r2, [r3, #24]
 8002e0c:	4b64      	ldr	r3, [pc, #400]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	69db      	ldr	r3, [r3, #28]
 8002e10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002e14:	429a      	cmp	r2, r3
 8002e16:	d908      	bls.n	8002e2a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002e18:	4b61      	ldr	r3, [pc, #388]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	699b      	ldr	r3, [r3, #24]
 8002e24:	495e      	ldr	r1, [pc, #376]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	4313      	orrs	r3, r2
 8002e28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0320 	and.w	r3, r3, #32
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d010      	beq.n	8002e58 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	69da      	ldr	r2, [r3, #28]
 8002e3a:	4b59      	ldr	r3, [pc, #356]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e46:	4b56      	ldr	r3, [pc, #344]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	4953      	ldr	r1, [pc, #332]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d010      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	68da      	ldr	r2, [r3, #12]
 8002e68:	4b4d      	ldr	r3, [pc, #308]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	429a      	cmp	r2, r3
 8002e72:	d908      	bls.n	8002e86 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e74:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f023 020f 	bic.w	r2, r3, #15
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	4947      	ldr	r1, [pc, #284]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0301 	and.w	r3, r3, #1
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d055      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e92:	4b43      	ldr	r3, [pc, #268]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	4940      	ldr	r1, [pc, #256]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eac:	4b3c      	ldr	r3, [pc, #240]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d121      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0f6      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	2b03      	cmp	r3, #3
 8002ec2:	d107      	bne.n	8002ed4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ec4:	4b36      	ldr	r3, [pc, #216]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d115      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e0ea      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b01      	cmp	r3, #1
 8002eda:	d107      	bne.n	8002eec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002edc:	4b30      	ldr	r3, [pc, #192]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e0de      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eec:	4b2c      	ldr	r3, [pc, #176]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0304 	and.w	r3, r3, #4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e0d6      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	f023 0207 	bic.w	r2, r3, #7
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	4925      	ldr	r1, [pc, #148]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f0e:	f7fe f9db 	bl	80012c8 <HAL_GetTick>
 8002f12:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f14:	e00a      	b.n	8002f2c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f16:	f7fe f9d7 	bl	80012c8 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d901      	bls.n	8002f2c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e0be      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	00db      	lsls	r3, r3, #3
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	d1eb      	bne.n	8002f16 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d010      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68da      	ldr	r2, [r3, #12]
 8002f4e:	4b14      	ldr	r3, [pc, #80]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	f003 030f 	and.w	r3, r3, #15
 8002f56:	429a      	cmp	r2, r3
 8002f58:	d208      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f023 020f 	bic.w	r2, r3, #15
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68db      	ldr	r3, [r3, #12]
 8002f66:	490e      	ldr	r1, [pc, #56]	@ (8002fa0 <HAL_RCC_ClockConfig+0x244>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 030f 	and.w	r3, r3, #15
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d214      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7a:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 020f 	bic.w	r2, r3, #15
 8002f82:	4906      	ldr	r1, [pc, #24]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f8a:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <HAL_RCC_ClockConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 030f 	and.w	r3, r3, #15
 8002f92:	683a      	ldr	r2, [r7, #0]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d005      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e086      	b.n	80030aa <HAL_RCC_ClockConfig+0x34e>
 8002f9c:	52002000 	.word	0x52002000
 8002fa0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d010      	beq.n	8002fd2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691a      	ldr	r2, [r3, #16]
 8002fb4:	4b3f      	ldr	r3, [pc, #252]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d208      	bcs.n	8002fd2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fc0:	4b3c      	ldr	r3, [pc, #240]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	4939      	ldr	r1, [pc, #228]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d010      	beq.n	8003000 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	4b34      	ldr	r3, [pc, #208]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d208      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fee:	4b31      	ldr	r3, [pc, #196]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002ff0:	69db      	ldr	r3, [r3, #28]
 8002ff2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	492e      	ldr	r1, [pc, #184]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b00      	cmp	r3, #0
 800300a:	d010      	beq.n	800302e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	699a      	ldr	r2, [r3, #24]
 8003010:	4b28      	ldr	r3, [pc, #160]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003018:	429a      	cmp	r2, r3
 800301a:	d208      	bcs.n	800302e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800301c:	4b25      	ldr	r3, [pc, #148]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	4922      	ldr	r1, [pc, #136]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800302a:	4313      	orrs	r3, r2
 800302c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0320 	and.w	r3, r3, #32
 8003036:	2b00      	cmp	r3, #0
 8003038:	d010      	beq.n	800305c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	4b1d      	ldr	r3, [pc, #116]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003046:	429a      	cmp	r2, r3
 8003048:	d208      	bcs.n	800305c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800304a:	4b1a      	ldr	r3, [pc, #104]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	4917      	ldr	r1, [pc, #92]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003058:	4313      	orrs	r3, r2
 800305a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800305c:	f000 f834 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b14      	ldr	r3, [pc, #80]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	0a1b      	lsrs	r3, r3, #8
 8003068:	f003 030f 	and.w	r3, r3, #15
 800306c:	4912      	ldr	r1, [pc, #72]	@ (80030b8 <HAL_RCC_ClockConfig+0x35c>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	fa22 f303 	lsr.w	r3, r2, r3
 8003078:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800307a:	4b0e      	ldr	r3, [pc, #56]	@ (80030b4 <HAL_RCC_ClockConfig+0x358>)
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f003 030f 	and.w	r3, r3, #15
 8003082:	4a0d      	ldr	r2, [pc, #52]	@ (80030b8 <HAL_RCC_ClockConfig+0x35c>)
 8003084:	5cd3      	ldrb	r3, [r2, r3]
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	fa22 f303 	lsr.w	r3, r2, r3
 8003090:	4a0a      	ldr	r2, [pc, #40]	@ (80030bc <HAL_RCC_ClockConfig+0x360>)
 8003092:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003094:	4a0a      	ldr	r2, [pc, #40]	@ (80030c0 <HAL_RCC_ClockConfig+0x364>)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <HAL_RCC_ClockConfig+0x368>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe f8c8 	bl	8001234 <HAL_InitTick>
 80030a4:	4603      	mov	r3, r0
 80030a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80030a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	58024400 	.word	0x58024400
 80030b8:	0800d174 	.word	0x0800d174
 80030bc:	24000004 	.word	0x24000004
 80030c0:	24000000 	.word	0x24000000
 80030c4:	24000008 	.word	0x24000008

080030c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b089      	sub	sp, #36	@ 0x24
 80030cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80030ce:	4bb3      	ldr	r3, [pc, #716]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80030d6:	2b18      	cmp	r3, #24
 80030d8:	f200 8155 	bhi.w	8003386 <HAL_RCC_GetSysClockFreq+0x2be>
 80030dc:	a201      	add	r2, pc, #4	@ (adr r2, 80030e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80030de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e2:	bf00      	nop
 80030e4:	08003149 	.word	0x08003149
 80030e8:	08003387 	.word	0x08003387
 80030ec:	08003387 	.word	0x08003387
 80030f0:	08003387 	.word	0x08003387
 80030f4:	08003387 	.word	0x08003387
 80030f8:	08003387 	.word	0x08003387
 80030fc:	08003387 	.word	0x08003387
 8003100:	08003387 	.word	0x08003387
 8003104:	0800316f 	.word	0x0800316f
 8003108:	08003387 	.word	0x08003387
 800310c:	08003387 	.word	0x08003387
 8003110:	08003387 	.word	0x08003387
 8003114:	08003387 	.word	0x08003387
 8003118:	08003387 	.word	0x08003387
 800311c:	08003387 	.word	0x08003387
 8003120:	08003387 	.word	0x08003387
 8003124:	08003175 	.word	0x08003175
 8003128:	08003387 	.word	0x08003387
 800312c:	08003387 	.word	0x08003387
 8003130:	08003387 	.word	0x08003387
 8003134:	08003387 	.word	0x08003387
 8003138:	08003387 	.word	0x08003387
 800313c:	08003387 	.word	0x08003387
 8003140:	08003387 	.word	0x08003387
 8003144:	0800317b 	.word	0x0800317b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003148:	4b94      	ldr	r3, [pc, #592]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d009      	beq.n	8003168 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003154:	4b91      	ldr	r3, [pc, #580]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	08db      	lsrs	r3, r3, #3
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	4a90      	ldr	r2, [pc, #576]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003160:	fa22 f303 	lsr.w	r3, r2, r3
 8003164:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003166:	e111      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003168:	4b8d      	ldr	r3, [pc, #564]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800316a:	61bb      	str	r3, [r7, #24]
      break;
 800316c:	e10e      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800316e:	4b8d      	ldr	r3, [pc, #564]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003170:	61bb      	str	r3, [r7, #24]
      break;
 8003172:	e10b      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003174:	4b8c      	ldr	r3, [pc, #560]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003176:	61bb      	str	r3, [r7, #24]
      break;
 8003178:	e108      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800317a:	4b88      	ldr	r3, [pc, #544]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003184:	4b85      	ldr	r3, [pc, #532]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003188:	091b      	lsrs	r3, r3, #4
 800318a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800318e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003190:	4b82      	ldr	r3, [pc, #520]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003194:	f003 0301 	and.w	r3, r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800319a:	4b80      	ldr	r3, [pc, #512]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800319e:	08db      	lsrs	r3, r3, #3
 80031a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	fb02 f303 	mul.w	r3, r2, r3
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80e1 	beq.w	8003380 <HAL_RCC_GetSysClockFreq+0x2b8>
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	f000 8083 	beq.w	80032cc <HAL_RCC_GetSysClockFreq+0x204>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	f200 80a1 	bhi.w	8003310 <HAL_RCC_GetSysClockFreq+0x248>
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <HAL_RCC_GetSysClockFreq+0x114>
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d056      	beq.n	8003288 <HAL_RCC_GetSysClockFreq+0x1c0>
 80031da:	e099      	b.n	8003310 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031dc:	4b6f      	ldr	r3, [pc, #444]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0320 	and.w	r3, r3, #32
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d02d      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031e8:	4b6c      	ldr	r3, [pc, #432]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	08db      	lsrs	r3, r3, #3
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	4a6b      	ldr	r2, [pc, #428]	@ (80033a0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
 80031f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	ee07 3a90 	vmov	s15, r3
 8003200:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b62      	ldr	r3, [pc, #392]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a02 	vldr	s12, [r7, #8]
 8003226:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003242:	e087      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80033b0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b51      	ldr	r3, [pc, #324]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	ed97 6a02 	vldr	s12, [r7, #8]
 800326a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800326e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003286:	e065      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003296:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329a:	4b40      	ldr	r3, [pc, #256]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800329e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ca:	e043      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	ee07 3a90 	vmov	s15, r3
 80032d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80033b8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80032da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032de:	4b2f      	ldr	r3, [pc, #188]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e4>
 80032f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003302:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003306:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800330e:	e021      	b.n	8003354 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	ee07 3a90 	vmov	s15, r3
 8003316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800331a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80033b4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800331e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003322:	4b1e      	ldr	r3, [pc, #120]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003326:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003332:	ed97 6a02 	vldr	s12, [r7, #8]
 8003336:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80033ac <HAL_RCC_GetSysClockFreq+0x2e4>
 800333a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800333e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003352:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003354:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003358:	0a5b      	lsrs	r3, r3, #9
 800335a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800335e:	3301      	adds	r3, #1
 8003360:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	ee07 3a90 	vmov	s15, r3
 8003368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800336c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003378:	ee17 3a90 	vmov	r3, s15
 800337c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800337e:	e005      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003380:	2300      	movs	r3, #0
 8003382:	61bb      	str	r3, [r7, #24]
      break;
 8003384:	e002      	b.n	800338c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003386:	4b07      	ldr	r3, [pc, #28]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003388:	61bb      	str	r3, [r7, #24]
      break;
 800338a:	bf00      	nop
  }

  return sysclockfreq;
 800338c:	69bb      	ldr	r3, [r7, #24]
}
 800338e:	4618      	mov	r0, r3
 8003390:	3724      	adds	r7, #36	@ 0x24
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	58024400 	.word	0x58024400
 80033a0:	03d09000 	.word	0x03d09000
 80033a4:	003d0900 	.word	0x003d0900
 80033a8:	007a1200 	.word	0x007a1200
 80033ac:	46000000 	.word	0x46000000
 80033b0:	4c742400 	.word	0x4c742400
 80033b4:	4a742400 	.word	0x4a742400
 80033b8:	4af42400 	.word	0x4af42400

080033bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80033c2:	f7ff fe81 	bl	80030c8 <HAL_RCC_GetSysClockFreq>
 80033c6:	4602      	mov	r2, r0
 80033c8:	4b10      	ldr	r3, [pc, #64]	@ (800340c <HAL_RCC_GetHCLKFreq+0x50>)
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	0a1b      	lsrs	r3, r3, #8
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	490f      	ldr	r1, [pc, #60]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x54>)
 80033d4:	5ccb      	ldrb	r3, [r1, r3]
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	fa22 f303 	lsr.w	r3, r2, r3
 80033de:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033e0:	4b0a      	ldr	r3, [pc, #40]	@ (800340c <HAL_RCC_GetHCLKFreq+0x50>)
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	4a09      	ldr	r2, [pc, #36]	@ (8003410 <HAL_RCC_GetHCLKFreq+0x54>)
 80033ea:	5cd3      	ldrb	r3, [r2, r3]
 80033ec:	f003 031f 	and.w	r3, r3, #31
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	fa22 f303 	lsr.w	r3, r2, r3
 80033f6:	4a07      	ldr	r2, [pc, #28]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x58>)
 80033f8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033fa:	4a07      	ldr	r2, [pc, #28]	@ (8003418 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003400:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <HAL_RCC_GetHCLKFreq+0x58>)
 8003402:	681b      	ldr	r3, [r3, #0]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	58024400 	.word	0x58024400
 8003410:	0800d174 	.word	0x0800d174
 8003414:	24000004 	.word	0x24000004
 8003418:	24000000 	.word	0x24000000

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003420:	f7ff ffcc 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b06      	ldr	r3, [pc, #24]	@ (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003428:	69db      	ldr	r3, [r3, #28]
 800342a:	091b      	lsrs	r3, r3, #4
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4904      	ldr	r1, [pc, #16]	@ (8003444 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	f003 031f 	and.w	r3, r3, #31
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800343c:	4618      	mov	r0, r3
 800343e:	bd80      	pop	{r7, pc}
 8003440:	58024400 	.word	0x58024400
 8003444:	0800d174 	.word	0x0800d174

08003448 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800344c:	f7ff ffb6 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8003450:	4602      	mov	r2, r0
 8003452:	4b06      	ldr	r3, [pc, #24]	@ (800346c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	f003 0307 	and.w	r3, r3, #7
 800345c:	4904      	ldr	r1, [pc, #16]	@ (8003470 <HAL_RCC_GetPCLK2Freq+0x28>)
 800345e:	5ccb      	ldrb	r3, [r1, r3]
 8003460:	f003 031f 	and.w	r3, r3, #31
 8003464:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003468:	4618      	mov	r0, r3
 800346a:	bd80      	pop	{r7, pc}
 800346c:	58024400 	.word	0x58024400
 8003470:	0800d174 	.word	0x0800d174

08003474 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003474:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003478:	b0ca      	sub	sp, #296	@ 0x128
 800347a:	af00      	add	r7, sp, #0
 800347c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003480:	2300      	movs	r3, #0
 8003482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003486:	2300      	movs	r3, #0
 8003488:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003498:	2500      	movs	r5, #0
 800349a:	ea54 0305 	orrs.w	r3, r4, r5
 800349e:	d049      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034a6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034aa:	d02f      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80034ac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80034b0:	d828      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034b6:	d01a      	beq.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80034b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80034bc:	d822      	bhi.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80034c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034c6:	d007      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034c8:	e01c      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034ca:	4bb8      	ldr	r3, [pc, #736]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034ce:	4ab7      	ldr	r2, [pc, #732]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034d6:	e01a      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034dc:	3308      	adds	r3, #8
 80034de:	2102      	movs	r1, #2
 80034e0:	4618      	mov	r0, r3
 80034e2:	f002 fb61 	bl	8005ba8 <RCCEx_PLL2_Config>
 80034e6:	4603      	mov	r3, r0
 80034e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ec:	e00f      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034f2:	3328      	adds	r3, #40	@ 0x28
 80034f4:	2102      	movs	r1, #2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f002 fc08 	bl	8005d0c <RCCEx_PLL3_Config>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003502:	e004      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800350a:	e000      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800350c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10a      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003516:	4ba5      	ldr	r3, [pc, #660]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003518:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800351a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800351e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003524:	4aa1      	ldr	r2, [pc, #644]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6513      	str	r3, [r2, #80]	@ 0x50
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003530:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003540:	f04f 0900 	mov.w	r9, #0
 8003544:	ea58 0309 	orrs.w	r3, r8, r9
 8003548:	d047      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003550:	2b04      	cmp	r3, #4
 8003552:	d82a      	bhi.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003554:	a201      	add	r2, pc, #4	@ (adr r2, 800355c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800355a:	bf00      	nop
 800355c:	08003571 	.word	0x08003571
 8003560:	0800357f 	.word	0x0800357f
 8003564:	08003595 	.word	0x08003595
 8003568:	080035b3 	.word	0x080035b3
 800356c:	080035b3 	.word	0x080035b3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003570:	4b8e      	ldr	r3, [pc, #568]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003574:	4a8d      	ldr	r2, [pc, #564]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003576:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800357a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800357c:	e01a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800357e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003582:	3308      	adds	r3, #8
 8003584:	2100      	movs	r1, #0
 8003586:	4618      	mov	r0, r3
 8003588:	f002 fb0e 	bl	8005ba8 <RCCEx_PLL2_Config>
 800358c:	4603      	mov	r3, r0
 800358e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003592:	e00f      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003598:	3328      	adds	r3, #40	@ 0x28
 800359a:	2100      	movs	r1, #0
 800359c:	4618      	mov	r0, r3
 800359e:	f002 fbb5 	bl	8005d0c <RCCEx_PLL3_Config>
 80035a2:	4603      	mov	r3, r0
 80035a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80035b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10a      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80035bc:	4b7b      	ldr	r3, [pc, #492]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c0:	f023 0107 	bic.w	r1, r3, #7
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ca:	4a78      	ldr	r2, [pc, #480]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80035d0:	e003      	b.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80035e6:	f04f 0b00 	mov.w	fp, #0
 80035ea:	ea5a 030b 	orrs.w	r3, sl, fp
 80035ee:	d04c      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035fa:	d030      	beq.n	800365e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003600:	d829      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003602:	2bc0      	cmp	r3, #192	@ 0xc0
 8003604:	d02d      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003606:	2bc0      	cmp	r3, #192	@ 0xc0
 8003608:	d825      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800360a:	2b80      	cmp	r3, #128	@ 0x80
 800360c:	d018      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800360e:	2b80      	cmp	r3, #128	@ 0x80
 8003610:	d821      	bhi.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003616:	2b40      	cmp	r3, #64	@ 0x40
 8003618:	d007      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800361a:	e01c      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800361c:	4b63      	ldr	r3, [pc, #396]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800361e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003620:	4a62      	ldr	r2, [pc, #392]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003626:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003628:	e01c      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362e:	3308      	adds	r3, #8
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f002 fab8 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800363e:	e011      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003640:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003644:	3328      	adds	r3, #40	@ 0x28
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f002 fb5f 	bl	8005d0c <RCCEx_PLL3_Config>
 800364e:	4603      	mov	r3, r0
 8003650:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003654:	e006      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800365c:	e002      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800365e:	bf00      	nop
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003664:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10a      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800366c:	4b4f      	ldr	r3, [pc, #316]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800366e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003670:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003674:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367a:	4a4c      	ldr	r2, [pc, #304]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800367c:	430b      	orrs	r3, r1
 800367e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003680:	e003      	b.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800368a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003696:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800369a:	2300      	movs	r3, #0
 800369c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80036a0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d053      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036b6:	d035      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80036b8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80036bc:	d82e      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036be:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036c2:	d031      	beq.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80036c4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80036c8:	d828      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036ce:	d01a      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80036d4:	d822      	bhi.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036da:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036de:	d007      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036e0:	e01c      	b.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e2:	4b32      	ldr	r3, [pc, #200]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	4a31      	ldr	r2, [pc, #196]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ee:	e01c      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	3308      	adds	r3, #8
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f002 fa55 	bl	8005ba8 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003704:	e011      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	3328      	adds	r3, #40	@ 0x28
 800370c:	2100      	movs	r1, #0
 800370e:	4618      	mov	r0, r3
 8003710:	f002 fafc 	bl	8005d0c <RCCEx_PLL3_Config>
 8003714:	4603      	mov	r3, r0
 8003716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800371a:	e006      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003722:	e002      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003724:	bf00      	nop
 8003726:	e000      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003728:	bf00      	nop
    }

    if (ret == HAL_OK)
 800372a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800372e:	2b00      	cmp	r3, #0
 8003730:	d10b      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003732:	4b1e      	ldr	r3, [pc, #120]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003734:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003736:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800373a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003742:	4a1a      	ldr	r2, [pc, #104]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003744:	430b      	orrs	r3, r1
 8003746:	6593      	str	r3, [r2, #88]	@ 0x58
 8003748:	e003      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800374a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800375e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003762:	2300      	movs	r3, #0
 8003764:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003768:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800376c:	460b      	mov	r3, r1
 800376e:	4313      	orrs	r3, r2
 8003770:	d056      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800377a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800377e:	d038      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003780:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003784:	d831      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003786:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800378a:	d034      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800378c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003790:	d82b      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003792:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003796:	d01d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003798:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800379c:	d825      	bhi.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80037a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037a6:	d00a      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80037a8:	e01f      	b.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 80037aa:	bf00      	nop
 80037ac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037b0:	4ba2      	ldr	r3, [pc, #648]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	4aa1      	ldr	r2, [pc, #644]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037bc:	e01c      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c2:	3308      	adds	r3, #8
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f002 f9ee 	bl	8005ba8 <RCCEx_PLL2_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037d2:	e011      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	3328      	adds	r3, #40	@ 0x28
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fa95 	bl	8005d0c <RCCEx_PLL3_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037e8:	e006      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037f0:	e002      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037f2:	bf00      	nop
 80037f4:	e000      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003800:	4b8e      	ldr	r3, [pc, #568]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003802:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003804:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003810:	4a8a      	ldr	r2, [pc, #552]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003812:	430b      	orrs	r3, r1
 8003814:	6593      	str	r3, [r2, #88]	@ 0x58
 8003816:	e003      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800381c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800382c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003830:	2300      	movs	r3, #0
 8003832:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003836:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800383a:	460b      	mov	r3, r1
 800383c:	4313      	orrs	r3, r2
 800383e:	d03a      	beq.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003846:	2b30      	cmp	r3, #48	@ 0x30
 8003848:	d01f      	beq.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800384a:	2b30      	cmp	r3, #48	@ 0x30
 800384c:	d819      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800384e:	2b20      	cmp	r3, #32
 8003850:	d00c      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003852:	2b20      	cmp	r3, #32
 8003854:	d815      	bhi.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d019      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800385a:	2b10      	cmp	r3, #16
 800385c:	d111      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800385e:	4b77      	ldr	r3, [pc, #476]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003862:	4a76      	ldr	r2, [pc, #472]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800386a:	e011      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	3308      	adds	r3, #8
 8003872:	2102      	movs	r1, #2
 8003874:	4618      	mov	r0, r3
 8003876:	f002 f997 	bl	8005ba8 <RCCEx_PLL2_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003880:	e006      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003888:	e002      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800388a:	bf00      	nop
 800388c:	e000      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800388e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003898:	4b68      	ldr	r3, [pc, #416]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800389c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80038a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038a6:	4a65      	ldr	r2, [pc, #404]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038a8:	430b      	orrs	r3, r1
 80038aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038ac:	e003      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80038c2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80038c6:	2300      	movs	r3, #0
 80038c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80038cc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4313      	orrs	r3, r2
 80038d4:	d051      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e0:	d035      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80038e6:	d82e      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038e8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038ec:	d031      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038f2:	d828      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038f8:	d01a      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038fe:	d822      	bhi.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003908:	d007      	beq.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800390a:	e01c      	b.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800390c:	4b4b      	ldr	r3, [pc, #300]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800390e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003910:	4a4a      	ldr	r2, [pc, #296]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003916:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003918:	e01c      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800391a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391e:	3308      	adds	r3, #8
 8003920:	2100      	movs	r1, #0
 8003922:	4618      	mov	r0, r3
 8003924:	f002 f940 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003928:	4603      	mov	r3, r0
 800392a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800392e:	e011      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003934:	3328      	adds	r3, #40	@ 0x28
 8003936:	2100      	movs	r1, #0
 8003938:	4618      	mov	r0, r3
 800393a:	f002 f9e7 	bl	8005d0c <RCCEx_PLL3_Config>
 800393e:	4603      	mov	r3, r0
 8003940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003944:	e006      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800394c:	e002      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800394e:	bf00      	nop
 8003950:	e000      	b.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003952:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800395c:	4b37      	ldr	r3, [pc, #220]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800395e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003960:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003964:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003968:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800396a:	4a34      	ldr	r2, [pc, #208]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800396c:	430b      	orrs	r3, r1
 800396e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003970:	e003      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003976:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800397a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003986:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800398a:	2300      	movs	r3, #0
 800398c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003990:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003994:	460b      	mov	r3, r1
 8003996:	4313      	orrs	r3, r2
 8003998:	d056      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039a4:	d033      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80039a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039aa:	d82c      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b0:	d02f      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80039b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039b6:	d826      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039bc:	d02b      	beq.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80039be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80039c2:	d820      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c8:	d012      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039ce:	d81a      	bhi.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d022      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d8:	d115      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	3308      	adds	r3, #8
 80039e0:	2101      	movs	r1, #1
 80039e2:	4618      	mov	r0, r3
 80039e4:	f002 f8e0 	bl	8005ba8 <RCCEx_PLL2_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039ee:	e015      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f4:	3328      	adds	r3, #40	@ 0x28
 80039f6:	2101      	movs	r1, #1
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 f987 	bl	8005d0c <RCCEx_PLL3_Config>
 80039fe:	4603      	mov	r3, r0
 8003a00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003a04:	e00a      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a0c:	e006      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a0e:	bf00      	nop
 8003a10:	e004      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a12:	bf00      	nop
 8003a14:	e002      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a16:	bf00      	nop
 8003a18:	e000      	b.n	8003a1c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003a1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10d      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a24:	4b05      	ldr	r3, [pc, #20]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a28:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a32:	4a02      	ldr	r2, [pc, #8]	@ (8003a3c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a38:	e006      	b.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a3a:	bf00      	nop
 8003a3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a50:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a5e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4313      	orrs	r3, r2
 8003a66:	d055      	beq.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a6c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a74:	d033      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a76:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a7a:	d82c      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a80:	d02f      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a86:	d826      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a8c:	d02b      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a8e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a92:	d820      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a98:	d012      	beq.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a9e:	d81a      	bhi.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d022      	beq.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003aa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003aa8:	d115      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aae:	3308      	adds	r3, #8
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f002 f878 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003abe:	e015      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac4:	3328      	adds	r3, #40	@ 0x28
 8003ac6:	2101      	movs	r1, #1
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f002 f91f 	bl	8005d0c <RCCEx_PLL3_Config>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ad4:	e00a      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003adc:	e006      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ade:	bf00      	nop
 8003ae0:	e004      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae2:	bf00      	nop
 8003ae4:	e002      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ae6:	bf00      	nop
 8003ae8:	e000      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d10b      	bne.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003af4:	4ba3      	ldr	r3, [pc, #652]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b04:	4a9f      	ldr	r2, [pc, #636]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	430b      	orrs	r3, r1
 8003b08:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b0a:	e003      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b1c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003b20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003b2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b2e:	460b      	mov	r3, r1
 8003b30:	4313      	orrs	r3, r2
 8003b32:	d037      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b3e:	d00e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b40:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b44:	d816      	bhi.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d018      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b4e:	d111      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b50:	4b8c      	ldr	r3, [pc, #560]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4a8b      	ldr	r2, [pc, #556]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b56:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b5c:	e00f      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	3308      	adds	r3, #8
 8003b64:	2101      	movs	r1, #1
 8003b66:	4618      	mov	r0, r3
 8003b68:	f002 f81e 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b72:	e004      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b7a:	e000      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10a      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b86:	4b7f      	ldr	r3, [pc, #508]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b8a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b94:	4a7b      	ldr	r2, [pc, #492]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b96:	430b      	orrs	r3, r1
 8003b98:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b9a:	e003      	b.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ba0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003bb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003bba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	d039      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d81c      	bhi.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003bce:	a201      	add	r2, pc, #4	@ (adr r2, 8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c11 	.word	0x08003c11
 8003bd8:	08003be5 	.word	0x08003be5
 8003bdc:	08003bf3 	.word	0x08003bf3
 8003be0:	08003c11 	.word	0x08003c11
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003be4:	4b67      	ldr	r3, [pc, #412]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	4a66      	ldr	r2, [pc, #408]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bf0:	e00f      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f001 ffd4 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003c00:	4603      	mov	r3, r0
 8003c02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003c06:	e004      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c0e:	e000      	b.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003c10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10a      	bne.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003c1a:	4b5a      	ldr	r3, [pc, #360]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c1e:	f023 0103 	bic.w	r1, r3, #3
 8003c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c28:	4a56      	ldr	r2, [pc, #344]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c2e:	e003      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c4e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c52:	460b      	mov	r3, r1
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f000 809f 	beq.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a4a      	ldr	r2, [pc, #296]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c64:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c66:	f7fd fb2f 	bl	80012c8 <HAL_GetTick>
 8003c6a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c70:	f7fd fb2a 	bl	80012c8 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b64      	cmp	r3, #100	@ 0x64
 8003c7e:	d903      	bls.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c86:	e005      	b.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c88:	4b3f      	ldr	r3, [pc, #252]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d0ed      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d179      	bne.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c9c:	4b39      	ldr	r3, [pc, #228]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ca8:	4053      	eors	r3, r2
 8003caa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d015      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003cb2:	4b34      	ldr	r3, [pc, #208]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003cbe:	4b31      	ldr	r3, [pc, #196]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cc2:	4a30      	ldr	r2, [pc, #192]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cc8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003cca:	4b2e      	ldr	r3, [pc, #184]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cce:	4a2d      	ldr	r2, [pc, #180]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cd4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cd6:	4a2b      	ldr	r2, [pc, #172]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003cdc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ce6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003cea:	d118      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cec:	f7fd faec 	bl	80012c8 <HAL_GetTick>
 8003cf0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cf4:	e00d      	b.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cf6:	f7fd fae7 	bl	80012c8 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d00:	1ad2      	subs	r2, r2, r3
 8003d02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003d06:	429a      	cmp	r2, r3
 8003d08:	d903      	bls.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003d10:	e005      	b.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003d12:	4b1c      	ldr	r3, [pc, #112]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0eb      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d129      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003d36:	d10e      	bne.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d38:	4b12      	ldr	r3, [pc, #72]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d44:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d48:	091a      	lsrs	r2, r3, #4
 8003d4a:	4b10      	ldr	r3, [pc, #64]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d50:	430b      	orrs	r3, r1
 8003d52:	6113      	str	r3, [r2, #16]
 8003d54:	e005      	b.n	8003d62 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d56:	4b0b      	ldr	r3, [pc, #44]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d60:	6113      	str	r3, [r2, #16]
 8003d62:	4b08      	ldr	r3, [pc, #32]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d64:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d72:	4a04      	ldr	r2, [pc, #16]	@ (8003d84 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d74:	430b      	orrs	r3, r1
 8003d76:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d78:	e00e      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d82:	e009      	b.n	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d84:	58024400 	.word	0x58024400
 8003d88:	58024800 	.word	0x58024800
 8003d8c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f002 0301 	and.w	r3, r2, #1
 8003da4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003da8:	2300      	movs	r3, #0
 8003daa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003dae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4313      	orrs	r3, r2
 8003db6:	f000 8089 	beq.w	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dbe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003dc0:	2b28      	cmp	r3, #40	@ 0x28
 8003dc2:	d86b      	bhi.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003dc4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dca:	bf00      	nop
 8003dcc:	08003ea5 	.word	0x08003ea5
 8003dd0:	08003e9d 	.word	0x08003e9d
 8003dd4:	08003e9d 	.word	0x08003e9d
 8003dd8:	08003e9d 	.word	0x08003e9d
 8003ddc:	08003e9d 	.word	0x08003e9d
 8003de0:	08003e9d 	.word	0x08003e9d
 8003de4:	08003e9d 	.word	0x08003e9d
 8003de8:	08003e9d 	.word	0x08003e9d
 8003dec:	08003e71 	.word	0x08003e71
 8003df0:	08003e9d 	.word	0x08003e9d
 8003df4:	08003e9d 	.word	0x08003e9d
 8003df8:	08003e9d 	.word	0x08003e9d
 8003dfc:	08003e9d 	.word	0x08003e9d
 8003e00:	08003e9d 	.word	0x08003e9d
 8003e04:	08003e9d 	.word	0x08003e9d
 8003e08:	08003e9d 	.word	0x08003e9d
 8003e0c:	08003e87 	.word	0x08003e87
 8003e10:	08003e9d 	.word	0x08003e9d
 8003e14:	08003e9d 	.word	0x08003e9d
 8003e18:	08003e9d 	.word	0x08003e9d
 8003e1c:	08003e9d 	.word	0x08003e9d
 8003e20:	08003e9d 	.word	0x08003e9d
 8003e24:	08003e9d 	.word	0x08003e9d
 8003e28:	08003e9d 	.word	0x08003e9d
 8003e2c:	08003ea5 	.word	0x08003ea5
 8003e30:	08003e9d 	.word	0x08003e9d
 8003e34:	08003e9d 	.word	0x08003e9d
 8003e38:	08003e9d 	.word	0x08003e9d
 8003e3c:	08003e9d 	.word	0x08003e9d
 8003e40:	08003e9d 	.word	0x08003e9d
 8003e44:	08003e9d 	.word	0x08003e9d
 8003e48:	08003e9d 	.word	0x08003e9d
 8003e4c:	08003ea5 	.word	0x08003ea5
 8003e50:	08003e9d 	.word	0x08003e9d
 8003e54:	08003e9d 	.word	0x08003e9d
 8003e58:	08003e9d 	.word	0x08003e9d
 8003e5c:	08003e9d 	.word	0x08003e9d
 8003e60:	08003e9d 	.word	0x08003e9d
 8003e64:	08003e9d 	.word	0x08003e9d
 8003e68:	08003e9d 	.word	0x08003e9d
 8003e6c:	08003ea5 	.word	0x08003ea5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e74:	3308      	adds	r3, #8
 8003e76:	2101      	movs	r1, #1
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f001 fe95 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e84:	e00f      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e8a:	3328      	adds	r3, #40	@ 0x28
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 ff3c 	bl	8005d0c <RCCEx_PLL3_Config>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e9a:	e004      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10a      	bne.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003eae:	4bbf      	ldr	r3, [pc, #764]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003eb2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ebc:	4abb      	ldr	r2, [pc, #748]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ebe:	430b      	orrs	r3, r1
 8003ec0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ec2:	e003      	b.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ec4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ec8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f002 0302 	and.w	r3, r2, #2
 8003ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ee2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	d041      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ef2:	2b05      	cmp	r3, #5
 8003ef4:	d824      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8003efc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003efc:	08003f49 	.word	0x08003f49
 8003f00:	08003f15 	.word	0x08003f15
 8003f04:	08003f2b 	.word	0x08003f2b
 8003f08:	08003f49 	.word	0x08003f49
 8003f0c:	08003f49 	.word	0x08003f49
 8003f10:	08003f49 	.word	0x08003f49
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f001 fe43 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f28:	e00f      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	2101      	movs	r1, #1
 8003f32:	4618      	mov	r0, r3
 8003f34:	f001 feea 	bl	8005d0c <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e004      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d10a      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f52:	4b96      	ldr	r3, [pc, #600]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f56:	f023 0107 	bic.w	r1, r3, #7
 8003f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f60:	4a92      	ldr	r2, [pc, #584]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f66:	e003      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	f002 0304 	and.w	r3, r2, #4
 8003f7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f80:	2300      	movs	r3, #0
 8003f82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f86:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	d044      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f98:	2b05      	cmp	r3, #5
 8003f9a:	d825      	bhi.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003ff1 	.word	0x08003ff1
 8003fa8:	08003fbd 	.word	0x08003fbd
 8003fac:	08003fd3 	.word	0x08003fd3
 8003fb0:	08003ff1 	.word	0x08003ff1
 8003fb4:	08003ff1 	.word	0x08003ff1
 8003fb8:	08003ff1 	.word	0x08003ff1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc0:	3308      	adds	r3, #8
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f001 fdef 	bl	8005ba8 <RCCEx_PLL2_Config>
 8003fca:	4603      	mov	r3, r0
 8003fcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fd0:	e00f      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd6:	3328      	adds	r3, #40	@ 0x28
 8003fd8:	2101      	movs	r1, #1
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f001 fe96 	bl	8005d0c <RCCEx_PLL3_Config>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fe6:	e004      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fee:	e000      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d10b      	bne.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003ffa:	4b6c      	ldr	r3, [pc, #432]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffe:	f023 0107 	bic.w	r1, r3, #7
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400a:	4a68      	ldr	r2, [pc, #416]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800400c:	430b      	orrs	r3, r1
 800400e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004010:	e003      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800401a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800401e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004022:	f002 0320 	and.w	r3, r2, #32
 8004026:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800402a:	2300      	movs	r3, #0
 800402c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004030:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004034:	460b      	mov	r3, r1
 8004036:	4313      	orrs	r3, r2
 8004038:	d055      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004046:	d033      	beq.n	80040b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004048:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800404c:	d82c      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800404e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004052:	d02f      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004054:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004058:	d826      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800405a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800405e:	d02b      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004060:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004064:	d820      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800406a:	d012      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004070:	d81a      	bhi.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004072:	2b00      	cmp	r3, #0
 8004074:	d022      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8004076:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800407a:	d115      	bne.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800407c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004080:	3308      	adds	r3, #8
 8004082:	2100      	movs	r1, #0
 8004084:	4618      	mov	r0, r3
 8004086:	f001 fd8f 	bl	8005ba8 <RCCEx_PLL2_Config>
 800408a:	4603      	mov	r3, r0
 800408c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004090:	e015      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	3328      	adds	r3, #40	@ 0x28
 8004098:	2102      	movs	r1, #2
 800409a:	4618      	mov	r0, r3
 800409c:	f001 fe36 	bl	8005d0c <RCCEx_PLL3_Config>
 80040a0:	4603      	mov	r3, r0
 80040a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80040a6:	e00a      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ae:	e006      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b0:	bf00      	nop
 80040b2:	e004      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b4:	bf00      	nop
 80040b6:	e002      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040b8:	bf00      	nop
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80040bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040c6:	4b39      	ldr	r3, [pc, #228]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	4a35      	ldr	r2, [pc, #212]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	6553      	str	r3, [r2, #84]	@ 0x54
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040f6:	2300      	movs	r3, #0
 80040f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004100:	460b      	mov	r3, r1
 8004102:	4313      	orrs	r3, r2
 8004104:	d058      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800410a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004112:	d033      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004114:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004118:	d82c      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800411a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800411e:	d02f      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004124:	d826      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004126:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800412a:	d02b      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800412c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004130:	d820      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004132:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004136:	d012      	beq.n	800415e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800413c:	d81a      	bhi.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800413e:	2b00      	cmp	r3, #0
 8004140:	d022      	beq.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004142:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004146:	d115      	bne.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414c:	3308      	adds	r3, #8
 800414e:	2100      	movs	r1, #0
 8004150:	4618      	mov	r0, r3
 8004152:	f001 fd29 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004156:	4603      	mov	r3, r0
 8004158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800415c:	e015      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	3328      	adds	r3, #40	@ 0x28
 8004164:	2102      	movs	r1, #2
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fdd0 	bl	8005d0c <RCCEx_PLL3_Config>
 800416c:	4603      	mov	r3, r0
 800416e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004172:	e00a      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800417a:	e006      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800417c:	bf00      	nop
 800417e:	e004      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004180:	bf00      	nop
 8004182:	e002      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004184:	bf00      	nop
 8004186:	e000      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004188:	bf00      	nop
    }

    if (ret == HAL_OK)
 800418a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10e      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004192:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800419a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800419e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041a2:	4a02      	ldr	r2, [pc, #8]	@ (80041ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041a4:	430b      	orrs	r3, r1
 80041a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80041a8:	e006      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80041aa:	bf00      	nop
 80041ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80041c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80041c8:	2300      	movs	r3, #0
 80041ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80041ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80041d2:	460b      	mov	r3, r1
 80041d4:	4313      	orrs	r3, r2
 80041d6:	d055      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041e4:	d033      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80041ea:	d82c      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f0:	d02f      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f6:	d826      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041fc:	d02b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004202:	d820      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004204:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004208:	d012      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800420a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800420e:	d81a      	bhi.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004214:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004218:	d115      	bne.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	3308      	adds	r3, #8
 8004220:	2100      	movs	r1, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fcc0 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004228:	4603      	mov	r3, r0
 800422a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800422e:	e015      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	3328      	adds	r3, #40	@ 0x28
 8004236:	2102      	movs	r1, #2
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fd67 	bl	8005d0c <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004244:	e00a      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800424c:	e006      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800424e:	bf00      	nop
 8004250:	e004      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004252:	bf00      	nop
 8004254:	e002      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004256:	bf00      	nop
 8004258:	e000      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10b      	bne.n	800427c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004264:	4ba1      	ldr	r3, [pc, #644]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004274:	4a9d      	ldr	r2, [pc, #628]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004276:	430b      	orrs	r3, r1
 8004278:	6593      	str	r3, [r2, #88]	@ 0x58
 800427a:	e003      	b.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800427c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004280:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 0308 	and.w	r3, r2, #8
 8004290:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800429a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d01e      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b0:	d10c      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b6:	3328      	adds	r3, #40	@ 0x28
 80042b8:	2102      	movs	r1, #2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 fd26 	bl	8005d0c <RCCEx_PLL3_Config>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042cc:	4b87      	ldr	r3, [pc, #540]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042dc:	4a83      	ldr	r2, [pc, #524]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042de:	430b      	orrs	r3, r1
 80042e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ea:	f002 0310 	and.w	r3, r2, #16
 80042ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042f2:	2300      	movs	r3, #0
 80042f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d01e      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800430a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430e:	d10c      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004314:	3328      	adds	r3, #40	@ 0x28
 8004316:	2102      	movs	r1, #2
 8004318:	4618      	mov	r0, r3
 800431a:	f001 fcf7 	bl	8005d0c <RCCEx_PLL3_Config>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800432a:	4b70      	ldr	r3, [pc, #448]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800432c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800432e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800433a:	4a6c      	ldr	r2, [pc, #432]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800433c:	430b      	orrs	r3, r1
 800433e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004348:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800434c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004350:	2300      	movs	r3, #0
 8004352:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004356:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800435a:	460b      	mov	r3, r1
 800435c:	4313      	orrs	r3, r2
 800435e:	d03e      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004364:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004368:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800436c:	d022      	beq.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800436e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004372:	d81b      	bhi.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800437c:	d00b      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800437e:	e015      	b.n	80043ac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004384:	3308      	adds	r3, #8
 8004386:	2100      	movs	r1, #0
 8004388:	4618      	mov	r0, r3
 800438a:	f001 fc0d 	bl	8005ba8 <RCCEx_PLL2_Config>
 800438e:	4603      	mov	r3, r0
 8004390:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004394:	e00f      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 fcb4 	bl	8005d0c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80043aa:	e004      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043b2:	e000      	b.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80043b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d10b      	bne.n	80043d6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80043be:	4b4b      	ldr	r3, [pc, #300]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80043ce:	4a47      	ldr	r2, [pc, #284]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d0:	430b      	orrs	r3, r1
 80043d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80043d4:	e003      	b.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80043ea:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043ec:	2300      	movs	r3, #0
 80043ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043f0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d03b      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004402:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004406:	d01f      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004408:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800440c:	d818      	bhi.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800440e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004412:	d003      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004414:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004418:	d007      	beq.n	800442a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800441a:	e011      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800441c:	4b33      	ldr	r3, [pc, #204]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	4a32      	ldr	r2, [pc, #200]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004422:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004426:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004428:	e00f      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800442a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442e:	3328      	adds	r3, #40	@ 0x28
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f001 fc6a 	bl	8005d0c <RCCEx_PLL3_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004446:	e000      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004448:	bf00      	nop
    }

    if (ret == HAL_OK)
 800444a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10b      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004452:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004454:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004456:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800445a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	4a22      	ldr	r2, [pc, #136]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004464:	430b      	orrs	r3, r1
 8004466:	6553      	str	r3, [r2, #84]	@ 0x54
 8004468:	e003      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800446e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800447a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800447e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004480:	2300      	movs	r3, #0
 8004482:	677b      	str	r3, [r7, #116]	@ 0x74
 8004484:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004488:	460b      	mov	r3, r1
 800448a:	4313      	orrs	r3, r2
 800448c:	d034      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800448e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004498:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800449c:	d007      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800449e:	e011      	b.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a0:	4b12      	ldr	r3, [pc, #72]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	4a11      	ldr	r2, [pc, #68]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044ac:	e00e      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b2:	3308      	adds	r3, #8
 80044b4:	2102      	movs	r1, #2
 80044b6:	4618      	mov	r0, r3
 80044b8:	f001 fb76 	bl	8005ba8 <RCCEx_PLL2_Config>
 80044bc:	4603      	mov	r3, r0
 80044be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80044c2:	e003      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80044ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044d4:	4b05      	ldr	r3, [pc, #20]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044e2:	4a02      	ldr	r2, [pc, #8]	@ (80044ec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044e4:	430b      	orrs	r3, r1
 80044e6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80044e8:	e006      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80044ea:	bf00      	nop
 80044ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004504:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004506:	2300      	movs	r3, #0
 8004508:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800450a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800450e:	460b      	mov	r3, r1
 8004510:	4313      	orrs	r3, r2
 8004512:	d00c      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004518:	3328      	adds	r3, #40	@ 0x28
 800451a:	2102      	movs	r1, #2
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fbf5 	bl	8005d0c <RCCEx_PLL3_Config>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d002      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004536:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800453a:	663b      	str	r3, [r7, #96]	@ 0x60
 800453c:	2300      	movs	r3, #0
 800453e:	667b      	str	r3, [r7, #100]	@ 0x64
 8004540:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004544:	460b      	mov	r3, r1
 8004546:	4313      	orrs	r3, r2
 8004548:	d038      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800454a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004552:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004556:	d018      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004558:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800455c:	d811      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800455e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004562:	d014      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004564:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004568:	d80b      	bhi.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d011      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800456e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004572:	d106      	bne.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004574:	4bc3      	ldr	r3, [pc, #780]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004578:	4ac2      	ldr	r2, [pc, #776]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800457a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800457e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004580:	e008      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004588:	e004      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800458a:	bf00      	nop
 800458c:	e002      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800458e:	bf00      	nop
 8004590:	e000      	b.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004592:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004598:	2b00      	cmp	r3, #0
 800459a:	d10b      	bne.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800459c:	4bb9      	ldr	r3, [pc, #740]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045a0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80045a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80045ac:	4ab5      	ldr	r2, [pc, #724]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ae:	430b      	orrs	r3, r1
 80045b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80045b2:	e003      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80045bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80045c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80045ca:	2300      	movs	r3, #0
 80045cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045ce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80045d8:	4baa      	ldr	r3, [pc, #680]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045dc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80045e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80045e6:	4aa7      	ldr	r2, [pc, #668]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80045f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80045fa:	2300      	movs	r3, #0
 80045fc:	657b      	str	r3, [r7, #84]	@ 0x54
 80045fe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004608:	4b9e      	ldr	r3, [pc, #632]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004610:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004614:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004618:	4a9a      	ldr	r2, [pc, #616]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800461a:	430b      	orrs	r3, r1
 800461c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800461e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800462a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800462c:	2300      	movs	r3, #0
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004630:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004634:	460b      	mov	r3, r1
 8004636:	4313      	orrs	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800463a:	4b92      	ldr	r3, [pc, #584]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800463c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800463e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004646:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004648:	4a8e      	ldr	r2, [pc, #568]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800464a:	430b      	orrs	r3, r1
 800464c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800464e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800465a:	643b      	str	r3, [r7, #64]	@ 0x40
 800465c:	2300      	movs	r3, #0
 800465e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004660:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004664:	460b      	mov	r3, r1
 8004666:	4313      	orrs	r3, r2
 8004668:	d00e      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800466a:	4b86      	ldr	r3, [pc, #536]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	4a85      	ldr	r2, [pc, #532]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004670:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004674:	6113      	str	r3, [r2, #16]
 8004676:	4b83      	ldr	r3, [pc, #524]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004678:	6919      	ldr	r1, [r3, #16]
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800467e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004682:	4a80      	ldr	r2, [pc, #512]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004694:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004696:	2300      	movs	r3, #0
 8004698:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800469a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d009      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80046a4:	4b77      	ldr	r3, [pc, #476]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80046ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046b2:	4a74      	ldr	r2, [pc, #464]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046b4:	430b      	orrs	r3, r1
 80046b6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80046b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80046c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046c6:	2300      	movs	r3, #0
 80046c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046ca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80046ce:	460b      	mov	r3, r1
 80046d0:	4313      	orrs	r3, r2
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80046d4:	4b6b      	ldr	r3, [pc, #428]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80046dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80046e4:	4a67      	ldr	r2, [pc, #412]	@ (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046e6:	430b      	orrs	r3, r1
 80046e8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	2100      	movs	r1, #0
 80046f4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046fc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004700:	460b      	mov	r3, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	d011      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	3308      	adds	r3, #8
 800470c:	2100      	movs	r1, #0
 800470e:	4618      	mov	r0, r3
 8004710:	f001 fa4a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800471a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004732:	2100      	movs	r1, #0
 8004734:	6239      	str	r1, [r7, #32]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	627b      	str	r3, [r7, #36]	@ 0x24
 800473c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004740:	460b      	mov	r3, r1
 8004742:	4313      	orrs	r3, r2
 8004744:	d011      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004746:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800474a:	3308      	adds	r3, #8
 800474c:	2101      	movs	r1, #1
 800474e:	4618      	mov	r0, r3
 8004750:	f001 fa2a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004754:	4603      	mov	r3, r0
 8004756:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800475a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475e:	2b00      	cmp	r3, #0
 8004760:	d003      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004762:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004766:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800476a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800476e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004772:	2100      	movs	r1, #0
 8004774:	61b9      	str	r1, [r7, #24]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004780:	460b      	mov	r3, r1
 8004782:	4313      	orrs	r3, r2
 8004784:	d011      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004786:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800478a:	3308      	adds	r3, #8
 800478c:	2102      	movs	r1, #2
 800478e:	4618      	mov	r0, r3
 8004790:	f001 fa0a 	bl	8005ba8 <RCCEx_PLL2_Config>
 8004794:	4603      	mov	r3, r0
 8004796:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800479a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80047aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b2:	2100      	movs	r1, #0
 80047b4:	6139      	str	r1, [r7, #16]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	617b      	str	r3, [r7, #20]
 80047bc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80047c0:	460b      	mov	r3, r1
 80047c2:	4313      	orrs	r3, r2
 80047c4:	d011      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80047c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ca:	3328      	adds	r3, #40	@ 0x28
 80047cc:	2100      	movs	r1, #0
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 fa9c 	bl	8005d0c <RCCEx_PLL3_Config>
 80047d4:	4603      	mov	r3, r0
 80047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80047da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	2100      	movs	r1, #0
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	f003 0310 	and.w	r3, r3, #16
 80047fa:	60fb      	str	r3, [r7, #12]
 80047fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004800:	460b      	mov	r3, r1
 8004802:	4313      	orrs	r3, r2
 8004804:	d011      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480a:	3328      	adds	r3, #40	@ 0x28
 800480c:	2101      	movs	r1, #1
 800480e:	4618      	mov	r0, r3
 8004810:	f001 fa7c 	bl	8005d0c <RCCEx_PLL3_Config>
 8004814:	4603      	mov	r3, r0
 8004816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800481a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004832:	2100      	movs	r1, #0
 8004834:	6039      	str	r1, [r7, #0]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	607b      	str	r3, [r7, #4]
 800483c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004840:	460b      	mov	r3, r1
 8004842:	4313      	orrs	r3, r2
 8004844:	d011      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	3328      	adds	r3, #40	@ 0x28
 800484c:	2102      	movs	r1, #2
 800484e:	4618      	mov	r0, r3
 8004850:	f001 fa5c 	bl	8005d0c <RCCEx_PLL3_Config>
 8004854:	4603      	mov	r3, r0
 8004856:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800485a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800486a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	e000      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
}
 8004878:	4618      	mov	r0, r3
 800487a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004884:	58024400 	.word	0x58024400

08004888 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b090      	sub	sp, #64	@ 0x40
 800488c:	af00      	add	r7, sp, #0
 800488e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004896:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800489a:	430b      	orrs	r3, r1
 800489c:	f040 8094 	bne.w	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80048a0:	4b9e      	ldr	r3, [pc, #632]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048a4:	f003 0307 	and.w	r3, r3, #7
 80048a8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	f200 8087 	bhi.w	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80048b2:	a201      	add	r2, pc, #4	@ (adr r2, 80048b8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	080048cd 	.word	0x080048cd
 80048bc:	080048f5 	.word	0x080048f5
 80048c0:	0800491d 	.word	0x0800491d
 80048c4:	080049b9 	.word	0x080049b9
 80048c8:	08004945 	.word	0x08004945
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80048cc:	4b93      	ldr	r3, [pc, #588]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048d8:	d108      	bne.n	80048ec <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80048da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80048de:	4618      	mov	r0, r3
 80048e0:	f001 f810 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80048e8:	f000 bd45 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80048ec:	2300      	movs	r3, #0
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80048f0:	f000 bd41 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80048f4:	4b89      	ldr	r3, [pc, #548]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048fc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004900:	d108      	bne.n	8004914 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004902:	f107 0318 	add.w	r3, r7, #24
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fd54 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800490c:	69bb      	ldr	r3, [r7, #24]
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004910:	f000 bd31 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004914:	2300      	movs	r3, #0
 8004916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004918:	f000 bd2d 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800491c:	4b7f      	ldr	r3, [pc, #508]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004928:	d108      	bne.n	800493c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800492a:	f107 030c 	add.w	r3, r7, #12
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fe94 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004938:	f000 bd1d 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004940:	f000 bd19 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004944:	4b75      	ldr	r3, [pc, #468]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004946:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004948:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800494c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800494e:	4b73      	ldr	r3, [pc, #460]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0304 	and.w	r3, r3, #4
 8004956:	2b04      	cmp	r3, #4
 8004958:	d10c      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800495a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800495c:	2b00      	cmp	r3, #0
 800495e:	d109      	bne.n	8004974 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004960:	4b6e      	ldr	r3, [pc, #440]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f003 0303 	and.w	r3, r3, #3
 800496a:	4a6d      	ldr	r2, [pc, #436]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800496c:	fa22 f303 	lsr.w	r3, r2, r3
 8004970:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004972:	e01f      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004974:	4b69      	ldr	r3, [pc, #420]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004980:	d106      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8004982:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004984:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004988:	d102      	bne.n	8004990 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800498a:	4b66      	ldr	r3, [pc, #408]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800498c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800498e:	e011      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004990:	4b62      	ldr	r3, [pc, #392]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800499c:	d106      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800499e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80049a4:	d102      	bne.n	80049ac <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80049a6:	4b60      	ldr	r3, [pc, #384]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80049a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049aa:	e003      	b.n	80049b4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80049b0:	f000 bce1 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80049b4:	f000 bcdf 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80049b8:	4b5c      	ldr	r3, [pc, #368]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80049ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049bc:	f000 bcdb 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80049c0:	2300      	movs	r3, #0
 80049c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80049c4:	f000 bcd7 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 80049c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049cc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 80049d0:	430b      	orrs	r3, r1
 80049d2:	f040 80ad 	bne.w	8004b30 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80049d6:	4b51      	ldr	r3, [pc, #324]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80049d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049da:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 80049de:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80049e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e6:	d056      	beq.n	8004a96 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80049e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049ee:	f200 8090 	bhi.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80049f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80049f6:	f000 8088 	beq.w	8004b0a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80049fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049fc:	2bc0      	cmp	r3, #192	@ 0xc0
 80049fe:	f200 8088 	bhi.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a04:	2b80      	cmp	r3, #128	@ 0x80
 8004a06:	d032      	beq.n	8004a6e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8004a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a0a:	2b80      	cmp	r3, #128	@ 0x80
 8004a0c:	f200 8081 	bhi.w	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8004a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d003      	beq.n	8004a1e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8004a16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a18:	2b40      	cmp	r3, #64	@ 0x40
 8004a1a:	d014      	beq.n	8004a46 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8004a1c:	e079      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004a1e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a2a:	d108      	bne.n	8004a3e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004a2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 ff67 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a3a:	f000 bc9c 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a42:	f000 bc98 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004a46:	4b35      	ldr	r3, [pc, #212]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a52:	d108      	bne.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a54:	f107 0318 	add.w	r3, r7, #24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fcab 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a62:	f000 bc88 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a66:	2300      	movs	r3, #0
 8004a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a6a:	f000 bc84 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004a6e:	4b2b      	ldr	r3, [pc, #172]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004a76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a7a:	d108      	bne.n	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a7c:	f107 030c 	add.w	r3, r7, #12
 8004a80:	4618      	mov	r0, r3
 8004a82:	f000 fdeb 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004a8a:	f000 bc74 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a92:	f000 bc70 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004a96:	4b21      	ldr	r3, [pc, #132]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a9a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0304 	and.w	r3, r3, #4
 8004aa8:	2b04      	cmp	r3, #4
 8004aaa:	d10c      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8004aac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d109      	bne.n	8004ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8004abe:	fa22 f303 	lsr.w	r3, r2, r3
 8004ac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ac4:	e01f      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ac6:	4b15      	ldr	r3, [pc, #84]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ad2:	d106      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8004ad4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ada:	d102      	bne.n	8004ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004adc:	4b11      	ldr	r3, [pc, #68]	@ (8004b24 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ae0:	e011      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8004b1c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004aee:	d106      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8004af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004af2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004af6:	d102      	bne.n	8004afe <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004af8:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004afc:	e003      	b.n	8004b06 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004b02:	f000 bc38 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b06:	f000 bc36 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004b0a:	4b08      	ldr	r3, [pc, #32]	@ (8004b2c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8004b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b0e:	f000 bc32 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b16:	f000 bc2e 	b.w	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004b1a:	bf00      	nop
 8004b1c:	58024400 	.word	0x58024400
 8004b20:	03d09000 	.word	0x03d09000
 8004b24:	003d0900 	.word	0x003d0900
 8004b28:	007a1200 	.word	0x007a1200
 8004b2c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8004b30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b34:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8004b38:	430b      	orrs	r3, r1
 8004b3a:	f040 809c 	bne.w	8004c76 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8004b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b42:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8004b46:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b4e:	d054      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004b56:	f200 808b 	bhi.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b60:	f000 8083 	beq.w	8004c6a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8004b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b66:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004b6a:	f200 8081 	bhi.w	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b74:	d02f      	beq.n	8004bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b7c:	d878      	bhi.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d004      	beq.n	8004b8e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8004b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b8a:	d012      	beq.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8004b8c:	e070      	b.n	8004c70 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004b8e:	4b8a      	ldr	r3, [pc, #552]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b96:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004b9a:	d107      	bne.n	8004bac <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004b9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f000 feaf 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004ba6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ba8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004baa:	e3e4      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bb0:	e3e1      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004bb2:	4b81      	ldr	r3, [pc, #516]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bbe:	d107      	bne.n	8004bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bc0:	f107 0318 	add.w	r3, r7, #24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 fbf5 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bce:	e3d2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bd4:	e3cf      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004bd6:	4b78      	ldr	r3, [pc, #480]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bde:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004be2:	d107      	bne.n	8004bf4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004be4:	f107 030c 	add.w	r3, r7, #12
 8004be8:	4618      	mov	r0, r3
 8004bea:	f000 fd37 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004bf2:	e3c0      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bf8:	e3bd      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004bfa:	4b6f      	ldr	r3, [pc, #444]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004c02:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004c04:	4b6c      	ldr	r3, [pc, #432]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b04      	cmp	r3, #4
 8004c0e:	d10c      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004c16:	4b68      	ldr	r3, [pc, #416]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	08db      	lsrs	r3, r3, #3
 8004c1c:	f003 0303 	and.w	r3, r3, #3
 8004c20:	4a66      	ldr	r2, [pc, #408]	@ (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004c22:	fa22 f303 	lsr.w	r3, r2, r3
 8004c26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c28:	e01e      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004c2a:	4b63      	ldr	r3, [pc, #396]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c36:	d106      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8004c38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c3e:	d102      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004c40:	4b5f      	ldr	r3, [pc, #380]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004c42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c44:	e010      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004c46:	4b5c      	ldr	r3, [pc, #368]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004c52:	d106      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004c5a:	d102      	bne.n	8004c62 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004c5c:	4b59      	ldr	r3, [pc, #356]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c60:	e002      	b.n	8004c68 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004c62:	2300      	movs	r3, #0
 8004c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004c66:	e386      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004c68:	e385      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004c6a:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004c6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c6e:	e382      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8004c70:	2300      	movs	r3, #0
 8004c72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c74:	e37f      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004c76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c7a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	f040 80a7 	bne.w	8004dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8004c84:	4b4c      	ldr	r3, [pc, #304]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c88:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 8004c8c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c94:	d055      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c98:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c9c:	f200 8096 	bhi.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004ca6:	f000 8084 	beq.w	8004db2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8004caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cac:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004cb0:	f200 808c 	bhi.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cba:	d030      	beq.n	8004d1e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cc2:	f200 8083 	bhi.w	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cd2:	d012      	beq.n	8004cfa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8004cd4:	e07a      	b.n	8004dcc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004cd6:	4b38      	ldr	r3, [pc, #224]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004ce2:	d107      	bne.n	8004cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 fe0b 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004cf2:	e340      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cf8:	e33d      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d06:	d107      	bne.n	8004d18 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d08:	f107 0318 	add.w	r3, r7, #24
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fb51 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d16:	e32e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d1c:	e32b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004d1e:	4b26      	ldr	r3, [pc, #152]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d2c:	f107 030c 	add.w	r3, r7, #12
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fc93 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004d3a:	e31c      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d40:	e319      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004d42:	4b1d      	ldr	r3, [pc, #116]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d46:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004d4a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b04      	cmp	r3, #4
 8004d56:	d10c      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8004d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d109      	bne.n	8004d72 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d5e:	4b16      	ldr	r3, [pc, #88]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	08db      	lsrs	r3, r3, #3
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	4a14      	ldr	r2, [pc, #80]	@ (8004dbc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8004d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d70:	e01e      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004d72:	4b11      	ldr	r3, [pc, #68]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d7e:	d106      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8004d80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d82:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d86:	d102      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004d88:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d8c:	e010      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8004db8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d96:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d9a:	d106      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8004d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004da2:	d102      	bne.n	8004daa <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004da4:	4b07      	ldr	r3, [pc, #28]	@ (8004dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8004da6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004da8:	e002      	b.n	8004db0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004daa:	2300      	movs	r3, #0
 8004dac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004dae:	e2e2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004db0:	e2e1      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004db2:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8004db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004db6:	e2de      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004db8:	58024400 	.word	0x58024400
 8004dbc:	03d09000 	.word	0x03d09000
 8004dc0:	003d0900 	.word	0x003d0900
 8004dc4:	007a1200 	.word	0x007a1200
 8004dc8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd0:	e2d1      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8004dd2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dd6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	f040 809c 	bne.w	8004f18 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8004de0:	4b93      	ldr	r3, [pc, #588]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004de4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 8004de8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8004dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df0:	d054      	beq.n	8004e9c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004df4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004df8:	f200 808b 	bhi.w	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e02:	f000 8083 	beq.w	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004e0c:	f200 8081 	bhi.w	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e16:	d02f      	beq.n	8004e78 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8004e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e1e:	d878      	bhi.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2c:	d012      	beq.n	8004e54 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8004e2e:	e070      	b.n	8004f12 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004e30:	4b7f      	ldr	r3, [pc, #508]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8004e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fd5e 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8004e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e4c:	e293      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e52:	e290      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004e54:	4b76      	ldr	r3, [pc, #472]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e5c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004e60:	d107      	bne.n	8004e72 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e62:	f107 0318 	add.w	r3, r7, #24
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 faa4 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e70:	e281      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e76:	e27e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004e78:	4b6d      	ldr	r3, [pc, #436]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e84:	d107      	bne.n	8004e96 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e86:	f107 030c 	add.w	r3, r7, #12
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fbe6 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004e94:	e26f      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004e96:	2300      	movs	r3, #0
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e9a:	e26c      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8004e9c:	4b64      	ldr	r3, [pc, #400]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004e9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ea0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004ea4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004ea6:	4b62      	ldr	r3, [pc, #392]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0304 	and.w	r3, r3, #4
 8004eae:	2b04      	cmp	r3, #4
 8004eb0:	d10c      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8004eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d109      	bne.n	8004ecc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004eb8:	4b5d      	ldr	r3, [pc, #372]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	08db      	lsrs	r3, r3, #3
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	4a5c      	ldr	r2, [pc, #368]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004ec4:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004eca:	e01e      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8004ecc:	4b58      	ldr	r3, [pc, #352]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ed4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8004eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004edc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004ee0:	d102      	bne.n	8004ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8004ee2:	4b55      	ldr	r3, [pc, #340]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8004ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ee6:	e010      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8004ee8:	4b51      	ldr	r3, [pc, #324]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004ef4:	d106      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8004ef6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ef8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004efc:	d102      	bne.n	8004f04 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8004efe:	4b4f      	ldr	r3, [pc, #316]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8004f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f02:	e002      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8004f04:	2300      	movs	r3, #0
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8004f08:	e235      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8004f0a:	e234      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8004f0c:	4b4c      	ldr	r3, [pc, #304]	@ (8005040 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8004f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f10:	e231      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8004f12:	2300      	movs	r3, #0
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f16:	e22e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8004f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f1c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8004f20:	430b      	orrs	r3, r1
 8004f22:	f040 808f 	bne.w	8005044 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8004f26:	4b42      	ldr	r3, [pc, #264]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f2a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8004f2e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f36:	d06b      	beq.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8004f38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f3e:	d874      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f46:	d056      	beq.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8004f48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f4e:	d86c      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f56:	d03b      	beq.n	8004fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8004f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004f5e:	d864      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f66:	d021      	beq.n	8004fac <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f6e:	d85c      	bhi.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d004      	beq.n	8004f80 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8004f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f7c:	d004      	beq.n	8004f88 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8004f7e:	e054      	b.n	800502a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8004f80:	f7fe fa4c 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8004f84:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f86:	e1f6      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004f88:	4b29      	ldr	r3, [pc, #164]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f94:	d107      	bne.n	8004fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f96:	f107 0318 	add.w	r3, r7, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fa0a 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fa4:	e1e7      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004faa:	e1e4      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004fac:	4b20      	ldr	r3, [pc, #128]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004fb8:	d107      	bne.n	8004fca <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004fba:	f107 030c 	add.w	r3, r7, #12
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fb4c 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fc8:	e1d5      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fce:	e1d2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fd0:	4b17      	ldr	r3, [pc, #92]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0304 	and.w	r3, r3, #4
 8004fd8:	2b04      	cmp	r3, #4
 8004fda:	d109      	bne.n	8004ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004fdc:	4b14      	ldr	r3, [pc, #80]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	08db      	lsrs	r3, r3, #3
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	4a13      	ldr	r2, [pc, #76]	@ (8005034 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8004fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8004fee:	e1c2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ff4:	e1bf      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8004ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005002:	d102      	bne.n	800500a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005004:	4b0c      	ldr	r3, [pc, #48]	@ (8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005008:	e1b5      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800500a:	2300      	movs	r3, #0
 800500c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800500e:	e1b2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005010:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005018:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800501c:	d102      	bne.n	8005024 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800501e:	4b07      	ldr	r3, [pc, #28]	@ (800503c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005022:	e1a8      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005024:	2300      	movs	r3, #0
 8005026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005028:	e1a5      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800502a:	2300      	movs	r3, #0
 800502c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800502e:	e1a2      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005030:	58024400 	.word	0x58024400
 8005034:	03d09000 	.word	0x03d09000
 8005038:	003d0900 	.word	0x003d0900
 800503c:	007a1200 	.word	0x007a1200
 8005040:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005048:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800504c:	430b      	orrs	r3, r1
 800504e:	d173      	bne.n	8005138 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005050:	4b9c      	ldr	r3, [pc, #624]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005054:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005058:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005060:	d02f      	beq.n	80050c2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005068:	d863      	bhi.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800506a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506c:	2b00      	cmp	r3, #0
 800506e:	d004      	beq.n	800507a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005072:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005076:	d012      	beq.n	800509e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005078:	e05b      	b.n	8005132 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800507a:	4b92      	ldr	r3, [pc, #584]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005082:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005086:	d107      	bne.n	8005098 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005088:	f107 0318 	add.w	r3, r7, #24
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f991 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005096:	e16e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005098:	2300      	movs	r3, #0
 800509a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800509c:	e16b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800509e:	4b89      	ldr	r3, [pc, #548]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80050aa:	d107      	bne.n	80050bc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050ac:	f107 030c 	add.w	r3, r7, #12
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fad3 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80050ba:	e15c      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c0:	e159      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80050c2:	4b80      	ldr	r3, [pc, #512]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80050cc:	4b7d      	ldr	r3, [pc, #500]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
 80050d4:	2b04      	cmp	r3, #4
 80050d6:	d10c      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80050de:	4b79      	ldr	r3, [pc, #484]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	4a77      	ldr	r2, [pc, #476]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050f0:	e01e      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80050f2:	4b74      	ldr	r3, [pc, #464]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80050fe:	d106      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005102:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005106:	d102      	bne.n	800510e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005108:	4b70      	ldr	r3, [pc, #448]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800510a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800510c:	e010      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800510e:	4b6d      	ldr	r3, [pc, #436]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800511a:	d106      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800511c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800511e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005122:	d102      	bne.n	800512a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005124:	4b6a      	ldr	r3, [pc, #424]	@ (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005126:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005128:	e002      	b.n	8005130 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800512a:	2300      	movs	r3, #0
 800512c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800512e:	e122      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005130:	e121      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005132:	2300      	movs	r3, #0
 8005134:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005136:	e11e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800513c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8005140:	430b      	orrs	r3, r1
 8005142:	d133      	bne.n	80051ac <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005144:	4b5f      	ldr	r3, [pc, #380]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005146:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800514c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800515a:	d012      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800515c:	e023      	b.n	80051a6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800515e:	4b59      	ldr	r3, [pc, #356]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800516a:	d107      	bne.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800516c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fbc7 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005178:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800517a:	e0fc      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005180:	e0f9      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005182:	4b50      	ldr	r3, [pc, #320]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800518e:	d107      	bne.n	80051a0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005190:	f107 0318 	add.w	r3, r7, #24
 8005194:	4618      	mov	r0, r3
 8005196:	f000 f90d 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800519e:	e0ea      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80051a0:	2300      	movs	r3, #0
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051a4:	e0e7      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80051a6:	2300      	movs	r3, #0
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051aa:	e0e4      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80051ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051b0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 80051b4:	430b      	orrs	r3, r1
 80051b6:	f040 808d 	bne.w	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 80051ba:	4b42      	ldr	r3, [pc, #264]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80051bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051be:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 80051c2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051ca:	d06b      	beq.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 80051cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80051d2:	d874      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051da:	d056      	beq.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80051dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051e2:	d86c      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051ea:	d03b      	beq.n	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80051ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80051f2:	d864      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80051f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051fa:	d021      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80051fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005202:	d85c      	bhi.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800520a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800520c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005210:	d004      	beq.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005212:	e054      	b.n	80052be <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005214:	f000 f8b8 	bl	8005388 <HAL_RCCEx_GetD3PCLK1Freq>
 8005218:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800521a:	e0ac      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800521c:	4b29      	ldr	r3, [pc, #164]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005224:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005228:	d107      	bne.n	800523a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800522a:	f107 0318 	add.w	r3, r7, #24
 800522e:	4618      	mov	r0, r3
 8005230:	f000 f8c0 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005238:	e09d      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800523e:	e09a      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005240:	4b20      	ldr	r3, [pc, #128]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524c:	d107      	bne.n	800525e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	4618      	mov	r0, r3
 8005254:	f000 fa02 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800525c:	e08b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800525e:	2300      	movs	r3, #0
 8005260:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005262:	e088      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005264:	4b17      	ldr	r3, [pc, #92]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b04      	cmp	r3, #4
 800526e:	d109      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005270:	4b14      	ldr	r3, [pc, #80]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	4a13      	ldr	r2, [pc, #76]	@ (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800527c:	fa22 f303 	lsr.w	r3, r2, r3
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005282:	e078      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005284:	2300      	movs	r3, #0
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005288:	e075      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800528a:	4b0e      	ldr	r3, [pc, #56]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005296:	d102      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005298:	4b0c      	ldr	r3, [pc, #48]	@ (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800529a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800529c:	e06b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052a2:	e068      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052a4:	4b07      	ldr	r3, [pc, #28]	@ (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80052b0:	d102      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 80052b2:	4b07      	ldr	r3, [pc, #28]	@ (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80052b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80052b6:	e05e      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052bc:	e05b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 80052be:	2300      	movs	r3, #0
 80052c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80052c2:	e058      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80052c4:	58024400 	.word	0x58024400
 80052c8:	03d09000 	.word	0x03d09000
 80052cc:	003d0900 	.word	0x003d0900
 80052d0:	007a1200 	.word	0x007a1200
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 80052d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80052d8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 80052dc:	430b      	orrs	r3, r1
 80052de:	d148      	bne.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80052e0:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80052e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052e4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80052e8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80052ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f0:	d02a      	beq.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80052f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80052f8:	d838      	bhi.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80052fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005302:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005306:	d00d      	beq.n	8005324 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005308:	e030      	b.n	800536c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800530a:	4b1d      	ldr	r3, [pc, #116]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005312:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005316:	d102      	bne.n	800531e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005318:	4b1a      	ldr	r3, [pc, #104]	@ (8005384 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800531a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800531c:	e02b      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800531e:	2300      	movs	r3, #0
 8005320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005322:	e028      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005324:	4b16      	ldr	r3, [pc, #88]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800532c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005330:	d107      	bne.n	8005342 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005332:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005336:	4618      	mov	r0, r3
 8005338:	f000 fae4 	bl	8005904 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005340:	e019      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005342:	2300      	movs	r3, #0
 8005344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005346:	e016      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005348:	4b0d      	ldr	r3, [pc, #52]	@ (8005380 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005350:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005354:	d107      	bne.n	8005366 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005356:	f107 0318 	add.w	r3, r7, #24
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f82a 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005364:	e007      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800536a:	e004      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800536c:	2300      	movs	r3, #0
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005370:	e001      	b.n	8005376 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005372:	2300      	movs	r3, #0
 8005374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8005376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005378:	4618      	mov	r0, r3
 800537a:	3740      	adds	r7, #64	@ 0x40
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	58024400 	.word	0x58024400
 8005384:	007a1200 	.word	0x007a1200

08005388 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800538c:	f7fe f816 	bl	80033bc <HAL_RCC_GetHCLKFreq>
 8005390:	4602      	mov	r2, r0
 8005392:	4b06      	ldr	r3, [pc, #24]	@ (80053ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	f003 0307 	and.w	r3, r3, #7
 800539c:	4904      	ldr	r1, [pc, #16]	@ (80053b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800539e:	5ccb      	ldrb	r3, [r1, r3]
 80053a0:	f003 031f 	and.w	r3, r3, #31
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	58024400 	.word	0x58024400
 80053b0:	0800d174 	.word	0x0800d174

080053b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b089      	sub	sp, #36	@ 0x24
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80053bc:	4ba1      	ldr	r3, [pc, #644]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80053c6:	4b9f      	ldr	r3, [pc, #636]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ca:	0b1b      	lsrs	r3, r3, #12
 80053cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80053d2:	4b9c      	ldr	r3, [pc, #624]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053d6:	091b      	lsrs	r3, r3, #4
 80053d8:	f003 0301 	and.w	r3, r3, #1
 80053dc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80053de:	4b99      	ldr	r3, [pc, #612]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80053e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e2:	08db      	lsrs	r3, r3, #3
 80053e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	fb02 f303 	mul.w	r3, r2, r3
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	f000 8111 	beq.w	8005624 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	f000 8083 	beq.w	8005510 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	2b02      	cmp	r3, #2
 800540e:	f200 80a1 	bhi.w	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d003      	beq.n	8005420 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d056      	beq.n	80054cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800541e:	e099      	b.n	8005554 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005420:	4b88      	ldr	r3, [pc, #544]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0320 	and.w	r3, r3, #32
 8005428:	2b00      	cmp	r3, #0
 800542a:	d02d      	beq.n	8005488 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800542c:	4b85      	ldr	r3, [pc, #532]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	08db      	lsrs	r3, r3, #3
 8005432:	f003 0303 	and.w	r3, r3, #3
 8005436:	4a84      	ldr	r2, [pc, #528]	@ (8005648 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005438:	fa22 f303 	lsr.w	r3, r2, r3
 800543c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	ee07 3a90 	vmov	s15, r3
 8005444:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	ee07 3a90 	vmov	s15, r3
 800544e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005456:	4b7b      	ldr	r3, [pc, #492]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800545a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800545e:	ee07 3a90 	vmov	s15, r3
 8005462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005466:	ed97 6a03 	vldr	s12, [r7, #12]
 800546a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800546e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800547a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800547e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005482:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005486:	e087      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005492:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005650 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800549a:	4b6a      	ldr	r3, [pc, #424]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800549c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800549e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054a2:	ee07 3a90 	vmov	s15, r3
 80054a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80054ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80054ca:	e065      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80054da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054de:	4b59      	ldr	r3, [pc, #356]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80054e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054e6:	ee07 3a90 	vmov	s15, r3
 80054ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80054f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80054f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005506:	ee67 7a27 	vmul.f32	s15, s14, s15
 800550a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800550e:	e043      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800551a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005658 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800551e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005522:	4b48      	ldr	r3, [pc, #288]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005526:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800552a:	ee07 3a90 	vmov	s15, r3
 800552e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005532:	ed97 6a03 	vldr	s12, [r7, #12]
 8005536:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800553a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800553e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005542:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005546:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800554a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800554e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005552:	e021      	b.n	8005598 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	ee07 3a90 	vmov	s15, r3
 800555a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800555e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005654 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005562:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005566:	4b37      	ldr	r3, [pc, #220]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800556a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800556e:	ee07 3a90 	vmov	s15, r3
 8005572:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005576:	ed97 6a03 	vldr	s12, [r7, #12]
 800557a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800564c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800557e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005582:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005586:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800558a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800558e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005592:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005596:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005598:	4b2a      	ldr	r3, [pc, #168]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800559a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800559c:	0a5b      	lsrs	r3, r3, #9
 800559e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80055b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055be:	ee17 2a90 	vmov	r2, s15
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80055c6:	4b1f      	ldr	r3, [pc, #124]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ca:	0c1b      	lsrs	r3, r3, #16
 80055cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80055dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80055e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80055e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80055e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055ec:	ee17 2a90 	vmov	r2, s15
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80055f4:	4b13      	ldr	r3, [pc, #76]	@ (8005644 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f8:	0e1b      	lsrs	r3, r3, #24
 80055fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800560a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800560e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005612:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800561a:	ee17 2a90 	vmov	r2, s15
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005622:	e008      	b.n	8005636 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	2200      	movs	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	609a      	str	r2, [r3, #8]
}
 8005636:	bf00      	nop
 8005638:	3724      	adds	r7, #36	@ 0x24
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	58024400 	.word	0x58024400
 8005648:	03d09000 	.word	0x03d09000
 800564c:	46000000 	.word	0x46000000
 8005650:	4c742400 	.word	0x4c742400
 8005654:	4a742400 	.word	0x4a742400
 8005658:	4af42400 	.word	0x4af42400

0800565c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800565c:	b480      	push	{r7}
 800565e:	b089      	sub	sp, #36	@ 0x24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005664:	4ba1      	ldr	r3, [pc, #644]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	f003 0303 	and.w	r3, r3, #3
 800566c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800566e:	4b9f      	ldr	r3, [pc, #636]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	0d1b      	lsrs	r3, r3, #20
 8005674:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005678:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800567a:	4b9c      	ldr	r3, [pc, #624]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800567c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800567e:	0a1b      	lsrs	r3, r3, #8
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005686:	4b99      	ldr	r3, [pc, #612]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800568a:	08db      	lsrs	r3, r3, #3
 800568c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	fb02 f303 	mul.w	r3, r2, r3
 8005696:	ee07 3a90 	vmov	s15, r3
 800569a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800569e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8111 	beq.w	80058cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80056aa:	69bb      	ldr	r3, [r7, #24]
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	f000 8083 	beq.w	80057b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	2b02      	cmp	r3, #2
 80056b6:	f200 80a1 	bhi.w	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d003      	beq.n	80056c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80056c0:	69bb      	ldr	r3, [r7, #24]
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d056      	beq.n	8005774 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80056c6:	e099      	b.n	80057fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80056c8:	4b88      	ldr	r3, [pc, #544]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d02d      	beq.n	8005730 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056d4:	4b85      	ldr	r3, [pc, #532]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	08db      	lsrs	r3, r3, #3
 80056da:	f003 0303 	and.w	r3, r3, #3
 80056de:	4a84      	ldr	r2, [pc, #528]	@ (80058f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80056e0:	fa22 f303 	lsr.w	r3, r2, r3
 80056e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	ee07 3a90 	vmov	s15, r3
 80056ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	ee07 3a90 	vmov	s15, r3
 80056f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fe:	4b7b      	ldr	r3, [pc, #492]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005706:	ee07 3a90 	vmov	s15, r3
 800570a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800570e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005712:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800571a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800571e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800572a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800572e:	e087      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	ee07 3a90 	vmov	s15, r3
 8005736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800573a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80058f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800573e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005742:	4b6a      	ldr	r3, [pc, #424]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574a:	ee07 3a90 	vmov	s15, r3
 800574e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005752:	ed97 6a03 	vldr	s12, [r7, #12]
 8005756:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800575a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800575e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005762:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800576a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005772:	e065      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	ee07 3a90 	vmov	s15, r3
 800577a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800577e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005786:	4b59      	ldr	r3, [pc, #356]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800578e:	ee07 3a90 	vmov	s15, r3
 8005792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005796:	ed97 6a03 	vldr	s12, [r7, #12]
 800579a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800579e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057b6:	e043      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	ee07 3a90 	vmov	s15, r3
 80057be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005900 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80057c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ca:	4b48      	ldr	r3, [pc, #288]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80057cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d2:	ee07 3a90 	vmov	s15, r3
 80057d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057da:	ed97 6a03 	vldr	s12, [r7, #12]
 80057de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80057e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80057e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80057ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80057ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80057f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80057fa:	e021      	b.n	8005840 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	ee07 3a90 	vmov	s15, r3
 8005802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005806:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80058fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800580a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800580e:	4b37      	ldr	r3, [pc, #220]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005816:	ee07 3a90 	vmov	s15, r3
 800581a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800581e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005822:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80058f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005826:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800582a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800582e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005832:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800583a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800583e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005840:	4b2a      	ldr	r3, [pc, #168]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005844:	0a5b      	lsrs	r3, r3, #9
 8005846:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005856:	ee37 7a87 	vadd.f32	s14, s15, s14
 800585a:	edd7 6a07 	vldr	s13, [r7, #28]
 800585e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005862:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005866:	ee17 2a90 	vmov	r2, s15
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800586e:	4b1f      	ldr	r3, [pc, #124]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005878:	ee07 3a90 	vmov	s15, r3
 800587c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005880:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005884:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005888:	edd7 6a07 	vldr	s13, [r7, #28]
 800588c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005890:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005894:	ee17 2a90 	vmov	r2, s15
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800589c:	4b13      	ldr	r3, [pc, #76]	@ (80058ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	0e1b      	lsrs	r3, r3, #24
 80058a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80058b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80058b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80058ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058c2:	ee17 2a90 	vmov	r2, s15
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80058ca:	e008      	b.n	80058de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
}
 80058de:	bf00      	nop
 80058e0:	3724      	adds	r7, #36	@ 0x24
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	58024400 	.word	0x58024400
 80058f0:	03d09000 	.word	0x03d09000
 80058f4:	46000000 	.word	0x46000000
 80058f8:	4c742400 	.word	0x4c742400
 80058fc:	4a742400 	.word	0x4a742400
 8005900:	4af42400 	.word	0x4af42400

08005904 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8005904:	b480      	push	{r7}
 8005906:	b089      	sub	sp, #36	@ 0x24
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800590c:	4ba0      	ldr	r3, [pc, #640]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800590e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005910:	f003 0303 	and.w	r3, r3, #3
 8005914:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8005916:	4b9e      	ldr	r3, [pc, #632]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005918:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800591a:	091b      	lsrs	r3, r3, #4
 800591c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005920:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8005922:	4b9b      	ldr	r3, [pc, #620]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800592c:	4b98      	ldr	r3, [pc, #608]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800592e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005930:	08db      	lsrs	r3, r3, #3
 8005932:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	f000 8111 	beq.w	8005b72 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8005950:	69bb      	ldr	r3, [r7, #24]
 8005952:	2b02      	cmp	r3, #2
 8005954:	f000 8083 	beq.w	8005a5e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2b02      	cmp	r3, #2
 800595c:	f200 80a1 	bhi.w	8005aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d003      	beq.n	800596e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d056      	beq.n	8005a1a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800596c:	e099      	b.n	8005aa2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800596e:	4b88      	ldr	r3, [pc, #544]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0320 	and.w	r3, r3, #32
 8005976:	2b00      	cmp	r3, #0
 8005978:	d02d      	beq.n	80059d6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800597a:	4b85      	ldr	r3, [pc, #532]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	08db      	lsrs	r3, r3, #3
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	4a83      	ldr	r2, [pc, #524]	@ (8005b94 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8005986:	fa22 f303 	lsr.w	r3, r2, r3
 800598a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	ee07 3a90 	vmov	s15, r3
 8005992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	ee07 3a90 	vmov	s15, r3
 800599c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059a4:	4b7a      	ldr	r3, [pc, #488]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ac:	ee07 3a90 	vmov	s15, r3
 80059b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059b4:	ed97 6a03 	vldr	s12, [r7, #12]
 80059b8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80059bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80059d4:	e087      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	ee07 3a90 	vmov	s15, r3
 80059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059e0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80059e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059e8:	4b69      	ldr	r3, [pc, #420]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80059ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80059fc:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a08:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a14:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a18:	e065      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	ee07 3a90 	vmov	s15, r3
 8005a20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a24:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8005ba0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8005a28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a2c:	4b58      	ldr	r3, [pc, #352]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a34:	ee07 3a90 	vmov	s15, r3
 8005a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a40:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a4c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a58:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005a5c:	e043      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	ee07 3a90 	vmov	s15, r3
 8005a64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a68:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005ba4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8005a6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a70:	4b47      	ldr	r3, [pc, #284]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a78:	ee07 3a90 	vmov	s15, r3
 8005a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a80:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a84:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005a88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005a8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005a90:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005a9c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005aa0:	e021      	b.n	8005ae6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	ee07 3a90 	vmov	s15, r3
 8005aa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005aac:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8005b9c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8005ab0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ab4:	4b36      	ldr	r3, [pc, #216]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ac4:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ac8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8005b98 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8005acc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ad0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ad4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005ad8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ae4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8005ae6:	4b2a      	ldr	r3, [pc, #168]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aea:	0a5b      	lsrs	r3, r3, #9
 8005aec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005af0:	ee07 3a90 	vmov	s15, r3
 8005af4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005af8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005afc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b00:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b0c:	ee17 2a90 	vmov	r2, s15
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8005b14:	4b1e      	ldr	r3, [pc, #120]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b18:	0c1b      	lsrs	r3, r3, #16
 8005b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b1e:	ee07 3a90 	vmov	s15, r3
 8005b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b3a:	ee17 2a90 	vmov	r2, s15
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8005b42:	4b13      	ldr	r3, [pc, #76]	@ (8005b90 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	0e1b      	lsrs	r3, r3, #24
 8005b48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b4c:	ee07 3a90 	vmov	s15, r3
 8005b50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005b58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005b5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b68:	ee17 2a90 	vmov	r2, s15
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8005b70:	e008      	b.n	8005b84 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	609a      	str	r2, [r3, #8]
}
 8005b84:	bf00      	nop
 8005b86:	3724      	adds	r7, #36	@ 0x24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	58024400 	.word	0x58024400
 8005b94:	03d09000 	.word	0x03d09000
 8005b98:	46000000 	.word	0x46000000
 8005b9c:	4c742400 	.word	0x4c742400
 8005ba0:	4a742400 	.word	0x4a742400
 8005ba4:	4af42400 	.word	0x4af42400

08005ba8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005bb6:	4b53      	ldr	r3, [pc, #332]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b03      	cmp	r3, #3
 8005bc0:	d101      	bne.n	8005bc6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e099      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005bc6:	4b4f      	ldr	r3, [pc, #316]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a4e      	ldr	r2, [pc, #312]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005bd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bd2:	f7fb fb79 	bl	80012c8 <HAL_GetTick>
 8005bd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bd8:	e008      	b.n	8005bec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bda:	f7fb fb75 	bl	80012c8 <HAL_GetTick>
 8005bde:	4602      	mov	r2, r0
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	1ad3      	subs	r3, r2, r3
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d901      	bls.n	8005bec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e086      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005bec:	4b45      	ldr	r3, [pc, #276]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1f0      	bne.n	8005bda <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005bf8:	4b42      	ldr	r3, [pc, #264]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bfc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	031b      	lsls	r3, r3, #12
 8005c06:	493f      	ldr	r1, [pc, #252]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	3b01      	subs	r3, #1
 8005c1c:	025b      	lsls	r3, r3, #9
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	431a      	orrs	r2, r3
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68db      	ldr	r3, [r3, #12]
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	3b01      	subs	r3, #1
 8005c36:	061b      	lsls	r3, r3, #24
 8005c38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005c3c:	4931      	ldr	r1, [pc, #196]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005c42:	4b30      	ldr	r3, [pc, #192]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	492d      	ldr	r1, [pc, #180]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005c54:	4b2b      	ldr	r3, [pc, #172]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c58:	f023 0220 	bic.w	r2, r3, #32
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	699b      	ldr	r3, [r3, #24]
 8005c60:	4928      	ldr	r1, [pc, #160]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c62:	4313      	orrs	r3, r2
 8005c64:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005c66:	4b27      	ldr	r3, [pc, #156]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c6a:	4a26      	ldr	r2, [pc, #152]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c6c:	f023 0310 	bic.w	r3, r3, #16
 8005c70:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005c72:	4b24      	ldr	r3, [pc, #144]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005c76:	4b24      	ldr	r3, [pc, #144]	@ (8005d08 <RCCEx_PLL2_Config+0x160>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	69d2      	ldr	r2, [r2, #28]
 8005c7e:	00d2      	lsls	r2, r2, #3
 8005c80:	4920      	ldr	r1, [pc, #128]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c82:	4313      	orrs	r3, r2
 8005c84:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005c86:	4b1f      	ldr	r3, [pc, #124]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c8c:	f043 0310 	orr.w	r3, r3, #16
 8005c90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005c98:	4b1a      	ldr	r3, [pc, #104]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a19      	ldr	r2, [pc, #100]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005c9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005ca4:	e00f      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d106      	bne.n	8005cba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005cac:	4b15      	ldr	r3, [pc, #84]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb0:	4a14      	ldr	r2, [pc, #80]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005cb8:	e005      	b.n	8005cc6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005cba:	4b12      	ldr	r3, [pc, #72]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cbe:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005cc6:	4b0f      	ldr	r3, [pc, #60]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a0e      	ldr	r2, [pc, #56]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd2:	f7fb faf9 	bl	80012c8 <HAL_GetTick>
 8005cd6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cd8:	e008      	b.n	8005cec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cda:	f7fb faf5 	bl	80012c8 <HAL_GetTick>
 8005cde:	4602      	mov	r2, r0
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d901      	bls.n	8005cec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	e006      	b.n	8005cfa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005cec:	4b05      	ldr	r3, [pc, #20]	@ (8005d04 <RCCEx_PLL2_Config+0x15c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d0f0      	beq.n	8005cda <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	bf00      	nop
 8005d04:	58024400 	.word	0x58024400
 8005d08:	ffff0007 	.word	0xffff0007

08005d0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d16:	2300      	movs	r3, #0
 8005d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005d1a:	4b53      	ldr	r3, [pc, #332]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	2b03      	cmp	r3, #3
 8005d24:	d101      	bne.n	8005d2a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e099      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005d2a:	4b4f      	ldr	r3, [pc, #316]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a4e      	ldr	r2, [pc, #312]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d36:	f7fb fac7 	bl	80012c8 <HAL_GetTick>
 8005d3a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d3c:	e008      	b.n	8005d50 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d3e:	f7fb fac3 	bl	80012c8 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	d901      	bls.n	8005d50 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e086      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005d50:	4b45      	ldr	r3, [pc, #276]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f0      	bne.n	8005d3e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005d5c:	4b42      	ldr	r3, [pc, #264]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	051b      	lsls	r3, r3, #20
 8005d6a:	493f      	ldr	r1, [pc, #252]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	3b01      	subs	r3, #1
 8005d76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	025b      	lsls	r3, r3, #9
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	431a      	orrs	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	68db      	ldr	r3, [r3, #12]
 8005d8a:	3b01      	subs	r3, #1
 8005d8c:	041b      	lsls	r3, r3, #16
 8005d8e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d92:	431a      	orrs	r2, r3
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	061b      	lsls	r3, r3, #24
 8005d9c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005da0:	4931      	ldr	r1, [pc, #196]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005da6:	4b30      	ldr	r3, [pc, #192]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	492d      	ldr	r1, [pc, #180]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005db4:	4313      	orrs	r3, r2
 8005db6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005db8:	4b2b      	ldr	r3, [pc, #172]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699b      	ldr	r3, [r3, #24]
 8005dc4:	4928      	ldr	r1, [pc, #160]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005dca:	4b27      	ldr	r3, [pc, #156]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	4a26      	ldr	r2, [pc, #152]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005dd6:	4b24      	ldr	r3, [pc, #144]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dda:	4b24      	ldr	r3, [pc, #144]	@ (8005e6c <RCCEx_PLL3_Config+0x160>)
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	69d2      	ldr	r2, [r2, #28]
 8005de2:	00d2      	lsls	r2, r2, #3
 8005de4:	4920      	ldr	r1, [pc, #128]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005de6:	4313      	orrs	r3, r2
 8005de8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005dea:	4b1f      	ldr	r3, [pc, #124]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	4a1e      	ldr	r2, [pc, #120]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005df0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	4a19      	ldr	r2, [pc, #100]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e02:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e08:	e00f      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	2b01      	cmp	r3, #1
 8005e0e:	d106      	bne.n	8005e1e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005e10:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e14:	4a14      	ldr	r2, [pc, #80]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e16:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005e1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005e1c:	e005      	b.n	8005e2a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005e1e:	4b12      	ldr	r3, [pc, #72]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e22:	4a11      	ldr	r2, [pc, #68]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e24:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a0e      	ldr	r2, [pc, #56]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e36:	f7fb fa47 	bl	80012c8 <HAL_GetTick>
 8005e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e3c:	e008      	b.n	8005e50 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e3e:	f7fb fa43 	bl	80012c8 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e006      	b.n	8005e5e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005e50:	4b05      	ldr	r3, [pc, #20]	@ (8005e68 <RCCEx_PLL3_Config+0x15c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3710      	adds	r7, #16
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	58024400 	.word	0x58024400
 8005e6c:	ffff0007 	.word	0xffff0007

08005e70 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	@ 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e075      	b.n	8005f6e <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005e88:	b2db      	uxtb	r3, r3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d105      	bne.n	8005e9a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2200      	movs	r2, #0
 8005e92:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7fa ff27 	bl	8000ce8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2204      	movs	r2, #4
 8005e9e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f868 	bl	8005f78 <HAL_SD_InitCard>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d001      	beq.n	8005eb2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005eae:	2301      	movs	r3, #1
 8005eb0:	e05d      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005eb2:	f107 0308 	add.w	r3, r7, #8
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fdaf 	bl	8006a1c <HAL_SD_GetCardStatus>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d001      	beq.n	8005ec8 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e052      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005ec8:	7e3b      	ldrb	r3, [r7, #24]
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005ece:	7e7b      	ldrb	r3, [r7, #25]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d10a      	bne.n	8005ef2 <HAL_SD_Init+0x82>
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_SD_Init+0x78>
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d004      	beq.n	8005ef2 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eee:	659a      	str	r2, [r3, #88]	@ 0x58
 8005ef0:	e00b      	b.n	8005f0a <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d104      	bne.n	8005f04 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f00:	659a      	str	r2, [r3, #88]	@ 0x58
 8005f02:	e002      	b.n	8005f0a <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68db      	ldr	r3, [r3, #12]
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fe6d 	bl	8006bf0 <HAL_SD_ConfigWideBusOperation>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e026      	b.n	8005f6e <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005f20:	f7fb f9d2 	bl	80012c8 <HAL_GetTick>
 8005f24:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f26:	e011      	b.n	8005f4c <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005f28:	f7fb f9ce 	bl	80012c8 <HAL_GetTick>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	1ad3      	subs	r3, r2, r3
 8005f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f36:	d109      	bne.n	8005f4c <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f3e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e010      	b.n	8005f6e <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 ff61 	bl	8006e14 <HAL_SD_GetCardState>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d1e7      	bne.n	8005f28 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2200      	movs	r2, #0
 8005f62:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	@ 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005f78:	b590      	push	{r4, r7, lr}
 8005f7a:	b08d      	sub	sp, #52	@ 0x34
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005f84:	2300      	movs	r3, #0
 8005f86:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005f90:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8005f94:	f04f 0100 	mov.w	r1, #0
 8005f98:	f7fe fc76 	bl	8004888 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f9c:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d109      	bne.n	8005fb8 <HAL_SD_InitCard+0x40>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005fb2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e070      	b.n	800609a <HAL_SD_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fba:	0a1b      	lsrs	r3, r3, #8
 8005fbc:	4a39      	ldr	r2, [pc, #228]	@ (80060a4 <HAL_SD_InitCard+0x12c>)
 8005fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005fc2:	091b      	lsrs	r3, r3, #4
 8005fc4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681c      	ldr	r4, [r3, #0]
 8005fca:	466a      	mov	r2, sp
 8005fcc:	f107 0318 	add.w	r3, r7, #24
 8005fd0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005fd4:	e882 0003 	stmia.w	r2, {r0, r1}
 8005fd8:	f107 030c 	add.w	r3, r7, #12
 8005fdc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f002 fc86 	bl	80088f0 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4618      	mov	r0, r3
 8005fea:	f002 fcc9 	bl	8008980 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 8005fee:	69fb      	ldr	r3, [r7, #28]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d005      	beq.n	8006000 <HAL_SD_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	005b      	lsls	r3, r3, #1
 8005ff8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ffe:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8006000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <HAL_SD_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006006:	4a28      	ldr	r2, [pc, #160]	@ (80060a8 <HAL_SD_InitCard+0x130>)
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	fbb2 f3f3 	udiv	r3, r2, r3
 800600e:	3301      	adds	r3, #1
 8006010:	4618      	mov	r0, r3
 8006012:	f7fb f965 	bl	80012e0 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 ffea 	bl	8006ff0 <SD_PowerON>
 800601c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800601e:	6a3b      	ldr	r3, [r7, #32]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d00b      	beq.n	800603c <HAL_SD_InitCard+0xc4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006030:	6a3b      	ldr	r3, [r7, #32]
 8006032:	431a      	orrs	r2, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	e02e      	b.n	800609a <HAL_SD_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 ff09 	bl	8006e54 <SD_InitCard>
 8006042:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_SD_InitCard+0xea>
  {
    hsd->State = HAL_SD_STATE_READY;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e01b      	b.n	800609a <HAL_SD_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800606a:	4618      	mov	r0, r3
 800606c:	f002 fd1e 	bl	8008aac <SDMMC_CmdBlockLength>
 8006070:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006072:	6a3b      	ldr	r3, [r7, #32]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00f      	beq.n	8006098 <HAL_SD_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a0b      	ldr	r2, [pc, #44]	@ (80060ac <HAL_SD_InitCard+0x134>)
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2201      	movs	r2, #1
 8006090:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	e000      	b.n	800609a <HAL_SD_InitCard+0x122>
  }

  return HAL_OK;
 8006098:	2300      	movs	r3, #0
}
 800609a:	4618      	mov	r0, r3
 800609c:	372c      	adds	r7, #44	@ 0x2c
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd90      	pop	{r4, r7, pc}
 80060a2:	bf00      	nop
 80060a4:	014f8b59 	.word	0x014f8b59
 80060a8:	00012110 	.word	0x00012110
 80060ac:	1fe00fff 	.word	0x1fe00fff

080060b0 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b08c      	sub	sp, #48	@ 0x30
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060cc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	e08d      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	f040 8086 	bne.w	80061f2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2200      	movs	r2, #0
 80060ea:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80060ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	441a      	add	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d907      	bls.n	800610a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80060fe:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e074      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2203      	movs	r2, #3
 800610e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2200      	movs	r2, #0
 8006118:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	025a      	lsls	r2, r3, #9
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800612c:	2b01      	cmp	r3, #1
 800612e:	d002      	beq.n	8006136 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006132:	025b      	lsls	r3, r3, #9
 8006134:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006136:	f04f 33ff 	mov.w	r3, #4294967295
 800613a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	025b      	lsls	r3, r3, #9
 8006140:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006142:	2390      	movs	r3, #144	@ 0x90
 8006144:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006146:	2302      	movs	r3, #2
 8006148:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800614a:	2300      	movs	r3, #0
 800614c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800614e:	2300      	movs	r3, #0
 8006150:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f107 0210 	add.w	r2, r7, #16
 800615a:	4611      	mov	r1, r2
 800615c:	4618      	mov	r0, r3
 800615e:	f002 fc79 	bl	8008a54 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006170:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68ba      	ldr	r2, [r7, #8]
 8006178:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	2201      	movs	r2, #1
 8006180:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d90a      	bls.n	800619e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2282      	movs	r2, #130	@ 0x82
 800618c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006194:	4618      	mov	r0, r3
 8006196:	f002 fccf 	bl	8008b38 <SDMMC_CmdReadMultiBlock>
 800619a:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800619c:	e009      	b.n	80061b2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2281      	movs	r2, #129	@ 0x81
 80061a2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061aa:	4618      	mov	r0, r3
 80061ac:	f002 fca1 	bl	8008af2 <SDMMC_CmdReadSingleBlock>
 80061b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 80061b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d012      	beq.n	80061de <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0f      	ldr	r2, [pc, #60]	@ (80061fc <HAL_SD_ReadBlocks_DMA+0x14c>)
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80061c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2200      	movs	r2, #0
 80061d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e00a      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 80061ec:	63da      	str	r2, [r3, #60]	@ 0x3c


    return HAL_OK;
 80061ee:	2300      	movs	r3, #0
 80061f0:	e000      	b.n	80061f4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80061f2:	2302      	movs	r3, #2
  }
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3730      	adds	r7, #48	@ 0x30
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	1fe00fff 	.word	0x1fe00fff

08006200 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b08c      	sub	sp, #48	@ 0x30
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d107      	bne.n	8006228 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800621c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e08d      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	f040 8086 	bne.w	8006342 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2200      	movs	r2, #0
 800623a:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800623c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	441a      	add	r2, r3
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006246:	429a      	cmp	r2, r3
 8006248:	d907      	bls.n	800625a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800624e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e074      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2203      	movs	r2, #3
 800625e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2200      	movs	r2, #0
 8006268:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	025a      	lsls	r2, r3, #9
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800627c:	2b01      	cmp	r3, #1
 800627e:	d002      	beq.n	8006286 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006282:	025b      	lsls	r3, r3, #9
 8006284:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006286:	f04f 33ff 	mov.w	r3, #4294967295
 800628a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	025b      	lsls	r3, r3, #9
 8006290:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006292:	2390      	movs	r3, #144	@ 0x90
 8006294:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006296:	2300      	movs	r3, #0
 8006298:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800629a:	2300      	movs	r3, #0
 800629c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800629e:	2300      	movs	r3, #0
 80062a0:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f107 0210 	add.w	r2, r7, #16
 80062aa:	4611      	mov	r1, r2
 80062ac:	4618      	mov	r0, r3
 80062ae:	f002 fbd1 	bl	8008a54 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	68da      	ldr	r2, [r3, #12]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68ba      	ldr	r2, [r7, #8]
 80062c8:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	2201      	movs	r2, #1
 80062d0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b01      	cmp	r3, #1
 80062d6:	d90a      	bls.n	80062ee <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	22a0      	movs	r2, #160	@ 0xa0
 80062dc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062e4:	4618      	mov	r0, r3
 80062e6:	f002 fc6d 	bl	8008bc4 <SDMMC_CmdWriteMultiBlock>
 80062ea:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80062ec:	e009      	b.n	8006302 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2290      	movs	r2, #144	@ 0x90
 80062f2:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80062fa:	4618      	mov	r0, r3
 80062fc:	f002 fc3f 	bl	8008b7e <SDMMC_CmdWriteSingleBlock>
 8006300:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d012      	beq.n	800632e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a0f      	ldr	r2, [pc, #60]	@ (800634c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800630e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006316:	431a      	orrs	r2, r3
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e00a      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 800633c:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3730      	adds	r7, #48	@ 0x30
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	1fe00fff 	.word	0x1fe00fff

08006350 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800635c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d008      	beq.n	800637e <HAL_SD_IRQHandler+0x2e>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f003 0308 	and.w	r3, r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f001 f926 	bl	80075c8 <SD_Read_IT>
 800637c:	e19a      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	f000 80ac 	beq.w	80064e6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006396:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	4b59      	ldr	r3, [pc, #356]	@ (8006508 <HAL_SD_IRQHandler+0x1b8>)
 80063a4:	400b      	ands	r3, r1
 80063a6:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80063b6:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	68da      	ldr	r2, [r3, #12]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063c6:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d038      	beq.n	8006444 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f003 0302 	and.w	r3, r3, #2
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d104      	bne.n	80063e6 <HAL_SD_IRQHandler+0x96>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f003 0320 	and.w	r3, r3, #32
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d011      	beq.n	800640a <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4618      	mov	r0, r3
 80063ec:	f002 fc0e 	bl	8008c0c <SDMMC_CmdStopTransfer>
 80063f0:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d008      	beq.n	800640a <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f95b 	bl	80066c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3f      	ldr	r2, [pc, #252]	@ (800650c <HAL_SD_IRQHandler+0x1bc>)
 8006410:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f003 0301 	and.w	r3, r3, #1
 8006426:	2b00      	cmp	r3, #0
 8006428:	d104      	bne.n	8006434 <HAL_SD_IRQHandler+0xe4>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f003 fbc1 	bl	8009bbc <HAL_SD_RxCpltCallback>
 800643a:	e13b      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f003 fbb3 	bl	8009ba8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006442:	e137      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800644a:	2b00      	cmp	r3, #0
 800644c:	f000 8132 	beq.w	80066b4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2200      	movs	r2, #0
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2200      	movs	r2, #0
 800645e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2200      	movs	r2, #0
 8006466:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <HAL_SD_IRQHandler+0x12c>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b00      	cmp	r3, #0
 800647a:	d011      	beq.n	80064a0 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4618      	mov	r0, r3
 8006482:	f002 fbc3 	bl	8008c0c <SDMMC_CmdStopTransfer>
 8006486:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d008      	beq.n	80064a0 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	431a      	orrs	r2, r3
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f910 	bl	80066c0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2200      	movs	r2, #0
 80064ac:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f003 0310 	and.w	r3, r3, #16
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_SD_IRQHandler+0x172>
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d002      	beq.n	80064c8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f003 fb70 	bl	8009ba8 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0301 	and.w	r3, r3, #1
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d105      	bne.n	80064de <HAL_SD_IRQHandler+0x18e>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 0302 	and.w	r3, r3, #2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	f000 80eb 	beq.w	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f003 fb6c 	bl	8009bbc <HAL_SD_RxCpltCallback>
}
 80064e4:	e0e6      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00d      	beq.n	8006510 <HAL_SD_IRQHandler+0x1c0>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d008      	beq.n	8006510 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f001 f8a8 	bl	8007654 <SD_Write_IT>
 8006504:	e0d6      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
 8006506:	bf00      	nop
 8006508:	ffff3ec5 	.word	0xffff3ec5
 800650c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 800651a:	2b00      	cmp	r3, #0
 800651c:	f000 809d 	beq.w	800665a <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006526:	f003 0302 	and.w	r3, r3, #2
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006532:	f043 0202 	orr.w	r2, r3, #2
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006540:	f003 0308 	and.w	r3, r3, #8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800654c:	f043 0208 	orr.w	r2, r3, #8
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800655a:	f003 0320 	and.w	r3, r3, #32
 800655e:	2b00      	cmp	r3, #0
 8006560:	d005      	beq.n	800656e <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006566:	f043 0220 	orr.w	r2, r3, #32
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006580:	f043 0210 	orr.w	r2, r3, #16
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a4b      	ldr	r2, [pc, #300]	@ (80066bc <HAL_SD_IRQHandler+0x36c>)
 800658e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800659e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68da      	ldr	r2, [r3, #12]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065ae:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80065ce:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 fb19 	bl	8008c0c <SDMMC_CmdStopTransfer>
 80065da:	4602      	mov	r2, r0
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065e0:	431a      	orrs	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80065f4:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2201      	movs	r2, #1
 800660e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2200      	movs	r2, #0
 8006616:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f851 	bl	80066c0 <HAL_SD_ErrorCallback>
}
 800661e:	e049      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006626:	2b00      	cmp	r3, #0
 8006628:	d044      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662e:	2b00      	cmp	r3, #0
 8006630:	d040      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8006640:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2200      	movs	r2, #0
 8006648:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2201      	movs	r2, #1
 800664e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f834 	bl	80066c0 <HAL_SD_ErrorCallback>
}
 8006658:	e02c      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d025      	beq.n	80066b4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006670:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006678:	f003 0304 	and.w	r3, r3, #4
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10c      	bne.n	800669a <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d003      	beq.n	8006692 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 f84a 	bl	8007724 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8006690:	e010      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 f832 	bl	80076fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8006698:	e00c      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0320 	and.w	r3, r3, #32
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f001 f833 	bl	8007710 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80066aa:	e003      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f001 f81b 	bl	80076e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80066b2:	e7ff      	b.n	80066b4 <HAL_SD_IRQHandler+0x364>
 80066b4:	bf00      	nop
 80066b6:	3710      	adds	r7, #16
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	18000f3a 	.word	0x18000f3a

080066c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b083      	sub	sp, #12
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066e2:	0f9b      	lsrs	r3, r3, #30
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	683b      	ldr	r3, [r7, #0]
 80066e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ee:	0e9b      	lsrs	r3, r3, #26
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	f003 030f 	and.w	r3, r3, #15
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006700:	0e1b      	lsrs	r3, r3, #24
 8006702:	b2db      	uxtb	r3, r3
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	b2da      	uxtb	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006712:	0c1b      	lsrs	r3, r3, #16
 8006714:	b2da      	uxtb	r2, r3
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800671e:	0a1b      	lsrs	r3, r3, #8
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800672a:	b2da      	uxtb	r2, r3
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006734:	0d1b      	lsrs	r3, r3, #20
 8006736:	b29a      	uxth	r2, r3
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	b2db      	uxtb	r3, r3
 8006744:	f003 030f 	and.w	r3, r3, #15
 8006748:	b2da      	uxtb	r2, r3
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006752:	0bdb      	lsrs	r3, r3, #15
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 0301 	and.w	r3, r3, #1
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006764:	0b9b      	lsrs	r3, r3, #14
 8006766:	b2db      	uxtb	r3, r3
 8006768:	f003 0301 	and.w	r3, r3, #1
 800676c:	b2da      	uxtb	r2, r3
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006776:	0b5b      	lsrs	r3, r3, #13
 8006778:	b2db      	uxtb	r3, r3
 800677a:	f003 0301 	and.w	r3, r3, #1
 800677e:	b2da      	uxtb	r2, r3
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006788:	0b1b      	lsrs	r3, r3, #12
 800678a:	b2db      	uxtb	r3, r3
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	b2da      	uxtb	r2, r3
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d163      	bne.n	800686c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80067a8:	009a      	lsls	r2, r3, #2
 80067aa:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80067ae:	4013      	ands	r3, r2
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 80067b4:	0f92      	lsrs	r2, r2, #30
 80067b6:	431a      	orrs	r2, r3
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067c0:	0edb      	lsrs	r3, r3, #27
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	f003 0307 	and.w	r3, r3, #7
 80067c8:	b2da      	uxtb	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067d2:	0e1b      	lsrs	r3, r3, #24
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	f003 0307 	and.w	r3, r3, #7
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067e4:	0d5b      	lsrs	r3, r3, #21
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	f003 0307 	and.w	r3, r3, #7
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80067f6:	0c9b      	lsrs	r3, r3, #18
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	b2da      	uxtb	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006808:	0bdb      	lsrs	r3, r3, #15
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0307 	and.w	r3, r3, #7
 8006810:	b2da      	uxtb	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	7e1b      	ldrb	r3, [r3, #24]
 8006824:	b2db      	uxtb	r3, r3
 8006826:	f003 0307 	and.w	r3, r3, #7
 800682a:	3302      	adds	r3, #2
 800682c:	2201      	movs	r2, #1
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006836:	fb03 f202 	mul.w	r2, r3, r2
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	7a1b      	ldrb	r3, [r3, #8]
 8006842:	b2db      	uxtb	r3, r3
 8006844:	f003 030f 	and.w	r3, r3, #15
 8006848:	2201      	movs	r2, #1
 800684a:	409a      	lsls	r2, r3
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006854:	687a      	ldr	r2, [r7, #4]
 8006856:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8006858:	0a52      	lsrs	r2, r2, #9
 800685a:	fb03 f202 	mul.w	r2, r3, r2
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006868:	655a      	str	r2, [r3, #84]	@ 0x54
 800686a:	e031      	b.n	80068d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006870:	2b01      	cmp	r3, #1
 8006872:	d11d      	bne.n	80068b0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006882:	0c1b      	lsrs	r3, r3, #16
 8006884:	431a      	orrs	r2, r3
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	691b      	ldr	r3, [r3, #16]
 800688e:	3301      	adds	r3, #1
 8006890:	029a      	lsls	r2, r3, #10
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = 512U;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80068a4:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	655a      	str	r2, [r3, #84]	@ 0x54
 80068ae:	e00f      	b.n	80068d0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	4a58      	ldr	r2, [pc, #352]	@ (8006a18 <HAL_SD_GetCardCSD+0x344>)
 80068b6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068bc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e09d      	b.n	8006a0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068d4:	0b9b      	lsrs	r3, r3, #14
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068e6:	09db      	lsrs	r3, r3, #7
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006908:	0fdb      	lsrs	r3, r3, #31
 800690a:	b2da      	uxtb	r2, r3
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006914:	0f5b      	lsrs	r3, r3, #29
 8006916:	b2db      	uxtb	r3, r3
 8006918:	f003 0303 	and.w	r3, r3, #3
 800691c:	b2da      	uxtb	r2, r3
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006926:	0e9b      	lsrs	r3, r3, #26
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 0307 	and.w	r3, r3, #7
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006938:	0d9b      	lsrs	r3, r3, #22
 800693a:	b2db      	uxtb	r3, r3
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	b2da      	uxtb	r2, r3
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800694a:	0d5b      	lsrs	r3, r3, #21
 800694c:	b2db      	uxtb	r3, r3
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	b2da      	uxtb	r2, r3
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006966:	0c1b      	lsrs	r3, r3, #16
 8006968:	b2db      	uxtb	r3, r3
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	b2da      	uxtb	r2, r3
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800697a:	0bdb      	lsrs	r3, r3, #15
 800697c:	b2db      	uxtb	r3, r3
 800697e:	f003 0301 	and.w	r3, r3, #1
 8006982:	b2da      	uxtb	r2, r3
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800698e:	0b9b      	lsrs	r3, r3, #14
 8006990:	b2db      	uxtb	r3, r3
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	b2da      	uxtb	r2, r3
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069a2:	0b5b      	lsrs	r3, r3, #13
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	b2da      	uxtb	r2, r3
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069b6:	0b1b      	lsrs	r3, r3, #12
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	f003 0301 	and.w	r3, r3, #1
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	b2da      	uxtb	r2, r3
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b2db      	uxtb	r3, r3
 80069e2:	f003 0303 	and.w	r3, r3, #3
 80069e6:	b2da      	uxtb	r2, r3
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80069f2:	085b      	lsrs	r3, r3, #1
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80069fa:	b2da      	uxtb	r2, r3
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	370c      	adds	r7, #12
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	1fe00fff 	.word	0x1fe00fff

08006a1c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b094      	sub	sp, #80	@ 0x50
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006a32:	b2db      	uxtb	r3, r3
 8006a34:	2b03      	cmp	r3, #3
 8006a36:	d101      	bne.n	8006a3c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	e0a7      	b.n	8006b8c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006a3c:	f107 0308 	add.w	r3, r7, #8
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f000 fb62 	bl	800710c <SD_SendSDStatus>
 8006a48:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d011      	beq.n	8006a74 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a4f      	ldr	r2, [pc, #316]	@ (8006b94 <HAL_SD_GetCardStatus+0x178>)
 8006a56:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2201      	movs	r2, #1
 8006a68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8006a72:	e070      	b.n	8006b56 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	099b      	lsrs	r3, r3, #6
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	095b      	lsrs	r3, r3, #5
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	0e1b      	lsrs	r3, r3, #24
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	061a      	lsls	r2, r3, #24
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	021b      	lsls	r3, r3, #8
 8006ab6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006aba:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	0a1b      	lsrs	r3, r3, #8
 8006ac0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006ac4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	0e1b      	lsrs	r3, r3, #24
 8006aca:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	0d1b      	lsrs	r3, r3, #20
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	f003 030f 	and.w	r3, r3, #15
 8006aec:	b2da      	uxtb	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	0c1b      	lsrs	r3, r3, #16
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006afc:	b29a      	uxth	r2, r3
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	0a9b      	lsrs	r3, r3, #10
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b18:	b2da      	uxtb	r2, r3
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	0a1b      	lsrs	r3, r3, #8
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	f003 0303 	and.w	r3, r3, #3
 8006b28:	b2da      	uxtb	r2, r3
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	f003 030f 	and.w	r3, r3, #15
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	f003 030f 	and.w	r3, r3, #15
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006b4c:	69bb      	ldr	r3, [r7, #24]
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f001 ffa4 	bl	8008aac <SDMMC_CmdBlockLength>
 8006b64:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8006b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d00d      	beq.n	8006b88 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a08      	ldr	r2, [pc, #32]	@ (8006b94 <HAL_SD_GetCardStatus+0x178>)
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b78:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2201      	movs	r2, #1
 8006b7e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }


  return status;
 8006b88:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3750      	adds	r7, #80	@ 0x50
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	1fe00fff 	.word	0x1fe00fff

08006b98 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006be2:	2300      	movs	r3, #0
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006bf0:	b590      	push	{r4, r7, lr}
 8006bf2:	b08d      	sub	sp, #52	@ 0x34
 8006bf4:	af02      	add	r7, sp, #8
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2203      	movs	r2, #3
 8006c04:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d02e      	beq.n	8006c6e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c16:	d106      	bne.n	8006c26 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c1c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c24:	e029      	b.n	8006c7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006c2c:	d10a      	bne.n	8006c44 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 fb64 	bl	80072fc <SD_WideBus_Enable>
 8006c34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c3a:	6a3b      	ldr	r3, [r7, #32]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c42:	e01a      	b.n	8006c7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f000 fba1 	bl	8007392 <SD_WideBus_Disable>
 8006c50:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c5e:	e00c      	b.n	8006c7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c64:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	635a      	str	r2, [r3, #52]	@ 0x34
 8006c6c:	e005      	b.n	8006c7a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c72:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d007      	beq.n	8006c92 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a5f      	ldr	r2, [pc, #380]	@ (8006e04 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006c90:	e096      	b.n	8006dc0 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8006c92:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006c96:	f04f 0100 	mov.w	r1, #0
 8006c9a:	f7fd fdf5 	bl	8004888 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c9e:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 8083 	beq.w	8006dae <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	685b      	ldr	r3, [r3, #4]
 8006cac:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691b      	ldr	r3, [r3, #16]
 8006cbc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	695a      	ldr	r2, [r3, #20]
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4950      	ldr	r1, [pc, #320]	@ (8006e08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006cc6:	fba1 1303 	umull	r1, r3, r1, r3
 8006cca:	0e1b      	lsrs	r3, r3, #24
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d303      	bcc.n	8006cd8 <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	695b      	ldr	r3, [r3, #20]
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	e05a      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cdc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ce0:	d103      	bne.n	8006cea <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	695b      	ldr	r3, [r3, #20]
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	e051      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cf2:	d126      	bne.n	8006d42 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d10e      	bne.n	8006d1a <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	4a43      	ldr	r2, [pc, #268]	@ (8006e0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d906      	bls.n	8006d12 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	4a40      	ldr	r2, [pc, #256]	@ (8006e08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d08:	fba2 2303 	umull	r2, r3, r2, r3
 8006d0c:	0e5b      	lsrs	r3, r3, #25
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	e03d      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	61bb      	str	r3, [r7, #24]
 8006d18:	e039      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	695b      	ldr	r3, [r3, #20]
 8006d1e:	005b      	lsls	r3, r3, #1
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d26:	4a39      	ldr	r2, [pc, #228]	@ (8006e0c <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d906      	bls.n	8006d3a <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4a36      	ldr	r2, [pc, #216]	@ (8006e08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d30:	fba2 2303 	umull	r2, r3, r2, r3
 8006d34:	0e5b      	lsrs	r3, r3, #25
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e029      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	695b      	ldr	r3, [r3, #20]
 8006d3e:	61bb      	str	r3, [r7, #24]
 8006d40:	e025      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	695b      	ldr	r3, [r3, #20]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10e      	bne.n	8006d68 <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	4a30      	ldr	r2, [pc, #192]	@ (8006e10 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d906      	bls.n	8006d60 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d52:	69fb      	ldr	r3, [r7, #28]
 8006d54:	4a2c      	ldr	r2, [pc, #176]	@ (8006e08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d56:	fba2 2303 	umull	r2, r3, r2, r3
 8006d5a:	0e1b      	lsrs	r3, r3, #24
 8006d5c:	61bb      	str	r3, [r7, #24]
 8006d5e:	e016      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	695b      	ldr	r3, [r3, #20]
 8006d64:	61bb      	str	r3, [r7, #24]
 8006d66:	e012      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d74:	4a26      	ldr	r2, [pc, #152]	@ (8006e10 <HAL_SD_ConfigWideBusOperation+0x220>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d906      	bls.n	8006d88 <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <HAL_SD_ConfigWideBusOperation+0x218>)
 8006d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8006d82:	0e1b      	lsrs	r3, r3, #24
 8006d84:	61bb      	str	r3, [r7, #24]
 8006d86:	e002      	b.n	8006d8e <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	695b      	ldr	r3, [r3, #20]
 8006d8c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681c      	ldr	r4, [r3, #0]
 8006d92:	466a      	mov	r2, sp
 8006d94:	f107 0314 	add.w	r3, r7, #20
 8006d98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006d9c:	e882 0003 	stmia.w	r2, {r0, r1}
 8006da0:	f107 0308 	add.w	r3, r7, #8
 8006da4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006da6:	4620      	mov	r0, r4
 8006da8:	f001 fda2 	bl	80088f0 <SDMMC_Init>
 8006dac:	e008      	b.n	8006dc0 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006db2:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8006dba:	2301      	movs	r3, #1
 8006dbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f001 fe6f 	bl	8008aac <SDMMC_CmdBlockLength>
 8006dce:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a0a      	ldr	r2, [pc, #40]	@ (8006e04 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006ddc:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	431a      	orrs	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 8006df8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	372c      	adds	r7, #44	@ 0x2c
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd90      	pop	{r4, r7, pc}
 8006e04:	1fe00fff 	.word	0x1fe00fff
 8006e08:	55e63b89 	.word	0x55e63b89
 8006e0c:	02faf080 	.word	0x02faf080
 8006e10:	017d7840 	.word	0x017d7840

08006e14 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b086      	sub	sp, #24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006e20:	f107 030c 	add.w	r3, r7, #12
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa40 	bl	80072ac <SD_SendStatus>
 8006e2c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	431a      	orrs	r2, r3
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	0a5b      	lsrs	r3, r3, #9
 8006e44:	f003 030f 	and.w	r3, r3, #15
 8006e48:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006e4a:	693b      	ldr	r3, [r7, #16]
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	3718      	adds	r7, #24
 8006e50:	46bd      	mov	sp, r7
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b090      	sub	sp, #64	@ 0x40
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006e60:	f7fa fa32 	bl	80012c8 <HAL_GetTick>
 8006e64:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f001 fd99 	bl	80089a2 <SDMMC_GetPowerState>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d102      	bne.n	8006e7c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e76:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8006e7a:	e0b5      	b.n	8006fe8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d02e      	beq.n	8006ee2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f001 ffe4 	bl	8008e56 <SDMMC_CmdSendCID>
 8006e8e:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d001      	beq.n	8006e9a <SD_InitCard+0x46>
    {
      return errorstate;
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	e0a6      	b.n	8006fe8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2100      	movs	r1, #0
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fdc4 	bl	8008a2e <SDMMC_GetResponse>
 8006ea6:	4602      	mov	r2, r0
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2104      	movs	r1, #4
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f001 fdbb 	bl	8008a2e <SDMMC_GetResponse>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	2108      	movs	r1, #8
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	f001 fdb2 	bl	8008a2e <SDMMC_GetResponse>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	210c      	movs	r1, #12
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f001 fda9 	bl	8008a2e <SDMMC_GetResponse>
 8006edc:	4602      	mov	r2, r0
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ee6:	2b03      	cmp	r3, #3
 8006ee8:	d01d      	beq.n	8006f26 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006eea:	e019      	b.n	8006f20 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f107 020a 	add.w	r2, r7, #10
 8006ef4:	4611      	mov	r1, r2
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 ffec 	bl	8008ed4 <SDMMC_CmdSetRelAdd>
 8006efc:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d001      	beq.n	8006f08 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f06:	e06f      	b.n	8006fe8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006f08:	f7fa f9de 	bl	80012c8 <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d902      	bls.n	8006f20 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006f1a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006f1e:	e063      	b.n	8006fe8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006f20:	897b      	ldrh	r3, [r7, #10]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0e2      	beq.n	8006eec <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	2b03      	cmp	r3, #3
 8006f2c:	d036      	beq.n	8006f9c <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006f2e:	897b      	ldrh	r3, [r7, #10]
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681a      	ldr	r2, [r3, #0]
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	4619      	mov	r1, r3
 8006f42:	4610      	mov	r0, r2
 8006f44:	f001 ffa6 	bl	8008e94 <SDMMC_CmdSendCSD>
 8006f48:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <SD_InitCard+0x100>
    {
      return errorstate;
 8006f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f52:	e049      	b.n	8006fe8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2100      	movs	r1, #0
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f001 fd67 	bl	8008a2e <SDMMC_GetResponse>
 8006f60:	4602      	mov	r2, r0
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2104      	movs	r1, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f001 fd5e 	bl	8008a2e <SDMMC_GetResponse>
 8006f72:	4602      	mov	r2, r0
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2108      	movs	r1, #8
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f001 fd55 	bl	8008a2e <SDMMC_GetResponse>
 8006f84:	4602      	mov	r2, r0
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	210c      	movs	r1, #12
 8006f90:	4618      	mov	r0, r3
 8006f92:	f001 fd4c 	bl	8008a2e <SDMMC_GetResponse>
 8006f96:	4602      	mov	r2, r0
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2104      	movs	r1, #4
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f001 fd43 	bl	8008a2e <SDMMC_GetResponse>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	0d1a      	lsrs	r2, r3, #20
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006fb0:	f107 030c 	add.w	r3, r7, #12
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7ff fb8c 	bl	80066d4 <HAL_SD_GetCardCSD>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d002      	beq.n	8006fc8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006fc2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006fc6:	e00f      	b.n	8006fe8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006fd0:	041b      	lsls	r3, r3, #16
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f001 fe55 	bl	8008c84 <SDMMC_CmdSelDesel>
 8006fda:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <SD_InitCard+0x192>
  {
    return errorstate;
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	e000      	b.n	8006fe8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3740      	adds	r7, #64	@ 0x40
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f001 fe5e 	bl	8008cca <SDMMC_CmdGoIdleState>
 800700e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	e072      	b.n	8007100 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	4618      	mov	r0, r3
 8007020:	f001 fe71 	bl	8008d06 <SDMMC_CmdOperCond>
 8007024:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800702c:	d10d      	bne.n	800704a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fe46 	bl	8008cca <SDMMC_CmdGoIdleState>
 800703e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d004      	beq.n	8007050 <SD_PowerON+0x60>
    {
      return errorstate;
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	e05a      	b.n	8007100 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2201      	movs	r2, #1
 800704e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007054:	2b01      	cmp	r3, #1
 8007056:	d137      	bne.n	80070c8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2100      	movs	r1, #0
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fe71 	bl	8008d46 <SDMMC_CmdAppCommand>
 8007064:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d02d      	beq.n	80070c8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800706c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007070:	e046      	b.n	8007100 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	2100      	movs	r1, #0
 8007078:	4618      	mov	r0, r3
 800707a:	f001 fe64 	bl	8008d46 <SDMMC_CmdAppCommand>
 800707e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <SD_PowerON+0x9a>
    {
      return errorstate;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	e03a      	b.n	8007100 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	491e      	ldr	r1, [pc, #120]	@ (8007108 <SD_PowerON+0x118>)
 8007090:	4618      	mov	r0, r3
 8007092:	f001 fe7b 	bl	8008d8c <SDMMC_CmdAppOperCommand>
 8007096:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800709e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80070a2:	e02d      	b.n	8007100 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	2100      	movs	r1, #0
 80070aa:	4618      	mov	r0, r3
 80070ac:	f001 fcbf 	bl	8008a2e <SDMMC_GetResponse>
 80070b0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	0fdb      	lsrs	r3, r3, #31
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d101      	bne.n	80070be <SD_PowerON+0xce>
 80070ba:	2301      	movs	r3, #1
 80070bc:	e000      	b.n	80070c0 <SD_PowerON+0xd0>
 80070be:	2300      	movs	r3, #0
 80070c0:	613b      	str	r3, [r7, #16]

    count++;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	3301      	adds	r3, #1
 80070c6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d802      	bhi.n	80070d8 <SD_PowerON+0xe8>
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d0cc      	beq.n	8007072 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80070de:	4293      	cmp	r3, r2
 80070e0:	d902      	bls.n	80070e8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80070e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80070e6:	e00b      	b.n	8007100 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d002      	beq.n	80070fe <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 80070fe:	2300      	movs	r3, #0
}
 8007100:	4618      	mov	r0, r3
 8007102:	3718      	adds	r7, #24
 8007104:	46bd      	mov	sp, r7
 8007106:	bd80      	pop	{r7, pc}
 8007108:	c1100000 	.word	0xc1100000

0800710c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b08c      	sub	sp, #48	@ 0x30
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007116:	f7fa f8d7 	bl	80012c8 <HAL_GetTick>
 800711a:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	2100      	movs	r1, #0
 8007126:	4618      	mov	r0, r3
 8007128:	f001 fc81 	bl	8008a2e <SDMMC_GetResponse>
 800712c:	4603      	mov	r3, r0
 800712e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007132:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007136:	d102      	bne.n	800713e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007138:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800713c:	e0b0      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	2140      	movs	r1, #64	@ 0x40
 8007144:	4618      	mov	r0, r3
 8007146:	f001 fcb1 	bl	8008aac <SDMMC_CmdBlockLength>
 800714a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800714c:	6a3b      	ldr	r3, [r7, #32]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 800715a:	6a3b      	ldr	r3, [r7, #32]
 800715c:	e0a0      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007166:	041b      	lsls	r3, r3, #16
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f001 fdeb 	bl	8008d46 <SDMMC_CmdAppCommand>
 8007170:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007172:	6a3b      	ldr	r3, [r7, #32]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8007180:	6a3b      	ldr	r3, [r7, #32]
 8007182:	e08d      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007184:	f04f 33ff 	mov.w	r3, #4294967295
 8007188:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800718a:	2340      	movs	r3, #64	@ 0x40
 800718c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800718e:	2360      	movs	r3, #96	@ 0x60
 8007190:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007192:	2302      	movs	r3, #2
 8007194:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007196:	2300      	movs	r3, #0
 8007198:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800719a:	2301      	movs	r3, #1
 800719c:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f107 0208 	add.w	r2, r7, #8
 80071a6:	4611      	mov	r1, r2
 80071a8:	4618      	mov	r0, r3
 80071aa:	f001 fc53 	bl	8008a54 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 fed3 	bl	8008f5e <SDMMC_CmdStatusRegister>
 80071b8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d02b      	beq.n	8007218 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	e069      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d013      	beq.n	8007202 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 80071da:	2300      	movs	r3, #0
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071de:	e00d      	b.n	80071fc <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 fbad 	bl	8008944 <SDMMC_ReadFIFO>
 80071ea:	4602      	mov	r2, r0
 80071ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ee:	601a      	str	r2, [r3, #0]
        pData++;
 80071f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f2:	3304      	adds	r3, #4
 80071f4:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	3301      	adds	r3, #1
 80071fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	2b07      	cmp	r3, #7
 8007200:	d9ee      	bls.n	80071e0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007202:	f7fa f861 	bl	80012c8 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007210:	d102      	bne.n	8007218 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007212:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007216:	e043      	b.n	80072a0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800721e:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0d2      	beq.n	80071cc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800722c:	f003 0308 	and.w	r3, r3, #8
 8007230:	2b00      	cmp	r3, #0
 8007232:	d001      	beq.n	8007238 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007234:	2308      	movs	r3, #8
 8007236:	e033      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800723e:	f003 0302 	and.w	r3, r3, #2
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007246:	2302      	movs	r3, #2
 8007248:	e02a      	b.n	80072a0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d017      	beq.n	8007288 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007258:	2320      	movs	r3, #32
 800725a:	e021      	b.n	80072a0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4618      	mov	r0, r3
 8007262:	f001 fb6f 	bl	8008944 <SDMMC_ReadFIFO>
 8007266:	4602      	mov	r2, r0
 8007268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726a:	601a      	str	r2, [r3, #0]
    pData++;
 800726c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800726e:	3304      	adds	r3, #4
 8007270:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007272:	f7fa f829 	bl	80012c8 <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007280:	d102      	bne.n	8007288 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007282:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007286:	e00b      	b.n	80072a0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800728e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e2      	bne.n	800725c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a03      	ldr	r2, [pc, #12]	@ (80072a8 <SD_SendSDStatus+0x19c>)
 800729c:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 800729e:	2300      	movs	r3, #0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	@ 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	18000f3a 	.word	0x18000f3a

080072ac <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80072ac:	b580      	push	{r7, lr}
 80072ae:	b084      	sub	sp, #16
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
 80072b4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d102      	bne.n	80072c2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80072bc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80072c0:	e018      	b.n	80072f4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ca:	041b      	lsls	r3, r3, #16
 80072cc:	4619      	mov	r1, r3
 80072ce:	4610      	mov	r0, r2
 80072d0:	f001 fe22 	bl	8008f18 <SDMMC_CmdSendStatus>
 80072d4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	e009      	b.n	80072f4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	2100      	movs	r1, #0
 80072e6:	4618      	mov	r0, r3
 80072e8:	f001 fba1 	bl	8008a2e <SDMMC_GetResponse>
 80072ec:	4602      	mov	r2, r0
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80072f2:	2300      	movs	r3, #0
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b086      	sub	sp, #24
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007304:	2300      	movs	r3, #0
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	2300      	movs	r3, #0
 800730a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fb8b 	bl	8008a2e <SDMMC_GetResponse>
 8007318:	4603      	mov	r3, r0
 800731a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800731e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007322:	d102      	bne.n	800732a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007324:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007328:	e02f      	b.n	800738a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800732a:	f107 030c 	add.w	r3, r7, #12
 800732e:	4619      	mov	r1, r3
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 f879 	bl	8007428 <SD_FindSCR>
 8007336:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	e023      	b.n	800738a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d01c      	beq.n	8007386 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007354:	041b      	lsls	r3, r3, #16
 8007356:	4619      	mov	r1, r3
 8007358:	4610      	mov	r0, r2
 800735a:	f001 fcf4 	bl	8008d46 <SDMMC_CmdAppCommand>
 800735e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	e00f      	b.n	800738a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2102      	movs	r1, #2
 8007370:	4618      	mov	r0, r3
 8007372:	f001 fd2b 	bl	8008dcc <SDMMC_CmdBusWidth>
 8007376:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d001      	beq.n	8007382 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	e003      	b.n	800738a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007382:	2300      	movs	r3, #0
 8007384:	e001      	b.n	800738a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007386:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 800738a:	4618      	mov	r0, r3
 800738c:	3718      	adds	r7, #24
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}

08007392 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b086      	sub	sp, #24
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800739a:	2300      	movs	r3, #0
 800739c:	60fb      	str	r3, [r7, #12]
 800739e:	2300      	movs	r3, #0
 80073a0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2100      	movs	r1, #0
 80073a8:	4618      	mov	r0, r3
 80073aa:	f001 fb40 	bl	8008a2e <SDMMC_GetResponse>
 80073ae:	4603      	mov	r3, r0
 80073b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80073b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80073b8:	d102      	bne.n	80073c0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80073ba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80073be:	e02f      	b.n	8007420 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80073c0:	f107 030c 	add.w	r3, r7, #12
 80073c4:	4619      	mov	r1, r3
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f82e 	bl	8007428 <SD_FindSCR>
 80073cc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	e023      	b.n	8007420 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d01c      	beq.n	800741c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073ea:	041b      	lsls	r3, r3, #16
 80073ec:	4619      	mov	r1, r3
 80073ee:	4610      	mov	r0, r2
 80073f0:	f001 fca9 	bl	8008d46 <SDMMC_CmdAppCommand>
 80073f4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d001      	beq.n	8007400 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	e00f      	b.n	8007420 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	2100      	movs	r1, #0
 8007406:	4618      	mov	r0, r3
 8007408:	f001 fce0 	bl	8008dcc <SDMMC_CmdBusWidth>
 800740c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	e003      	b.n	8007420 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007418:	2300      	movs	r3, #0
 800741a:	e001      	b.n	8007420 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800741c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8007420:	4618      	mov	r0, r3
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08e      	sub	sp, #56	@ 0x38
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007432:	f7f9 ff49 	bl	80012c8 <HAL_GetTick>
 8007436:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800743c:	2300      	movs	r3, #0
 800743e:	60bb      	str	r3, [r7, #8]
 8007440:	2300      	movs	r3, #0
 8007442:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2108      	movs	r1, #8
 800744e:	4618      	mov	r0, r3
 8007450:	f001 fb2c 	bl	8008aac <SDMMC_CmdBlockLength>
 8007454:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007458:	2b00      	cmp	r3, #0
 800745a:	d001      	beq.n	8007460 <SD_FindSCR+0x38>
  {
    return errorstate;
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	e0ad      	b.n	80075bc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681a      	ldr	r2, [r3, #0]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007468:	041b      	lsls	r3, r3, #16
 800746a:	4619      	mov	r1, r3
 800746c:	4610      	mov	r0, r2
 800746e:	f001 fc6a 	bl	8008d46 <SDMMC_CmdAppCommand>
 8007472:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007476:	2b00      	cmp	r3, #0
 8007478:	d001      	beq.n	800747e <SD_FindSCR+0x56>
  {
    return errorstate;
 800747a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800747c:	e09e      	b.n	80075bc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800747e:	f04f 33ff 	mov.w	r3, #4294967295
 8007482:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007484:	2308      	movs	r3, #8
 8007486:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007488:	2330      	movs	r3, #48	@ 0x30
 800748a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800748c:	2302      	movs	r3, #2
 800748e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007490:	2300      	movs	r3, #0
 8007492:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007494:	2301      	movs	r3, #1
 8007496:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	f107 0210 	add.w	r2, r7, #16
 80074a0:	4611      	mov	r1, r2
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 fad6 	bl	8008a54 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4618      	mov	r0, r3
 80074ae:	f001 fcb0 	bl	8008e12 <SDMMC_CmdSendSCR>
 80074b2:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80074b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d027      	beq.n	800750a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80074ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074bc:	e07e      	b.n	80075bc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d113      	bne.n	80074f4 <SD_FindSCR+0xcc>
 80074cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d110      	bne.n	80074f4 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4618      	mov	r0, r3
 80074d8:	f001 fa34 	bl	8008944 <SDMMC_ReadFIFO>
 80074dc:	4603      	mov	r3, r0
 80074de:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f001 fa2d 	bl	8008944 <SDMMC_ReadFIFO>
 80074ea:	4603      	mov	r3, r0
 80074ec:	60fb      	str	r3, [r7, #12]
      index++;
 80074ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f0:	3301      	adds	r3, #1
 80074f2:	637b      	str	r3, [r7, #52]	@ 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80074f4:	f7f9 fee8 	bl	80012c8 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074fc:	1ad3      	subs	r3, r2, r3
 80074fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007502:	d102      	bne.n	800750a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007504:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007508:	e058      	b.n	80075bc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007510:	f240 532a 	movw	r3, #1322	@ 0x52a
 8007514:	4013      	ands	r3, r2
 8007516:	2b00      	cmp	r3, #0
 8007518:	d0d1      	beq.n	80074be <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d005      	beq.n	8007534 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	2208      	movs	r2, #8
 800752e:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007530:	2308      	movs	r3, #8
 8007532:	e043      	b.n	80075bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800753a:	f003 0302 	and.w	r3, r3, #2
 800753e:	2b00      	cmp	r3, #0
 8007540:	d005      	beq.n	800754e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2202      	movs	r2, #2
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800754a:	2302      	movs	r3, #2
 800754c:	e036      	b.n	80075bc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007554:	f003 0320 	and.w	r3, r3, #32
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	2220      	movs	r2, #32
 8007562:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007564:	2320      	movs	r3, #32
 8007566:	e029      	b.n	80075bc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a15      	ldr	r2, [pc, #84]	@ (80075c4 <SD_FindSCR+0x19c>)
 800756e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	061a      	lsls	r2, r3, #24
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	021b      	lsls	r3, r3, #8
 8007578:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800757c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	0a1b      	lsrs	r3, r3, #8
 8007582:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007586:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	0e1b      	lsrs	r3, r3, #24
 800758c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800758e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007590:	601a      	str	r2, [r3, #0]
    scr++;
 8007592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007594:	3304      	adds	r3, #4
 8007596:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	061a      	lsls	r2, r3, #24
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	021b      	lsls	r3, r3, #8
 80075a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80075a4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	0a1b      	lsrs	r3, r3, #8
 80075aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075ae:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	0e1b      	lsrs	r3, r3, #24
 80075b4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80075b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075b8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3738      	adds	r7, #56	@ 0x38
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	18000f3a 	.word	0x18000f3a

080075c8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075d4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075da:	2b1f      	cmp	r3, #31
 80075dc:	d936      	bls.n	800764c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80075de:	2300      	movs	r3, #0
 80075e0:	617b      	str	r3, [r7, #20]
 80075e2:	e027      	b.n	8007634 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4618      	mov	r0, r3
 80075ea:	f001 f9ab 	bl	8008944 <SDMMC_ReadFIFO>
 80075ee:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	b2da      	uxtb	r2, r3
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	3301      	adds	r3, #1
 80075fc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	0a1b      	lsrs	r3, r3, #8
 8007602:	b2da      	uxtb	r2, r3
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	3301      	adds	r3, #1
 800760c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	0c1b      	lsrs	r3, r3, #16
 8007612:	b2da      	uxtb	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	3301      	adds	r3, #1
 800761c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	0e1b      	lsrs	r3, r3, #24
 8007622:	b2da      	uxtb	r2, r3
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	3301      	adds	r3, #1
 800762c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	3301      	adds	r3, #1
 8007632:	617b      	str	r3, [r7, #20]
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	2b07      	cmp	r3, #7
 8007638:	d9d4      	bls.n	80075e4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= 32U;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007644:	f1a3 0220 	sub.w	r2, r3, #32
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 800764c:	bf00      	nop
 800764e:	3718      	adds	r7, #24
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b086      	sub	sp, #24
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	2b1f      	cmp	r3, #31
 8007668:	d93a      	bls.n	80076e0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800766a:	2300      	movs	r3, #0
 800766c:	617b      	str	r3, [r7, #20]
 800766e:	e02b      	b.n	80076c8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	3301      	adds	r3, #1
 800767a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	021a      	lsls	r2, r3, #8
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	4313      	orrs	r3, r2
 8007686:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	3301      	adds	r3, #1
 800768c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	781b      	ldrb	r3, [r3, #0]
 8007692:	041a      	lsls	r2, r3, #16
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	4313      	orrs	r3, r2
 8007698:	60fb      	str	r3, [r7, #12]
      tmp++;
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	3301      	adds	r3, #1
 800769e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	781b      	ldrb	r3, [r3, #0]
 80076a4:	061a      	lsls	r2, r3, #24
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	60fb      	str	r3, [r7, #12]
      tmp++;
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	3301      	adds	r3, #1
 80076b0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f107 020c 	add.w	r2, r7, #12
 80076ba:	4611      	mov	r1, r2
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 f94e 	bl	800895e <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	3301      	adds	r3, #1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	2b07      	cmp	r3, #7
 80076cc:	d9d0      	bls.n	8007670 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	693a      	ldr	r2, [r7, #16]
 80076d2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a1b      	ldr	r3, [r3, #32]
 80076d8:	f1a3 0220 	sub.w	r2, r3, #32
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	621a      	str	r2, [r3, #32]
  }
}
 80076e0:	bf00      	nop
 80076e2:	3718      	adds	r7, #24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80076f0:	bf00      	nop
 80076f2:	370c      	adds	r7, #12
 80076f4:	46bd      	mov	sp, r7
 80076f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fa:	4770      	bx	lr

080076fc <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b083      	sub	sp, #12
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007704:	bf00      	nop
 8007706:	370c      	adds	r7, #12
 8007708:	46bd      	mov	sp, r7
 800770a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770e:	4770      	bx	lr

08007710 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d101      	bne.n	800774a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e042      	b.n	80077d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007750:	2b00      	cmp	r3, #0
 8007752:	d106      	bne.n	8007762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f7f9 fb59 	bl	8000e14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2224      	movs	r2, #36	@ 0x24
 8007766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	681a      	ldr	r2, [r3, #0]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f022 0201 	bic.w	r2, r2, #1
 8007778:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800777e:	2b00      	cmp	r3, #0
 8007780:	d002      	beq.n	8007788 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fd90 	bl	80082a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007788:	6878      	ldr	r0, [r7, #4]
 800778a:	f000 f825 	bl	80077d8 <UART_SetConfig>
 800778e:	4603      	mov	r3, r0
 8007790:	2b01      	cmp	r3, #1
 8007792:	d101      	bne.n	8007798 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	e01b      	b.n	80077d0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685a      	ldr	r2, [r3, #4]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80077a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	689a      	ldr	r2, [r3, #8]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f000 fe0f 	bl	80083ec <UART_CheckIdleState>
 80077ce:	4603      	mov	r3, r0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}

080077d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077dc:	b092      	sub	sp, #72	@ 0x48
 80077de:	af00      	add	r7, sp, #0
 80077e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80077e2:	2300      	movs	r3, #0
 80077e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	689a      	ldr	r2, [r3, #8]
 80077ec:	697b      	ldr	r3, [r7, #20]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	697b      	ldr	r3, [r7, #20]
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	69db      	ldr	r3, [r3, #28]
 80077fc:	4313      	orrs	r3, r2
 80077fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007800:	697b      	ldr	r3, [r7, #20]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	4bbe      	ldr	r3, [pc, #760]	@ (8007b00 <UART_SetConfig+0x328>)
 8007808:	4013      	ands	r3, r2
 800780a:	697a      	ldr	r2, [r7, #20]
 800780c:	6812      	ldr	r2, [r2, #0]
 800780e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007810:	430b      	orrs	r3, r1
 8007812:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	68da      	ldr	r2, [r3, #12]
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	430a      	orrs	r2, r1
 8007828:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	699b      	ldr	r3, [r3, #24]
 800782e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4ab3      	ldr	r2, [pc, #716]	@ (8007b04 <UART_SetConfig+0x32c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d004      	beq.n	8007844 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007840:	4313      	orrs	r3, r2
 8007842:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689a      	ldr	r2, [r3, #8]
 800784a:	4baf      	ldr	r3, [pc, #700]	@ (8007b08 <UART_SetConfig+0x330>)
 800784c:	4013      	ands	r3, r2
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	6812      	ldr	r2, [r2, #0]
 8007852:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007854:	430b      	orrs	r3, r1
 8007856:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800785e:	f023 010f 	bic.w	r1, r3, #15
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	430a      	orrs	r2, r1
 800786c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4aa6      	ldr	r2, [pc, #664]	@ (8007b0c <UART_SetConfig+0x334>)
 8007874:	4293      	cmp	r3, r2
 8007876:	d177      	bne.n	8007968 <UART_SetConfig+0x190>
 8007878:	4ba5      	ldr	r3, [pc, #660]	@ (8007b10 <UART_SetConfig+0x338>)
 800787a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007880:	2b28      	cmp	r3, #40	@ 0x28
 8007882:	d86d      	bhi.n	8007960 <UART_SetConfig+0x188>
 8007884:	a201      	add	r2, pc, #4	@ (adr r2, 800788c <UART_SetConfig+0xb4>)
 8007886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800788a:	bf00      	nop
 800788c:	08007931 	.word	0x08007931
 8007890:	08007961 	.word	0x08007961
 8007894:	08007961 	.word	0x08007961
 8007898:	08007961 	.word	0x08007961
 800789c:	08007961 	.word	0x08007961
 80078a0:	08007961 	.word	0x08007961
 80078a4:	08007961 	.word	0x08007961
 80078a8:	08007961 	.word	0x08007961
 80078ac:	08007939 	.word	0x08007939
 80078b0:	08007961 	.word	0x08007961
 80078b4:	08007961 	.word	0x08007961
 80078b8:	08007961 	.word	0x08007961
 80078bc:	08007961 	.word	0x08007961
 80078c0:	08007961 	.word	0x08007961
 80078c4:	08007961 	.word	0x08007961
 80078c8:	08007961 	.word	0x08007961
 80078cc:	08007941 	.word	0x08007941
 80078d0:	08007961 	.word	0x08007961
 80078d4:	08007961 	.word	0x08007961
 80078d8:	08007961 	.word	0x08007961
 80078dc:	08007961 	.word	0x08007961
 80078e0:	08007961 	.word	0x08007961
 80078e4:	08007961 	.word	0x08007961
 80078e8:	08007961 	.word	0x08007961
 80078ec:	08007949 	.word	0x08007949
 80078f0:	08007961 	.word	0x08007961
 80078f4:	08007961 	.word	0x08007961
 80078f8:	08007961 	.word	0x08007961
 80078fc:	08007961 	.word	0x08007961
 8007900:	08007961 	.word	0x08007961
 8007904:	08007961 	.word	0x08007961
 8007908:	08007961 	.word	0x08007961
 800790c:	08007951 	.word	0x08007951
 8007910:	08007961 	.word	0x08007961
 8007914:	08007961 	.word	0x08007961
 8007918:	08007961 	.word	0x08007961
 800791c:	08007961 	.word	0x08007961
 8007920:	08007961 	.word	0x08007961
 8007924:	08007961 	.word	0x08007961
 8007928:	08007961 	.word	0x08007961
 800792c:	08007959 	.word	0x08007959
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007936:	e222      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007938:	2304      	movs	r3, #4
 800793a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793e:	e21e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007940:	2308      	movs	r3, #8
 8007942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007946:	e21a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007948:	2310      	movs	r3, #16
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e216      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007950:	2320      	movs	r3, #32
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e212      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007958:	2340      	movs	r3, #64	@ 0x40
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e20e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007960:	2380      	movs	r3, #128	@ 0x80
 8007962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007966:	e20a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a69      	ldr	r2, [pc, #420]	@ (8007b14 <UART_SetConfig+0x33c>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d130      	bne.n	80079d4 <UART_SetConfig+0x1fc>
 8007972:	4b67      	ldr	r3, [pc, #412]	@ (8007b10 <UART_SetConfig+0x338>)
 8007974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007976:	f003 0307 	and.w	r3, r3, #7
 800797a:	2b05      	cmp	r3, #5
 800797c:	d826      	bhi.n	80079cc <UART_SetConfig+0x1f4>
 800797e:	a201      	add	r2, pc, #4	@ (adr r2, 8007984 <UART_SetConfig+0x1ac>)
 8007980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007984:	0800799d 	.word	0x0800799d
 8007988:	080079a5 	.word	0x080079a5
 800798c:	080079ad 	.word	0x080079ad
 8007990:	080079b5 	.word	0x080079b5
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079c5 	.word	0x080079c5
 800799c:	2300      	movs	r3, #0
 800799e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079a2:	e1ec      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079a4:	2304      	movs	r3, #4
 80079a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079aa:	e1e8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079ac:	2308      	movs	r3, #8
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e1e4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079b4:	2310      	movs	r3, #16
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e1e0      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079bc:	2320      	movs	r3, #32
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e1dc      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079c4:	2340      	movs	r3, #64	@ 0x40
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e1d8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079cc:	2380      	movs	r3, #128	@ 0x80
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e1d4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4a4f      	ldr	r2, [pc, #316]	@ (8007b18 <UART_SetConfig+0x340>)
 80079da:	4293      	cmp	r3, r2
 80079dc:	d130      	bne.n	8007a40 <UART_SetConfig+0x268>
 80079de:	4b4c      	ldr	r3, [pc, #304]	@ (8007b10 <UART_SetConfig+0x338>)
 80079e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079e2:	f003 0307 	and.w	r3, r3, #7
 80079e6:	2b05      	cmp	r3, #5
 80079e8:	d826      	bhi.n	8007a38 <UART_SetConfig+0x260>
 80079ea:	a201      	add	r2, pc, #4	@ (adr r2, 80079f0 <UART_SetConfig+0x218>)
 80079ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079f0:	08007a09 	.word	0x08007a09
 80079f4:	08007a11 	.word	0x08007a11
 80079f8:	08007a19 	.word	0x08007a19
 80079fc:	08007a21 	.word	0x08007a21
 8007a00:	08007a29 	.word	0x08007a29
 8007a04:	08007a31 	.word	0x08007a31
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0e:	e1b6      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a10:	2304      	movs	r3, #4
 8007a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a16:	e1b2      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a18:	2308      	movs	r3, #8
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e1ae      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a20:	2310      	movs	r3, #16
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e1aa      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a28:	2320      	movs	r3, #32
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e1a6      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a30:	2340      	movs	r3, #64	@ 0x40
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e1a2      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a38:	2380      	movs	r3, #128	@ 0x80
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e19e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a40:	697b      	ldr	r3, [r7, #20]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a35      	ldr	r2, [pc, #212]	@ (8007b1c <UART_SetConfig+0x344>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d130      	bne.n	8007aac <UART_SetConfig+0x2d4>
 8007a4a:	4b31      	ldr	r3, [pc, #196]	@ (8007b10 <UART_SetConfig+0x338>)
 8007a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a4e:	f003 0307 	and.w	r3, r3, #7
 8007a52:	2b05      	cmp	r3, #5
 8007a54:	d826      	bhi.n	8007aa4 <UART_SetConfig+0x2cc>
 8007a56:	a201      	add	r2, pc, #4	@ (adr r2, 8007a5c <UART_SetConfig+0x284>)
 8007a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a5c:	08007a75 	.word	0x08007a75
 8007a60:	08007a7d 	.word	0x08007a7d
 8007a64:	08007a85 	.word	0x08007a85
 8007a68:	08007a8d 	.word	0x08007a8d
 8007a6c:	08007a95 	.word	0x08007a95
 8007a70:	08007a9d 	.word	0x08007a9d
 8007a74:	2300      	movs	r3, #0
 8007a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7a:	e180      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a7c:	2304      	movs	r3, #4
 8007a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a82:	e17c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a84:	2308      	movs	r3, #8
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e178      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a8c:	2310      	movs	r3, #16
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e174      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a94:	2320      	movs	r3, #32
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e170      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007a9c:	2340      	movs	r3, #64	@ 0x40
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e16c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007aa4:	2380      	movs	r3, #128	@ 0x80
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e168      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8007b20 <UART_SetConfig+0x348>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d142      	bne.n	8007b3c <UART_SetConfig+0x364>
 8007ab6:	4b16      	ldr	r3, [pc, #88]	@ (8007b10 <UART_SetConfig+0x338>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	f003 0307 	and.w	r3, r3, #7
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d838      	bhi.n	8007b34 <UART_SetConfig+0x35c>
 8007ac2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ac8 <UART_SetConfig+0x2f0>)
 8007ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ac8:	08007ae1 	.word	0x08007ae1
 8007acc:	08007ae9 	.word	0x08007ae9
 8007ad0:	08007af1 	.word	0x08007af1
 8007ad4:	08007af9 	.word	0x08007af9
 8007ad8:	08007b25 	.word	0x08007b25
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae6:	e14a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ae8:	2304      	movs	r3, #4
 8007aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aee:	e146      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007af0:	2308      	movs	r3, #8
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e142      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007af8:	2310      	movs	r3, #16
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e13e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b00:	cfff69f3 	.word	0xcfff69f3
 8007b04:	58000c00 	.word	0x58000c00
 8007b08:	11fff4ff 	.word	0x11fff4ff
 8007b0c:	40011000 	.word	0x40011000
 8007b10:	58024400 	.word	0x58024400
 8007b14:	40004400 	.word	0x40004400
 8007b18:	40004800 	.word	0x40004800
 8007b1c:	40004c00 	.word	0x40004c00
 8007b20:	40005000 	.word	0x40005000
 8007b24:	2320      	movs	r3, #32
 8007b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2a:	e128      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b2c:	2340      	movs	r3, #64	@ 0x40
 8007b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b32:	e124      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b34:	2380      	movs	r3, #128	@ 0x80
 8007b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b3a:	e120      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4acb      	ldr	r2, [pc, #812]	@ (8007e70 <UART_SetConfig+0x698>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d176      	bne.n	8007c34 <UART_SetConfig+0x45c>
 8007b46:	4bcb      	ldr	r3, [pc, #812]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b4e:	2b28      	cmp	r3, #40	@ 0x28
 8007b50:	d86c      	bhi.n	8007c2c <UART_SetConfig+0x454>
 8007b52:	a201      	add	r2, pc, #4	@ (adr r2, 8007b58 <UART_SetConfig+0x380>)
 8007b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b58:	08007bfd 	.word	0x08007bfd
 8007b5c:	08007c2d 	.word	0x08007c2d
 8007b60:	08007c2d 	.word	0x08007c2d
 8007b64:	08007c2d 	.word	0x08007c2d
 8007b68:	08007c2d 	.word	0x08007c2d
 8007b6c:	08007c2d 	.word	0x08007c2d
 8007b70:	08007c2d 	.word	0x08007c2d
 8007b74:	08007c2d 	.word	0x08007c2d
 8007b78:	08007c05 	.word	0x08007c05
 8007b7c:	08007c2d 	.word	0x08007c2d
 8007b80:	08007c2d 	.word	0x08007c2d
 8007b84:	08007c2d 	.word	0x08007c2d
 8007b88:	08007c2d 	.word	0x08007c2d
 8007b8c:	08007c2d 	.word	0x08007c2d
 8007b90:	08007c2d 	.word	0x08007c2d
 8007b94:	08007c2d 	.word	0x08007c2d
 8007b98:	08007c0d 	.word	0x08007c0d
 8007b9c:	08007c2d 	.word	0x08007c2d
 8007ba0:	08007c2d 	.word	0x08007c2d
 8007ba4:	08007c2d 	.word	0x08007c2d
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c2d 	.word	0x08007c2d
 8007bb0:	08007c2d 	.word	0x08007c2d
 8007bb4:	08007c2d 	.word	0x08007c2d
 8007bb8:	08007c15 	.word	0x08007c15
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c2d 	.word	0x08007c2d
 8007bc4:	08007c2d 	.word	0x08007c2d
 8007bc8:	08007c2d 	.word	0x08007c2d
 8007bcc:	08007c2d 	.word	0x08007c2d
 8007bd0:	08007c2d 	.word	0x08007c2d
 8007bd4:	08007c2d 	.word	0x08007c2d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c2d 	.word	0x08007c2d
 8007be0:	08007c2d 	.word	0x08007c2d
 8007be4:	08007c2d 	.word	0x08007c2d
 8007be8:	08007c2d 	.word	0x08007c2d
 8007bec:	08007c2d 	.word	0x08007c2d
 8007bf0:	08007c2d 	.word	0x08007c2d
 8007bf4:	08007c2d 	.word	0x08007c2d
 8007bf8:	08007c25 	.word	0x08007c25
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c02:	e0bc      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c04:	2304      	movs	r3, #4
 8007c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c0a:	e0b8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c0c:	2308      	movs	r3, #8
 8007c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c12:	e0b4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c14:	2310      	movs	r3, #16
 8007c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c1a:	e0b0      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c1c:	2320      	movs	r3, #32
 8007c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c22:	e0ac      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c24:	2340      	movs	r3, #64	@ 0x40
 8007c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c2a:	e0a8      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c2c:	2380      	movs	r3, #128	@ 0x80
 8007c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c32:	e0a4      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a8f      	ldr	r2, [pc, #572]	@ (8007e78 <UART_SetConfig+0x6a0>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d130      	bne.n	8007ca0 <UART_SetConfig+0x4c8>
 8007c3e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c42:	f003 0307 	and.w	r3, r3, #7
 8007c46:	2b05      	cmp	r3, #5
 8007c48:	d826      	bhi.n	8007c98 <UART_SetConfig+0x4c0>
 8007c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c50 <UART_SetConfig+0x478>)
 8007c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c50:	08007c69 	.word	0x08007c69
 8007c54:	08007c71 	.word	0x08007c71
 8007c58:	08007c79 	.word	0x08007c79
 8007c5c:	08007c81 	.word	0x08007c81
 8007c60:	08007c89 	.word	0x08007c89
 8007c64:	08007c91 	.word	0x08007c91
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c6e:	e086      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c70:	2304      	movs	r3, #4
 8007c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c76:	e082      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c78:	2308      	movs	r3, #8
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e07e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c80:	2310      	movs	r3, #16
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e07a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c88:	2320      	movs	r3, #32
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e076      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c90:	2340      	movs	r3, #64	@ 0x40
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e072      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007c98:	2380      	movs	r3, #128	@ 0x80
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e06e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4a75      	ldr	r2, [pc, #468]	@ (8007e7c <UART_SetConfig+0x6a4>)
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d130      	bne.n	8007d0c <UART_SetConfig+0x534>
 8007caa:	4b72      	ldr	r3, [pc, #456]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b05      	cmp	r3, #5
 8007cb4:	d826      	bhi.n	8007d04 <UART_SetConfig+0x52c>
 8007cb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007cbc <UART_SetConfig+0x4e4>)
 8007cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cbc:	08007cd5 	.word	0x08007cd5
 8007cc0:	08007cdd 	.word	0x08007cdd
 8007cc4:	08007ce5 	.word	0x08007ce5
 8007cc8:	08007ced 	.word	0x08007ced
 8007ccc:	08007cf5 	.word	0x08007cf5
 8007cd0:	08007cfd 	.word	0x08007cfd
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cda:	e050      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cdc:	2304      	movs	r3, #4
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e04c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007ce4:	2308      	movs	r3, #8
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e048      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cec:	2310      	movs	r3, #16
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e044      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cf4:	2320      	movs	r3, #32
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e040      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007cfc:	2340      	movs	r3, #64	@ 0x40
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e03c      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d04:	2380      	movs	r3, #128	@ 0x80
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e038      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a5b      	ldr	r2, [pc, #364]	@ (8007e80 <UART_SetConfig+0x6a8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d130      	bne.n	8007d78 <UART_SetConfig+0x5a0>
 8007d16:	4b57      	ldr	r3, [pc, #348]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1a:	f003 0307 	and.w	r3, r3, #7
 8007d1e:	2b05      	cmp	r3, #5
 8007d20:	d826      	bhi.n	8007d70 <UART_SetConfig+0x598>
 8007d22:	a201      	add	r2, pc, #4	@ (adr r2, 8007d28 <UART_SetConfig+0x550>)
 8007d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d28:	08007d41 	.word	0x08007d41
 8007d2c:	08007d49 	.word	0x08007d49
 8007d30:	08007d51 	.word	0x08007d51
 8007d34:	08007d59 	.word	0x08007d59
 8007d38:	08007d61 	.word	0x08007d61
 8007d3c:	08007d69 	.word	0x08007d69
 8007d40:	2302      	movs	r3, #2
 8007d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d46:	e01a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d48:	2304      	movs	r3, #4
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e016      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d50:	2308      	movs	r3, #8
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e012      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d58:	2310      	movs	r3, #16
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e00e      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d60:	2320      	movs	r3, #32
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e00a      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d68:	2340      	movs	r3, #64	@ 0x40
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e006      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d70:	2380      	movs	r3, #128	@ 0x80
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e002      	b.n	8007d7e <UART_SetConfig+0x5a6>
 8007d78:	2380      	movs	r3, #128	@ 0x80
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a3f      	ldr	r2, [pc, #252]	@ (8007e80 <UART_SetConfig+0x6a8>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	f040 80f8 	bne.w	8007f7a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d8a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d8e:	2b20      	cmp	r3, #32
 8007d90:	dc46      	bgt.n	8007e20 <UART_SetConfig+0x648>
 8007d92:	2b02      	cmp	r3, #2
 8007d94:	f2c0 8082 	blt.w	8007e9c <UART_SetConfig+0x6c4>
 8007d98:	3b02      	subs	r3, #2
 8007d9a:	2b1e      	cmp	r3, #30
 8007d9c:	d87e      	bhi.n	8007e9c <UART_SetConfig+0x6c4>
 8007d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007da4 <UART_SetConfig+0x5cc>)
 8007da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da4:	08007e27 	.word	0x08007e27
 8007da8:	08007e9d 	.word	0x08007e9d
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e9d 	.word	0x08007e9d
 8007db4:	08007e9d 	.word	0x08007e9d
 8007db8:	08007e9d 	.word	0x08007e9d
 8007dbc:	08007e3f 	.word	0x08007e3f
 8007dc0:	08007e9d 	.word	0x08007e9d
 8007dc4:	08007e9d 	.word	0x08007e9d
 8007dc8:	08007e9d 	.word	0x08007e9d
 8007dcc:	08007e9d 	.word	0x08007e9d
 8007dd0:	08007e9d 	.word	0x08007e9d
 8007dd4:	08007e9d 	.word	0x08007e9d
 8007dd8:	08007e9d 	.word	0x08007e9d
 8007ddc:	08007e4f 	.word	0x08007e4f
 8007de0:	08007e9d 	.word	0x08007e9d
 8007de4:	08007e9d 	.word	0x08007e9d
 8007de8:	08007e9d 	.word	0x08007e9d
 8007dec:	08007e9d 	.word	0x08007e9d
 8007df0:	08007e9d 	.word	0x08007e9d
 8007df4:	08007e9d 	.word	0x08007e9d
 8007df8:	08007e9d 	.word	0x08007e9d
 8007dfc:	08007e9d 	.word	0x08007e9d
 8007e00:	08007e9d 	.word	0x08007e9d
 8007e04:	08007e9d 	.word	0x08007e9d
 8007e08:	08007e9d 	.word	0x08007e9d
 8007e0c:	08007e9d 	.word	0x08007e9d
 8007e10:	08007e9d 	.word	0x08007e9d
 8007e14:	08007e9d 	.word	0x08007e9d
 8007e18:	08007e9d 	.word	0x08007e9d
 8007e1c:	08007e8f 	.word	0x08007e8f
 8007e20:	2b40      	cmp	r3, #64	@ 0x40
 8007e22:	d037      	beq.n	8007e94 <UART_SetConfig+0x6bc>
 8007e24:	e03a      	b.n	8007e9c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e26:	f7fd faaf 	bl	8005388 <HAL_RCCEx_GetD3PCLK1Freq>
 8007e2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e2c:	e03c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7fd fabe 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e3c:	e034      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e3e:	f107 0318 	add.w	r3, r7, #24
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd fc0a 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e4c:	e02c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e4e:	4b09      	ldr	r3, [pc, #36]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 0320 	and.w	r3, r3, #32
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e5a:	4b06      	ldr	r3, [pc, #24]	@ (8007e74 <UART_SetConfig+0x69c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	08db      	lsrs	r3, r3, #3
 8007e60:	f003 0303 	and.w	r3, r3, #3
 8007e64:	4a07      	ldr	r2, [pc, #28]	@ (8007e84 <UART_SetConfig+0x6ac>)
 8007e66:	fa22 f303 	lsr.w	r3, r2, r3
 8007e6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e6c:	e01c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
 8007e6e:	bf00      	nop
 8007e70:	40011400 	.word	0x40011400
 8007e74:	58024400 	.word	0x58024400
 8007e78:	40007800 	.word	0x40007800
 8007e7c:	40007c00 	.word	0x40007c00
 8007e80:	58000c00 	.word	0x58000c00
 8007e84:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007e88:	4b9d      	ldr	r3, [pc, #628]	@ (8008100 <UART_SetConfig+0x928>)
 8007e8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e8c:	e00c      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e8e:	4b9d      	ldr	r3, [pc, #628]	@ (8008104 <UART_SetConfig+0x92c>)
 8007e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e92:	e009      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9a:	e005      	b.n	8007ea8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007ea6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ea8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 81de 	beq.w	800826c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eb4:	4a94      	ldr	r2, [pc, #592]	@ (8008108 <UART_SetConfig+0x930>)
 8007eb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ebe:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ec2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	4413      	add	r3, r2
 8007ece:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d305      	bcc.n	8007ee0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d903      	bls.n	8007ee8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ee6:	e1c1      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eea:	2200      	movs	r2, #0
 8007eec:	60bb      	str	r3, [r7, #8]
 8007eee:	60fa      	str	r2, [r7, #12]
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef4:	4a84      	ldr	r2, [pc, #528]	@ (8008108 <UART_SetConfig+0x930>)
 8007ef6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	2200      	movs	r2, #0
 8007efe:	603b      	str	r3, [r7, #0]
 8007f00:	607a      	str	r2, [r7, #4]
 8007f02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f06:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f0a:	f7f8 f9e9 	bl	80002e0 <__aeabi_uldivmod>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	460b      	mov	r3, r1
 8007f12:	4610      	mov	r0, r2
 8007f14:	4619      	mov	r1, r3
 8007f16:	f04f 0200 	mov.w	r2, #0
 8007f1a:	f04f 0300 	mov.w	r3, #0
 8007f1e:	020b      	lsls	r3, r1, #8
 8007f20:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f24:	0202      	lsls	r2, r0, #8
 8007f26:	6979      	ldr	r1, [r7, #20]
 8007f28:	6849      	ldr	r1, [r1, #4]
 8007f2a:	0849      	lsrs	r1, r1, #1
 8007f2c:	2000      	movs	r0, #0
 8007f2e:	460c      	mov	r4, r1
 8007f30:	4605      	mov	r5, r0
 8007f32:	eb12 0804 	adds.w	r8, r2, r4
 8007f36:	eb43 0905 	adc.w	r9, r3, r5
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	685b      	ldr	r3, [r3, #4]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	469a      	mov	sl, r3
 8007f42:	4693      	mov	fp, r2
 8007f44:	4652      	mov	r2, sl
 8007f46:	465b      	mov	r3, fp
 8007f48:	4640      	mov	r0, r8
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	f7f8 f9c8 	bl	80002e0 <__aeabi_uldivmod>
 8007f50:	4602      	mov	r2, r0
 8007f52:	460b      	mov	r3, r1
 8007f54:	4613      	mov	r3, r2
 8007f56:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f5e:	d308      	bcc.n	8007f72 <UART_SetConfig+0x79a>
 8007f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f66:	d204      	bcs.n	8007f72 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f6e:	60da      	str	r2, [r3, #12]
 8007f70:	e17c      	b.n	800826c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f78:	e178      	b.n	800826c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	69db      	ldr	r3, [r3, #28]
 8007f7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f82:	f040 80c5 	bne.w	8008110 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007f86:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	2b20      	cmp	r3, #32
 8007f8c:	dc48      	bgt.n	8008020 <UART_SetConfig+0x848>
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	db7b      	blt.n	800808a <UART_SetConfig+0x8b2>
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d879      	bhi.n	800808a <UART_SetConfig+0x8b2>
 8007f96:	a201      	add	r2, pc, #4	@ (adr r2, 8007f9c <UART_SetConfig+0x7c4>)
 8007f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9c:	08008027 	.word	0x08008027
 8007fa0:	0800802f 	.word	0x0800802f
 8007fa4:	0800808b 	.word	0x0800808b
 8007fa8:	0800808b 	.word	0x0800808b
 8007fac:	08008037 	.word	0x08008037
 8007fb0:	0800808b 	.word	0x0800808b
 8007fb4:	0800808b 	.word	0x0800808b
 8007fb8:	0800808b 	.word	0x0800808b
 8007fbc:	08008047 	.word	0x08008047
 8007fc0:	0800808b 	.word	0x0800808b
 8007fc4:	0800808b 	.word	0x0800808b
 8007fc8:	0800808b 	.word	0x0800808b
 8007fcc:	0800808b 	.word	0x0800808b
 8007fd0:	0800808b 	.word	0x0800808b
 8007fd4:	0800808b 	.word	0x0800808b
 8007fd8:	0800808b 	.word	0x0800808b
 8007fdc:	08008057 	.word	0x08008057
 8007fe0:	0800808b 	.word	0x0800808b
 8007fe4:	0800808b 	.word	0x0800808b
 8007fe8:	0800808b 	.word	0x0800808b
 8007fec:	0800808b 	.word	0x0800808b
 8007ff0:	0800808b 	.word	0x0800808b
 8007ff4:	0800808b 	.word	0x0800808b
 8007ff8:	0800808b 	.word	0x0800808b
 8007ffc:	0800808b 	.word	0x0800808b
 8008000:	0800808b 	.word	0x0800808b
 8008004:	0800808b 	.word	0x0800808b
 8008008:	0800808b 	.word	0x0800808b
 800800c:	0800808b 	.word	0x0800808b
 8008010:	0800808b 	.word	0x0800808b
 8008014:	0800808b 	.word	0x0800808b
 8008018:	0800808b 	.word	0x0800808b
 800801c:	0800807d 	.word	0x0800807d
 8008020:	2b40      	cmp	r3, #64	@ 0x40
 8008022:	d02e      	beq.n	8008082 <UART_SetConfig+0x8aa>
 8008024:	e031      	b.n	800808a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008026:	f7fb f9f9 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 800802a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800802c:	e033      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800802e:	f7fb fa0b 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 8008032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008034:	e02f      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008036:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800803a:	4618      	mov	r0, r3
 800803c:	f7fd f9ba 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008042:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008044:	e027      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008046:	f107 0318 	add.w	r3, r7, #24
 800804a:	4618      	mov	r0, r3
 800804c:	f7fd fb06 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008054:	e01f      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008056:	4b2d      	ldr	r3, [pc, #180]	@ (800810c <UART_SetConfig+0x934>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	d009      	beq.n	8008076 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008062:	4b2a      	ldr	r3, [pc, #168]	@ (800810c <UART_SetConfig+0x934>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	08db      	lsrs	r3, r3, #3
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	4a24      	ldr	r2, [pc, #144]	@ (8008100 <UART_SetConfig+0x928>)
 800806e:	fa22 f303 	lsr.w	r3, r2, r3
 8008072:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008074:	e00f      	b.n	8008096 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008076:	4b22      	ldr	r3, [pc, #136]	@ (8008100 <UART_SetConfig+0x928>)
 8008078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800807a:	e00c      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800807c:	4b21      	ldr	r3, [pc, #132]	@ (8008104 <UART_SetConfig+0x92c>)
 800807e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008080:	e009      	b.n	8008096 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e005      	b.n	8008096 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008094:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008096:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008098:	2b00      	cmp	r3, #0
 800809a:	f000 80e7 	beq.w	800826c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a2:	4a19      	ldr	r2, [pc, #100]	@ (8008108 <UART_SetConfig+0x930>)
 80080a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080a8:	461a      	mov	r2, r3
 80080aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b0:	005a      	lsls	r2, r3, #1
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	685b      	ldr	r3, [r3, #4]
 80080b6:	085b      	lsrs	r3, r3, #1
 80080b8:	441a      	add	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	fbb2 f3f3 	udiv	r3, r2, r3
 80080c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080c6:	2b0f      	cmp	r3, #15
 80080c8:	d916      	bls.n	80080f8 <UART_SetConfig+0x920>
 80080ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d0:	d212      	bcs.n	80080f8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f023 030f 	bic.w	r3, r3, #15
 80080da:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	f003 0307 	and.w	r3, r3, #7
 80080e6:	b29a      	uxth	r2, r3
 80080e8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080ea:	4313      	orrs	r3, r2
 80080ec:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80080ee:	697b      	ldr	r3, [r7, #20]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080f4:	60da      	str	r2, [r3, #12]
 80080f6:	e0b9      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80080fe:	e0b5      	b.n	800826c <UART_SetConfig+0xa94>
 8008100:	03d09000 	.word	0x03d09000
 8008104:	003d0900 	.word	0x003d0900
 8008108:	0800d184 	.word	0x0800d184
 800810c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008110:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008114:	2b20      	cmp	r3, #32
 8008116:	dc49      	bgt.n	80081ac <UART_SetConfig+0x9d4>
 8008118:	2b00      	cmp	r3, #0
 800811a:	db7c      	blt.n	8008216 <UART_SetConfig+0xa3e>
 800811c:	2b20      	cmp	r3, #32
 800811e:	d87a      	bhi.n	8008216 <UART_SetConfig+0xa3e>
 8008120:	a201      	add	r2, pc, #4	@ (adr r2, 8008128 <UART_SetConfig+0x950>)
 8008122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008126:	bf00      	nop
 8008128:	080081b3 	.word	0x080081b3
 800812c:	080081bb 	.word	0x080081bb
 8008130:	08008217 	.word	0x08008217
 8008134:	08008217 	.word	0x08008217
 8008138:	080081c3 	.word	0x080081c3
 800813c:	08008217 	.word	0x08008217
 8008140:	08008217 	.word	0x08008217
 8008144:	08008217 	.word	0x08008217
 8008148:	080081d3 	.word	0x080081d3
 800814c:	08008217 	.word	0x08008217
 8008150:	08008217 	.word	0x08008217
 8008154:	08008217 	.word	0x08008217
 8008158:	08008217 	.word	0x08008217
 800815c:	08008217 	.word	0x08008217
 8008160:	08008217 	.word	0x08008217
 8008164:	08008217 	.word	0x08008217
 8008168:	080081e3 	.word	0x080081e3
 800816c:	08008217 	.word	0x08008217
 8008170:	08008217 	.word	0x08008217
 8008174:	08008217 	.word	0x08008217
 8008178:	08008217 	.word	0x08008217
 800817c:	08008217 	.word	0x08008217
 8008180:	08008217 	.word	0x08008217
 8008184:	08008217 	.word	0x08008217
 8008188:	08008217 	.word	0x08008217
 800818c:	08008217 	.word	0x08008217
 8008190:	08008217 	.word	0x08008217
 8008194:	08008217 	.word	0x08008217
 8008198:	08008217 	.word	0x08008217
 800819c:	08008217 	.word	0x08008217
 80081a0:	08008217 	.word	0x08008217
 80081a4:	08008217 	.word	0x08008217
 80081a8:	08008209 	.word	0x08008209
 80081ac:	2b40      	cmp	r3, #64	@ 0x40
 80081ae:	d02e      	beq.n	800820e <UART_SetConfig+0xa36>
 80081b0:	e031      	b.n	8008216 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081b2:	f7fb f933 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 80081b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081b8:	e033      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081ba:	f7fb f945 	bl	8003448 <HAL_RCC_GetPCLK2Freq>
 80081be:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081c0:	e02f      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fd f8f4 	bl	80053b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081d0:	e027      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081d2:	f107 0318 	add.w	r3, r7, #24
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd fa40 	bl	800565c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081dc:	69fb      	ldr	r3, [r7, #28]
 80081de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081e0:	e01f      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081e2:	4b2d      	ldr	r3, [pc, #180]	@ (8008298 <UART_SetConfig+0xac0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f003 0320 	and.w	r3, r3, #32
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d009      	beq.n	8008202 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ee:	4b2a      	ldr	r3, [pc, #168]	@ (8008298 <UART_SetConfig+0xac0>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	08db      	lsrs	r3, r3, #3
 80081f4:	f003 0303 	and.w	r3, r3, #3
 80081f8:	4a28      	ldr	r2, [pc, #160]	@ (800829c <UART_SetConfig+0xac4>)
 80081fa:	fa22 f303 	lsr.w	r3, r2, r3
 80081fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008200:	e00f      	b.n	8008222 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008202:	4b26      	ldr	r3, [pc, #152]	@ (800829c <UART_SetConfig+0xac4>)
 8008204:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008206:	e00c      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008208:	4b25      	ldr	r3, [pc, #148]	@ (80082a0 <UART_SetConfig+0xac8>)
 800820a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800820c:	e009      	b.n	8008222 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008214:	e005      	b.n	8008222 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8008216:	2300      	movs	r3, #0
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008220:	bf00      	nop
    }

    if (pclk != 0U)
 8008222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d021      	beq.n	800826c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800822c:	4a1d      	ldr	r2, [pc, #116]	@ (80082a4 <UART_SetConfig+0xacc>)
 800822e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008232:	461a      	mov	r2, r3
 8008234:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008236:	fbb3 f2f2 	udiv	r2, r3, r2
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	085b      	lsrs	r3, r3, #1
 8008240:	441a      	add	r2, r3
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	fbb2 f3f3 	udiv	r3, r2, r3
 800824a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800824c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800824e:	2b0f      	cmp	r3, #15
 8008250:	d909      	bls.n	8008266 <UART_SetConfig+0xa8e>
 8008252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008258:	d205      	bcs.n	8008266 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	b29a      	uxth	r2, r3
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60da      	str	r2, [r3, #12]
 8008264:	e002      	b.n	800826c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2201      	movs	r2, #1
 8008270:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2201      	movs	r2, #1
 8008278:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2200      	movs	r2, #0
 8008280:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2200      	movs	r2, #0
 8008286:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008288:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800828c:	4618      	mov	r0, r3
 800828e:	3748      	adds	r7, #72	@ 0x48
 8008290:	46bd      	mov	sp, r7
 8008292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008296:	bf00      	nop
 8008298:	58024400 	.word	0x58024400
 800829c:	03d09000 	.word	0x03d09000
 80082a0:	003d0900 	.word	0x003d0900
 80082a4:	0800d184 	.word	0x0800d184

080082a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a8:	b480      	push	{r7}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b4:	f003 0308 	and.w	r3, r3, #8
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d00a      	beq.n	80082d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	430a      	orrs	r2, r1
 80082d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082d6:	f003 0301 	and.w	r3, r3, #1
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00a      	beq.n	80082f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	430a      	orrs	r2, r1
 80082f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00a      	beq.n	8008316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	685b      	ldr	r3, [r3, #4]
 8008306:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	430a      	orrs	r2, r1
 8008314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800831a:	f003 0304 	and.w	r3, r3, #4
 800831e:	2b00      	cmp	r3, #0
 8008320:	d00a      	beq.n	8008338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	685b      	ldr	r3, [r3, #4]
 8008328:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	430a      	orrs	r2, r1
 8008336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800833c:	f003 0310 	and.w	r3, r3, #16
 8008340:	2b00      	cmp	r3, #0
 8008342:	d00a      	beq.n	800835a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	430a      	orrs	r2, r1
 8008358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00a      	beq.n	800837c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	430a      	orrs	r2, r1
 800837a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01a      	beq.n	80083be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	430a      	orrs	r2, r1
 800839c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083a6:	d10a      	bne.n	80083be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	430a      	orrs	r2, r1
 80083bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	430a      	orrs	r2, r1
 80083de:	605a      	str	r2, [r3, #4]
  }
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b098      	sub	sp, #96	@ 0x60
 80083f0:	af02      	add	r7, sp, #8
 80083f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083fc:	f7f8 ff64 	bl	80012c8 <HAL_GetTick>
 8008400:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b08      	cmp	r3, #8
 800840e:	d12f      	bne.n	8008470 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008410:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008414:	9300      	str	r3, [sp, #0]
 8008416:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008418:	2200      	movs	r2, #0
 800841a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f000 f88e 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008424:	4603      	mov	r3, r0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d022      	beq.n	8008470 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008430:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008432:	e853 3f00 	ldrex	r3, [r3]
 8008436:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800843a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800843e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	461a      	mov	r2, r3
 8008446:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008448:	647b      	str	r3, [r7, #68]	@ 0x44
 800844a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800844e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008450:	e841 2300 	strex	r3, r2, [r1]
 8008454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	d1e6      	bne.n	800842a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2220      	movs	r2, #32
 8008460:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2200      	movs	r2, #0
 8008468:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800846c:	2303      	movs	r3, #3
 800846e:	e063      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0304 	and.w	r3, r3, #4
 800847a:	2b04      	cmp	r3, #4
 800847c:	d149      	bne.n	8008512 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800847e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008482:	9300      	str	r3, [sp, #0]
 8008484:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008486:	2200      	movs	r2, #0
 8008488:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f857 	bl	8008540 <UART_WaitOnFlagUntilTimeout>
 8008492:	4603      	mov	r3, r0
 8008494:	2b00      	cmp	r3, #0
 8008496:	d03c      	beq.n	8008512 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800849e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a0:	e853 3f00 	ldrex	r3, [r3]
 80084a4:	623b      	str	r3, [r7, #32]
   return(result);
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80084b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084be:	e841 2300 	strex	r3, r2, [r1]
 80084c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1e6      	bne.n	8008498 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3308      	adds	r3, #8
 80084d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d2:	693b      	ldr	r3, [r7, #16]
 80084d4:	e853 3f00 	ldrex	r3, [r3]
 80084d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f023 0301 	bic.w	r3, r3, #1
 80084e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	3308      	adds	r3, #8
 80084e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084ea:	61fa      	str	r2, [r7, #28]
 80084ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ee:	69b9      	ldr	r1, [r7, #24]
 80084f0:	69fa      	ldr	r2, [r7, #28]
 80084f2:	e841 2300 	strex	r3, r2, [r1]
 80084f6:	617b      	str	r3, [r7, #20]
   return(result);
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d1e5      	bne.n	80084ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2220      	movs	r2, #32
 8008502:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800850e:	2303      	movs	r3, #3
 8008510:	e012      	b.n	8008538 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008536:	2300      	movs	r3, #0
}
 8008538:	4618      	mov	r0, r3
 800853a:	3758      	adds	r7, #88	@ 0x58
 800853c:	46bd      	mov	sp, r7
 800853e:	bd80      	pop	{r7, pc}

08008540 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b084      	sub	sp, #16
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	4613      	mov	r3, r2
 800854e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008550:	e04f      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008552:	69bb      	ldr	r3, [r7, #24]
 8008554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008558:	d04b      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800855a:	f7f8 feb5 	bl	80012c8 <HAL_GetTick>
 800855e:	4602      	mov	r2, r0
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	69ba      	ldr	r2, [r7, #24]
 8008566:	429a      	cmp	r2, r3
 8008568:	d302      	bcc.n	8008570 <UART_WaitOnFlagUntilTimeout+0x30>
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008570:	2303      	movs	r3, #3
 8008572:	e04e      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f003 0304 	and.w	r3, r3, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	d037      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	2b80      	cmp	r3, #128	@ 0x80
 8008586:	d034      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	2b40      	cmp	r3, #64	@ 0x40
 800858c:	d031      	beq.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	69db      	ldr	r3, [r3, #28]
 8008594:	f003 0308 	and.w	r3, r3, #8
 8008598:	2b08      	cmp	r3, #8
 800859a:	d110      	bne.n	80085be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2208      	movs	r2, #8
 80085a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085a4:	68f8      	ldr	r0, [r7, #12]
 80085a6:	f000 f839 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2208      	movs	r2, #8
 80085ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e029      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	69db      	ldr	r3, [r3, #28]
 80085c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085cc:	d111      	bne.n	80085f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085d8:	68f8      	ldr	r0, [r7, #12]
 80085da:	f000 f81f 	bl	800861c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2220      	movs	r2, #32
 80085e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e00f      	b.n	8008612 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4013      	ands	r3, r2
 80085fc:	68ba      	ldr	r2, [r7, #8]
 80085fe:	429a      	cmp	r2, r3
 8008600:	bf0c      	ite	eq
 8008602:	2301      	moveq	r3, #1
 8008604:	2300      	movne	r3, #0
 8008606:	b2db      	uxtb	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	429a      	cmp	r2, r3
 800860e:	d0a0      	beq.n	8008552 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
	...

0800861c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861c:	b480      	push	{r7}
 800861e:	b095      	sub	sp, #84	@ 0x54
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008634:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008638:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008642:	643b      	str	r3, [r7, #64]	@ 0x40
 8008644:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008648:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	61fb      	str	r3, [r7, #28]
   return(result);
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	4b1e      	ldr	r3, [pc, #120]	@ (80086e4 <UART_EndRxTransfer+0xc8>)
 800866a:	4013      	ands	r3, r2
 800866c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008678:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800867c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800868e:	2b01      	cmp	r3, #1
 8008690:	d118      	bne.n	80086c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f023 0310 	bic.w	r3, r3, #16
 80086a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b0:	61bb      	str	r3, [r7, #24]
 80086b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6979      	ldr	r1, [r7, #20]
 80086b6:	69ba      	ldr	r2, [r7, #24]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	613b      	str	r3, [r7, #16]
   return(result);
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086d8:	bf00      	nop
 80086da:	3754      	adds	r7, #84	@ 0x54
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	effffffe 	.word	0xeffffffe

080086e8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d101      	bne.n	80086fe <HAL_UARTEx_DisableFifoMode+0x16>
 80086fa:	2302      	movs	r3, #2
 80086fc:	e027      	b.n	800874e <HAL_UARTEx_DisableFifoMode+0x66>
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2224      	movs	r2, #36	@ 0x24
 800870a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f022 0201 	bic.w	r2, r2, #1
 8008724:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800872c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800874c:	2300      	movs	r3, #0
}
 800874e:	4618      	mov	r0, r3
 8008750:	3714      	adds	r7, #20
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
 8008762:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800876e:	2302      	movs	r3, #2
 8008770:	e02d      	b.n	80087ce <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2224      	movs	r2, #36	@ 0x24
 800877e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	681a      	ldr	r2, [r3, #0]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	f022 0201 	bic.w	r2, r2, #1
 8008798:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	689b      	ldr	r3, [r3, #8]
 80087a0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	683a      	ldr	r2, [r7, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f000 f850 	bl	8008854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	68fa      	ldr	r2, [r7, #12]
 80087ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3710      	adds	r7, #16
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
 80087de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	d101      	bne.n	80087ee <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80087ea:	2302      	movs	r3, #2
 80087ec:	e02d      	b.n	800884a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2224      	movs	r2, #36	@ 0x24
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689b      	ldr	r3, [r3, #8]
 800881c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	683a      	ldr	r2, [r7, #0]
 8008826:	430a      	orrs	r2, r1
 8008828:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f000 f812 	bl	8008854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2220      	movs	r2, #32
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2200      	movs	r2, #0
 8008844:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008848:	2300      	movs	r3, #0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3710      	adds	r7, #16
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}
	...

08008854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008854:	b480      	push	{r7}
 8008856:	b085      	sub	sp, #20
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008860:	2b00      	cmp	r3, #0
 8008862:	d108      	bne.n	8008876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2201      	movs	r2, #1
 8008870:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008874:	e031      	b.n	80088da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008876:	2310      	movs	r3, #16
 8008878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800887a:	2310      	movs	r3, #16
 800887c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	689b      	ldr	r3, [r3, #8]
 8008884:	0e5b      	lsrs	r3, r3, #25
 8008886:	b2db      	uxtb	r3, r3
 8008888:	f003 0307 	and.w	r3, r3, #7
 800888c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	689b      	ldr	r3, [r3, #8]
 8008894:	0f5b      	lsrs	r3, r3, #29
 8008896:	b2db      	uxtb	r3, r3
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800889e:	7bbb      	ldrb	r3, [r7, #14]
 80088a0:	7b3a      	ldrb	r2, [r7, #12]
 80088a2:	4911      	ldr	r1, [pc, #68]	@ (80088e8 <UARTEx_SetNbDataToProcess+0x94>)
 80088a4:	5c8a      	ldrb	r2, [r1, r2]
 80088a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80088aa:	7b3a      	ldrb	r2, [r7, #12]
 80088ac:	490f      	ldr	r1, [pc, #60]	@ (80088ec <UARTEx_SetNbDataToProcess+0x98>)
 80088ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80088b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088bc:	7bfb      	ldrb	r3, [r7, #15]
 80088be:	7b7a      	ldrb	r2, [r7, #13]
 80088c0:	4909      	ldr	r1, [pc, #36]	@ (80088e8 <UARTEx_SetNbDataToProcess+0x94>)
 80088c2:	5c8a      	ldrb	r2, [r1, r2]
 80088c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80088c8:	7b7a      	ldrb	r2, [r7, #13]
 80088ca:	4908      	ldr	r1, [pc, #32]	@ (80088ec <UARTEx_SetNbDataToProcess+0x98>)
 80088cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80088ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80088d2:	b29a      	uxth	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80088da:	bf00      	nop
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
 80088e6:	bf00      	nop
 80088e8:	0800d19c 	.word	0x0800d19c
 80088ec:	0800d1a4 	.word	0x0800d1a4

080088f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80088f0:	b084      	sub	sp, #16
 80088f2:	b480      	push	{r7}
 80088f4:	b085      	sub	sp, #20
 80088f6:	af00      	add	r7, sp, #0
 80088f8:	6078      	str	r0, [r7, #4]
 80088fa:	f107 001c 	add.w	r0, r7, #28
 80088fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008902:	2300      	movs	r3, #0
 8008904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008906:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008908:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800890a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800890c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 800890e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8008912:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8008916:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008918:	68fa      	ldr	r2, [r7, #12]
 800891a:	4313      	orrs	r3, r2
 800891c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	685a      	ldr	r2, [r3, #4]
 8008922:	4b07      	ldr	r3, [pc, #28]	@ (8008940 <SDMMC_Init+0x50>)
 8008924:	4013      	ands	r3, r2
 8008926:	68fa      	ldr	r2, [r7, #12]
 8008928:	431a      	orrs	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800892e:	2300      	movs	r3, #0
}
 8008930:	4618      	mov	r0, r3
 8008932:	3714      	adds	r7, #20
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	b004      	add	sp, #16
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	ffc02c00 	.word	0xffc02c00

08008944 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008952:	4618      	mov	r0, r3
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681a      	ldr	r2, [r3, #0]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008972:	2300      	movs	r3, #0
}
 8008974:	4618      	mov	r0, r3
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008980:	b480      	push	{r7}
 8008982:	b083      	sub	sp, #12
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f043 0203 	orr.w	r2, r3, #3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008994:	2300      	movs	r3, #0
}
 8008996:	4618      	mov	r0, r3
 8008998:	370c      	adds	r7, #12
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr

080089a2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80089a2:	b480      	push	{r7}
 80089a4:	b083      	sub	sp, #12
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0303 	and.w	r3, r3, #3
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	370c      	adds	r7, #12
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
	...

080089c0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b085      	sub	sp, #20
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80089de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80089e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80089ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80089ec:	68fa      	ldr	r2, [r7, #12]
 80089ee:	4313      	orrs	r3, r2
 80089f0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68da      	ldr	r2, [r3, #12]
 80089f6:	4b06      	ldr	r3, [pc, #24]	@ (8008a10 <SDMMC_SendCommand+0x50>)
 80089f8:	4013      	ands	r3, r2
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	431a      	orrs	r2, r3
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008a02:	2300      	movs	r3, #0
}
 8008a04:	4618      	mov	r0, r3
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	fffee0c0 	.word	0xfffee0c0

08008a14 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	691b      	ldr	r3, [r3, #16]
 8008a20:	b2db      	uxtb	r3, r3
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	370c      	adds	r7, #12
 8008a26:	46bd      	mov	sp, r7
 8008a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2c:	4770      	bx	lr

08008a2e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	3314      	adds	r3, #20
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	4413      	add	r3, r2
 8008a42:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3714      	adds	r7, #20
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a52:	4770      	bx	lr

08008a54 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008a54:	b480      	push	{r7}
 8008a56:	b085      	sub	sp, #20
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	681a      	ldr	r2, [r3, #0]
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	685a      	ldr	r2, [r3, #4]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a7a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008a7c:	683b      	ldr	r3, [r7, #0]
 8008a7e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008a80:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008a86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a92:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008a9e:	2300      	movs	r3, #0

}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3714      	adds	r7, #20
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aaa:	4770      	bx	lr

08008aac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b088      	sub	sp, #32
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008aba:	2310      	movs	r3, #16
 8008abc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008abe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008ac2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008acc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ace:	f107 0308 	add.w	r3, r7, #8
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f7ff ff73 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ade:	2110      	movs	r1, #16
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 fa5f 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008ae6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ae8:	69fb      	ldr	r3, [r7, #28]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3720      	adds	r7, #32
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b088      	sub	sp, #32
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
 8008afa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008b00:	2311      	movs	r3, #17
 8008b02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b14:	f107 0308 	add.w	r3, r7, #8
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f7ff ff50 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b24:	2111      	movs	r1, #17
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fa3c 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b2e:	69fb      	ldr	r3, [r7, #28]
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3720      	adds	r7, #32
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b088      	sub	sp, #32
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008b46:	2312      	movs	r3, #18
 8008b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b4a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008b5a:	f107 0308 	add.w	r3, r7, #8
 8008b5e:	4619      	mov	r1, r3
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f7ff ff2d 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008b66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008b6a:	2112      	movs	r1, #18
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fa19 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008b72:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b74:	69fb      	ldr	r3, [r7, #28]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3720      	adds	r7, #32
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b088      	sub	sp, #32
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008b8c:	2318      	movs	r3, #24
 8008b8e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008b96:	2300      	movs	r3, #0
 8008b98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008b9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008b9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ba0:	f107 0308 	add.w	r3, r7, #8
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	f7ff ff0a 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008bac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bb0:	2118      	movs	r1, #24
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 f9f6 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008bb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bba:	69fb      	ldr	r3, [r7, #28]
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	3720      	adds	r7, #32
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b088      	sub	sp, #32
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008bd2:	2319      	movs	r3, #25
 8008bd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008bd6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008bda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008be0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008be4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008be6:	f107 0308 	add.w	r3, r7, #8
 8008bea:	4619      	mov	r1, r3
 8008bec:	6878      	ldr	r0, [r7, #4]
 8008bee:	f7ff fee7 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008bf2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008bf6:	2119      	movs	r1, #25
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f000 f9d3 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008bfe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c00:	69fb      	ldr	r3, [r7, #28]
}
 8008c02:	4618      	mov	r0, r3
 8008c04:	3720      	adds	r7, #32
 8008c06:	46bd      	mov	sp, r7
 8008c08:	bd80      	pop	{r7, pc}
	...

08008c0c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008c14:	2300      	movs	r3, #0
 8008c16:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008c18:	230c      	movs	r3, #12
 8008c1a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008c26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008c2a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff feb8 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008c50:	4a0b      	ldr	r2, [pc, #44]	@ (8008c80 <SDMMC_CmdStopTransfer+0x74>)
 8008c52:	210c      	movs	r1, #12
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f9a5 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008c5a:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68db      	ldr	r3, [r3, #12]
 8008c60:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c6e:	d101      	bne.n	8008c74 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008c70:	2300      	movs	r3, #0
 8008c72:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008c74:	69fb      	ldr	r3, [r7, #28]
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3720      	adds	r7, #32
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	bf00      	nop
 8008c80:	05f5e100 	.word	0x05f5e100

08008c84 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b088      	sub	sp, #32
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008c92:	2307      	movs	r3, #7
 8008c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008c96:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008c9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ca4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ca6:	f107 0308 	add.w	r3, r7, #8
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f7ff fe87 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cb6:	2107      	movs	r1, #7
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f973 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008cbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cc0:	69fb      	ldr	r3, [r7, #28]
}
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3720      	adds	r7, #32
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b088      	sub	sp, #32
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ce2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ce6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ce8:	f107 0308 	add.w	r3, r7, #8
 8008cec:	4619      	mov	r1, r3
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f7ff fe66 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 fb97 	bl	8009428 <SDMMC_GetCmdError>
 8008cfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008cfc:	69fb      	ldr	r3, [r7, #28]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3720      	adds	r7, #32
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b088      	sub	sp, #32
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008d0e:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8008d12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008d14:	2308      	movs	r3, #8
 8008d16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d28:	f107 0308 	add.w	r3, r7, #8
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	f7ff fe46 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 fb29 	bl	800938c <SDMMC_GetCmdResp7>
 8008d3a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d3c:	69fb      	ldr	r3, [r7, #28]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3720      	adds	r7, #32
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b088      	sub	sp, #32
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	6078      	str	r0, [r7, #4]
 8008d4e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008d54:	2337      	movs	r3, #55	@ 0x37
 8008d56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008d5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008d66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d68:	f107 0308 	add.w	r3, r7, #8
 8008d6c:	4619      	mov	r1, r3
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f7ff fe26 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008d78:	2137      	movs	r1, #55	@ 0x37
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f000 f912 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008d80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d82:	69fb      	ldr	r3, [r7, #28]
}
 8008d84:	4618      	mov	r0, r3
 8008d86:	3720      	adds	r7, #32
 8008d88:	46bd      	mov	sp, r7
 8008d8a:	bd80      	pop	{r7, pc}

08008d8c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008d8c:	b580      	push	{r7, lr}
 8008d8e:	b088      	sub	sp, #32
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
 8008d94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008d9a:	2329      	movs	r3, #41	@ 0x29
 8008d9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008da2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008da4:	2300      	movs	r3, #0
 8008da6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008dac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dae:	f107 0308 	add.w	r3, r7, #8
 8008db2:	4619      	mov	r1, r3
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f7ff fe03 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 fa2e 	bl	800921c <SDMMC_GetCmdResp3>
 8008dc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dc2:	69fb      	ldr	r3, [r7, #28]
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008dda:	2306      	movs	r3, #6
 8008ddc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008dde:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008de2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008dec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dee:	f107 0308 	add.w	r3, r7, #8
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff fde3 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8008dfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008dfe:	2106      	movs	r1, #6
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 f8cf 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008e06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e08:	69fb      	ldr	r3, [r7, #28]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3720      	adds	r7, #32
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}

08008e12 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008e12:	b580      	push	{r7, lr}
 8008e14:	b088      	sub	sp, #32
 8008e16:	af00      	add	r7, sp, #0
 8008e18:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008e1e:	2333      	movs	r3, #51	@ 0x33
 8008e20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008e26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e28:	2300      	movs	r3, #0
 8008e2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e2c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e32:	f107 0308 	add.w	r3, r7, #8
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f7ff fdc1 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8008e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008e42:	2133      	movs	r1, #51	@ 0x33
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8ad 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008e4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e4c:	69fb      	ldr	r3, [r7, #28]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b088      	sub	sp, #32
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008e62:	2302      	movs	r3, #2
 8008e64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008e6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e70:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e76:	f107 0308 	add.w	r3, r7, #8
 8008e7a:	4619      	mov	r1, r3
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f7ff fd9f 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f000 f980 	bl	8009188 <SDMMC_GetCmdResp2>
 8008e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e8a:	69fb      	ldr	r3, [r7, #28]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3720      	adds	r7, #32
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008ea2:	2309      	movs	r3, #9
 8008ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008ea6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8008eaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eac:	2300      	movs	r3, #0
 8008eae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008eb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008eb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008eb6:	f107 0308 	add.w	r3, r7, #8
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f7ff fd7f 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f960 	bl	8009188 <SDMMC_GetCmdResp2>
 8008ec8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008eca:	69fb      	ldr	r3, [r7, #28]
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	3720      	adds	r7, #32
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	bd80      	pop	{r7, pc}

08008ed4 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ee6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008eec:	2300      	movs	r3, #0
 8008eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008ef0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ef6:	f107 0308 	add.w	r3, r7, #8
 8008efa:	4619      	mov	r1, r3
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f7ff fd5f 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	2103      	movs	r1, #3
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f9c8 	bl	800929c <SDMMC_GetCmdResp6>
 8008f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f0e:	69fb      	ldr	r3, [r7, #28]
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3720      	adds	r7, #32
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b088      	sub	sp, #32
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
 8008f20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008f26:	230d      	movs	r3, #13
 8008f28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f30:	2300      	movs	r3, #0
 8008f32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f3a:	f107 0308 	add.w	r3, r7, #8
 8008f3e:	4619      	mov	r1, r3
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f7ff fd3d 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8008f46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f4a:	210d      	movs	r1, #13
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f000 f829 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008f52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f54:	69fb      	ldr	r3, [r7, #28]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3720      	adds	r7, #32
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8008f5e:	b580      	push	{r7, lr}
 8008f60:	b088      	sub	sp, #32
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f66:	2300      	movs	r3, #0
 8008f68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8008f6a:	230d      	movs	r3, #13
 8008f6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008f72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f74:	2300      	movs	r3, #0
 8008f76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008f7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f7e:	f107 0308 	add.w	r3, r7, #8
 8008f82:	4619      	mov	r1, r3
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f7ff fd1b 	bl	80089c0 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8008f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f8e:	210d      	movs	r1, #13
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 f807 	bl	8008fa4 <SDMMC_GetCmdResp1>
 8008f96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f98:	69fb      	ldr	r3, [r7, #28]
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
	...

08008fa4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b088      	sub	sp, #32
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	460b      	mov	r3, r1
 8008fae:	607a      	str	r2, [r7, #4]
 8008fb0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8008fb2:	4b70      	ldr	r3, [pc, #448]	@ (8009174 <SDMMC_GetCmdResp1+0x1d0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a70      	ldr	r2, [pc, #448]	@ (8009178 <SDMMC_GetCmdResp1+0x1d4>)
 8008fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fbc:	0a5a      	lsrs	r2, r3, #9
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	fb02 f303 	mul.w	r3, r2, r3
 8008fc4:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	1e5a      	subs	r2, r3, #1
 8008fca:	61fa      	str	r2, [r7, #28]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d102      	bne.n	8008fd6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fd0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008fd4:	e0c9      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fda:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8008fdc:	69ba      	ldr	r2, [r7, #24]
 8008fde:	4b67      	ldr	r3, [pc, #412]	@ (800917c <SDMMC_GetCmdResp1+0x1d8>)
 8008fe0:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d0ef      	beq.n	8008fc6 <SDMMC_GetCmdResp1+0x22>
 8008fe6:	69bb      	ldr	r3, [r7, #24]
 8008fe8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d1ea      	bne.n	8008fc6 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ff4:	f003 0304 	and.w	r3, r3, #4
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	2204      	movs	r2, #4
 8009000:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009002:	2304      	movs	r3, #4
 8009004:	e0b1      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800900a:	f003 0301 	and.w	r3, r3, #1
 800900e:	2b00      	cmp	r3, #0
 8009010:	d004      	beq.n	800901c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	2201      	movs	r2, #1
 8009016:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009018:	2301      	movs	r3, #1
 800901a:	e0a6      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	4a58      	ldr	r2, [pc, #352]	@ (8009180 <SDMMC_GetCmdResp1+0x1dc>)
 8009020:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff fcf6 	bl	8008a14 <SDMMC_GetCommandResponse>
 8009028:	4603      	mov	r3, r0
 800902a:	461a      	mov	r2, r3
 800902c:	7afb      	ldrb	r3, [r7, #11]
 800902e:	4293      	cmp	r3, r2
 8009030:	d001      	beq.n	8009036 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009032:	2301      	movs	r3, #1
 8009034:	e099      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009036:	2100      	movs	r1, #0
 8009038:	68f8      	ldr	r0, [r7, #12]
 800903a:	f7ff fcf8 	bl	8008a2e <SDMMC_GetResponse>
 800903e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009040:	697a      	ldr	r2, [r7, #20]
 8009042:	4b50      	ldr	r3, [pc, #320]	@ (8009184 <SDMMC_GetCmdResp1+0x1e0>)
 8009044:	4013      	ands	r3, r2
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800904a:	2300      	movs	r3, #0
 800904c:	e08d      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	da02      	bge.n	800905a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009058:	e087      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009060:	2b00      	cmp	r3, #0
 8009062:	d001      	beq.n	8009068 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009064:	2340      	movs	r3, #64	@ 0x40
 8009066:	e080      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009072:	2380      	movs	r3, #128	@ 0x80
 8009074:	e079      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009076:	697b      	ldr	r3, [r7, #20]
 8009078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800907c:	2b00      	cmp	r3, #0
 800907e:	d002      	beq.n	8009086 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009080:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009084:	e071      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800908c:	2b00      	cmp	r3, #0
 800908e:	d002      	beq.n	8009096 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009090:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009094:	e069      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009096:	697b      	ldr	r3, [r7, #20]
 8009098:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800909c:	2b00      	cmp	r3, #0
 800909e:	d002      	beq.n	80090a6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80090a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090a4:	e061      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80090a6:	697b      	ldr	r3, [r7, #20]
 80090a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d002      	beq.n	80090b6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80090b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80090b4:	e059      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80090b6:	697b      	ldr	r3, [r7, #20]
 80090b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d002      	beq.n	80090c6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80090c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80090c4:	e051      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80090c6:	697b      	ldr	r3, [r7, #20]
 80090c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80090d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80090d4:	e049      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d002      	beq.n	80090e6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80090e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80090e4:	e041      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80090e6:	697b      	ldr	r3, [r7, #20]
 80090e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d002      	beq.n	80090f6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80090f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090f4:	e039      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009100:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009104:	e031      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009106:	697b      	ldr	r3, [r7, #20]
 8009108:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d002      	beq.n	8009116 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009110:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009114:	e029      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800911c:	2b00      	cmp	r3, #0
 800911e:	d002      	beq.n	8009126 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009120:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009124:	e021      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d002      	beq.n	8009136 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009130:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009134:	e019      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009136:	697b      	ldr	r3, [r7, #20]
 8009138:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d002      	beq.n	8009146 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009140:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8009144:	e011      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009150:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009154:	e009      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	f003 0308 	and.w	r3, r3, #8
 800915c:	2b00      	cmp	r3, #0
 800915e:	d002      	beq.n	8009166 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009160:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8009164:	e001      	b.n	800916a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009166:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	24000000 	.word	0x24000000
 8009178:	10624dd3 	.word	0x10624dd3
 800917c:	00200045 	.word	0x00200045
 8009180:	002000c5 	.word	0x002000c5
 8009184:	fdffe008 	.word	0xfdffe008

08009188 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8009188:	b480      	push	{r7}
 800918a:	b085      	sub	sp, #20
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009190:	4b1f      	ldr	r3, [pc, #124]	@ (8009210 <SDMMC_GetCmdResp2+0x88>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a1f      	ldr	r2, [pc, #124]	@ (8009214 <SDMMC_GetCmdResp2+0x8c>)
 8009196:	fba2 2303 	umull	r2, r3, r2, r3
 800919a:	0a5b      	lsrs	r3, r3, #9
 800919c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80091a0:	fb02 f303 	mul.w	r3, r2, r3
 80091a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	1e5a      	subs	r2, r3, #1
 80091aa:	60fa      	str	r2, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d102      	bne.n	80091b6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80091b0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80091b4:	e026      	b.n	8009204 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ba:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0ef      	beq.n	80091a6 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1ea      	bne.n	80091a6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091d4:	f003 0304 	and.w	r3, r3, #4
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d004      	beq.n	80091e6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2204      	movs	r2, #4
 80091e0:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80091e2:	2304      	movs	r3, #4
 80091e4:	e00e      	b.n	8009204 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80091ea:	f003 0301 	and.w	r3, r3, #1
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d004      	beq.n	80091fc <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2201      	movs	r2, #1
 80091f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e003      	b.n	8009204 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a06      	ldr	r2, [pc, #24]	@ (8009218 <SDMMC_GetCmdResp2+0x90>)
 8009200:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009202:	2300      	movs	r3, #0
}
 8009204:	4618      	mov	r0, r3
 8009206:	3714      	adds	r7, #20
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr
 8009210:	24000000 	.word	0x24000000
 8009214:	10624dd3 	.word	0x10624dd3
 8009218:	002000c5 	.word	0x002000c5

0800921c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800921c:	b480      	push	{r7}
 800921e:	b085      	sub	sp, #20
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009224:	4b1a      	ldr	r3, [pc, #104]	@ (8009290 <SDMMC_GetCmdResp3+0x74>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a1a      	ldr	r2, [pc, #104]	@ (8009294 <SDMMC_GetCmdResp3+0x78>)
 800922a:	fba2 2303 	umull	r2, r3, r2, r3
 800922e:	0a5b      	lsrs	r3, r3, #9
 8009230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009234:	fb02 f303 	mul.w	r3, r2, r3
 8009238:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	1e5a      	subs	r2, r3, #1
 800923e:	60fa      	str	r2, [r7, #12]
 8009240:	2b00      	cmp	r3, #0
 8009242:	d102      	bne.n	800924a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009244:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009248:	e01b      	b.n	8009282 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800924e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8009256:	2b00      	cmp	r3, #0
 8009258:	d0ef      	beq.n	800923a <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800925a:	68bb      	ldr	r3, [r7, #8]
 800925c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009260:	2b00      	cmp	r3, #0
 8009262:	d1ea      	bne.n	800923a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d004      	beq.n	800927a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2204      	movs	r2, #4
 8009274:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009276:	2304      	movs	r3, #4
 8009278:	e003      	b.n	8009282 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a06      	ldr	r2, [pc, #24]	@ (8009298 <SDMMC_GetCmdResp3+0x7c>)
 800927e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009280:	2300      	movs	r3, #0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3714      	adds	r7, #20
 8009286:	46bd      	mov	sp, r7
 8009288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928c:	4770      	bx	lr
 800928e:	bf00      	nop
 8009290:	24000000 	.word	0x24000000
 8009294:	10624dd3 	.word	0x10624dd3
 8009298:	002000c5 	.word	0x002000c5

0800929c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b088      	sub	sp, #32
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	60f8      	str	r0, [r7, #12]
 80092a4:	460b      	mov	r3, r1
 80092a6:	607a      	str	r2, [r7, #4]
 80092a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80092aa:	4b35      	ldr	r3, [pc, #212]	@ (8009380 <SDMMC_GetCmdResp6+0xe4>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4a35      	ldr	r2, [pc, #212]	@ (8009384 <SDMMC_GetCmdResp6+0xe8>)
 80092b0:	fba2 2303 	umull	r2, r3, r2, r3
 80092b4:	0a5b      	lsrs	r3, r3, #9
 80092b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80092ba:	fb02 f303 	mul.w	r3, r2, r3
 80092be:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80092c0:	69fb      	ldr	r3, [r7, #28]
 80092c2:	1e5a      	subs	r2, r3, #1
 80092c4:	61fa      	str	r2, [r7, #28]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d102      	bne.n	80092d0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80092ca:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80092ce:	e052      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092d4:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092d6:	69bb      	ldr	r3, [r7, #24]
 80092d8:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d0ef      	beq.n	80092c0 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1ea      	bne.n	80092c0 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80092ee:	f003 0304 	and.w	r3, r3, #4
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d004      	beq.n	8009300 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2204      	movs	r2, #4
 80092fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80092fc:	2304      	movs	r3, #4
 80092fe:	e03a      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009304:	f003 0301 	and.w	r3, r3, #1
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2201      	movs	r2, #1
 8009310:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009312:	2301      	movs	r3, #1
 8009314:	e02f      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009316:	68f8      	ldr	r0, [r7, #12]
 8009318:	f7ff fb7c 	bl	8008a14 <SDMMC_GetCommandResponse>
 800931c:	4603      	mov	r3, r0
 800931e:	461a      	mov	r2, r3
 8009320:	7afb      	ldrb	r3, [r7, #11]
 8009322:	4293      	cmp	r3, r2
 8009324:	d001      	beq.n	800932a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009326:	2301      	movs	r3, #1
 8009328:	e025      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	4a16      	ldr	r2, [pc, #88]	@ (8009388 <SDMMC_GetCmdResp6+0xec>)
 800932e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009330:	2100      	movs	r1, #0
 8009332:	68f8      	ldr	r0, [r7, #12]
 8009334:	f7ff fb7b 	bl	8008a2e <SDMMC_GetResponse>
 8009338:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8009340:	2b00      	cmp	r3, #0
 8009342:	d106      	bne.n	8009352 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	0c1b      	lsrs	r3, r3, #16
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800934e:	2300      	movs	r3, #0
 8009350:	e011      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009358:	2b00      	cmp	r3, #0
 800935a:	d002      	beq.n	8009362 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800935c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8009360:	e009      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009368:	2b00      	cmp	r3, #0
 800936a:	d002      	beq.n	8009372 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800936c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009370:	e001      	b.n	8009376 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009372:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8009376:	4618      	mov	r0, r3
 8009378:	3720      	adds	r7, #32
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	24000000 	.word	0x24000000
 8009384:	10624dd3 	.word	0x10624dd3
 8009388:	002000c5 	.word	0x002000c5

0800938c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800938c:	b480      	push	{r7}
 800938e:	b085      	sub	sp, #20
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009394:	4b22      	ldr	r3, [pc, #136]	@ (8009420 <SDMMC_GetCmdResp7+0x94>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4a22      	ldr	r2, [pc, #136]	@ (8009424 <SDMMC_GetCmdResp7+0x98>)
 800939a:	fba2 2303 	umull	r2, r3, r2, r3
 800939e:	0a5b      	lsrs	r3, r3, #9
 80093a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80093a4:	fb02 f303 	mul.w	r3, r2, r3
 80093a8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	1e5a      	subs	r2, r3, #1
 80093ae:	60fa      	str	r2, [r7, #12]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d102      	bne.n	80093ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80093b4:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80093b8:	e02c      	b.n	8009414 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093be:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0ef      	beq.n	80093aa <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d1ea      	bne.n	80093aa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093d8:	f003 0304 	and.w	r3, r3, #4
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d004      	beq.n	80093ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2204      	movs	r2, #4
 80093e4:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80093e6:	2304      	movs	r3, #4
 80093e8:	e014      	b.n	8009414 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d004      	beq.n	8009400 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80093fc:	2301      	movs	r3, #1
 80093fe:	e009      	b.n	8009414 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009404:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009408:	2b00      	cmp	r3, #0
 800940a:	d002      	beq.n	8009412 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2240      	movs	r2, #64	@ 0x40
 8009410:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8009412:	2300      	movs	r3, #0

}
 8009414:	4618      	mov	r0, r3
 8009416:	3714      	adds	r7, #20
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	24000000 	.word	0x24000000
 8009424:	10624dd3 	.word	0x10624dd3

08009428 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009428:	b480      	push	{r7}
 800942a:	b085      	sub	sp, #20
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009430:	4b11      	ldr	r3, [pc, #68]	@ (8009478 <SDMMC_GetCmdError+0x50>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a11      	ldr	r2, [pc, #68]	@ (800947c <SDMMC_GetCmdError+0x54>)
 8009436:	fba2 2303 	umull	r2, r3, r2, r3
 800943a:	0a5b      	lsrs	r3, r3, #9
 800943c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009440:	fb02 f303 	mul.w	r3, r2, r3
 8009444:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	1e5a      	subs	r2, r3, #1
 800944a:	60fa      	str	r2, [r7, #12]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d102      	bne.n	8009456 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009450:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8009454:	e009      	b.n	800946a <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800945a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800945e:	2b00      	cmp	r3, #0
 8009460:	d0f1      	beq.n	8009446 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a06      	ldr	r2, [pc, #24]	@ (8009480 <SDMMC_GetCmdError+0x58>)
 8009466:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8009468:	2300      	movs	r3, #0
}
 800946a:	4618      	mov	r0, r3
 800946c:	3714      	adds	r7, #20
 800946e:	46bd      	mov	sp, r7
 8009470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009474:	4770      	bx	lr
 8009476:	bf00      	nop
 8009478:	24000000 	.word	0x24000000
 800947c:	10624dd3 	.word	0x10624dd3
 8009480:	002000c5 	.word	0x002000c5

08009484 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009484:	b084      	sub	sp, #16
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	f107 001c 	add.w	r0, r7, #28
 8009492:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009496:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800949a:	2b01      	cmp	r3, #1
 800949c:	d121      	bne.n	80094e2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	68da      	ldr	r2, [r3, #12]
 80094ae:	4b2c      	ldr	r3, [pc, #176]	@ (8009560 <USB_CoreInit+0xdc>)
 80094b0:	4013      	ands	r3, r2
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	68db      	ldr	r3, [r3, #12]
 80094ba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80094c2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d105      	bne.n	80094d6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 faaa 	bl	8009a30 <USB_CoreReset>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
 80094e0:	e01b      	b.n	800951a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 fa9e 	bl	8009a30 <USB_CoreReset>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80094f8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d106      	bne.n	800950e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009504:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	639a      	str	r2, [r3, #56]	@ 0x38
 800950c:	e005      	b.n	800951a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009512:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800951a:	7fbb      	ldrb	r3, [r7, #30]
 800951c:	2b01      	cmp	r3, #1
 800951e:	d116      	bne.n	800954e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009524:	b29a      	uxth	r2, r3
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800952e:	4b0d      	ldr	r3, [pc, #52]	@ (8009564 <USB_CoreInit+0xe0>)
 8009530:	4313      	orrs	r3, r2
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f043 0206 	orr.w	r2, r3, #6
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	689b      	ldr	r3, [r3, #8]
 8009546:	f043 0220 	orr.w	r2, r3, #32
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800955a:	b004      	add	sp, #16
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	ffbdffbf 	.word	0xffbdffbf
 8009564:	03ee0000 	.word	0x03ee0000

08009568 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	f023 0201 	bic.w	r2, r3, #1
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	460b      	mov	r3, r1
 8009594:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	68db      	ldr	r3, [r3, #12]
 800959e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80095a6:	78fb      	ldrb	r3, [r7, #3]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d115      	bne.n	80095d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80095b8:	200a      	movs	r0, #10
 80095ba:	f7f7 fe91 	bl	80012e0 <HAL_Delay>
      ms += 10U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	330a      	adds	r3, #10
 80095c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fa25 	bl	8009a14 <USB_GetMode>
 80095ca:	4603      	mov	r3, r0
 80095cc:	2b01      	cmp	r3, #1
 80095ce:	d01e      	beq.n	800960e <USB_SetCurrentMode+0x84>
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	2bc7      	cmp	r3, #199	@ 0xc7
 80095d4:	d9f0      	bls.n	80095b8 <USB_SetCurrentMode+0x2e>
 80095d6:	e01a      	b.n	800960e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80095d8:	78fb      	ldrb	r3, [r7, #3]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d115      	bne.n	800960a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80095ea:	200a      	movs	r0, #10
 80095ec:	f7f7 fe78 	bl	80012e0 <HAL_Delay>
      ms += 10U;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	330a      	adds	r3, #10
 80095f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f000 fa0c 	bl	8009a14 <USB_GetMode>
 80095fc:	4603      	mov	r3, r0
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <USB_SetCurrentMode+0x84>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2bc7      	cmp	r3, #199	@ 0xc7
 8009606:	d9f0      	bls.n	80095ea <USB_SetCurrentMode+0x60>
 8009608:	e001      	b.n	800960e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e005      	b.n	800961a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	2bc8      	cmp	r3, #200	@ 0xc8
 8009612:	d101      	bne.n	8009618 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009614:	2301      	movs	r3, #1
 8009616:	e000      	b.n	800961a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
	...

08009624 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009624:	b084      	sub	sp, #16
 8009626:	b580      	push	{r7, lr}
 8009628:	b086      	sub	sp, #24
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009636:	2300      	movs	r3, #0
 8009638:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800963e:	2300      	movs	r3, #0
 8009640:	613b      	str	r3, [r7, #16]
 8009642:	e009      	b.n	8009658 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009644:	687a      	ldr	r2, [r7, #4]
 8009646:	693b      	ldr	r3, [r7, #16]
 8009648:	3340      	adds	r3, #64	@ 0x40
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	4413      	add	r3, r2
 800964e:	2200      	movs	r2, #0
 8009650:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	3301      	adds	r3, #1
 8009656:	613b      	str	r3, [r7, #16]
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b0e      	cmp	r3, #14
 800965c:	d9f2      	bls.n	8009644 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800965e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009662:	2b00      	cmp	r3, #0
 8009664:	d11c      	bne.n	80096a0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	68fa      	ldr	r2, [r7, #12]
 8009670:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009674:	f043 0302 	orr.w	r3, r3, #2
 8009678:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	601a      	str	r2, [r3, #0]
 800969e:	e005      	b.n	80096ac <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80096b2:	461a      	mov	r2, r3
 80096b4:	2300      	movs	r3, #0
 80096b6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80096b8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80096bc:	2b01      	cmp	r3, #1
 80096be:	d10d      	bne.n	80096dc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80096c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d104      	bne.n	80096d2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80096c8:	2100      	movs	r1, #0
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 f968 	bl	80099a0 <USB_SetDevSpeed>
 80096d0:	e008      	b.n	80096e4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80096d2:	2101      	movs	r1, #1
 80096d4:	6878      	ldr	r0, [r7, #4]
 80096d6:	f000 f963 	bl	80099a0 <USB_SetDevSpeed>
 80096da:	e003      	b.n	80096e4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80096dc:	2103      	movs	r1, #3
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f95e 	bl	80099a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80096e4:	2110      	movs	r1, #16
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f000 f8fa 	bl	80098e0 <USB_FlushTxFifo>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f924 	bl	8009944 <USB_FlushRxFifo>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800970c:	461a      	mov	r2, r3
 800970e:	2300      	movs	r3, #0
 8009710:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009718:	461a      	mov	r2, r3
 800971a:	2300      	movs	r3, #0
 800971c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009724:	461a      	mov	r2, r3
 8009726:	2300      	movs	r3, #0
 8009728:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800972a:	2300      	movs	r3, #0
 800972c:	613b      	str	r3, [r7, #16]
 800972e:	e043      	b.n	80097b8 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	4413      	add	r3, r2
 8009738:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009742:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009746:	d118      	bne.n	800977a <USB_DevInit+0x156>
    {
      if (i == 0U)
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10a      	bne.n	8009764 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800974e:	693b      	ldr	r3, [r7, #16]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800975a:	461a      	mov	r2, r3
 800975c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009760:	6013      	str	r3, [r2, #0]
 8009762:	e013      	b.n	800978c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009770:	461a      	mov	r2, r3
 8009772:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009776:	6013      	str	r3, [r2, #0]
 8009778:	e008      	b.n	800978c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800977a:	693b      	ldr	r3, [r7, #16]
 800977c:	015a      	lsls	r2, r3, #5
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	4413      	add	r3, r2
 8009782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009786:	461a      	mov	r2, r3
 8009788:	2300      	movs	r3, #0
 800978a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	015a      	lsls	r2, r3, #5
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	4413      	add	r3, r2
 8009794:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009798:	461a      	mov	r2, r3
 800979a:	2300      	movs	r3, #0
 800979c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	015a      	lsls	r2, r3, #5
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4413      	add	r3, r2
 80097a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097aa:	461a      	mov	r2, r3
 80097ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	3301      	adds	r3, #1
 80097b6:	613b      	str	r3, [r7, #16]
 80097b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097bc:	461a      	mov	r2, r3
 80097be:	693b      	ldr	r3, [r7, #16]
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d3b5      	bcc.n	8009730 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097c4:	2300      	movs	r3, #0
 80097c6:	613b      	str	r3, [r7, #16]
 80097c8:	e043      	b.n	8009852 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097e0:	d118      	bne.n	8009814 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 80097e2:	693b      	ldr	r3, [r7, #16]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d10a      	bne.n	80097fe <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80097e8:	693b      	ldr	r3, [r7, #16]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097f4:	461a      	mov	r2, r3
 80097f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80097fa:	6013      	str	r3, [r2, #0]
 80097fc:	e013      	b.n	8009826 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4413      	add	r3, r2
 8009806:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800980a:	461a      	mov	r2, r3
 800980c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009810:	6013      	str	r3, [r2, #0]
 8009812:	e008      	b.n	8009826 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	015a      	lsls	r2, r3, #5
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	4413      	add	r3, r2
 800981c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009820:	461a      	mov	r2, r3
 8009822:	2300      	movs	r3, #0
 8009824:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009826:	693b      	ldr	r3, [r7, #16]
 8009828:	015a      	lsls	r2, r3, #5
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	4413      	add	r3, r2
 800982e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009832:	461a      	mov	r2, r3
 8009834:	2300      	movs	r3, #0
 8009836:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	015a      	lsls	r2, r3, #5
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009844:	461a      	mov	r2, r3
 8009846:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800984a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	3301      	adds	r3, #1
 8009850:	613b      	str	r3, [r7, #16]
 8009852:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009856:	461a      	mov	r2, r3
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	4293      	cmp	r3, r2
 800985c:	d3b5      	bcc.n	80097ca <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	68fa      	ldr	r2, [r7, #12]
 8009868:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800986c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009870:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800987e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009880:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009884:	2b00      	cmp	r3, #0
 8009886:	d105      	bne.n	8009894 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	699b      	ldr	r3, [r3, #24]
 800988c:	f043 0210 	orr.w	r2, r3, #16
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	699a      	ldr	r2, [r3, #24]
 8009898:	4b0f      	ldr	r3, [pc, #60]	@ (80098d8 <USB_DevInit+0x2b4>)
 800989a:	4313      	orrs	r3, r2
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80098a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d005      	beq.n	80098b4 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	f043 0208 	orr.w	r2, r3, #8
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80098b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80098b8:	2b01      	cmp	r3, #1
 80098ba:	d105      	bne.n	80098c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	699a      	ldr	r2, [r3, #24]
 80098c0:	4b06      	ldr	r3, [pc, #24]	@ (80098dc <USB_DevInit+0x2b8>)
 80098c2:	4313      	orrs	r3, r2
 80098c4:	687a      	ldr	r2, [r7, #4]
 80098c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80098c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098ca:	4618      	mov	r0, r3
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80098d4:	b004      	add	sp, #16
 80098d6:	4770      	bx	lr
 80098d8:	803c3800 	.word	0x803c3800
 80098dc:	40000004 	.word	0x40000004

080098e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
 80098e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80098ea:	2300      	movs	r3, #0
 80098ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	3301      	adds	r3, #1
 80098f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098fa:	d901      	bls.n	8009900 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80098fc:	2303      	movs	r3, #3
 80098fe:	e01b      	b.n	8009938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	691b      	ldr	r3, [r3, #16]
 8009904:	2b00      	cmp	r3, #0
 8009906:	daf2      	bge.n	80098ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009908:	2300      	movs	r3, #0
 800990a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	019b      	lsls	r3, r3, #6
 8009910:	f043 0220 	orr.w	r2, r3, #32
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	3301      	adds	r3, #1
 800991c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009924:	d901      	bls.n	800992a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009926:	2303      	movs	r3, #3
 8009928:	e006      	b.n	8009938 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	f003 0320 	and.w	r3, r3, #32
 8009932:	2b20      	cmp	r3, #32
 8009934:	d0f0      	beq.n	8009918 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009936:	2300      	movs	r3, #0
}
 8009938:	4618      	mov	r0, r3
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800994c:	2300      	movs	r3, #0
 800994e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	3301      	adds	r3, #1
 8009954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800995c:	d901      	bls.n	8009962 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800995e:	2303      	movs	r3, #3
 8009960:	e018      	b.n	8009994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	691b      	ldr	r3, [r3, #16]
 8009966:	2b00      	cmp	r3, #0
 8009968:	daf2      	bge.n	8009950 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800996a:	2300      	movs	r3, #0
 800996c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2210      	movs	r2, #16
 8009972:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3301      	adds	r3, #1
 8009978:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009980:	d901      	bls.n	8009986 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009982:	2303      	movs	r3, #3
 8009984:	e006      	b.n	8009994 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	f003 0310 	and.w	r3, r3, #16
 800998e:	2b10      	cmp	r3, #16
 8009990:	d0f0      	beq.n	8009974 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009992:	2300      	movs	r3, #0
}
 8009994:	4618      	mov	r0, r3
 8009996:	3714      	adds	r7, #20
 8009998:	46bd      	mov	sp, r7
 800999a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999e:	4770      	bx	lr

080099a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	68f9      	ldr	r1, [r7, #12]
 80099bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099c0:	4313      	orrs	r3, r2
 80099c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3714      	adds	r7, #20
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80099ec:	f023 0303 	bic.w	r3, r3, #3
 80099f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099f8:	685b      	ldr	r3, [r3, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009a00:	f043 0302 	orr.w	r3, r3, #2
 8009a04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a06:	2300      	movs	r3, #0
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3714      	adds	r7, #20
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	695b      	ldr	r3, [r3, #20]
 8009a20:	f003 0301 	and.w	r3, r3, #1
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a48:	d901      	bls.n	8009a4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	e01b      	b.n	8009a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	691b      	ldr	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	daf2      	bge.n	8009a3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a56:	2300      	movs	r3, #0
 8009a58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	691b      	ldr	r3, [r3, #16]
 8009a5e:	f043 0201 	orr.w	r2, r3, #1
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a72:	d901      	bls.n	8009a78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a74:	2303      	movs	r3, #3
 8009a76:	e006      	b.n	8009a86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	691b      	ldr	r3, [r3, #16]
 8009a7c:	f003 0301 	and.w	r3, r3, #1
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d0f0      	beq.n	8009a66 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3714      	adds	r7, #20
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr
	...

08009a94 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009a98:	4904      	ldr	r1, [pc, #16]	@ (8009aac <MX_FATFS_Init+0x18>)
 8009a9a:	4805      	ldr	r0, [pc, #20]	@ (8009ab0 <MX_FATFS_Init+0x1c>)
 8009a9c:	f000 faa6 	bl	8009fec <FATFS_LinkDriver>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	4b03      	ldr	r3, [pc, #12]	@ (8009ab4 <MX_FATFS_Init+0x20>)
 8009aa6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8009aa8:	bf00      	nop
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	240007e0 	.word	0x240007e0
 8009ab0:	0800d1ac 	.word	0x0800d1ac
 8009ab4:	240007dc 	.word	0x240007dc

08009ab8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8009ab8:	b580      	push	{r7, lr}
 8009aba:	b082      	sub	sp, #8
 8009abc:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ac2:	f000 f885 	bl	8009bd0 <BSP_SD_IsDetected>
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d001      	beq.n	8009ad0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8009acc:	2302      	movs	r3, #2
 8009ace:	e012      	b.n	8009af6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8009ad0:	480b      	ldr	r0, [pc, #44]	@ (8009b00 <BSP_SD_Init+0x48>)
 8009ad2:	f7fc f9cd 	bl	8005e70 <HAL_SD_Init>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8009ada:	79fb      	ldrb	r3, [r7, #7]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d109      	bne.n	8009af4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009ae0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8009ae4:	4806      	ldr	r0, [pc, #24]	@ (8009b00 <BSP_SD_Init+0x48>)
 8009ae6:	f7fd f883 	bl	8006bf0 <HAL_SD_ConfigWideBusOperation>
 8009aea:	4603      	mov	r3, r0
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d001      	beq.n	8009af4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009af4:	79fb      	ldrb	r3, [r7, #7]
}
 8009af6:	4618      	mov	r0, r3
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	240001d8 	.word	0x240001d8

08009b04 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b086      	sub	sp, #24
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	60f8      	str	r0, [r7, #12]
 8009b0c:	60b9      	str	r1, [r7, #8]
 8009b0e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	68f9      	ldr	r1, [r7, #12]
 8009b1a:	4806      	ldr	r0, [pc, #24]	@ (8009b34 <BSP_SD_ReadBlocks_DMA+0x30>)
 8009b1c:	f7fc fac8 	bl	80060b0 <HAL_SD_ReadBlocks_DMA>
 8009b20:	4603      	mov	r3, r0
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	d001      	beq.n	8009b2a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	240001d8 	.word	0x240001d8

08009b38 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	68f9      	ldr	r1, [r7, #12]
 8009b4e:	4806      	ldr	r0, [pc, #24]	@ (8009b68 <BSP_SD_WriteBlocks_DMA+0x30>)
 8009b50:	f7fc fb56 	bl	8006200 <HAL_SD_WriteBlocks_DMA>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d001      	beq.n	8009b5e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8009b5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	240001d8 	.word	0x240001d8

08009b6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009b6c:	b580      	push	{r7, lr}
 8009b6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009b70:	4805      	ldr	r0, [pc, #20]	@ (8009b88 <BSP_SD_GetCardState+0x1c>)
 8009b72:	f7fd f94f 	bl	8006e14 <HAL_SD_GetCardState>
 8009b76:	4603      	mov	r3, r0
 8009b78:	2b04      	cmp	r3, #4
 8009b7a:	bf14      	ite	ne
 8009b7c:	2301      	movne	r3, #1
 8009b7e:	2300      	moveq	r3, #0
 8009b80:	b2db      	uxtb	r3, r3
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	bd80      	pop	{r7, pc}
 8009b86:	bf00      	nop
 8009b88:	240001d8 	.word	0x240001d8

08009b8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009b94:	6879      	ldr	r1, [r7, #4]
 8009b96:	4803      	ldr	r0, [pc, #12]	@ (8009ba4 <BSP_SD_GetCardInfo+0x18>)
 8009b98:	f7fc fffe 	bl	8006b98 <HAL_SD_GetCardInfo>
}
 8009b9c:	bf00      	nop
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	240001d8 	.word	0x240001d8

08009ba8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009bb0:	f000 f9ac 	bl	8009f0c <BSP_SD_WriteCpltCallback>
}
 8009bb4:	bf00      	nop
 8009bb6:	3708      	adds	r7, #8
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}

08009bbc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009bbc:	b580      	push	{r7, lr}
 8009bbe:	b082      	sub	sp, #8
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8009bc4:	f000 f9b4 	bl	8009f30 <BSP_SD_ReadCpltCallback>
}
 8009bc8:	bf00      	nop
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009bda:	f000 f80b 	bl	8009bf4 <BSP_PlatformIsDetected>
 8009bde:	4603      	mov	r3, r0
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d101      	bne.n	8009be8 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8009be4:	2300      	movs	r3, #0
 8009be6:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	b2db      	uxtb	r3, r3
}
 8009bec:	4618      	mov	r0, r3
 8009bee:	3708      	adds	r7, #8
 8009bf0:	46bd      	mov	sp, r7
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009bfa:	2301      	movs	r3, #1
 8009bfc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009bfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8009c02:	4806      	ldr	r0, [pc, #24]	@ (8009c1c <BSP_PlatformIsDetected+0x28>)
 8009c04:	f7f8 faa4 	bl	8002150 <HAL_GPIO_ReadPin>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009c12:	79fb      	ldrb	r3, [r7, #7]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	58020800 	.word	0x58020800

08009c20 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8009c28:	f000 fa90 	bl	800a14c <osKernelGetTickCount>
 8009c2c:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8009c2e:	e006      	b.n	8009c3e <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c30:	f7ff ff9c 	bl	8009b6c <BSP_SD_GetCardState>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d101      	bne.n	8009c3e <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	e009      	b.n	8009c52 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8009c3e:	f000 fa85 	bl	800a14c <osKernelGetTickCount>
 8009c42:	4602      	mov	r2, r0
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d8f0      	bhi.n	8009c30 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8009c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
	...

08009c5c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009c5c:	b580      	push	{r7, lr}
 8009c5e:	b082      	sub	sp, #8
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	4603      	mov	r3, r0
 8009c64:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8009c66:	4b0b      	ldr	r3, [pc, #44]	@ (8009c94 <SD_CheckStatus+0x38>)
 8009c68:	2201      	movs	r2, #1
 8009c6a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009c6c:	f7ff ff7e 	bl	8009b6c <BSP_SD_GetCardState>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d107      	bne.n	8009c86 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8009c76:	4b07      	ldr	r3, [pc, #28]	@ (8009c94 <SD_CheckStatus+0x38>)
 8009c78:	781b      	ldrb	r3, [r3, #0]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	f023 0301 	bic.w	r3, r3, #1
 8009c80:	b2da      	uxtb	r2, r3
 8009c82:	4b04      	ldr	r3, [pc, #16]	@ (8009c94 <SD_CheckStatus+0x38>)
 8009c84:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8009c86:	4b03      	ldr	r3, [pc, #12]	@ (8009c94 <SD_CheckStatus+0x38>)
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	b2db      	uxtb	r3, r3
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}
 8009c94:	2400000d 	.word	0x2400000d

08009c98 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b082      	sub	sp, #8
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8009ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d14 <SD_initialize+0x7c>)
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8009ca8:	f000 fa08 	bl	800a0bc <osKernelGetState>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b02      	cmp	r3, #2
 8009cb0:	d129      	bne.n	8009d06 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8009cb2:	f7ff ff01 	bl	8009ab8 <BSP_SD_Init>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d107      	bne.n	8009ccc <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f7ff ffcc 	bl	8009c5c <SD_CheckStatus>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4b12      	ldr	r3, [pc, #72]	@ (8009d14 <SD_initialize+0x7c>)
 8009cca:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8009ccc:	4b11      	ldr	r3, [pc, #68]	@ (8009d14 <SD_initialize+0x7c>)
 8009cce:	781b      	ldrb	r3, [r3, #0]
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d017      	beq.n	8009d06 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8009cd6:	4b10      	ldr	r3, [pc, #64]	@ (8009d18 <SD_initialize+0x80>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d107      	bne.n	8009cee <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8009cde:	2200      	movs	r2, #0
 8009ce0:	2102      	movs	r1, #2
 8009ce2:	200a      	movs	r0, #10
 8009ce4:	f000 faf4 	bl	800a2d0 <osMessageQueueNew>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	4a0b      	ldr	r2, [pc, #44]	@ (8009d18 <SD_initialize+0x80>)
 8009cec:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8009cee:	4b0a      	ldr	r3, [pc, #40]	@ (8009d18 <SD_initialize+0x80>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d107      	bne.n	8009d06 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8009cf6:	4b07      	ldr	r3, [pc, #28]	@ (8009d14 <SD_initialize+0x7c>)
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	b2db      	uxtb	r3, r3
 8009cfc:	f043 0301 	orr.w	r3, r3, #1
 8009d00:	b2da      	uxtb	r2, r3
 8009d02:	4b04      	ldr	r3, [pc, #16]	@ (8009d14 <SD_initialize+0x7c>)
 8009d04:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8009d06:	4b03      	ldr	r3, [pc, #12]	@ (8009d14 <SD_initialize+0x7c>)
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	b2db      	uxtb	r3, r3
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}
 8009d14:	2400000d 	.word	0x2400000d
 8009d18:	240007e4 	.word	0x240007e4

08009d1c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b082      	sub	sp, #8
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	4603      	mov	r3, r0
 8009d24:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009d26:	79fb      	ldrb	r3, [r7, #7]
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7ff ff97 	bl	8009c5c <SD_CheckStatus>
 8009d2e:	4603      	mov	r3, r0
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3708      	adds	r7, #8
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b088      	sub	sp, #32
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
 8009d42:	603b      	str	r3, [r7, #0]
 8009d44:	4603      	mov	r3, r0
 8009d46:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8009d48:	2301      	movs	r3, #1
 8009d4a:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009d4c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009d50:	f7ff ff66 	bl	8009c20 <SD_CheckStatusWithTimeout>
 8009d54:	4603      	mov	r3, r0
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da01      	bge.n	8009d5e <SD_read+0x26>
  {
    return res;
 8009d5a:	7ffb      	ldrb	r3, [r7, #31]
 8009d5c:	e02f      	b.n	8009dbe <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8009d5e:	683a      	ldr	r2, [r7, #0]
 8009d60:	6879      	ldr	r1, [r7, #4]
 8009d62:	68b8      	ldr	r0, [r7, #8]
 8009d64:	f7ff fece 	bl	8009b04 <BSP_SD_ReadBlocks_DMA>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8009d6c:	7fbb      	ldrb	r3, [r7, #30]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d124      	bne.n	8009dbc <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009d72:	4b15      	ldr	r3, [pc, #84]	@ (8009dc8 <SD_read+0x90>)
 8009d74:	6818      	ldr	r0, [r3, #0]
 8009d76:	f107 0112 	add.w	r1, r7, #18
 8009d7a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009d7e:	2200      	movs	r2, #0
 8009d80:	f000 fb7a 	bl	800a478 <osMessageQueueGet>
 8009d84:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d117      	bne.n	8009dbc <SD_read+0x84>
 8009d8c:	8a7b      	ldrh	r3, [r7, #18]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d114      	bne.n	8009dbc <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8009d92:	f000 f9db 	bl	800a14c <osKernelGetTickCount>
 8009d96:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009d98:	e007      	b.n	8009daa <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009d9a:	f7ff fee7 	bl	8009b6c <BSP_SD_GetCardState>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d102      	bne.n	8009daa <SD_read+0x72>
              {
                res = RES_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8009da8:	e008      	b.n	8009dbc <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8009daa:	f000 f9cf 	bl	800a14c <osKernelGetTickCount>
 8009dae:	4602      	mov	r2, r0
 8009db0:	697b      	ldr	r3, [r7, #20]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d9ee      	bls.n	8009d9a <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8009dbc:	7ffb      	ldrb	r3, [r7, #31]
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3720      	adds	r7, #32
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}
 8009dc6:	bf00      	nop
 8009dc8:	240007e4 	.word	0x240007e4

08009dcc <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b088      	sub	sp, #32
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	60b9      	str	r1, [r7, #8]
 8009dd4:	607a      	str	r2, [r7, #4]
 8009dd6:	603b      	str	r3, [r7, #0]
 8009dd8:	4603      	mov	r3, r0
 8009dda:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009ddc:	2301      	movs	r3, #1
 8009dde:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009de0:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009de4:	f7ff ff1c 	bl	8009c20 <SD_CheckStatusWithTimeout>
 8009de8:	4603      	mov	r3, r0
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	da01      	bge.n	8009df2 <SD_write+0x26>
  {
    return res;
 8009dee:	7ffb      	ldrb	r3, [r7, #31]
 8009df0:	e02d      	b.n	8009e4e <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	6879      	ldr	r1, [r7, #4]
 8009df6:	68b8      	ldr	r0, [r7, #8]
 8009df8:	f7ff fe9e 	bl	8009b38 <BSP_SD_WriteBlocks_DMA>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d124      	bne.n	8009e4c <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009e02:	4b15      	ldr	r3, [pc, #84]	@ (8009e58 <SD_write+0x8c>)
 8009e04:	6818      	ldr	r0, [r3, #0]
 8009e06:	f107 0112 	add.w	r1, r7, #18
 8009e0a:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f000 fb32 	bl	800a478 <osMessageQueueGet>
 8009e14:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8009e16:	69bb      	ldr	r3, [r7, #24]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d117      	bne.n	8009e4c <SD_write+0x80>
 8009e1c:	8a7b      	ldrh	r3, [r7, #18]
 8009e1e:	2b02      	cmp	r3, #2
 8009e20:	d114      	bne.n	8009e4c <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009e22:	f000 f993 	bl	800a14c <osKernelGetTickCount>
 8009e26:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009e28:	e007      	b.n	8009e3a <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009e2a:	f7ff fe9f 	bl	8009b6c <BSP_SD_GetCardState>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d102      	bne.n	8009e3a <SD_write+0x6e>
          {
            res = RES_OK;
 8009e34:	2300      	movs	r3, #0
 8009e36:	77fb      	strb	r3, [r7, #31]
            break;
 8009e38:	e008      	b.n	8009e4c <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8009e3a:	f000 f987 	bl	800a14c <osKernelGetTickCount>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	697b      	ldr	r3, [r7, #20]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	f247 522f 	movw	r2, #29999	@ 0x752f
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d9ee      	bls.n	8009e2a <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009e4c:	7ffb      	ldrb	r3, [r7, #31]
}
 8009e4e:	4618      	mov	r0, r3
 8009e50:	3720      	adds	r7, #32
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
 8009e56:	bf00      	nop
 8009e58:	240007e4 	.word	0x240007e4

08009e5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b08c      	sub	sp, #48	@ 0x30
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	4603      	mov	r3, r0
 8009e64:	603a      	str	r2, [r7, #0]
 8009e66:	71fb      	strb	r3, [r7, #7]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009e72:	4b25      	ldr	r3, [pc, #148]	@ (8009f08 <SD_ioctl+0xac>)
 8009e74:	781b      	ldrb	r3, [r3, #0]
 8009e76:	b2db      	uxtb	r3, r3
 8009e78:	f003 0301 	and.w	r3, r3, #1
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d001      	beq.n	8009e84 <SD_ioctl+0x28>
 8009e80:	2303      	movs	r3, #3
 8009e82:	e03c      	b.n	8009efe <SD_ioctl+0xa2>

  switch (cmd)
 8009e84:	79bb      	ldrb	r3, [r7, #6]
 8009e86:	2b03      	cmp	r3, #3
 8009e88:	d834      	bhi.n	8009ef4 <SD_ioctl+0x98>
 8009e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8009e90 <SD_ioctl+0x34>)
 8009e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e90:	08009ea1 	.word	0x08009ea1
 8009e94:	08009ea9 	.word	0x08009ea9
 8009e98:	08009ec1 	.word	0x08009ec1
 8009e9c:	08009edb 	.word	0x08009edb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009ea6:	e028      	b.n	8009efa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ea8:	f107 0308 	add.w	r3, r7, #8
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff fe6d 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009eb2:	6a3a      	ldr	r2, [r7, #32]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009ebe:	e01c      	b.n	8009efa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009ec0:	f107 0308 	add.w	r3, r7, #8
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff fe61 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8009eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ecc:	b29a      	uxth	r2, r3
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009ed8:	e00f      	b.n	8009efa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009eda:	f107 0308 	add.w	r3, r7, #8
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7ff fe54 	bl	8009b8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee6:	0a5a      	lsrs	r2, r3, #9
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009eec:	2300      	movs	r3, #0
 8009eee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009ef2:	e002      	b.n	8009efa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009ef4:	2304      	movs	r3, #4
 8009ef6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8009efa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	3730      	adds	r7, #48	@ 0x30
 8009f02:	46bd      	mov	sp, r7
 8009f04:	bd80      	pop	{r7, pc}
 8009f06:	bf00      	nop
 8009f08:	2400000d 	.word	0x2400000d

08009f0c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b082      	sub	sp, #8
 8009f10:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009f12:	2302      	movs	r3, #2
 8009f14:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009f16:	4b05      	ldr	r3, [pc, #20]	@ (8009f2c <BSP_SD_WriteCpltCallback+0x20>)
 8009f18:	6818      	ldr	r0, [r3, #0]
 8009f1a:	1db9      	adds	r1, r7, #6
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	2200      	movs	r2, #0
 8009f20:	f000 fa4a 	bl	800a3b8 <osMessageQueuePut>
#endif
}
 8009f24:	bf00      	nop
 8009f26:	3708      	adds	r7, #8
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	240007e4 	.word	0x240007e4

08009f30 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8009f36:	2301      	movs	r3, #1
 8009f38:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8009f3a:	4b05      	ldr	r3, [pc, #20]	@ (8009f50 <BSP_SD_ReadCpltCallback+0x20>)
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	1db9      	adds	r1, r7, #6
 8009f40:	2300      	movs	r3, #0
 8009f42:	2200      	movs	r2, #0
 8009f44:	f000 fa38 	bl	800a3b8 <osMessageQueuePut>
#endif
}
 8009f48:	bf00      	nop
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	240007e4 	.word	0x240007e4

08009f54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f54:	b480      	push	{r7}
 8009f56:	b087      	sub	sp, #28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f62:	2301      	movs	r3, #1
 8009f64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f66:	2300      	movs	r3, #0
 8009f68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f6c:	7a5b      	ldrb	r3, [r3, #9]
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d131      	bne.n	8009fd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f74:	4b1c      	ldr	r3, [pc, #112]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f76:	7a5b      	ldrb	r3, [r3, #9]
 8009f78:	b2db      	uxtb	r3, r3
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f7e:	2100      	movs	r1, #0
 8009f80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f82:	4b19      	ldr	r3, [pc, #100]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f84:	7a5b      	ldrb	r3, [r3, #9]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	4a17      	ldr	r2, [pc, #92]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f92:	4b15      	ldr	r3, [pc, #84]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f94:	7a5b      	ldrb	r3, [r3, #9]
 8009f96:	b2db      	uxtb	r3, r3
 8009f98:	461a      	mov	r2, r3
 8009f9a:	4b13      	ldr	r3, [pc, #76]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009f9c:	4413      	add	r3, r2
 8009f9e:	79fa      	ldrb	r2, [r7, #7]
 8009fa0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009fa2:	4b11      	ldr	r3, [pc, #68]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009fa4:	7a5b      	ldrb	r3, [r3, #9]
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	1c5a      	adds	r2, r3, #1
 8009faa:	b2d1      	uxtb	r1, r2
 8009fac:	4a0e      	ldr	r2, [pc, #56]	@ (8009fe8 <FATFS_LinkDriverEx+0x94>)
 8009fae:	7251      	strb	r1, [r2, #9]
 8009fb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009fb2:	7dbb      	ldrb	r3, [r7, #22]
 8009fb4:	3330      	adds	r3, #48	@ 0x30
 8009fb6:	b2da      	uxtb	r2, r3
 8009fb8:	68bb      	ldr	r3, [r7, #8]
 8009fba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fbc:	68bb      	ldr	r3, [r7, #8]
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	223a      	movs	r2, #58	@ 0x3a
 8009fc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	3302      	adds	r3, #2
 8009fc8:	222f      	movs	r2, #47	@ 0x2f
 8009fca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3303      	adds	r3, #3
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	371c      	adds	r7, #28
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe4:	4770      	bx	lr
 8009fe6:	bf00      	nop
 8009fe8:	240007e8 	.word	0x240007e8

08009fec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009fec:	b580      	push	{r7, lr}
 8009fee:	b082      	sub	sp, #8
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	6078      	str	r0, [r7, #4]
 8009ff4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009ff6:	2200      	movs	r2, #0
 8009ff8:	6839      	ldr	r1, [r7, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f7ff ffaa 	bl	8009f54 <FATFS_LinkDriverEx>
 800a000:	4603      	mov	r3, r0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3708      	adds	r7, #8
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
	...

0800a00c <__NVIC_SetPriority>:
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	4603      	mov	r3, r0
 800a014:	6039      	str	r1, [r7, #0]
 800a016:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800a018:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	db0a      	blt.n	800a036 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	b2da      	uxtb	r2, r3
 800a024:	490c      	ldr	r1, [pc, #48]	@ (800a058 <__NVIC_SetPriority+0x4c>)
 800a026:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a02a:	0112      	lsls	r2, r2, #4
 800a02c:	b2d2      	uxtb	r2, r2
 800a02e:	440b      	add	r3, r1
 800a030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a034:	e00a      	b.n	800a04c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	b2da      	uxtb	r2, r3
 800a03a:	4908      	ldr	r1, [pc, #32]	@ (800a05c <__NVIC_SetPriority+0x50>)
 800a03c:	88fb      	ldrh	r3, [r7, #6]
 800a03e:	f003 030f 	and.w	r3, r3, #15
 800a042:	3b04      	subs	r3, #4
 800a044:	0112      	lsls	r2, r2, #4
 800a046:	b2d2      	uxtb	r2, r2
 800a048:	440b      	add	r3, r1
 800a04a:	761a      	strb	r2, [r3, #24]
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr
 800a058:	e000e100 	.word	0xe000e100
 800a05c:	e000ed00 	.word	0xe000ed00

0800a060 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a060:	b580      	push	{r7, lr}
 800a062:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a064:	2100      	movs	r1, #0
 800a066:	f06f 0004 	mvn.w	r0, #4
 800a06a:	f7ff ffcf 	bl	800a00c <__NVIC_SetPriority>
#endif
}
 800a06e:	bf00      	nop
 800a070:	bd80      	pop	{r7, pc}
	...

0800a074 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a074:	b480      	push	{r7}
 800a076:	b083      	sub	sp, #12
 800a078:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a07a:	f3ef 8305 	mrs	r3, IPSR
 800a07e:	603b      	str	r3, [r7, #0]
  return(result);
 800a080:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a082:	2b00      	cmp	r3, #0
 800a084:	d003      	beq.n	800a08e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a086:	f06f 0305 	mvn.w	r3, #5
 800a08a:	607b      	str	r3, [r7, #4]
 800a08c:	e00c      	b.n	800a0a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a08e:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b8 <osKernelInitialize+0x44>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d105      	bne.n	800a0a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <osKernelInitialize+0x44>)
 800a098:	2201      	movs	r2, #1
 800a09a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	607b      	str	r3, [r7, #4]
 800a0a0:	e002      	b.n	800a0a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0a2:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0a8:	687b      	ldr	r3, [r7, #4]
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	370c      	adds	r7, #12
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	240007f4 	.word	0x240007f4

0800a0bc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800a0c2:	f001 ff13 	bl	800beec <xTaskGetSchedulerState>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <osKernelGetState+0x1a>
 800a0cc:	2b02      	cmp	r3, #2
 800a0ce:	d105      	bne.n	800a0dc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800a0d0:	2302      	movs	r3, #2
 800a0d2:	607b      	str	r3, [r7, #4]
      break;
 800a0d4:	e00c      	b.n	800a0f0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	607b      	str	r3, [r7, #4]
      break;
 800a0da:	e009      	b.n	800a0f0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800a0dc:	4b07      	ldr	r3, [pc, #28]	@ (800a0fc <osKernelGetState+0x40>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d102      	bne.n	800a0ea <osKernelGetState+0x2e>
        state = osKernelReady;
 800a0e4:	2301      	movs	r3, #1
 800a0e6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800a0e8:	e001      	b.n	800a0ee <osKernelGetState+0x32>
        state = osKernelInactive;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	607b      	str	r3, [r7, #4]
      break;
 800a0ee:	bf00      	nop
  }

  return (state);
 800a0f0:	687b      	ldr	r3, [r7, #4]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3708      	adds	r7, #8
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}
 800a0fa:	bf00      	nop
 800a0fc:	240007f4 	.word	0x240007f4

0800a100 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800a100:	b580      	push	{r7, lr}
 800a102:	b082      	sub	sp, #8
 800a104:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a106:	f3ef 8305 	mrs	r3, IPSR
 800a10a:	603b      	str	r3, [r7, #0]
  return(result);
 800a10c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <osKernelStart+0x1a>
    stat = osErrorISR;
 800a112:	f06f 0305 	mvn.w	r3, #5
 800a116:	607b      	str	r3, [r7, #4]
 800a118:	e010      	b.n	800a13c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a11a:	4b0b      	ldr	r3, [pc, #44]	@ (800a148 <osKernelStart+0x48>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b01      	cmp	r3, #1
 800a120:	d109      	bne.n	800a136 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a122:	f7ff ff9d 	bl	800a060 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a126:	4b08      	ldr	r3, [pc, #32]	@ (800a148 <osKernelStart+0x48>)
 800a128:	2202      	movs	r2, #2
 800a12a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a12c:	f001 fa7e 	bl	800b62c <vTaskStartScheduler>
      stat = osOK;
 800a130:	2300      	movs	r3, #0
 800a132:	607b      	str	r3, [r7, #4]
 800a134:	e002      	b.n	800a13c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a136:	f04f 33ff 	mov.w	r3, #4294967295
 800a13a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a13c:	687b      	ldr	r3, [r7, #4]
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3708      	adds	r7, #8
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}
 800a146:	bf00      	nop
 800a148:	240007f4 	.word	0x240007f4

0800a14c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b082      	sub	sp, #8
 800a150:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a152:	f3ef 8305 	mrs	r3, IPSR
 800a156:	603b      	str	r3, [r7, #0]
  return(result);
 800a158:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d003      	beq.n	800a166 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800a15e:	f001 fb89 	bl	800b874 <xTaskGetTickCountFromISR>
 800a162:	6078      	str	r0, [r7, #4]
 800a164:	e002      	b.n	800a16c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800a166:	f001 fb75 	bl	800b854 <xTaskGetTickCount>
 800a16a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800a16c:	687b      	ldr	r3, [r7, #4]
}
 800a16e:	4618      	mov	r0, r3
 800a170:	3708      	adds	r7, #8
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}

0800a176 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a176:	b580      	push	{r7, lr}
 800a178:	b08e      	sub	sp, #56	@ 0x38
 800a17a:	af04      	add	r7, sp, #16
 800a17c:	60f8      	str	r0, [r7, #12]
 800a17e:	60b9      	str	r1, [r7, #8]
 800a180:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a182:	2300      	movs	r3, #0
 800a184:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a186:	f3ef 8305 	mrs	r3, IPSR
 800a18a:	617b      	str	r3, [r7, #20]
  return(result);
 800a18c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d17e      	bne.n	800a290 <osThreadNew+0x11a>
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d07b      	beq.n	800a290 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a198:	2380      	movs	r3, #128	@ 0x80
 800a19a:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a19c:	2318      	movs	r3, #24
 800a19e:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a1a4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1a8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d045      	beq.n	800a23c <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <osThreadNew+0x48>
        name = attr->name;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	699b      	ldr	r3, [r3, #24]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d002      	beq.n	800a1cc <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a1cc:	69fb      	ldr	r3, [r7, #28]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d008      	beq.n	800a1e4 <osThreadNew+0x6e>
 800a1d2:	69fb      	ldr	r3, [r7, #28]
 800a1d4:	2b38      	cmp	r3, #56	@ 0x38
 800a1d6:	d805      	bhi.n	800a1e4 <osThreadNew+0x6e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	685b      	ldr	r3, [r3, #4]
 800a1dc:	f003 0301 	and.w	r3, r3, #1
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d001      	beq.n	800a1e8 <osThreadNew+0x72>
        return (NULL);
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e054      	b.n	800a292 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	695b      	ldr	r3, [r3, #20]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d003      	beq.n	800a1f8 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	089b      	lsrs	r3, r3, #2
 800a1f6:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	689b      	ldr	r3, [r3, #8]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d00e      	beq.n	800a21e <osThreadNew+0xa8>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	2b5b      	cmp	r3, #91	@ 0x5b
 800a206:	d90a      	bls.n	800a21e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d006      	beq.n	800a21e <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	695b      	ldr	r3, [r3, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d002      	beq.n	800a21e <osThreadNew+0xa8>
        mem = 1;
 800a218:	2301      	movs	r3, #1
 800a21a:	61bb      	str	r3, [r7, #24]
 800a21c:	e010      	b.n	800a240 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10c      	bne.n	800a240 <osThreadNew+0xca>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d108      	bne.n	800a240 <osThreadNew+0xca>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d104      	bne.n	800a240 <osThreadNew+0xca>
          mem = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	61bb      	str	r3, [r7, #24]
 800a23a:	e001      	b.n	800a240 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a240:	69bb      	ldr	r3, [r7, #24]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d110      	bne.n	800a268 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a24e:	9202      	str	r2, [sp, #8]
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	69fb      	ldr	r3, [r7, #28]
 800a254:	9300      	str	r3, [sp, #0]
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	6a3a      	ldr	r2, [r7, #32]
 800a25a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a25c:	68f8      	ldr	r0, [r7, #12]
 800a25e:	f001 f809 	bl	800b274 <xTaskCreateStatic>
 800a262:	4603      	mov	r3, r0
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	e013      	b.n	800a290 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d110      	bne.n	800a290 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a26e:	6a3b      	ldr	r3, [r7, #32]
 800a270:	b29a      	uxth	r2, r3
 800a272:	f107 0310 	add.w	r3, r7, #16
 800a276:	9301      	str	r3, [sp, #4]
 800a278:	69fb      	ldr	r3, [r7, #28]
 800a27a:	9300      	str	r3, [sp, #0]
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a280:	68f8      	ldr	r0, [r7, #12]
 800a282:	f001 f857 	bl	800b334 <xTaskCreate>
 800a286:	4603      	mov	r3, r0
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d001      	beq.n	800a290 <osThreadNew+0x11a>
            hTask = NULL;
 800a28c:	2300      	movs	r3, #0
 800a28e:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a290:	693b      	ldr	r3, [r7, #16]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3728      	adds	r7, #40	@ 0x28
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}

0800a29a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a29a:	b580      	push	{r7, lr}
 800a29c:	b084      	sub	sp, #16
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2a2:	f3ef 8305 	mrs	r3, IPSR
 800a2a6:	60bb      	str	r3, [r7, #8]
  return(result);
 800a2a8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d003      	beq.n	800a2b6 <osDelay+0x1c>
    stat = osErrorISR;
 800a2ae:	f06f 0305 	mvn.w	r3, #5
 800a2b2:	60fb      	str	r3, [r7, #12]
 800a2b4:	e007      	b.n	800a2c6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d002      	beq.n	800a2c6 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 f97d 	bl	800b5c0 <vTaskDelay>
    }
  }

  return (stat);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b08a      	sub	sp, #40	@ 0x28
 800a2d4:	af02      	add	r7, sp, #8
 800a2d6:	60f8      	str	r0, [r7, #12]
 800a2d8:	60b9      	str	r1, [r7, #8]
 800a2da:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a2e0:	f3ef 8305 	mrs	r3, IPSR
 800a2e4:	613b      	str	r3, [r7, #16]
  return(result);
 800a2e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d15f      	bne.n	800a3ac <osMessageQueueNew+0xdc>
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d05c      	beq.n	800a3ac <osMessageQueueNew+0xdc>
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d059      	beq.n	800a3ac <osMessageQueueNew+0xdc>
    mem = -1;
 800a2f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d029      	beq.n	800a358 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689b      	ldr	r3, [r3, #8]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d012      	beq.n	800a332 <osMessageQueueNew+0x62>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68db      	ldr	r3, [r3, #12]
 800a310:	2b4f      	cmp	r3, #79	@ 0x4f
 800a312:	d90e      	bls.n	800a332 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d00a      	beq.n	800a332 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	695a      	ldr	r2, [r3, #20]
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68b9      	ldr	r1, [r7, #8]
 800a324:	fb01 f303 	mul.w	r3, r1, r3
 800a328:	429a      	cmp	r2, r3
 800a32a:	d302      	bcc.n	800a332 <osMessageQueueNew+0x62>
        mem = 1;
 800a32c:	2301      	movs	r3, #1
 800a32e:	61bb      	str	r3, [r7, #24]
 800a330:	e014      	b.n	800a35c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	689b      	ldr	r3, [r3, #8]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d110      	bne.n	800a35c <osMessageQueueNew+0x8c>
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10c      	bne.n	800a35c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800a346:	2b00      	cmp	r3, #0
 800a348:	d108      	bne.n	800a35c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	695b      	ldr	r3, [r3, #20]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d104      	bne.n	800a35c <osMessageQueueNew+0x8c>
          mem = 0;
 800a352:	2300      	movs	r3, #0
 800a354:	61bb      	str	r3, [r7, #24]
 800a356:	e001      	b.n	800a35c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800a358:	2300      	movs	r3, #0
 800a35a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	d10b      	bne.n	800a37a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	691a      	ldr	r2, [r3, #16]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	689b      	ldr	r3, [r3, #8]
 800a36a:	2100      	movs	r1, #0
 800a36c:	9100      	str	r1, [sp, #0]
 800a36e:	68b9      	ldr	r1, [r7, #8]
 800a370:	68f8      	ldr	r0, [r7, #12]
 800a372:	f000 fa31 	bl	800a7d8 <xQueueGenericCreateStatic>
 800a376:	61f8      	str	r0, [r7, #28]
 800a378:	e008      	b.n	800a38c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800a37a:	69bb      	ldr	r3, [r7, #24]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d105      	bne.n	800a38c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800a380:	2200      	movs	r2, #0
 800a382:	68b9      	ldr	r1, [r7, #8]
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f000 faa4 	bl	800a8d2 <xQueueGenericCreate>
 800a38a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800a38c:	69fb      	ldr	r3, [r7, #28]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d00c      	beq.n	800a3ac <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d003      	beq.n	800a3a0 <osMessageQueueNew+0xd0>
        name = attr->name;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	617b      	str	r3, [r7, #20]
 800a39e:	e001      	b.n	800a3a4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800a3a4:	6979      	ldr	r1, [r7, #20]
 800a3a6:	69f8      	ldr	r0, [r7, #28]
 800a3a8:	f000 ff06 	bl	800b1b8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800a3ac:	69fb      	ldr	r3, [r7, #28]
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3720      	adds	r7, #32
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
	...

0800a3b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	603b      	str	r3, [r7, #0]
 800a3c4:	4613      	mov	r3, r2
 800a3c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a3d0:	f3ef 8305 	mrs	r3, IPSR
 800a3d4:	617b      	str	r3, [r7, #20]
  return(result);
 800a3d6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d028      	beq.n	800a42e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a3dc:	69bb      	ldr	r3, [r7, #24]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <osMessageQueuePut+0x36>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <osMessageQueuePut+0x36>
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d003      	beq.n	800a3f6 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800a3ee:	f06f 0303 	mvn.w	r3, #3
 800a3f2:	61fb      	str	r3, [r7, #28]
 800a3f4:	e038      	b.n	800a468 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800a3fa:	f107 0210 	add.w	r2, r7, #16
 800a3fe:	2300      	movs	r3, #0
 800a400:	68b9      	ldr	r1, [r7, #8]
 800a402:	69b8      	ldr	r0, [r7, #24]
 800a404:	f000 fbc6 	bl	800ab94 <xQueueGenericSendFromISR>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b01      	cmp	r3, #1
 800a40c:	d003      	beq.n	800a416 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800a40e:	f06f 0302 	mvn.w	r3, #2
 800a412:	61fb      	str	r3, [r7, #28]
 800a414:	e028      	b.n	800a468 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d025      	beq.n	800a468 <osMessageQueuePut+0xb0>
 800a41c:	4b15      	ldr	r3, [pc, #84]	@ (800a474 <osMessageQueuePut+0xbc>)
 800a41e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a422:	601a      	str	r2, [r3, #0]
 800a424:	f3bf 8f4f 	dsb	sy
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	e01c      	b.n	800a468 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a42e:	69bb      	ldr	r3, [r7, #24]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d002      	beq.n	800a43a <osMessageQueuePut+0x82>
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	2b00      	cmp	r3, #0
 800a438:	d103      	bne.n	800a442 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800a43a:	f06f 0303 	mvn.w	r3, #3
 800a43e:	61fb      	str	r3, [r7, #28]
 800a440:	e012      	b.n	800a468 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a442:	2300      	movs	r3, #0
 800a444:	683a      	ldr	r2, [r7, #0]
 800a446:	68b9      	ldr	r1, [r7, #8]
 800a448:	69b8      	ldr	r0, [r7, #24]
 800a44a:	f000 faa1 	bl	800a990 <xQueueGenericSend>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b01      	cmp	r3, #1
 800a452:	d009      	beq.n	800a468 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d003      	beq.n	800a462 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800a45a:	f06f 0301 	mvn.w	r3, #1
 800a45e:	61fb      	str	r3, [r7, #28]
 800a460:	e002      	b.n	800a468 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800a462:	f06f 0302 	mvn.w	r3, #2
 800a466:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a468:	69fb      	ldr	r3, [r7, #28]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3720      	adds	r7, #32
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	e000ed04 	.word	0xe000ed04

0800a478 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800a478:	b580      	push	{r7, lr}
 800a47a:	b088      	sub	sp, #32
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	60f8      	str	r0, [r7, #12]
 800a480:	60b9      	str	r1, [r7, #8]
 800a482:	607a      	str	r2, [r7, #4]
 800a484:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800a48a:	2300      	movs	r3, #0
 800a48c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a48e:	f3ef 8305 	mrs	r3, IPSR
 800a492:	617b      	str	r3, [r7, #20]
  return(result);
 800a494:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800a496:	2b00      	cmp	r3, #0
 800a498:	d028      	beq.n	800a4ec <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d005      	beq.n	800a4ac <osMessageQueueGet+0x34>
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d002      	beq.n	800a4ac <osMessageQueueGet+0x34>
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d003      	beq.n	800a4b4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800a4ac:	f06f 0303 	mvn.w	r3, #3
 800a4b0:	61fb      	str	r3, [r7, #28]
 800a4b2:	e037      	b.n	800a524 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800a4b8:	f107 0310 	add.w	r3, r7, #16
 800a4bc:	461a      	mov	r2, r3
 800a4be:	68b9      	ldr	r1, [r7, #8]
 800a4c0:	69b8      	ldr	r0, [r7, #24]
 800a4c2:	f000 fce7 	bl	800ae94 <xQueueReceiveFromISR>
 800a4c6:	4603      	mov	r3, r0
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d003      	beq.n	800a4d4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800a4cc:	f06f 0302 	mvn.w	r3, #2
 800a4d0:	61fb      	str	r3, [r7, #28]
 800a4d2:	e027      	b.n	800a524 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d024      	beq.n	800a524 <osMessageQueueGet+0xac>
 800a4da:	4b15      	ldr	r3, [pc, #84]	@ (800a530 <osMessageQueueGet+0xb8>)
 800a4dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4e0:	601a      	str	r2, [r3, #0]
 800a4e2:	f3bf 8f4f 	dsb	sy
 800a4e6:	f3bf 8f6f 	isb	sy
 800a4ea:	e01b      	b.n	800a524 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800a4ec:	69bb      	ldr	r3, [r7, #24]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d002      	beq.n	800a4f8 <osMessageQueueGet+0x80>
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d103      	bne.n	800a500 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800a4f8:	f06f 0303 	mvn.w	r3, #3
 800a4fc:	61fb      	str	r3, [r7, #28]
 800a4fe:	e011      	b.n	800a524 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800a500:	683a      	ldr	r2, [r7, #0]
 800a502:	68b9      	ldr	r1, [r7, #8]
 800a504:	69b8      	ldr	r0, [r7, #24]
 800a506:	f000 fbe3 	bl	800acd0 <xQueueReceive>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b01      	cmp	r3, #1
 800a50e:	d009      	beq.n	800a524 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d003      	beq.n	800a51e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800a516:	f06f 0301 	mvn.w	r3, #1
 800a51a:	61fb      	str	r3, [r7, #28]
 800a51c:	e002      	b.n	800a524 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800a51e:	f06f 0302 	mvn.w	r3, #2
 800a522:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800a524:	69fb      	ldr	r3, [r7, #28]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3720      	adds	r7, #32
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a534:	b480      	push	{r7}
 800a536:	b085      	sub	sp, #20
 800a538:	af00      	add	r7, sp, #0
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	4a07      	ldr	r2, [pc, #28]	@ (800a560 <vApplicationGetIdleTaskMemory+0x2c>)
 800a544:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	4a06      	ldr	r2, [pc, #24]	@ (800a564 <vApplicationGetIdleTaskMemory+0x30>)
 800a54a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	2280      	movs	r2, #128	@ 0x80
 800a550:	601a      	str	r2, [r3, #0]
}
 800a552:	bf00      	nop
 800a554:	3714      	adds	r7, #20
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	240007f8 	.word	0x240007f8
 800a564:	24000854 	.word	0x24000854

0800a568 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a568:	b480      	push	{r7}
 800a56a:	b085      	sub	sp, #20
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	60f8      	str	r0, [r7, #12]
 800a570:	60b9      	str	r1, [r7, #8]
 800a572:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4a07      	ldr	r2, [pc, #28]	@ (800a594 <vApplicationGetTimerTaskMemory+0x2c>)
 800a578:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	4a06      	ldr	r2, [pc, #24]	@ (800a598 <vApplicationGetTimerTaskMemory+0x30>)
 800a57e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a586:	601a      	str	r2, [r3, #0]
}
 800a588:	bf00      	nop
 800a58a:	3714      	adds	r7, #20
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	24000a54 	.word	0x24000a54
 800a598:	24000ab0 	.word	0x24000ab0

0800a59c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a59c:	b480      	push	{r7}
 800a59e:	b083      	sub	sp, #12
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f103 0208 	add.w	r2, r3, #8
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f04f 32ff 	mov.w	r2, #4294967295
 800a5b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f103 0208 	add.w	r2, r3, #8
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f103 0208 	add.w	r2, r3, #8
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a5d0:	bf00      	nop
 800a5d2:	370c      	adds	r7, #12
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5da:	4770      	bx	lr

0800a5dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a5dc:	b480      	push	{r7}
 800a5de:	b083      	sub	sp, #12
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a5ea:	bf00      	nop
 800a5ec:	370c      	adds	r7, #12
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f4:	4770      	bx	lr

0800a5f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a5f6:	b480      	push	{r7}
 800a5f8:	b085      	sub	sp, #20
 800a5fa:	af00      	add	r7, sp, #0
 800a5fc:	6078      	str	r0, [r7, #4]
 800a5fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	689a      	ldr	r2, [r3, #8]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	683a      	ldr	r2, [r7, #0]
 800a61a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	683a      	ldr	r2, [r7, #0]
 800a620:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	1c5a      	adds	r2, r3, #1
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	601a      	str	r2, [r3, #0]
}
 800a632:	bf00      	nop
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a63e:	b480      	push	{r7}
 800a640:	b085      	sub	sp, #20
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
 800a646:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a654:	d103      	bne.n	800a65e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	60fb      	str	r3, [r7, #12]
 800a65c:	e00c      	b.n	800a678 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	3308      	adds	r3, #8
 800a662:	60fb      	str	r3, [r7, #12]
 800a664:	e002      	b.n	800a66c <vListInsert+0x2e>
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	60fb      	str	r3, [r7, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68ba      	ldr	r2, [r7, #8]
 800a674:	429a      	cmp	r2, r3
 800a676:	d2f6      	bcs.n	800a666 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	685b      	ldr	r3, [r3, #4]
 800a684:	683a      	ldr	r2, [r7, #0]
 800a686:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	68fa      	ldr	r2, [r7, #12]
 800a68c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	683a      	ldr	r2, [r7, #0]
 800a692:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	1c5a      	adds	r2, r3, #1
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	601a      	str	r2, [r3, #0]
}
 800a6a4:	bf00      	nop
 800a6a6:	3714      	adds	r7, #20
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	6892      	ldr	r2, [r2, #8]
 800a6c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	689b      	ldr	r3, [r3, #8]
 800a6cc:	687a      	ldr	r2, [r7, #4]
 800a6ce:	6852      	ldr	r2, [r2, #4]
 800a6d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	687a      	ldr	r2, [r7, #4]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d103      	bne.n	800a6e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	689a      	ldr	r2, [r3, #8]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	1e5a      	subs	r2, r3, #1
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3714      	adds	r7, #20
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a702:	4770      	bx	lr

0800a704 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a704:	b580      	push	{r7, lr}
 800a706:	b084      	sub	sp, #16
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
 800a70c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d10b      	bne.n	800a730 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a71c:	f383 8811 	msr	BASEPRI, r3
 800a720:	f3bf 8f6f 	isb	sy
 800a724:	f3bf 8f4f 	dsb	sy
 800a728:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a72a:	bf00      	nop
 800a72c:	bf00      	nop
 800a72e:	e7fd      	b.n	800a72c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a730:	f002 f992 	bl	800ca58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a73c:	68f9      	ldr	r1, [r7, #12]
 800a73e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a740:	fb01 f303 	mul.w	r3, r1, r3
 800a744:	441a      	add	r2, r3
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681a      	ldr	r2, [r3, #0]
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681a      	ldr	r2, [r3, #0]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a760:	3b01      	subs	r3, #1
 800a762:	68f9      	ldr	r1, [r7, #12]
 800a764:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a766:	fb01 f303 	mul.w	r3, r1, r3
 800a76a:	441a      	add	r2, r3
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	22ff      	movs	r2, #255	@ 0xff
 800a774:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	22ff      	movs	r2, #255	@ 0xff
 800a77c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d114      	bne.n	800a7b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	691b      	ldr	r3, [r3, #16]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d01a      	beq.n	800a7c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	3310      	adds	r3, #16
 800a792:	4618      	mov	r0, r3
 800a794:	f001 f9ea 	bl	800bb6c <xTaskRemoveFromEventList>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d012      	beq.n	800a7c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a79e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7d4 <xQueueGenericReset+0xd0>)
 800a7a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7a4:	601a      	str	r2, [r3, #0]
 800a7a6:	f3bf 8f4f 	dsb	sy
 800a7aa:	f3bf 8f6f 	isb	sy
 800a7ae:	e009      	b.n	800a7c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	3310      	adds	r3, #16
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f7ff fef1 	bl	800a59c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	3324      	adds	r3, #36	@ 0x24
 800a7be:	4618      	mov	r0, r3
 800a7c0:	f7ff feec 	bl	800a59c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a7c4:	f002 f97a 	bl	800cabc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a7c8:	2301      	movs	r3, #1
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	e000ed04 	.word	0xe000ed04

0800a7d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b08e      	sub	sp, #56	@ 0x38
 800a7dc:	af02      	add	r7, sp, #8
 800a7de:	60f8      	str	r0, [r7, #12]
 800a7e0:	60b9      	str	r1, [r7, #8]
 800a7e2:	607a      	str	r2, [r7, #4]
 800a7e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d10b      	bne.n	800a804 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a7fe:	bf00      	nop
 800a800:	bf00      	nop
 800a802:	e7fd      	b.n	800a800 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10b      	bne.n	800a822 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a80e:	f383 8811 	msr	BASEPRI, r3
 800a812:	f3bf 8f6f 	isb	sy
 800a816:	f3bf 8f4f 	dsb	sy
 800a81a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a81c:	bf00      	nop
 800a81e:	bf00      	nop
 800a820:	e7fd      	b.n	800a81e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <xQueueGenericCreateStatic+0x56>
 800a828:	68bb      	ldr	r3, [r7, #8]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <xQueueGenericCreateStatic+0x5a>
 800a82e:	2301      	movs	r3, #1
 800a830:	e000      	b.n	800a834 <xQueueGenericCreateStatic+0x5c>
 800a832:	2300      	movs	r3, #0
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83c:	f383 8811 	msr	BASEPRI, r3
 800a840:	f3bf 8f6f 	isb	sy
 800a844:	f3bf 8f4f 	dsb	sy
 800a848:	623b      	str	r3, [r7, #32]
}
 800a84a:	bf00      	nop
 800a84c:	bf00      	nop
 800a84e:	e7fd      	b.n	800a84c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d102      	bne.n	800a85c <xQueueGenericCreateStatic+0x84>
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d101      	bne.n	800a860 <xQueueGenericCreateStatic+0x88>
 800a85c:	2301      	movs	r3, #1
 800a85e:	e000      	b.n	800a862 <xQueueGenericCreateStatic+0x8a>
 800a860:	2300      	movs	r3, #0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d10b      	bne.n	800a87e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86a:	f383 8811 	msr	BASEPRI, r3
 800a86e:	f3bf 8f6f 	isb	sy
 800a872:	f3bf 8f4f 	dsb	sy
 800a876:	61fb      	str	r3, [r7, #28]
}
 800a878:	bf00      	nop
 800a87a:	bf00      	nop
 800a87c:	e7fd      	b.n	800a87a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a87e:	2350      	movs	r3, #80	@ 0x50
 800a880:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	2b50      	cmp	r3, #80	@ 0x50
 800a886:	d00b      	beq.n	800a8a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88c:	f383 8811 	msr	BASEPRI, r3
 800a890:	f3bf 8f6f 	isb	sy
 800a894:	f3bf 8f4f 	dsb	sy
 800a898:	61bb      	str	r3, [r7, #24]
}
 800a89a:	bf00      	nop
 800a89c:	bf00      	nop
 800a89e:	e7fd      	b.n	800a89c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a8a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a8a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d00d      	beq.n	800a8c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a8ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a8b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a8b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ba:	9300      	str	r3, [sp, #0]
 800a8bc:	4613      	mov	r3, r2
 800a8be:	687a      	ldr	r2, [r7, #4]
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f000 f840 	bl	800a948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a8c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3730      	adds	r7, #48	@ 0x30
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a8d2:	b580      	push	{r7, lr}
 800a8d4:	b08a      	sub	sp, #40	@ 0x28
 800a8d6:	af02      	add	r7, sp, #8
 800a8d8:	60f8      	str	r0, [r7, #12]
 800a8da:	60b9      	str	r1, [r7, #8]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d10b      	bne.n	800a8fe <xQueueGenericCreate+0x2c>
	__asm volatile
 800a8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ea:	f383 8811 	msr	BASEPRI, r3
 800a8ee:	f3bf 8f6f 	isb	sy
 800a8f2:	f3bf 8f4f 	dsb	sy
 800a8f6:	613b      	str	r3, [r7, #16]
}
 800a8f8:	bf00      	nop
 800a8fa:	bf00      	nop
 800a8fc:	e7fd      	b.n	800a8fa <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	fb02 f303 	mul.w	r3, r2, r3
 800a906:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	3350      	adds	r3, #80	@ 0x50
 800a90c:	4618      	mov	r0, r3
 800a90e:	f002 f9c5 	bl	800cc9c <pvPortMalloc>
 800a912:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d011      	beq.n	800a93e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	3350      	adds	r3, #80	@ 0x50
 800a922:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	2200      	movs	r2, #0
 800a928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a92c:	79fa      	ldrb	r2, [r7, #7]
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	4613      	mov	r3, r2
 800a934:	697a      	ldr	r2, [r7, #20]
 800a936:	68b9      	ldr	r1, [r7, #8]
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f000 f805 	bl	800a948 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a93e:	69bb      	ldr	r3, [r7, #24]
	}
 800a940:	4618      	mov	r0, r3
 800a942:	3720      	adds	r7, #32
 800a944:	46bd      	mov	sp, r7
 800a946:	bd80      	pop	{r7, pc}

0800a948 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b084      	sub	sp, #16
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d103      	bne.n	800a964 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a95c:	69bb      	ldr	r3, [r7, #24]
 800a95e:	69ba      	ldr	r2, [r7, #24]
 800a960:	601a      	str	r2, [r3, #0]
 800a962:	e002      	b.n	800a96a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	68ba      	ldr	r2, [r7, #8]
 800a974:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a976:	2101      	movs	r1, #1
 800a978:	69b8      	ldr	r0, [r7, #24]
 800a97a:	f7ff fec3 	bl	800a704 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	78fa      	ldrb	r2, [r7, #3]
 800a982:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a986:	bf00      	nop
 800a988:	3710      	adds	r7, #16
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b08e      	sub	sp, #56	@ 0x38
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a9a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10b      	bne.n	800a9c4 <xQueueGenericSend+0x34>
	__asm volatile
 800a9ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9b0:	f383 8811 	msr	BASEPRI, r3
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	f3bf 8f4f 	dsb	sy
 800a9bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a9be:	bf00      	nop
 800a9c0:	bf00      	nop
 800a9c2:	e7fd      	b.n	800a9c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d103      	bne.n	800a9d2 <xQueueGenericSend+0x42>
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d101      	bne.n	800a9d6 <xQueueGenericSend+0x46>
 800a9d2:	2301      	movs	r3, #1
 800a9d4:	e000      	b.n	800a9d8 <xQueueGenericSend+0x48>
 800a9d6:	2300      	movs	r3, #0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d10b      	bne.n	800a9f4 <xQueueGenericSend+0x64>
	__asm volatile
 800a9dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9e0:	f383 8811 	msr	BASEPRI, r3
 800a9e4:	f3bf 8f6f 	isb	sy
 800a9e8:	f3bf 8f4f 	dsb	sy
 800a9ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a9ee:	bf00      	nop
 800a9f0:	bf00      	nop
 800a9f2:	e7fd      	b.n	800a9f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a9f4:	683b      	ldr	r3, [r7, #0]
 800a9f6:	2b02      	cmp	r3, #2
 800a9f8:	d103      	bne.n	800aa02 <xQueueGenericSend+0x72>
 800a9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d101      	bne.n	800aa06 <xQueueGenericSend+0x76>
 800aa02:	2301      	movs	r3, #1
 800aa04:	e000      	b.n	800aa08 <xQueueGenericSend+0x78>
 800aa06:	2300      	movs	r3, #0
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d10b      	bne.n	800aa24 <xQueueGenericSend+0x94>
	__asm volatile
 800aa0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa10:	f383 8811 	msr	BASEPRI, r3
 800aa14:	f3bf 8f6f 	isb	sy
 800aa18:	f3bf 8f4f 	dsb	sy
 800aa1c:	623b      	str	r3, [r7, #32]
}
 800aa1e:	bf00      	nop
 800aa20:	bf00      	nop
 800aa22:	e7fd      	b.n	800aa20 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aa24:	f001 fa62 	bl	800beec <xTaskGetSchedulerState>
 800aa28:	4603      	mov	r3, r0
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d102      	bne.n	800aa34 <xQueueGenericSend+0xa4>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d101      	bne.n	800aa38 <xQueueGenericSend+0xa8>
 800aa34:	2301      	movs	r3, #1
 800aa36:	e000      	b.n	800aa3a <xQueueGenericSend+0xaa>
 800aa38:	2300      	movs	r3, #0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d10b      	bne.n	800aa56 <xQueueGenericSend+0xc6>
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	61fb      	str	r3, [r7, #28]
}
 800aa50:	bf00      	nop
 800aa52:	bf00      	nop
 800aa54:	e7fd      	b.n	800aa52 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa56:	f001 ffff 	bl	800ca58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aa5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aa5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d302      	bcc.n	800aa6c <xQueueGenericSend+0xdc>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b02      	cmp	r3, #2
 800aa6a:	d129      	bne.n	800aac0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aa6c:	683a      	ldr	r2, [r7, #0]
 800aa6e:	68b9      	ldr	r1, [r7, #8]
 800aa70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aa72:	f000 fa91 	bl	800af98 <prvCopyDataToQueue>
 800aa76:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d010      	beq.n	800aaa2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa82:	3324      	adds	r3, #36	@ 0x24
 800aa84:	4618      	mov	r0, r3
 800aa86:	f001 f871 	bl	800bb6c <xTaskRemoveFromEventList>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d013      	beq.n	800aab8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800aa90:	4b3f      	ldr	r3, [pc, #252]	@ (800ab90 <xQueueGenericSend+0x200>)
 800aa92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa96:	601a      	str	r2, [r3, #0]
 800aa98:	f3bf 8f4f 	dsb	sy
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	e00a      	b.n	800aab8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800aaa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d007      	beq.n	800aab8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800aaa8:	4b39      	ldr	r3, [pc, #228]	@ (800ab90 <xQueueGenericSend+0x200>)
 800aaaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aaae:	601a      	str	r2, [r3, #0]
 800aab0:	f3bf 8f4f 	dsb	sy
 800aab4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800aab8:	f002 f800 	bl	800cabc <vPortExitCritical>
				return pdPASS;
 800aabc:	2301      	movs	r3, #1
 800aabe:	e063      	b.n	800ab88 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d103      	bne.n	800aace <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aac6:	f001 fff9 	bl	800cabc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	e05c      	b.n	800ab88 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aace:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d106      	bne.n	800aae2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aad4:	f107 0314 	add.w	r3, r7, #20
 800aad8:	4618      	mov	r0, r3
 800aada:	f001 f8ab 	bl	800bc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aade:	2301      	movs	r3, #1
 800aae0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aae2:	f001 ffeb 	bl	800cabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aae6:	f000 fe09 	bl	800b6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aaea:	f001 ffb5 	bl	800ca58 <vPortEnterCritical>
 800aaee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaf4:	b25b      	sxtb	r3, r3
 800aaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aafa:	d103      	bne.n	800ab04 <xQueueGenericSend+0x174>
 800aafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafe:	2200      	movs	r2, #0
 800ab00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ab04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab0a:	b25b      	sxtb	r3, r3
 800ab0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab10:	d103      	bne.n	800ab1a <xQueueGenericSend+0x18a>
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ab1a:	f001 ffcf 	bl	800cabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ab1e:	1d3a      	adds	r2, r7, #4
 800ab20:	f107 0314 	add.w	r3, r7, #20
 800ab24:	4611      	mov	r1, r2
 800ab26:	4618      	mov	r0, r3
 800ab28:	f001 f89a 	bl	800bc60 <xTaskCheckForTimeOut>
 800ab2c:	4603      	mov	r3, r0
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d124      	bne.n	800ab7c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ab32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab34:	f000 fb28 	bl	800b188 <prvIsQueueFull>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d018      	beq.n	800ab70 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ab3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab40:	3310      	adds	r3, #16
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	4611      	mov	r1, r2
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 ffbe 	bl	800bac8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ab4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab4e:	f000 fab3 	bl	800b0b8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ab52:	f000 fde1 	bl	800b718 <xTaskResumeAll>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f af7c 	bne.w	800aa56 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ab5e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab90 <xQueueGenericSend+0x200>)
 800ab60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab64:	601a      	str	r2, [r3, #0]
 800ab66:	f3bf 8f4f 	dsb	sy
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	e772      	b.n	800aa56 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ab70:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab72:	f000 faa1 	bl	800b0b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab76:	f000 fdcf 	bl	800b718 <xTaskResumeAll>
 800ab7a:	e76c      	b.n	800aa56 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ab7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab7e:	f000 fa9b 	bl	800b0b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab82:	f000 fdc9 	bl	800b718 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ab86:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3738      	adds	r7, #56	@ 0x38
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	e000ed04 	.word	0xe000ed04

0800ab94 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b090      	sub	sp, #64	@ 0x40
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	60f8      	str	r0, [r7, #12]
 800ab9c:	60b9      	str	r1, [r7, #8]
 800ab9e:	607a      	str	r2, [r7, #4]
 800aba0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d10b      	bne.n	800abc4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800abac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb0:	f383 8811 	msr	BASEPRI, r3
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	f3bf 8f4f 	dsb	sy
 800abbc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abbe:	bf00      	nop
 800abc0:	bf00      	nop
 800abc2:	e7fd      	b.n	800abc0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d103      	bne.n	800abd2 <xQueueGenericSendFromISR+0x3e>
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <xQueueGenericSendFromISR+0x42>
 800abd2:	2301      	movs	r3, #1
 800abd4:	e000      	b.n	800abd8 <xQueueGenericSendFromISR+0x44>
 800abd6:	2300      	movs	r3, #0
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d10b      	bne.n	800abf4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800abdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe0:	f383 8811 	msr	BASEPRI, r3
 800abe4:	f3bf 8f6f 	isb	sy
 800abe8:	f3bf 8f4f 	dsb	sy
 800abec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abee:	bf00      	nop
 800abf0:	bf00      	nop
 800abf2:	e7fd      	b.n	800abf0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	2b02      	cmp	r3, #2
 800abf8:	d103      	bne.n	800ac02 <xQueueGenericSendFromISR+0x6e>
 800abfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800abfe:	2b01      	cmp	r3, #1
 800ac00:	d101      	bne.n	800ac06 <xQueueGenericSendFromISR+0x72>
 800ac02:	2301      	movs	r3, #1
 800ac04:	e000      	b.n	800ac08 <xQueueGenericSendFromISR+0x74>
 800ac06:	2300      	movs	r3, #0
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d10b      	bne.n	800ac24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ac0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac10:	f383 8811 	msr	BASEPRI, r3
 800ac14:	f3bf 8f6f 	isb	sy
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	623b      	str	r3, [r7, #32]
}
 800ac1e:	bf00      	nop
 800ac20:	bf00      	nop
 800ac22:	e7fd      	b.n	800ac20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ac24:	f001 fff8 	bl	800cc18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ac28:	f3ef 8211 	mrs	r2, BASEPRI
 800ac2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac30:	f383 8811 	msr	BASEPRI, r3
 800ac34:	f3bf 8f6f 	isb	sy
 800ac38:	f3bf 8f4f 	dsb	sy
 800ac3c:	61fa      	str	r2, [r7, #28]
 800ac3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ac40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d302      	bcc.n	800ac56 <xQueueGenericSendFromISR+0xc2>
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d12f      	bne.n	800acb6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ac56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	68b9      	ldr	r1, [r7, #8]
 800ac6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ac6c:	f000 f994 	bl	800af98 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ac70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ac74:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac78:	d112      	bne.n	800aca0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d016      	beq.n	800acb0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac84:	3324      	adds	r3, #36	@ 0x24
 800ac86:	4618      	mov	r0, r3
 800ac88:	f000 ff70 	bl	800bb6c <xTaskRemoveFromEventList>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00e      	beq.n	800acb0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00b      	beq.n	800acb0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	601a      	str	r2, [r3, #0]
 800ac9e:	e007      	b.n	800acb0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aca0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aca4:	3301      	adds	r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	b25a      	sxtb	r2, r3
 800acaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800acb0:	2301      	movs	r3, #1
 800acb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800acb4:	e001      	b.n	800acba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800acb6:	2300      	movs	r3, #0
 800acb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800acba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acbc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800acc4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800acc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3740      	adds	r7, #64	@ 0x40
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b08c      	sub	sp, #48	@ 0x30
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800acdc:	2300      	movs	r3, #0
 800acde:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ace4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d10b      	bne.n	800ad02 <xQueueReceive+0x32>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	623b      	str	r3, [r7, #32]
}
 800acfc:	bf00      	nop
 800acfe:	bf00      	nop
 800ad00:	e7fd      	b.n	800acfe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad02:	68bb      	ldr	r3, [r7, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d103      	bne.n	800ad10 <xQueueReceive+0x40>
 800ad08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d101      	bne.n	800ad14 <xQueueReceive+0x44>
 800ad10:	2301      	movs	r3, #1
 800ad12:	e000      	b.n	800ad16 <xQueueReceive+0x46>
 800ad14:	2300      	movs	r3, #0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d10b      	bne.n	800ad32 <xQueueReceive+0x62>
	__asm volatile
 800ad1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad1e:	f383 8811 	msr	BASEPRI, r3
 800ad22:	f3bf 8f6f 	isb	sy
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	61fb      	str	r3, [r7, #28]
}
 800ad2c:	bf00      	nop
 800ad2e:	bf00      	nop
 800ad30:	e7fd      	b.n	800ad2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad32:	f001 f8db 	bl	800beec <xTaskGetSchedulerState>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d102      	bne.n	800ad42 <xQueueReceive+0x72>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <xQueueReceive+0x76>
 800ad42:	2301      	movs	r3, #1
 800ad44:	e000      	b.n	800ad48 <xQueueReceive+0x78>
 800ad46:	2300      	movs	r3, #0
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <xQueueReceive+0x94>
	__asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	61bb      	str	r3, [r7, #24]
}
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ad64:	f001 fe78 	bl	800ca58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ad6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d01f      	beq.n	800adb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ad74:	68b9      	ldr	r1, [r7, #8]
 800ad76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ad78:	f000 f978 	bl	800b06c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ad7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7e:	1e5a      	subs	r2, r3, #1
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ad84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad86:	691b      	ldr	r3, [r3, #16]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00f      	beq.n	800adac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ad8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad8e:	3310      	adds	r3, #16
 800ad90:	4618      	mov	r0, r3
 800ad92:	f000 feeb 	bl	800bb6c <xTaskRemoveFromEventList>
 800ad96:	4603      	mov	r3, r0
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d007      	beq.n	800adac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ad9c:	4b3c      	ldr	r3, [pc, #240]	@ (800ae90 <xQueueReceive+0x1c0>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800adac:	f001 fe86 	bl	800cabc <vPortExitCritical>
				return pdPASS;
 800adb0:	2301      	movs	r3, #1
 800adb2:	e069      	b.n	800ae88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d103      	bne.n	800adc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800adba:	f001 fe7f 	bl	800cabc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800adbe:	2300      	movs	r3, #0
 800adc0:	e062      	b.n	800ae88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800adc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d106      	bne.n	800add6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800adc8:	f107 0310 	add.w	r3, r7, #16
 800adcc:	4618      	mov	r0, r3
 800adce:	f000 ff31 	bl	800bc34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800add2:	2301      	movs	r3, #1
 800add4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800add6:	f001 fe71 	bl	800cabc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800adda:	f000 fc8f 	bl	800b6fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800adde:	f001 fe3b 	bl	800ca58 <vPortEnterCritical>
 800ade2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ade8:	b25b      	sxtb	r3, r3
 800adea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adee:	d103      	bne.n	800adf8 <xQueueReceive+0x128>
 800adf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf2:	2200      	movs	r2, #0
 800adf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adfe:	b25b      	sxtb	r3, r3
 800ae00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae04:	d103      	bne.n	800ae0e <xQueueReceive+0x13e>
 800ae06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae0e:	f001 fe55 	bl	800cabc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae12:	1d3a      	adds	r2, r7, #4
 800ae14:	f107 0310 	add.w	r3, r7, #16
 800ae18:	4611      	mov	r1, r2
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f000 ff20 	bl	800bc60 <xTaskCheckForTimeOut>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d123      	bne.n	800ae6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae28:	f000 f998 	bl	800b15c <prvIsQueueEmpty>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d017      	beq.n	800ae62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ae32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae34:	3324      	adds	r3, #36	@ 0x24
 800ae36:	687a      	ldr	r2, [r7, #4]
 800ae38:	4611      	mov	r1, r2
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f000 fe44 	bl	800bac8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ae40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae42:	f000 f939 	bl	800b0b8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ae46:	f000 fc67 	bl	800b718 <xTaskResumeAll>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d189      	bne.n	800ad64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ae50:	4b0f      	ldr	r3, [pc, #60]	@ (800ae90 <xQueueReceive+0x1c0>)
 800ae52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae56:	601a      	str	r2, [r3, #0]
 800ae58:	f3bf 8f4f 	dsb	sy
 800ae5c:	f3bf 8f6f 	isb	sy
 800ae60:	e780      	b.n	800ad64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ae62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae64:	f000 f928 	bl	800b0b8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ae68:	f000 fc56 	bl	800b718 <xTaskResumeAll>
 800ae6c:	e77a      	b.n	800ad64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ae6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae70:	f000 f922 	bl	800b0b8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ae74:	f000 fc50 	bl	800b718 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ae78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae7a:	f000 f96f 	bl	800b15c <prvIsQueueEmpty>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	f43f af6f 	beq.w	800ad64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ae86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3730      	adds	r7, #48	@ 0x30
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	e000ed04 	.word	0xe000ed04

0800ae94 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b08e      	sub	sp, #56	@ 0x38
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d10b      	bne.n	800aec2 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800aeaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeae:	f383 8811 	msr	BASEPRI, r3
 800aeb2:	f3bf 8f6f 	isb	sy
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	623b      	str	r3, [r7, #32]
}
 800aebc:	bf00      	nop
 800aebe:	bf00      	nop
 800aec0:	e7fd      	b.n	800aebe <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aec2:	68bb      	ldr	r3, [r7, #8]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d103      	bne.n	800aed0 <xQueueReceiveFromISR+0x3c>
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <xQueueReceiveFromISR+0x40>
 800aed0:	2301      	movs	r3, #1
 800aed2:	e000      	b.n	800aed6 <xQueueReceiveFromISR+0x42>
 800aed4:	2300      	movs	r3, #0
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d10b      	bne.n	800aef2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800aeda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aede:	f383 8811 	msr	BASEPRI, r3
 800aee2:	f3bf 8f6f 	isb	sy
 800aee6:	f3bf 8f4f 	dsb	sy
 800aeea:	61fb      	str	r3, [r7, #28]
}
 800aeec:	bf00      	nop
 800aeee:	bf00      	nop
 800aef0:	e7fd      	b.n	800aeee <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aef2:	f001 fe91 	bl	800cc18 <vPortValidateInterruptPriority>
	__asm volatile
 800aef6:	f3ef 8211 	mrs	r2, BASEPRI
 800aefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	61ba      	str	r2, [r7, #24]
 800af0c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800af0e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af16:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d02f      	beq.n	800af7e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af28:	68b9      	ldr	r1, [r7, #8]
 800af2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800af2c:	f000 f89e 	bl	800b06c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af32:	1e5a      	subs	r2, r3, #1
 800af34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af36:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800af38:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800af3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af40:	d112      	bne.n	800af68 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af44:	691b      	ldr	r3, [r3, #16]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af4c:	3310      	adds	r3, #16
 800af4e:	4618      	mov	r0, r3
 800af50:	f000 fe0c 	bl	800bb6c <xTaskRemoveFromEventList>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00e      	beq.n	800af78 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00b      	beq.n	800af78 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2201      	movs	r2, #1
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	e007      	b.n	800af78 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800af68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2db      	uxtb	r3, r3
 800af70:	b25a      	sxtb	r2, r3
 800af72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800af78:	2301      	movs	r3, #1
 800af7a:	637b      	str	r3, [r7, #52]	@ 0x34
 800af7c:	e001      	b.n	800af82 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800af7e:	2300      	movs	r3, #0
 800af80:	637b      	str	r3, [r7, #52]	@ 0x34
 800af82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af84:	613b      	str	r3, [r7, #16]
	__asm volatile
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f383 8811 	msr	BASEPRI, r3
}
 800af8c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800af90:	4618      	mov	r0, r3
 800af92:	3738      	adds	r7, #56	@ 0x38
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10d      	bne.n	800afd2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d14d      	bne.n	800b05a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 ffb0 	bl	800bf28 <xTaskPriorityDisinherit>
 800afc8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	2200      	movs	r2, #0
 800afce:	609a      	str	r2, [r3, #8]
 800afd0:	e043      	b.n	800b05a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d119      	bne.n	800b00c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6858      	ldr	r0, [r3, #4]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afe0:	461a      	mov	r2, r3
 800afe2:	68b9      	ldr	r1, [r7, #8]
 800afe4:	f002 f874 	bl	800d0d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aff0:	441a      	add	r2, r3
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	685a      	ldr	r2, [r3, #4]
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	689b      	ldr	r3, [r3, #8]
 800affe:	429a      	cmp	r2, r3
 800b000:	d32b      	bcc.n	800b05a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681a      	ldr	r2, [r3, #0]
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	605a      	str	r2, [r3, #4]
 800b00a:	e026      	b.n	800b05a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68d8      	ldr	r0, [r3, #12]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b014:	461a      	mov	r2, r3
 800b016:	68b9      	ldr	r1, [r7, #8]
 800b018:	f002 f85a 	bl	800d0d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b024:	425b      	negs	r3, r3
 800b026:	441a      	add	r2, r3
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	68da      	ldr	r2, [r3, #12]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	429a      	cmp	r2, r3
 800b036:	d207      	bcs.n	800b048 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689a      	ldr	r2, [r3, #8]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b040:	425b      	negs	r3, r3
 800b042:	441a      	add	r2, r3
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b02      	cmp	r3, #2
 800b04c:	d105      	bne.n	800b05a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	3b01      	subs	r3, #1
 800b058:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b062:	697b      	ldr	r3, [r7, #20]
}
 800b064:	4618      	mov	r0, r3
 800b066:	3718      	adds	r7, #24
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
 800b074:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d018      	beq.n	800b0b0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	68da      	ldr	r2, [r3, #12]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b086:	441a      	add	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	68da      	ldr	r2, [r3, #12]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	429a      	cmp	r2, r3
 800b096:	d303      	bcc.n	800b0a0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	68d9      	ldr	r1, [r3, #12]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	6838      	ldr	r0, [r7, #0]
 800b0ac:	f002 f810 	bl	800d0d0 <memcpy>
	}
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0c0:	f001 fcca 	bl	800ca58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b0ca:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0cc:	e011      	b.n	800b0f2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d012      	beq.n	800b0fc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	3324      	adds	r3, #36	@ 0x24
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fd46 	bl	800bb6c <xTaskRemoveFromEventList>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0e6:	f000 fe1f 	bl	800bd28 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0ea:	7bfb      	ldrb	r3, [r7, #15]
 800b0ec:	3b01      	subs	r3, #1
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	dce9      	bgt.n	800b0ce <prvUnlockQueue+0x16>
 800b0fa:	e000      	b.n	800b0fe <prvUnlockQueue+0x46>
					break;
 800b0fc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	22ff      	movs	r2, #255	@ 0xff
 800b102:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b106:	f001 fcd9 	bl	800cabc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b10a:	f001 fca5 	bl	800ca58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b114:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b116:	e011      	b.n	800b13c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	691b      	ldr	r3, [r3, #16]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d012      	beq.n	800b146 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	3310      	adds	r3, #16
 800b124:	4618      	mov	r0, r3
 800b126:	f000 fd21 	bl	800bb6c <xTaskRemoveFromEventList>
 800b12a:	4603      	mov	r3, r0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d001      	beq.n	800b134 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b130:	f000 fdfa 	bl	800bd28 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b134:	7bbb      	ldrb	r3, [r7, #14]
 800b136:	3b01      	subs	r3, #1
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b13c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b140:	2b00      	cmp	r3, #0
 800b142:	dce9      	bgt.n	800b118 <prvUnlockQueue+0x60>
 800b144:	e000      	b.n	800b148 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b146:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	22ff      	movs	r2, #255	@ 0xff
 800b14c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b150:	f001 fcb4 	bl	800cabc <vPortExitCritical>
}
 800b154:	bf00      	nop
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b164:	f001 fc78 	bl	800ca58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d102      	bne.n	800b176 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b170:	2301      	movs	r3, #1
 800b172:	60fb      	str	r3, [r7, #12]
 800b174:	e001      	b.n	800b17a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b176:	2300      	movs	r3, #0
 800b178:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b17a:	f001 fc9f 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800b17e:	68fb      	ldr	r3, [r7, #12]
}
 800b180:	4618      	mov	r0, r3
 800b182:	3710      	adds	r7, #16
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}

0800b188 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b190:	f001 fc62 	bl	800ca58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d102      	bne.n	800b1a6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	60fb      	str	r3, [r7, #12]
 800b1a4:	e001      	b.n	800b1aa <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b1aa:	f001 fc87 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
 800b1c0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	60fb      	str	r3, [r7, #12]
 800b1c6:	e014      	b.n	800b1f2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1c8:	4a0f      	ldr	r2, [pc, #60]	@ (800b208 <vQueueAddToRegistry+0x50>)
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d10b      	bne.n	800b1ec <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1d4:	490c      	ldr	r1, [pc, #48]	@ (800b208 <vQueueAddToRegistry+0x50>)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	683a      	ldr	r2, [r7, #0]
 800b1da:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1de:	4a0a      	ldr	r2, [pc, #40]	@ (800b208 <vQueueAddToRegistry+0x50>)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	00db      	lsls	r3, r3, #3
 800b1e4:	4413      	add	r3, r2
 800b1e6:	687a      	ldr	r2, [r7, #4]
 800b1e8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1ea:	e006      	b.n	800b1fa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	60fb      	str	r3, [r7, #12]
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2b07      	cmp	r3, #7
 800b1f6:	d9e7      	bls.n	800b1c8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	24000eb0 	.word	0x24000eb0

0800b20c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b086      	sub	sp, #24
 800b210:	af00      	add	r7, sp, #0
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b21c:	f001 fc1c 	bl	800ca58 <vPortEnterCritical>
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b226:	b25b      	sxtb	r3, r3
 800b228:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b22c:	d103      	bne.n	800b236 <vQueueWaitForMessageRestricted+0x2a>
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	2200      	movs	r2, #0
 800b232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b23c:	b25b      	sxtb	r3, r3
 800b23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b242:	d103      	bne.n	800b24c <vQueueWaitForMessageRestricted+0x40>
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	2200      	movs	r2, #0
 800b248:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b24c:	f001 fc36 	bl	800cabc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b250:	697b      	ldr	r3, [r7, #20]
 800b252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b254:	2b00      	cmp	r3, #0
 800b256:	d106      	bne.n	800b266 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3324      	adds	r3, #36	@ 0x24
 800b25c:	687a      	ldr	r2, [r7, #4]
 800b25e:	68b9      	ldr	r1, [r7, #8]
 800b260:	4618      	mov	r0, r3
 800b262:	f000 fc57 	bl	800bb14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b266:	6978      	ldr	r0, [r7, #20]
 800b268:	f7ff ff26 	bl	800b0b8 <prvUnlockQueue>
	}
 800b26c:	bf00      	nop
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b274:	b580      	push	{r7, lr}
 800b276:	b08e      	sub	sp, #56	@ 0x38
 800b278:	af04      	add	r7, sp, #16
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
 800b280:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b284:	2b00      	cmp	r3, #0
 800b286:	d10b      	bne.n	800b2a0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28c:	f383 8811 	msr	BASEPRI, r3
 800b290:	f3bf 8f6f 	isb	sy
 800b294:	f3bf 8f4f 	dsb	sy
 800b298:	623b      	str	r3, [r7, #32]
}
 800b29a:	bf00      	nop
 800b29c:	bf00      	nop
 800b29e:	e7fd      	b.n	800b29c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b2a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10b      	bne.n	800b2be <xTaskCreateStatic+0x4a>
	__asm volatile
 800b2a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2aa:	f383 8811 	msr	BASEPRI, r3
 800b2ae:	f3bf 8f6f 	isb	sy
 800b2b2:	f3bf 8f4f 	dsb	sy
 800b2b6:	61fb      	str	r3, [r7, #28]
}
 800b2b8:	bf00      	nop
 800b2ba:	bf00      	nop
 800b2bc:	e7fd      	b.n	800b2ba <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2be:	235c      	movs	r3, #92	@ 0x5c
 800b2c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2c2:	693b      	ldr	r3, [r7, #16]
 800b2c4:	2b5c      	cmp	r3, #92	@ 0x5c
 800b2c6:	d00b      	beq.n	800b2e0 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b2c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2cc:	f383 8811 	msr	BASEPRI, r3
 800b2d0:	f3bf 8f6f 	isb	sy
 800b2d4:	f3bf 8f4f 	dsb	sy
 800b2d8:	61bb      	str	r3, [r7, #24]
}
 800b2da:	bf00      	nop
 800b2dc:	bf00      	nop
 800b2de:	e7fd      	b.n	800b2dc <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2e0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d01e      	beq.n	800b326 <xTaskCreateStatic+0xb2>
 800b2e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d01b      	beq.n	800b326 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b2f6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b300:	2300      	movs	r3, #0
 800b302:	9303      	str	r3, [sp, #12]
 800b304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b306:	9302      	str	r3, [sp, #8]
 800b308:	f107 0314 	add.w	r3, r7, #20
 800b30c:	9301      	str	r3, [sp, #4]
 800b30e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b310:	9300      	str	r3, [sp, #0]
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	687a      	ldr	r2, [r7, #4]
 800b316:	68b9      	ldr	r1, [r7, #8]
 800b318:	68f8      	ldr	r0, [r7, #12]
 800b31a:	f000 f850 	bl	800b3be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b31e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b320:	f000 f8de 	bl	800b4e0 <prvAddNewTaskToReadyList>
 800b324:	e001      	b.n	800b32a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b326:	2300      	movs	r3, #0
 800b328:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b32a:	697b      	ldr	r3, [r7, #20]
	}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3728      	adds	r7, #40	@ 0x28
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}

0800b334 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b334:	b580      	push	{r7, lr}
 800b336:	b08c      	sub	sp, #48	@ 0x30
 800b338:	af04      	add	r7, sp, #16
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	603b      	str	r3, [r7, #0]
 800b340:	4613      	mov	r3, r2
 800b342:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b344:	88fb      	ldrh	r3, [r7, #6]
 800b346:	009b      	lsls	r3, r3, #2
 800b348:	4618      	mov	r0, r3
 800b34a:	f001 fca7 	bl	800cc9c <pvPortMalloc>
 800b34e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b350:	697b      	ldr	r3, [r7, #20]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d00e      	beq.n	800b374 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b356:	205c      	movs	r0, #92	@ 0x5c
 800b358:	f001 fca0 	bl	800cc9c <pvPortMalloc>
 800b35c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	697a      	ldr	r2, [r7, #20]
 800b368:	631a      	str	r2, [r3, #48]	@ 0x30
 800b36a:	e005      	b.n	800b378 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b36c:	6978      	ldr	r0, [r7, #20]
 800b36e:	f001 fd63 	bl	800ce38 <vPortFree>
 800b372:	e001      	b.n	800b378 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b374:	2300      	movs	r3, #0
 800b376:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d017      	beq.n	800b3ae <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	2200      	movs	r2, #0
 800b382:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b386:	88fa      	ldrh	r2, [r7, #6]
 800b388:	2300      	movs	r3, #0
 800b38a:	9303      	str	r3, [sp, #12]
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	9302      	str	r3, [sp, #8]
 800b390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	68f8      	ldr	r0, [r7, #12]
 800b39e:	f000 f80e 	bl	800b3be <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b3a2:	69f8      	ldr	r0, [r7, #28]
 800b3a4:	f000 f89c 	bl	800b4e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	61bb      	str	r3, [r7, #24]
 800b3ac:	e002      	b.n	800b3b4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b3ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b3b2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b3b4:	69bb      	ldr	r3, [r7, #24]
	}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3720      	adds	r7, #32
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}

0800b3be <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3be:	b580      	push	{r7, lr}
 800b3c0:	b088      	sub	sp, #32
 800b3c2:	af00      	add	r7, sp, #0
 800b3c4:	60f8      	str	r0, [r7, #12]
 800b3c6:	60b9      	str	r1, [r7, #8]
 800b3c8:	607a      	str	r2, [r7, #4]
 800b3ca:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	21a5      	movs	r1, #165	@ 0xa5
 800b3d8:	f001 fe4e 	bl	800d078 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b3e0:	6879      	ldr	r1, [r7, #4]
 800b3e2:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800b3e6:	440b      	add	r3, r1
 800b3e8:	009b      	lsls	r3, r3, #2
 800b3ea:	4413      	add	r3, r2
 800b3ec:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	f023 0307 	bic.w	r3, r3, #7
 800b3f4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	f003 0307 	and.w	r3, r3, #7
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d00b      	beq.n	800b418 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b404:	f383 8811 	msr	BASEPRI, r3
 800b408:	f3bf 8f6f 	isb	sy
 800b40c:	f3bf 8f4f 	dsb	sy
 800b410:	617b      	str	r3, [r7, #20]
}
 800b412:	bf00      	nop
 800b414:	bf00      	nop
 800b416:	e7fd      	b.n	800b414 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d01f      	beq.n	800b45e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b41e:	2300      	movs	r3, #0
 800b420:	61fb      	str	r3, [r7, #28]
 800b422:	e012      	b.n	800b44a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b424:	68ba      	ldr	r2, [r7, #8]
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	4413      	add	r3, r2
 800b42a:	7819      	ldrb	r1, [r3, #0]
 800b42c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b42e:	69fb      	ldr	r3, [r7, #28]
 800b430:	4413      	add	r3, r2
 800b432:	3334      	adds	r3, #52	@ 0x34
 800b434:	460a      	mov	r2, r1
 800b436:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b438:	68ba      	ldr	r2, [r7, #8]
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	4413      	add	r3, r2
 800b43e:	781b      	ldrb	r3, [r3, #0]
 800b440:	2b00      	cmp	r3, #0
 800b442:	d006      	beq.n	800b452 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b444:	69fb      	ldr	r3, [r7, #28]
 800b446:	3301      	adds	r3, #1
 800b448:	61fb      	str	r3, [r7, #28]
 800b44a:	69fb      	ldr	r3, [r7, #28]
 800b44c:	2b0f      	cmp	r3, #15
 800b44e:	d9e9      	bls.n	800b424 <prvInitialiseNewTask+0x66>
 800b450:	e000      	b.n	800b454 <prvInitialiseNewTask+0x96>
			{
				break;
 800b452:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b456:	2200      	movs	r2, #0
 800b458:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b45c:	e003      	b.n	800b466 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b45e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b468:	2b37      	cmp	r3, #55	@ 0x37
 800b46a:	d901      	bls.n	800b470 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b46c:	2337      	movs	r3, #55	@ 0x37
 800b46e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b474:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b478:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b47a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b47c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b47e:	2200      	movs	r2, #0
 800b480:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	3304      	adds	r3, #4
 800b486:	4618      	mov	r0, r3
 800b488:	f7ff f8a8 	bl	800a5dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b48e:	3318      	adds	r3, #24
 800b490:	4618      	mov	r0, r3
 800b492:	f7ff f8a3 	bl	800a5dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b49a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b49c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b49e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4aa:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4ae:	2200      	movs	r2, #0
 800b4b0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4ba:	683a      	ldr	r2, [r7, #0]
 800b4bc:	68f9      	ldr	r1, [r7, #12]
 800b4be:	69b8      	ldr	r0, [r7, #24]
 800b4c0:	f001 f998 	bl	800c7f4 <pxPortInitialiseStack>
 800b4c4:	4602      	mov	r2, r0
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d002      	beq.n	800b4d6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4d6:	bf00      	nop
 800b4d8:	3720      	adds	r7, #32
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}
	...

0800b4e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4e8:	f001 fab6 	bl	800ca58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4ec:	4b2d      	ldr	r3, [pc, #180]	@ (800b5a4 <prvAddNewTaskToReadyList+0xc4>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	3301      	adds	r3, #1
 800b4f2:	4a2c      	ldr	r2, [pc, #176]	@ (800b5a4 <prvAddNewTaskToReadyList+0xc4>)
 800b4f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4f6:	4b2c      	ldr	r3, [pc, #176]	@ (800b5a8 <prvAddNewTaskToReadyList+0xc8>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d109      	bne.n	800b512 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4fe:	4a2a      	ldr	r2, [pc, #168]	@ (800b5a8 <prvAddNewTaskToReadyList+0xc8>)
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b504:	4b27      	ldr	r3, [pc, #156]	@ (800b5a4 <prvAddNewTaskToReadyList+0xc4>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d110      	bne.n	800b52e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b50c:	f000 fc30 	bl	800bd70 <prvInitialiseTaskLists>
 800b510:	e00d      	b.n	800b52e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b512:	4b26      	ldr	r3, [pc, #152]	@ (800b5ac <prvAddNewTaskToReadyList+0xcc>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d109      	bne.n	800b52e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b51a:	4b23      	ldr	r3, [pc, #140]	@ (800b5a8 <prvAddNewTaskToReadyList+0xc8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b524:	429a      	cmp	r2, r3
 800b526:	d802      	bhi.n	800b52e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b528:	4a1f      	ldr	r2, [pc, #124]	@ (800b5a8 <prvAddNewTaskToReadyList+0xc8>)
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b52e:	4b20      	ldr	r3, [pc, #128]	@ (800b5b0 <prvAddNewTaskToReadyList+0xd0>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	3301      	adds	r3, #1
 800b534:	4a1e      	ldr	r2, [pc, #120]	@ (800b5b0 <prvAddNewTaskToReadyList+0xd0>)
 800b536:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b538:	4b1d      	ldr	r3, [pc, #116]	@ (800b5b0 <prvAddNewTaskToReadyList+0xd0>)
 800b53a:	681a      	ldr	r2, [r3, #0]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b544:	4b1b      	ldr	r3, [pc, #108]	@ (800b5b4 <prvAddNewTaskToReadyList+0xd4>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	429a      	cmp	r2, r3
 800b54a:	d903      	bls.n	800b554 <prvAddNewTaskToReadyList+0x74>
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b550:	4a18      	ldr	r2, [pc, #96]	@ (800b5b4 <prvAddNewTaskToReadyList+0xd4>)
 800b552:	6013      	str	r3, [r2, #0]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b558:	4613      	mov	r3, r2
 800b55a:	009b      	lsls	r3, r3, #2
 800b55c:	4413      	add	r3, r2
 800b55e:	009b      	lsls	r3, r3, #2
 800b560:	4a15      	ldr	r2, [pc, #84]	@ (800b5b8 <prvAddNewTaskToReadyList+0xd8>)
 800b562:	441a      	add	r2, r3
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3304      	adds	r3, #4
 800b568:	4619      	mov	r1, r3
 800b56a:	4610      	mov	r0, r2
 800b56c:	f7ff f843 	bl	800a5f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b570:	f001 faa4 	bl	800cabc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b574:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ac <prvAddNewTaskToReadyList+0xcc>)
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00e      	beq.n	800b59a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b57c:	4b0a      	ldr	r3, [pc, #40]	@ (800b5a8 <prvAddNewTaskToReadyList+0xc8>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b586:	429a      	cmp	r2, r3
 800b588:	d207      	bcs.n	800b59a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b58a:	4b0c      	ldr	r3, [pc, #48]	@ (800b5bc <prvAddNewTaskToReadyList+0xdc>)
 800b58c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b590:	601a      	str	r2, [r3, #0]
 800b592:	f3bf 8f4f 	dsb	sy
 800b596:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b59a:	bf00      	nop
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}
 800b5a2:	bf00      	nop
 800b5a4:	240013c4 	.word	0x240013c4
 800b5a8:	24000ef0 	.word	0x24000ef0
 800b5ac:	240013d0 	.word	0x240013d0
 800b5b0:	240013e0 	.word	0x240013e0
 800b5b4:	240013cc 	.word	0x240013cc
 800b5b8:	24000ef4 	.word	0x24000ef4
 800b5bc:	e000ed04 	.word	0xe000ed04

0800b5c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d018      	beq.n	800b604 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b5d2:	4b14      	ldr	r3, [pc, #80]	@ (800b624 <vTaskDelay+0x64>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00b      	beq.n	800b5f2 <vTaskDelay+0x32>
	__asm volatile
 800b5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5de:	f383 8811 	msr	BASEPRI, r3
 800b5e2:	f3bf 8f6f 	isb	sy
 800b5e6:	f3bf 8f4f 	dsb	sy
 800b5ea:	60bb      	str	r3, [r7, #8]
}
 800b5ec:	bf00      	nop
 800b5ee:	bf00      	nop
 800b5f0:	e7fd      	b.n	800b5ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5f2:	f000 f883 	bl	800b6fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5f6:	2100      	movs	r1, #0
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	f000 fd4d 	bl	800c098 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5fe:	f000 f88b 	bl	800b718 <xTaskResumeAll>
 800b602:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d107      	bne.n	800b61a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b60a:	4b07      	ldr	r3, [pc, #28]	@ (800b628 <vTaskDelay+0x68>)
 800b60c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b610:	601a      	str	r2, [r3, #0]
 800b612:	f3bf 8f4f 	dsb	sy
 800b616:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b61a:	bf00      	nop
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}
 800b622:	bf00      	nop
 800b624:	240013ec 	.word	0x240013ec
 800b628:	e000ed04 	.word	0xe000ed04

0800b62c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b62c:	b580      	push	{r7, lr}
 800b62e:	b08a      	sub	sp, #40	@ 0x28
 800b630:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b636:	2300      	movs	r3, #0
 800b638:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b63a:	463a      	mov	r2, r7
 800b63c:	1d39      	adds	r1, r7, #4
 800b63e:	f107 0308 	add.w	r3, r7, #8
 800b642:	4618      	mov	r0, r3
 800b644:	f7fe ff76 	bl	800a534 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b648:	6839      	ldr	r1, [r7, #0]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68ba      	ldr	r2, [r7, #8]
 800b64e:	9202      	str	r2, [sp, #8]
 800b650:	9301      	str	r3, [sp, #4]
 800b652:	2300      	movs	r3, #0
 800b654:	9300      	str	r3, [sp, #0]
 800b656:	2300      	movs	r3, #0
 800b658:	460a      	mov	r2, r1
 800b65a:	4922      	ldr	r1, [pc, #136]	@ (800b6e4 <vTaskStartScheduler+0xb8>)
 800b65c:	4822      	ldr	r0, [pc, #136]	@ (800b6e8 <vTaskStartScheduler+0xbc>)
 800b65e:	f7ff fe09 	bl	800b274 <xTaskCreateStatic>
 800b662:	4603      	mov	r3, r0
 800b664:	4a21      	ldr	r2, [pc, #132]	@ (800b6ec <vTaskStartScheduler+0xc0>)
 800b666:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b668:	4b20      	ldr	r3, [pc, #128]	@ (800b6ec <vTaskStartScheduler+0xc0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d002      	beq.n	800b676 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b670:	2301      	movs	r3, #1
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	e001      	b.n	800b67a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b676:	2300      	movs	r3, #0
 800b678:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d102      	bne.n	800b686 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b680:	f000 fd5e 	bl	800c140 <xTimerCreateTimerTask>
 800b684:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d116      	bne.n	800b6ba <vTaskStartScheduler+0x8e>
	__asm volatile
 800b68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b690:	f383 8811 	msr	BASEPRI, r3
 800b694:	f3bf 8f6f 	isb	sy
 800b698:	f3bf 8f4f 	dsb	sy
 800b69c:	613b      	str	r3, [r7, #16]
}
 800b69e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b6a0:	4b13      	ldr	r3, [pc, #76]	@ (800b6f0 <vTaskStartScheduler+0xc4>)
 800b6a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b6a6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b6a8:	4b12      	ldr	r3, [pc, #72]	@ (800b6f4 <vTaskStartScheduler+0xc8>)
 800b6aa:	2201      	movs	r2, #1
 800b6ac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b6ae:	4b12      	ldr	r3, [pc, #72]	@ (800b6f8 <vTaskStartScheduler+0xcc>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b6b4:	f001 f92c 	bl	800c910 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b6b8:	e00f      	b.n	800b6da <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6c0:	d10b      	bne.n	800b6da <vTaskStartScheduler+0xae>
	__asm volatile
 800b6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c6:	f383 8811 	msr	BASEPRI, r3
 800b6ca:	f3bf 8f6f 	isb	sy
 800b6ce:	f3bf 8f4f 	dsb	sy
 800b6d2:	60fb      	str	r3, [r7, #12]
}
 800b6d4:	bf00      	nop
 800b6d6:	bf00      	nop
 800b6d8:	e7fd      	b.n	800b6d6 <vTaskStartScheduler+0xaa>
}
 800b6da:	bf00      	nop
 800b6dc:	3718      	adds	r7, #24
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	0800d138 	.word	0x0800d138
 800b6e8:	0800bd41 	.word	0x0800bd41
 800b6ec:	240013e8 	.word	0x240013e8
 800b6f0:	240013e4 	.word	0x240013e4
 800b6f4:	240013d0 	.word	0x240013d0
 800b6f8:	240013c8 	.word	0x240013c8

0800b6fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b700:	4b04      	ldr	r3, [pc, #16]	@ (800b714 <vTaskSuspendAll+0x18>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	3301      	adds	r3, #1
 800b706:	4a03      	ldr	r2, [pc, #12]	@ (800b714 <vTaskSuspendAll+0x18>)
 800b708:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b70a:	bf00      	nop
 800b70c:	46bd      	mov	sp, r7
 800b70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b712:	4770      	bx	lr
 800b714:	240013ec 	.word	0x240013ec

0800b718 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b71e:	2300      	movs	r3, #0
 800b720:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b722:	2300      	movs	r3, #0
 800b724:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b726:	4b42      	ldr	r3, [pc, #264]	@ (800b830 <xTaskResumeAll+0x118>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10b      	bne.n	800b746 <xTaskResumeAll+0x2e>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	603b      	str	r3, [r7, #0]
}
 800b740:	bf00      	nop
 800b742:	bf00      	nop
 800b744:	e7fd      	b.n	800b742 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b746:	f001 f987 	bl	800ca58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b74a:	4b39      	ldr	r3, [pc, #228]	@ (800b830 <xTaskResumeAll+0x118>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	3b01      	subs	r3, #1
 800b750:	4a37      	ldr	r2, [pc, #220]	@ (800b830 <xTaskResumeAll+0x118>)
 800b752:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b754:	4b36      	ldr	r3, [pc, #216]	@ (800b830 <xTaskResumeAll+0x118>)
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d162      	bne.n	800b822 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b75c:	4b35      	ldr	r3, [pc, #212]	@ (800b834 <xTaskResumeAll+0x11c>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	2b00      	cmp	r3, #0
 800b762:	d05e      	beq.n	800b822 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b764:	e02f      	b.n	800b7c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b766:	4b34      	ldr	r3, [pc, #208]	@ (800b838 <xTaskResumeAll+0x120>)
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	68db      	ldr	r3, [r3, #12]
 800b76c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3318      	adds	r3, #24
 800b772:	4618      	mov	r0, r3
 800b774:	f7fe ff9c 	bl	800a6b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	3304      	adds	r3, #4
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fe ff97 	bl	800a6b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b786:	4b2d      	ldr	r3, [pc, #180]	@ (800b83c <xTaskResumeAll+0x124>)
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	429a      	cmp	r2, r3
 800b78c:	d903      	bls.n	800b796 <xTaskResumeAll+0x7e>
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b792:	4a2a      	ldr	r2, [pc, #168]	@ (800b83c <xTaskResumeAll+0x124>)
 800b794:	6013      	str	r3, [r2, #0]
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79a:	4613      	mov	r3, r2
 800b79c:	009b      	lsls	r3, r3, #2
 800b79e:	4413      	add	r3, r2
 800b7a0:	009b      	lsls	r3, r3, #2
 800b7a2:	4a27      	ldr	r2, [pc, #156]	@ (800b840 <xTaskResumeAll+0x128>)
 800b7a4:	441a      	add	r2, r3
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	4610      	mov	r0, r2
 800b7ae:	f7fe ff22 	bl	800a5f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b6:	4b23      	ldr	r3, [pc, #140]	@ (800b844 <xTaskResumeAll+0x12c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d302      	bcc.n	800b7c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b7c0:	4b21      	ldr	r3, [pc, #132]	@ (800b848 <xTaskResumeAll+0x130>)
 800b7c2:	2201      	movs	r2, #1
 800b7c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b7c6:	4b1c      	ldr	r3, [pc, #112]	@ (800b838 <xTaskResumeAll+0x120>)
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1cb      	bne.n	800b766 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d001      	beq.n	800b7d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7d4:	f000 fb6a 	bl	800beac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7d8:	4b1c      	ldr	r3, [pc, #112]	@ (800b84c <xTaskResumeAll+0x134>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d010      	beq.n	800b806 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7e4:	f000 f858 	bl	800b898 <xTaskIncrementTick>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d002      	beq.n	800b7f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b7ee:	4b16      	ldr	r3, [pc, #88]	@ (800b848 <xTaskResumeAll+0x130>)
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	3b01      	subs	r3, #1
 800b7f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d1f1      	bne.n	800b7e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b800:	4b12      	ldr	r3, [pc, #72]	@ (800b84c <xTaskResumeAll+0x134>)
 800b802:	2200      	movs	r2, #0
 800b804:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b806:	4b10      	ldr	r3, [pc, #64]	@ (800b848 <xTaskResumeAll+0x130>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d009      	beq.n	800b822 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b80e:	2301      	movs	r3, #1
 800b810:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b812:	4b0f      	ldr	r3, [pc, #60]	@ (800b850 <xTaskResumeAll+0x138>)
 800b814:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b818:	601a      	str	r2, [r3, #0]
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b822:	f001 f94b 	bl	800cabc <vPortExitCritical>

	return xAlreadyYielded;
 800b826:	68bb      	ldr	r3, [r7, #8]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3710      	adds	r7, #16
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}
 800b830:	240013ec 	.word	0x240013ec
 800b834:	240013c4 	.word	0x240013c4
 800b838:	24001384 	.word	0x24001384
 800b83c:	240013cc 	.word	0x240013cc
 800b840:	24000ef4 	.word	0x24000ef4
 800b844:	24000ef0 	.word	0x24000ef0
 800b848:	240013d8 	.word	0x240013d8
 800b84c:	240013d4 	.word	0x240013d4
 800b850:	e000ed04 	.word	0xe000ed04

0800b854 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b85a:	4b05      	ldr	r3, [pc, #20]	@ (800b870 <xTaskGetTickCount+0x1c>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b860:	687b      	ldr	r3, [r7, #4]
}
 800b862:	4618      	mov	r0, r3
 800b864:	370c      	adds	r7, #12
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	240013c8 	.word	0x240013c8

0800b874 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b87a:	f001 f9cd 	bl	800cc18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b87e:	2300      	movs	r3, #0
 800b880:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b882:	4b04      	ldr	r3, [pc, #16]	@ (800b894 <xTaskGetTickCountFromISR+0x20>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b888:	683b      	ldr	r3, [r7, #0]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3708      	adds	r7, #8
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}
 800b892:	bf00      	nop
 800b894:	240013c8 	.word	0x240013c8

0800b898 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b8a2:	4b4f      	ldr	r3, [pc, #316]	@ (800b9e0 <xTaskIncrementTick+0x148>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	f040 8090 	bne.w	800b9cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b8ac:	4b4d      	ldr	r3, [pc, #308]	@ (800b9e4 <xTaskIncrementTick+0x14c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b8b4:	4a4b      	ldr	r2, [pc, #300]	@ (800b9e4 <xTaskIncrementTick+0x14c>)
 800b8b6:	693b      	ldr	r3, [r7, #16]
 800b8b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b8ba:	693b      	ldr	r3, [r7, #16]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d121      	bne.n	800b904 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b8c0:	4b49      	ldr	r3, [pc, #292]	@ (800b9e8 <xTaskIncrementTick+0x150>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d00b      	beq.n	800b8e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b8ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8ce:	f383 8811 	msr	BASEPRI, r3
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	f3bf 8f4f 	dsb	sy
 800b8da:	603b      	str	r3, [r7, #0]
}
 800b8dc:	bf00      	nop
 800b8de:	bf00      	nop
 800b8e0:	e7fd      	b.n	800b8de <xTaskIncrementTick+0x46>
 800b8e2:	4b41      	ldr	r3, [pc, #260]	@ (800b9e8 <xTaskIncrementTick+0x150>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	60fb      	str	r3, [r7, #12]
 800b8e8:	4b40      	ldr	r3, [pc, #256]	@ (800b9ec <xTaskIncrementTick+0x154>)
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a3e      	ldr	r2, [pc, #248]	@ (800b9e8 <xTaskIncrementTick+0x150>)
 800b8ee:	6013      	str	r3, [r2, #0]
 800b8f0:	4a3e      	ldr	r2, [pc, #248]	@ (800b9ec <xTaskIncrementTick+0x154>)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	6013      	str	r3, [r2, #0]
 800b8f6:	4b3e      	ldr	r3, [pc, #248]	@ (800b9f0 <xTaskIncrementTick+0x158>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b9f0 <xTaskIncrementTick+0x158>)
 800b8fe:	6013      	str	r3, [r2, #0]
 800b900:	f000 fad4 	bl	800beac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b904:	4b3b      	ldr	r3, [pc, #236]	@ (800b9f4 <xTaskIncrementTick+0x15c>)
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	693a      	ldr	r2, [r7, #16]
 800b90a:	429a      	cmp	r2, r3
 800b90c:	d349      	bcc.n	800b9a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b90e:	4b36      	ldr	r3, [pc, #216]	@ (800b9e8 <xTaskIncrementTick+0x150>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d104      	bne.n	800b922 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b918:	4b36      	ldr	r3, [pc, #216]	@ (800b9f4 <xTaskIncrementTick+0x15c>)
 800b91a:	f04f 32ff 	mov.w	r2, #4294967295
 800b91e:	601a      	str	r2, [r3, #0]
					break;
 800b920:	e03f      	b.n	800b9a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b922:	4b31      	ldr	r3, [pc, #196]	@ (800b9e8 <xTaskIncrementTick+0x150>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	68db      	ldr	r3, [r3, #12]
 800b928:	68db      	ldr	r3, [r3, #12]
 800b92a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	685b      	ldr	r3, [r3, #4]
 800b930:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d203      	bcs.n	800b942 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b93a:	4a2e      	ldr	r2, [pc, #184]	@ (800b9f4 <xTaskIncrementTick+0x15c>)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b940:	e02f      	b.n	800b9a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b942:	68bb      	ldr	r3, [r7, #8]
 800b944:	3304      	adds	r3, #4
 800b946:	4618      	mov	r0, r3
 800b948:	f7fe feb2 	bl	800a6b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b950:	2b00      	cmp	r3, #0
 800b952:	d004      	beq.n	800b95e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	3318      	adds	r3, #24
 800b958:	4618      	mov	r0, r3
 800b95a:	f7fe fea9 	bl	800a6b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b95e:	68bb      	ldr	r3, [r7, #8]
 800b960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b962:	4b25      	ldr	r3, [pc, #148]	@ (800b9f8 <xTaskIncrementTick+0x160>)
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	429a      	cmp	r2, r3
 800b968:	d903      	bls.n	800b972 <xTaskIncrementTick+0xda>
 800b96a:	68bb      	ldr	r3, [r7, #8]
 800b96c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b96e:	4a22      	ldr	r2, [pc, #136]	@ (800b9f8 <xTaskIncrementTick+0x160>)
 800b970:	6013      	str	r3, [r2, #0]
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b976:	4613      	mov	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	4413      	add	r3, r2
 800b97c:	009b      	lsls	r3, r3, #2
 800b97e:	4a1f      	ldr	r2, [pc, #124]	@ (800b9fc <xTaskIncrementTick+0x164>)
 800b980:	441a      	add	r2, r3
 800b982:	68bb      	ldr	r3, [r7, #8]
 800b984:	3304      	adds	r3, #4
 800b986:	4619      	mov	r1, r3
 800b988:	4610      	mov	r0, r2
 800b98a:	f7fe fe34 	bl	800a5f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b992:	4b1b      	ldr	r3, [pc, #108]	@ (800ba00 <xTaskIncrementTick+0x168>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b998:	429a      	cmp	r2, r3
 800b99a:	d3b8      	bcc.n	800b90e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b99c:	2301      	movs	r3, #1
 800b99e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b9a0:	e7b5      	b.n	800b90e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b9a2:	4b17      	ldr	r3, [pc, #92]	@ (800ba00 <xTaskIncrementTick+0x168>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9a8:	4914      	ldr	r1, [pc, #80]	@ (800b9fc <xTaskIncrementTick+0x164>)
 800b9aa:	4613      	mov	r3, r2
 800b9ac:	009b      	lsls	r3, r3, #2
 800b9ae:	4413      	add	r3, r2
 800b9b0:	009b      	lsls	r3, r3, #2
 800b9b2:	440b      	add	r3, r1
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b01      	cmp	r3, #1
 800b9b8:	d901      	bls.n	800b9be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b9ba:	2301      	movs	r3, #1
 800b9bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b9be:	4b11      	ldr	r3, [pc, #68]	@ (800ba04 <xTaskIncrementTick+0x16c>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d007      	beq.n	800b9d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b9c6:	2301      	movs	r3, #1
 800b9c8:	617b      	str	r3, [r7, #20]
 800b9ca:	e004      	b.n	800b9d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b9cc:	4b0e      	ldr	r3, [pc, #56]	@ (800ba08 <xTaskIncrementTick+0x170>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	3301      	adds	r3, #1
 800b9d2:	4a0d      	ldr	r2, [pc, #52]	@ (800ba08 <xTaskIncrementTick+0x170>)
 800b9d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b9d6:	697b      	ldr	r3, [r7, #20]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	3718      	adds	r7, #24
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	bd80      	pop	{r7, pc}
 800b9e0:	240013ec 	.word	0x240013ec
 800b9e4:	240013c8 	.word	0x240013c8
 800b9e8:	2400137c 	.word	0x2400137c
 800b9ec:	24001380 	.word	0x24001380
 800b9f0:	240013dc 	.word	0x240013dc
 800b9f4:	240013e4 	.word	0x240013e4
 800b9f8:	240013cc 	.word	0x240013cc
 800b9fc:	24000ef4 	.word	0x24000ef4
 800ba00:	24000ef0 	.word	0x24000ef0
 800ba04:	240013d8 	.word	0x240013d8
 800ba08:	240013d4 	.word	0x240013d4

0800ba0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b085      	sub	sp, #20
 800ba10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ba12:	4b28      	ldr	r3, [pc, #160]	@ (800bab4 <vTaskSwitchContext+0xa8>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d003      	beq.n	800ba22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ba1a:	4b27      	ldr	r3, [pc, #156]	@ (800bab8 <vTaskSwitchContext+0xac>)
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ba20:	e042      	b.n	800baa8 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800ba22:	4b25      	ldr	r3, [pc, #148]	@ (800bab8 <vTaskSwitchContext+0xac>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba28:	4b24      	ldr	r3, [pc, #144]	@ (800babc <vTaskSwitchContext+0xb0>)
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	60fb      	str	r3, [r7, #12]
 800ba2e:	e011      	b.n	800ba54 <vTaskSwitchContext+0x48>
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d10b      	bne.n	800ba4e <vTaskSwitchContext+0x42>
	__asm volatile
 800ba36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba3a:	f383 8811 	msr	BASEPRI, r3
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f3bf 8f4f 	dsb	sy
 800ba46:	607b      	str	r3, [r7, #4]
}
 800ba48:	bf00      	nop
 800ba4a:	bf00      	nop
 800ba4c:	e7fd      	b.n	800ba4a <vTaskSwitchContext+0x3e>
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	3b01      	subs	r3, #1
 800ba52:	60fb      	str	r3, [r7, #12]
 800ba54:	491a      	ldr	r1, [pc, #104]	@ (800bac0 <vTaskSwitchContext+0xb4>)
 800ba56:	68fa      	ldr	r2, [r7, #12]
 800ba58:	4613      	mov	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	4413      	add	r3, r2
 800ba5e:	009b      	lsls	r3, r3, #2
 800ba60:	440b      	add	r3, r1
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d0e3      	beq.n	800ba30 <vTaskSwitchContext+0x24>
 800ba68:	68fa      	ldr	r2, [r7, #12]
 800ba6a:	4613      	mov	r3, r2
 800ba6c:	009b      	lsls	r3, r3, #2
 800ba6e:	4413      	add	r3, r2
 800ba70:	009b      	lsls	r3, r3, #2
 800ba72:	4a13      	ldr	r2, [pc, #76]	@ (800bac0 <vTaskSwitchContext+0xb4>)
 800ba74:	4413      	add	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	685a      	ldr	r2, [r3, #4]
 800ba7e:	68bb      	ldr	r3, [r7, #8]
 800ba80:	605a      	str	r2, [r3, #4]
 800ba82:	68bb      	ldr	r3, [r7, #8]
 800ba84:	685a      	ldr	r2, [r3, #4]
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	3308      	adds	r3, #8
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d104      	bne.n	800ba98 <vTaskSwitchContext+0x8c>
 800ba8e:	68bb      	ldr	r3, [r7, #8]
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	605a      	str	r2, [r3, #4]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	68db      	ldr	r3, [r3, #12]
 800ba9e:	4a09      	ldr	r2, [pc, #36]	@ (800bac4 <vTaskSwitchContext+0xb8>)
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	4a06      	ldr	r2, [pc, #24]	@ (800babc <vTaskSwitchContext+0xb0>)
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6013      	str	r3, [r2, #0]
}
 800baa8:	bf00      	nop
 800baaa:	3714      	adds	r7, #20
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr
 800bab4:	240013ec 	.word	0x240013ec
 800bab8:	240013d8 	.word	0x240013d8
 800babc:	240013cc 	.word	0x240013cc
 800bac0:	24000ef4 	.word	0x24000ef4
 800bac4:	24000ef0 	.word	0x24000ef0

0800bac8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10b      	bne.n	800baf0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	60fb      	str	r3, [r7, #12]
}
 800baea:	bf00      	nop
 800baec:	bf00      	nop
 800baee:	e7fd      	b.n	800baec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800baf0:	4b07      	ldr	r3, [pc, #28]	@ (800bb10 <vTaskPlaceOnEventList+0x48>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	3318      	adds	r3, #24
 800baf6:	4619      	mov	r1, r3
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f7fe fda0 	bl	800a63e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bafe:	2101      	movs	r1, #1
 800bb00:	6838      	ldr	r0, [r7, #0]
 800bb02:	f000 fac9 	bl	800c098 <prvAddCurrentTaskToDelayedList>
}
 800bb06:	bf00      	nop
 800bb08:	3710      	adds	r7, #16
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	24000ef0 	.word	0x24000ef0

0800bb14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b086      	sub	sp, #24
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	60f8      	str	r0, [r7, #12]
 800bb1c:	60b9      	str	r1, [r7, #8]
 800bb1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10b      	bne.n	800bb3e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bb26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb2a:	f383 8811 	msr	BASEPRI, r3
 800bb2e:	f3bf 8f6f 	isb	sy
 800bb32:	f3bf 8f4f 	dsb	sy
 800bb36:	617b      	str	r3, [r7, #20]
}
 800bb38:	bf00      	nop
 800bb3a:	bf00      	nop
 800bb3c:	e7fd      	b.n	800bb3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <vTaskPlaceOnEventListRestricted+0x54>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	3318      	adds	r3, #24
 800bb44:	4619      	mov	r1, r3
 800bb46:	68f8      	ldr	r0, [r7, #12]
 800bb48:	f7fe fd55 	bl	800a5f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d002      	beq.n	800bb58 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bb52:	f04f 33ff 	mov.w	r3, #4294967295
 800bb56:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bb58:	6879      	ldr	r1, [r7, #4]
 800bb5a:	68b8      	ldr	r0, [r7, #8]
 800bb5c:	f000 fa9c 	bl	800c098 <prvAddCurrentTaskToDelayedList>
	}
 800bb60:	bf00      	nop
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	24000ef0 	.word	0x24000ef0

0800bb6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b086      	sub	sp, #24
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d10b      	bne.n	800bb9a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bb82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb86:	f383 8811 	msr	BASEPRI, r3
 800bb8a:	f3bf 8f6f 	isb	sy
 800bb8e:	f3bf 8f4f 	dsb	sy
 800bb92:	60fb      	str	r3, [r7, #12]
}
 800bb94:	bf00      	nop
 800bb96:	bf00      	nop
 800bb98:	e7fd      	b.n	800bb96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	3318      	adds	r3, #24
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fe fd86 	bl	800a6b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bba4:	4b1d      	ldr	r3, [pc, #116]	@ (800bc1c <xTaskRemoveFromEventList+0xb0>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d11d      	bne.n	800bbe8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	3304      	adds	r3, #4
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	f7fe fd7d 	bl	800a6b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bbb6:	693b      	ldr	r3, [r7, #16]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbba:	4b19      	ldr	r3, [pc, #100]	@ (800bc20 <xTaskRemoveFromEventList+0xb4>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	429a      	cmp	r2, r3
 800bbc0:	d903      	bls.n	800bbca <xTaskRemoveFromEventList+0x5e>
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc6:	4a16      	ldr	r2, [pc, #88]	@ (800bc20 <xTaskRemoveFromEventList+0xb4>)
 800bbc8:	6013      	str	r3, [r2, #0]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbce:	4613      	mov	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	4413      	add	r3, r2
 800bbd4:	009b      	lsls	r3, r3, #2
 800bbd6:	4a13      	ldr	r2, [pc, #76]	@ (800bc24 <xTaskRemoveFromEventList+0xb8>)
 800bbd8:	441a      	add	r2, r3
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	3304      	adds	r3, #4
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4610      	mov	r0, r2
 800bbe2:	f7fe fd08 	bl	800a5f6 <vListInsertEnd>
 800bbe6:	e005      	b.n	800bbf4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	3318      	adds	r3, #24
 800bbec:	4619      	mov	r1, r3
 800bbee:	480e      	ldr	r0, [pc, #56]	@ (800bc28 <xTaskRemoveFromEventList+0xbc>)
 800bbf0:	f7fe fd01 	bl	800a5f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbf8:	4b0c      	ldr	r3, [pc, #48]	@ (800bc2c <xTaskRemoveFromEventList+0xc0>)
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d905      	bls.n	800bc0e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bc02:	2301      	movs	r3, #1
 800bc04:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bc06:	4b0a      	ldr	r3, [pc, #40]	@ (800bc30 <xTaskRemoveFromEventList+0xc4>)
 800bc08:	2201      	movs	r2, #1
 800bc0a:	601a      	str	r2, [r3, #0]
 800bc0c:	e001      	b.n	800bc12 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bc12:	697b      	ldr	r3, [r7, #20]
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3718      	adds	r7, #24
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	240013ec 	.word	0x240013ec
 800bc20:	240013cc 	.word	0x240013cc
 800bc24:	24000ef4 	.word	0x24000ef4
 800bc28:	24001384 	.word	0x24001384
 800bc2c:	24000ef0 	.word	0x24000ef0
 800bc30:	240013d8 	.word	0x240013d8

0800bc34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bc34:	b480      	push	{r7}
 800bc36:	b083      	sub	sp, #12
 800bc38:	af00      	add	r7, sp, #0
 800bc3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bc3c:	4b06      	ldr	r3, [pc, #24]	@ (800bc58 <vTaskInternalSetTimeOutState+0x24>)
 800bc3e:	681a      	ldr	r2, [r3, #0]
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bc44:	4b05      	ldr	r3, [pc, #20]	@ (800bc5c <vTaskInternalSetTimeOutState+0x28>)
 800bc46:	681a      	ldr	r2, [r3, #0]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	605a      	str	r2, [r3, #4]
}
 800bc4c:	bf00      	nop
 800bc4e:	370c      	adds	r7, #12
 800bc50:	46bd      	mov	sp, r7
 800bc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc56:	4770      	bx	lr
 800bc58:	240013dc 	.word	0x240013dc
 800bc5c:	240013c8 	.word	0x240013c8

0800bc60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	613b      	str	r3, [r7, #16]
}
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
 800bc86:	e7fd      	b.n	800bc84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d10b      	bne.n	800bca6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bc8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc92:	f383 8811 	msr	BASEPRI, r3
 800bc96:	f3bf 8f6f 	isb	sy
 800bc9a:	f3bf 8f4f 	dsb	sy
 800bc9e:	60fb      	str	r3, [r7, #12]
}
 800bca0:	bf00      	nop
 800bca2:	bf00      	nop
 800bca4:	e7fd      	b.n	800bca2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bca6:	f000 fed7 	bl	800ca58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bcaa:	4b1d      	ldr	r3, [pc, #116]	@ (800bd20 <xTaskCheckForTimeOut+0xc0>)
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	69ba      	ldr	r2, [r7, #24]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcc2:	d102      	bne.n	800bcca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	61fb      	str	r3, [r7, #28]
 800bcc8:	e023      	b.n	800bd12 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681a      	ldr	r2, [r3, #0]
 800bcce:	4b15      	ldr	r3, [pc, #84]	@ (800bd24 <xTaskCheckForTimeOut+0xc4>)
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	429a      	cmp	r2, r3
 800bcd4:	d007      	beq.n	800bce6 <xTaskCheckForTimeOut+0x86>
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	69ba      	ldr	r2, [r7, #24]
 800bcdc:	429a      	cmp	r2, r3
 800bcde:	d302      	bcc.n	800bce6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bce0:	2301      	movs	r3, #1
 800bce2:	61fb      	str	r3, [r7, #28]
 800bce4:	e015      	b.n	800bd12 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	697a      	ldr	r2, [r7, #20]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d20b      	bcs.n	800bd08 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	1ad2      	subs	r2, r2, r3
 800bcf8:	683b      	ldr	r3, [r7, #0]
 800bcfa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f7ff ff99 	bl	800bc34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bd02:	2300      	movs	r3, #0
 800bd04:	61fb      	str	r3, [r7, #28]
 800bd06:	e004      	b.n	800bd12 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bd0e:	2301      	movs	r3, #1
 800bd10:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bd12:	f000 fed3 	bl	800cabc <vPortExitCritical>

	return xReturn;
 800bd16:	69fb      	ldr	r3, [r7, #28]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3720      	adds	r7, #32
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	240013c8 	.word	0x240013c8
 800bd24:	240013dc 	.word	0x240013dc

0800bd28 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bd28:	b480      	push	{r7}
 800bd2a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bd2c:	4b03      	ldr	r3, [pc, #12]	@ (800bd3c <vTaskMissedYield+0x14>)
 800bd2e:	2201      	movs	r2, #1
 800bd30:	601a      	str	r2, [r3, #0]
}
 800bd32:	bf00      	nop
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	240013d8 	.word	0x240013d8

0800bd40 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bd48:	f000 f852 	bl	800bdf0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bd4c:	4b06      	ldr	r3, [pc, #24]	@ (800bd68 <prvIdleTask+0x28>)
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d9f9      	bls.n	800bd48 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bd54:	4b05      	ldr	r3, [pc, #20]	@ (800bd6c <prvIdleTask+0x2c>)
 800bd56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd5a:	601a      	str	r2, [r3, #0]
 800bd5c:	f3bf 8f4f 	dsb	sy
 800bd60:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bd64:	e7f0      	b.n	800bd48 <prvIdleTask+0x8>
 800bd66:	bf00      	nop
 800bd68:	24000ef4 	.word	0x24000ef4
 800bd6c:	e000ed04 	.word	0xe000ed04

0800bd70 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd76:	2300      	movs	r3, #0
 800bd78:	607b      	str	r3, [r7, #4]
 800bd7a:	e00c      	b.n	800bd96 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	4613      	mov	r3, r2
 800bd80:	009b      	lsls	r3, r3, #2
 800bd82:	4413      	add	r3, r2
 800bd84:	009b      	lsls	r3, r3, #2
 800bd86:	4a12      	ldr	r2, [pc, #72]	@ (800bdd0 <prvInitialiseTaskLists+0x60>)
 800bd88:	4413      	add	r3, r2
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	f7fe fc06 	bl	800a59c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	3301      	adds	r3, #1
 800bd94:	607b      	str	r3, [r7, #4]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	2b37      	cmp	r3, #55	@ 0x37
 800bd9a:	d9ef      	bls.n	800bd7c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bd9c:	480d      	ldr	r0, [pc, #52]	@ (800bdd4 <prvInitialiseTaskLists+0x64>)
 800bd9e:	f7fe fbfd 	bl	800a59c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bda2:	480d      	ldr	r0, [pc, #52]	@ (800bdd8 <prvInitialiseTaskLists+0x68>)
 800bda4:	f7fe fbfa 	bl	800a59c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bda8:	480c      	ldr	r0, [pc, #48]	@ (800bddc <prvInitialiseTaskLists+0x6c>)
 800bdaa:	f7fe fbf7 	bl	800a59c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bdae:	480c      	ldr	r0, [pc, #48]	@ (800bde0 <prvInitialiseTaskLists+0x70>)
 800bdb0:	f7fe fbf4 	bl	800a59c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bdb4:	480b      	ldr	r0, [pc, #44]	@ (800bde4 <prvInitialiseTaskLists+0x74>)
 800bdb6:	f7fe fbf1 	bl	800a59c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bdba:	4b0b      	ldr	r3, [pc, #44]	@ (800bde8 <prvInitialiseTaskLists+0x78>)
 800bdbc:	4a05      	ldr	r2, [pc, #20]	@ (800bdd4 <prvInitialiseTaskLists+0x64>)
 800bdbe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bdc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bdec <prvInitialiseTaskLists+0x7c>)
 800bdc2:	4a05      	ldr	r2, [pc, #20]	@ (800bdd8 <prvInitialiseTaskLists+0x68>)
 800bdc4:	601a      	str	r2, [r3, #0]
}
 800bdc6:	bf00      	nop
 800bdc8:	3708      	adds	r7, #8
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	bd80      	pop	{r7, pc}
 800bdce:	bf00      	nop
 800bdd0:	24000ef4 	.word	0x24000ef4
 800bdd4:	24001354 	.word	0x24001354
 800bdd8:	24001368 	.word	0x24001368
 800bddc:	24001384 	.word	0x24001384
 800bde0:	24001398 	.word	0x24001398
 800bde4:	240013b0 	.word	0x240013b0
 800bde8:	2400137c 	.word	0x2400137c
 800bdec:	24001380 	.word	0x24001380

0800bdf0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b082      	sub	sp, #8
 800bdf4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bdf6:	e019      	b.n	800be2c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bdf8:	f000 fe2e 	bl	800ca58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdfc:	4b10      	ldr	r3, [pc, #64]	@ (800be40 <prvCheckTasksWaitingTermination+0x50>)
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	3304      	adds	r3, #4
 800be08:	4618      	mov	r0, r3
 800be0a:	f7fe fc51 	bl	800a6b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800be0e:	4b0d      	ldr	r3, [pc, #52]	@ (800be44 <prvCheckTasksWaitingTermination+0x54>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	3b01      	subs	r3, #1
 800be14:	4a0b      	ldr	r2, [pc, #44]	@ (800be44 <prvCheckTasksWaitingTermination+0x54>)
 800be16:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800be18:	4b0b      	ldr	r3, [pc, #44]	@ (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	4a0a      	ldr	r2, [pc, #40]	@ (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be20:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800be22:	f000 fe4b 	bl	800cabc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 f810 	bl	800be4c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800be2c:	4b06      	ldr	r3, [pc, #24]	@ (800be48 <prvCheckTasksWaitingTermination+0x58>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e1      	bne.n	800bdf8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800be34:	bf00      	nop
 800be36:	bf00      	nop
 800be38:	3708      	adds	r7, #8
 800be3a:	46bd      	mov	sp, r7
 800be3c:	bd80      	pop	{r7, pc}
 800be3e:	bf00      	nop
 800be40:	24001398 	.word	0x24001398
 800be44:	240013c4 	.word	0x240013c4
 800be48:	240013ac 	.word	0x240013ac

0800be4c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b084      	sub	sp, #16
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d108      	bne.n	800be70 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be62:	4618      	mov	r0, r3
 800be64:	f000 ffe8 	bl	800ce38 <vPortFree>
				vPortFree( pxTCB );
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f000 ffe5 	bl	800ce38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800be6e:	e019      	b.n	800bea4 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be76:	2b01      	cmp	r3, #1
 800be78:	d103      	bne.n	800be82 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 ffdc 	bl	800ce38 <vPortFree>
	}
 800be80:	e010      	b.n	800bea4 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800be88:	2b02      	cmp	r3, #2
 800be8a:	d00b      	beq.n	800bea4 <prvDeleteTCB+0x58>
	__asm volatile
 800be8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be90:	f383 8811 	msr	BASEPRI, r3
 800be94:	f3bf 8f6f 	isb	sy
 800be98:	f3bf 8f4f 	dsb	sy
 800be9c:	60fb      	str	r3, [r7, #12]
}
 800be9e:	bf00      	nop
 800bea0:	bf00      	nop
 800bea2:	e7fd      	b.n	800bea0 <prvDeleteTCB+0x54>
	}
 800bea4:	bf00      	nop
 800bea6:	3710      	adds	r7, #16
 800bea8:	46bd      	mov	sp, r7
 800beaa:	bd80      	pop	{r7, pc}

0800beac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800beac:	b480      	push	{r7}
 800beae:	b083      	sub	sp, #12
 800beb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800beb2:	4b0c      	ldr	r3, [pc, #48]	@ (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d104      	bne.n	800bec6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	@ (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bebe:	f04f 32ff 	mov.w	r2, #4294967295
 800bec2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bec4:	e008      	b.n	800bed8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bec6:	4b07      	ldr	r3, [pc, #28]	@ (800bee4 <prvResetNextTaskUnblockTime+0x38>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	68db      	ldr	r3, [r3, #12]
 800becc:	68db      	ldr	r3, [r3, #12]
 800bece:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	4a04      	ldr	r2, [pc, #16]	@ (800bee8 <prvResetNextTaskUnblockTime+0x3c>)
 800bed6:	6013      	str	r3, [r2, #0]
}
 800bed8:	bf00      	nop
 800beda:	370c      	adds	r7, #12
 800bedc:	46bd      	mov	sp, r7
 800bede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee2:	4770      	bx	lr
 800bee4:	2400137c 	.word	0x2400137c
 800bee8:	240013e4 	.word	0x240013e4

0800beec <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bef2:	4b0b      	ldr	r3, [pc, #44]	@ (800bf20 <xTaskGetSchedulerState+0x34>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d102      	bne.n	800bf00 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800befa:	2301      	movs	r3, #1
 800befc:	607b      	str	r3, [r7, #4]
 800befe:	e008      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bf00:	4b08      	ldr	r3, [pc, #32]	@ (800bf24 <xTaskGetSchedulerState+0x38>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d102      	bne.n	800bf0e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bf08:	2302      	movs	r3, #2
 800bf0a:	607b      	str	r3, [r7, #4]
 800bf0c:	e001      	b.n	800bf12 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bf0e:	2300      	movs	r3, #0
 800bf10:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bf12:	687b      	ldr	r3, [r7, #4]
	}
 800bf14:	4618      	mov	r0, r3
 800bf16:	370c      	adds	r7, #12
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1e:	4770      	bx	lr
 800bf20:	240013d0 	.word	0x240013d0
 800bf24:	240013ec 	.word	0x240013ec

0800bf28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bf34:	2300      	movs	r3, #0
 800bf36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d058      	beq.n	800bff0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bf3e:	4b2f      	ldr	r3, [pc, #188]	@ (800bffc <xTaskPriorityDisinherit+0xd4>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d00b      	beq.n	800bf60 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bf48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf4c:	f383 8811 	msr	BASEPRI, r3
 800bf50:	f3bf 8f6f 	isb	sy
 800bf54:	f3bf 8f4f 	dsb	sy
 800bf58:	60fb      	str	r3, [r7, #12]
}
 800bf5a:	bf00      	nop
 800bf5c:	bf00      	nop
 800bf5e:	e7fd      	b.n	800bf5c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bf60:	693b      	ldr	r3, [r7, #16]
 800bf62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d10b      	bne.n	800bf80 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bf68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf6c:	f383 8811 	msr	BASEPRI, r3
 800bf70:	f3bf 8f6f 	isb	sy
 800bf74:	f3bf 8f4f 	dsb	sy
 800bf78:	60bb      	str	r3, [r7, #8]
}
 800bf7a:	bf00      	nop
 800bf7c:	bf00      	nop
 800bf7e:	e7fd      	b.n	800bf7c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bf80:	693b      	ldr	r3, [r7, #16]
 800bf82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf84:	1e5a      	subs	r2, r3, #1
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d02c      	beq.n	800bff0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d128      	bne.n	800bff0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bf9e:	693b      	ldr	r3, [r7, #16]
 800bfa0:	3304      	adds	r3, #4
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7fe fb84 	bl	800a6b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bfac:	693b      	ldr	r3, [r7, #16]
 800bfae:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfb4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfc0:	4b0f      	ldr	r3, [pc, #60]	@ (800c000 <xTaskPriorityDisinherit+0xd8>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	d903      	bls.n	800bfd0 <xTaskPriorityDisinherit+0xa8>
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfcc:	4a0c      	ldr	r2, [pc, #48]	@ (800c000 <xTaskPriorityDisinherit+0xd8>)
 800bfce:	6013      	str	r3, [r2, #0]
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfd4:	4613      	mov	r3, r2
 800bfd6:	009b      	lsls	r3, r3, #2
 800bfd8:	4413      	add	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4a09      	ldr	r2, [pc, #36]	@ (800c004 <xTaskPriorityDisinherit+0xdc>)
 800bfde:	441a      	add	r2, r3
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	3304      	adds	r3, #4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	4610      	mov	r0, r2
 800bfe8:	f7fe fb05 	bl	800a5f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bfec:	2301      	movs	r3, #1
 800bfee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bff0:	697b      	ldr	r3, [r7, #20]
	}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3718      	adds	r7, #24
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	24000ef0 	.word	0x24000ef0
 800c000:	240013cc 	.word	0x240013cc
 800c004:	24000ef4 	.word	0x24000ef4

0800c008 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b084      	sub	sp, #16
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c012:	f000 fd21 	bl	800ca58 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c016:	4b1e      	ldr	r3, [pc, #120]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d113      	bne.n	800c048 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c020:	4b1b      	ldr	r3, [pc, #108]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2201      	movs	r2, #1
 800c026:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	d00b      	beq.n	800c048 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c030:	2101      	movs	r1, #1
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f000 f830 	bl	800c098 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c038:	4b16      	ldr	r3, [pc, #88]	@ (800c094 <ulTaskNotifyTake+0x8c>)
 800c03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03e:	601a      	str	r2, [r3, #0]
 800c040:	f3bf 8f4f 	dsb	sy
 800c044:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c048:	f000 fd38 	bl	800cabc <vPortExitCritical>

		taskENTER_CRITICAL();
 800c04c:	f000 fd04 	bl	800ca58 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c050:	4b0f      	ldr	r3, [pc, #60]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c056:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00c      	beq.n	800c078 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d004      	beq.n	800c06e <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c064:	4b0a      	ldr	r3, [pc, #40]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	2200      	movs	r2, #0
 800c06a:	655a      	str	r2, [r3, #84]	@ 0x54
 800c06c:	e004      	b.n	800c078 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c06e:	4b08      	ldr	r3, [pc, #32]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	68fa      	ldr	r2, [r7, #12]
 800c074:	3a01      	subs	r2, #1
 800c076:	655a      	str	r2, [r3, #84]	@ 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c078:	4b05      	ldr	r3, [pc, #20]	@ (800c090 <ulTaskNotifyTake+0x88>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800c082:	f000 fd1b 	bl	800cabc <vPortExitCritical>

		return ulReturn;
 800c086:	68fb      	ldr	r3, [r7, #12]
	}
 800c088:	4618      	mov	r0, r3
 800c08a:	3710      	adds	r7, #16
 800c08c:	46bd      	mov	sp, r7
 800c08e:	bd80      	pop	{r7, pc}
 800c090:	24000ef0 	.word	0x24000ef0
 800c094:	e000ed04 	.word	0xe000ed04

0800c098 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c0a2:	4b21      	ldr	r3, [pc, #132]	@ (800c128 <prvAddCurrentTaskToDelayedList+0x90>)
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c0a8:	4b20      	ldr	r3, [pc, #128]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3304      	adds	r3, #4
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe fafe 	bl	800a6b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ba:	d10a      	bne.n	800c0d2 <prvAddCurrentTaskToDelayedList+0x3a>
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d007      	beq.n	800c0d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0c2:	4b1a      	ldr	r3, [pc, #104]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	4619      	mov	r1, r3
 800c0ca:	4819      	ldr	r0, [pc, #100]	@ (800c130 <prvAddCurrentTaskToDelayedList+0x98>)
 800c0cc:	f7fe fa93 	bl	800a5f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c0d0:	e026      	b.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c0d2:	68fa      	ldr	r2, [r7, #12]
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	4413      	add	r3, r2
 800c0d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c0da:	4b14      	ldr	r3, [pc, #80]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c0e2:	68ba      	ldr	r2, [r7, #8]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d209      	bcs.n	800c0fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0ea:	4b12      	ldr	r3, [pc, #72]	@ (800c134 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	3304      	adds	r3, #4
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	4610      	mov	r0, r2
 800c0f8:	f7fe faa1 	bl	800a63e <vListInsert>
}
 800c0fc:	e010      	b.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c0fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c138 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c100:	681a      	ldr	r2, [r3, #0]
 800c102:	4b0a      	ldr	r3, [pc, #40]	@ (800c12c <prvAddCurrentTaskToDelayedList+0x94>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	3304      	adds	r3, #4
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f7fe fa97 	bl	800a63e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c110:	4b0a      	ldr	r3, [pc, #40]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	429a      	cmp	r2, r3
 800c118:	d202      	bcs.n	800c120 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c11a:	4a08      	ldr	r2, [pc, #32]	@ (800c13c <prvAddCurrentTaskToDelayedList+0xa4>)
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	6013      	str	r3, [r2, #0]
}
 800c120:	bf00      	nop
 800c122:	3710      	adds	r7, #16
 800c124:	46bd      	mov	sp, r7
 800c126:	bd80      	pop	{r7, pc}
 800c128:	240013c8 	.word	0x240013c8
 800c12c:	24000ef0 	.word	0x24000ef0
 800c130:	240013b0 	.word	0x240013b0
 800c134:	24001380 	.word	0x24001380
 800c138:	2400137c 	.word	0x2400137c
 800c13c:	240013e4 	.word	0x240013e4

0800c140 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b08a      	sub	sp, #40	@ 0x28
 800c144:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c146:	2300      	movs	r3, #0
 800c148:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c14a:	f000 fb13 	bl	800c774 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c14e:	4b1d      	ldr	r3, [pc, #116]	@ (800c1c4 <xTimerCreateTimerTask+0x84>)
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d021      	beq.n	800c19a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c156:	2300      	movs	r3, #0
 800c158:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c15a:	2300      	movs	r3, #0
 800c15c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c15e:	1d3a      	adds	r2, r7, #4
 800c160:	f107 0108 	add.w	r1, r7, #8
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	4618      	mov	r0, r3
 800c16a:	f7fe f9fd 	bl	800a568 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c16e:	6879      	ldr	r1, [r7, #4]
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	68fa      	ldr	r2, [r7, #12]
 800c174:	9202      	str	r2, [sp, #8]
 800c176:	9301      	str	r3, [sp, #4]
 800c178:	2302      	movs	r3, #2
 800c17a:	9300      	str	r3, [sp, #0]
 800c17c:	2300      	movs	r3, #0
 800c17e:	460a      	mov	r2, r1
 800c180:	4911      	ldr	r1, [pc, #68]	@ (800c1c8 <xTimerCreateTimerTask+0x88>)
 800c182:	4812      	ldr	r0, [pc, #72]	@ (800c1cc <xTimerCreateTimerTask+0x8c>)
 800c184:	f7ff f876 	bl	800b274 <xTaskCreateStatic>
 800c188:	4603      	mov	r3, r0
 800c18a:	4a11      	ldr	r2, [pc, #68]	@ (800c1d0 <xTimerCreateTimerTask+0x90>)
 800c18c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c18e:	4b10      	ldr	r3, [pc, #64]	@ (800c1d0 <xTimerCreateTimerTask+0x90>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b00      	cmp	r3, #0
 800c194:	d001      	beq.n	800c19a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c196:	2301      	movs	r3, #1
 800c198:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c19a:	697b      	ldr	r3, [r7, #20]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d10b      	bne.n	800c1b8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c1a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a4:	f383 8811 	msr	BASEPRI, r3
 800c1a8:	f3bf 8f6f 	isb	sy
 800c1ac:	f3bf 8f4f 	dsb	sy
 800c1b0:	613b      	str	r3, [r7, #16]
}
 800c1b2:	bf00      	nop
 800c1b4:	bf00      	nop
 800c1b6:	e7fd      	b.n	800c1b4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c1b8:	697b      	ldr	r3, [r7, #20]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3718      	adds	r7, #24
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	24001420 	.word	0x24001420
 800c1c8:	0800d140 	.word	0x0800d140
 800c1cc:	0800c30d 	.word	0x0800c30d
 800c1d0:	24001424 	.word	0x24001424

0800c1d4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b08a      	sub	sp, #40	@ 0x28
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	60b9      	str	r1, [r7, #8]
 800c1de:	607a      	str	r2, [r7, #4]
 800c1e0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d10b      	bne.n	800c204 <xTimerGenericCommand+0x30>
	__asm volatile
 800c1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	623b      	str	r3, [r7, #32]
}
 800c1fe:	bf00      	nop
 800c200:	bf00      	nop
 800c202:	e7fd      	b.n	800c200 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c204:	4b19      	ldr	r3, [pc, #100]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d02a      	beq.n	800c262 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2b05      	cmp	r3, #5
 800c21c:	dc18      	bgt.n	800c250 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c21e:	f7ff fe65 	bl	800beec <xTaskGetSchedulerState>
 800c222:	4603      	mov	r3, r0
 800c224:	2b02      	cmp	r3, #2
 800c226:	d109      	bne.n	800c23c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c228:	4b10      	ldr	r3, [pc, #64]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c22a:	6818      	ldr	r0, [r3, #0]
 800c22c:	f107 0110 	add.w	r1, r7, #16
 800c230:	2300      	movs	r3, #0
 800c232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c234:	f7fe fbac 	bl	800a990 <xQueueGenericSend>
 800c238:	6278      	str	r0, [r7, #36]	@ 0x24
 800c23a:	e012      	b.n	800c262 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c23c:	4b0b      	ldr	r3, [pc, #44]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c23e:	6818      	ldr	r0, [r3, #0]
 800c240:	f107 0110 	add.w	r1, r7, #16
 800c244:	2300      	movs	r3, #0
 800c246:	2200      	movs	r2, #0
 800c248:	f7fe fba2 	bl	800a990 <xQueueGenericSend>
 800c24c:	6278      	str	r0, [r7, #36]	@ 0x24
 800c24e:	e008      	b.n	800c262 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c250:	4b06      	ldr	r3, [pc, #24]	@ (800c26c <xTimerGenericCommand+0x98>)
 800c252:	6818      	ldr	r0, [r3, #0]
 800c254:	f107 0110 	add.w	r1, r7, #16
 800c258:	2300      	movs	r3, #0
 800c25a:	683a      	ldr	r2, [r7, #0]
 800c25c:	f7fe fc9a 	bl	800ab94 <xQueueGenericSendFromISR>
 800c260:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c264:	4618      	mov	r0, r3
 800c266:	3728      	adds	r7, #40	@ 0x28
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	24001420 	.word	0x24001420

0800c270 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b088      	sub	sp, #32
 800c274:	af02      	add	r7, sp, #8
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c27a:	4b23      	ldr	r3, [pc, #140]	@ (800c308 <prvProcessExpiredTimer+0x98>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	68db      	ldr	r3, [r3, #12]
 800c282:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	3304      	adds	r3, #4
 800c288:	4618      	mov	r0, r3
 800c28a:	f7fe fa11 	bl	800a6b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c294:	f003 0304 	and.w	r3, r3, #4
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d023      	beq.n	800c2e4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	699a      	ldr	r2, [r3, #24]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	18d1      	adds	r1, r2, r3
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	683a      	ldr	r2, [r7, #0]
 800c2a8:	6978      	ldr	r0, [r7, #20]
 800c2aa:	f000 f8d5 	bl	800c458 <prvInsertTimerInActiveList>
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d020      	beq.n	800c2f6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9300      	str	r3, [sp, #0]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6978      	ldr	r0, [r7, #20]
 800c2c0:	f7ff ff88 	bl	800c1d4 <xTimerGenericCommand>
 800c2c4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c2c6:	693b      	ldr	r3, [r7, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d114      	bne.n	800c2f6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d0:	f383 8811 	msr	BASEPRI, r3
 800c2d4:	f3bf 8f6f 	isb	sy
 800c2d8:	f3bf 8f4f 	dsb	sy
 800c2dc:	60fb      	str	r3, [r7, #12]
}
 800c2de:	bf00      	nop
 800c2e0:	bf00      	nop
 800c2e2:	e7fd      	b.n	800c2e0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2ea:	f023 0301 	bic.w	r3, r3, #1
 800c2ee:	b2da      	uxtb	r2, r3
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c2f6:	697b      	ldr	r3, [r7, #20]
 800c2f8:	6a1b      	ldr	r3, [r3, #32]
 800c2fa:	6978      	ldr	r0, [r7, #20]
 800c2fc:	4798      	blx	r3
}
 800c2fe:	bf00      	nop
 800c300:	3718      	adds	r7, #24
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}
 800c306:	bf00      	nop
 800c308:	24001418 	.word	0x24001418

0800c30c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b084      	sub	sp, #16
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c314:	f107 0308 	add.w	r3, r7, #8
 800c318:	4618      	mov	r0, r3
 800c31a:	f000 f859 	bl	800c3d0 <prvGetNextExpireTime>
 800c31e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c320:	68bb      	ldr	r3, [r7, #8]
 800c322:	4619      	mov	r1, r3
 800c324:	68f8      	ldr	r0, [r7, #12]
 800c326:	f000 f805 	bl	800c334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c32a:	f000 f8d7 	bl	800c4dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c32e:	bf00      	nop
 800c330:	e7f0      	b.n	800c314 <prvTimerTask+0x8>
	...

0800c334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b084      	sub	sp, #16
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c33e:	f7ff f9dd 	bl	800b6fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c342:	f107 0308 	add.w	r3, r7, #8
 800c346:	4618      	mov	r0, r3
 800c348:	f000 f866 	bl	800c418 <prvSampleTimeNow>
 800c34c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c34e:	68bb      	ldr	r3, [r7, #8]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d130      	bne.n	800c3b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d10a      	bne.n	800c370 <prvProcessTimerOrBlockTask+0x3c>
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d806      	bhi.n	800c370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c362:	f7ff f9d9 	bl	800b718 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c366:	68f9      	ldr	r1, [r7, #12]
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f7ff ff81 	bl	800c270 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c36e:	e024      	b.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d008      	beq.n	800c388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c376:	4b13      	ldr	r3, [pc, #76]	@ (800c3c4 <prvProcessTimerOrBlockTask+0x90>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <prvProcessTimerOrBlockTask+0x50>
 800c380:	2301      	movs	r3, #1
 800c382:	e000      	b.n	800c386 <prvProcessTimerOrBlockTask+0x52>
 800c384:	2300      	movs	r3, #0
 800c386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c388:	4b0f      	ldr	r3, [pc, #60]	@ (800c3c8 <prvProcessTimerOrBlockTask+0x94>)
 800c38a:	6818      	ldr	r0, [r3, #0]
 800c38c:	687a      	ldr	r2, [r7, #4]
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	1ad3      	subs	r3, r2, r3
 800c392:	683a      	ldr	r2, [r7, #0]
 800c394:	4619      	mov	r1, r3
 800c396:	f7fe ff39 	bl	800b20c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c39a:	f7ff f9bd 	bl	800b718 <xTaskResumeAll>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d10a      	bne.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c3a4:	4b09      	ldr	r3, [pc, #36]	@ (800c3cc <prvProcessTimerOrBlockTask+0x98>)
 800c3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3aa:	601a      	str	r2, [r3, #0]
 800c3ac:	f3bf 8f4f 	dsb	sy
 800c3b0:	f3bf 8f6f 	isb	sy
}
 800c3b4:	e001      	b.n	800c3ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c3b6:	f7ff f9af 	bl	800b718 <xTaskResumeAll>
}
 800c3ba:	bf00      	nop
 800c3bc:	3710      	adds	r7, #16
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	2400141c 	.word	0x2400141c
 800c3c8:	24001420 	.word	0x24001420
 800c3cc:	e000ed04 	.word	0xe000ed04

0800c3d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c3d8:	4b0e      	ldr	r3, [pc, #56]	@ (800c414 <prvGetNextExpireTime+0x44>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d101      	bne.n	800c3e6 <prvGetNextExpireTime+0x16>
 800c3e2:	2201      	movs	r2, #1
 800c3e4:	e000      	b.n	800c3e8 <prvGetNextExpireTime+0x18>
 800c3e6:	2200      	movs	r2, #0
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d105      	bne.n	800c400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c3f4:	4b07      	ldr	r3, [pc, #28]	@ (800c414 <prvGetNextExpireTime+0x44>)
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60fb      	str	r3, [r7, #12]
 800c3fe:	e001      	b.n	800c404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c400:	2300      	movs	r3, #0
 800c402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c404:	68fb      	ldr	r3, [r7, #12]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	24001418 	.word	0x24001418

0800c418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c420:	f7ff fa18 	bl	800b854 <xTaskGetTickCount>
 800c424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c426:	4b0b      	ldr	r3, [pc, #44]	@ (800c454 <prvSampleTimeNow+0x3c>)
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	d205      	bcs.n	800c43c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c430:	f000 f93a 	bl	800c6a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2201      	movs	r2, #1
 800c438:	601a      	str	r2, [r3, #0]
 800c43a:	e002      	b.n	800c442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c442:	4a04      	ldr	r2, [pc, #16]	@ (800c454 <prvSampleTimeNow+0x3c>)
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c448:	68fb      	ldr	r3, [r7, #12]
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	24001428 	.word	0x24001428

0800c458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c458:	b580      	push	{r7, lr}
 800c45a:	b086      	sub	sp, #24
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
 800c464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c466:	2300      	movs	r3, #0
 800c468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	68ba      	ldr	r2, [r7, #8]
 800c46e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	68fa      	ldr	r2, [r7, #12]
 800c474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c476:	68ba      	ldr	r2, [r7, #8]
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d812      	bhi.n	800c4a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c47e:	687a      	ldr	r2, [r7, #4]
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	1ad2      	subs	r2, r2, r3
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	699b      	ldr	r3, [r3, #24]
 800c488:	429a      	cmp	r2, r3
 800c48a:	d302      	bcc.n	800c492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c48c:	2301      	movs	r3, #1
 800c48e:	617b      	str	r3, [r7, #20]
 800c490:	e01b      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c492:	4b10      	ldr	r3, [pc, #64]	@ (800c4d4 <prvInsertTimerInActiveList+0x7c>)
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	3304      	adds	r3, #4
 800c49a:	4619      	mov	r1, r3
 800c49c:	4610      	mov	r0, r2
 800c49e:	f7fe f8ce 	bl	800a63e <vListInsert>
 800c4a2:	e012      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d206      	bcs.n	800c4ba <prvInsertTimerInActiveList+0x62>
 800c4ac:	68ba      	ldr	r2, [r7, #8]
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d302      	bcc.n	800c4ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	617b      	str	r3, [r7, #20]
 800c4b8:	e007      	b.n	800c4ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c4ba:	4b07      	ldr	r3, [pc, #28]	@ (800c4d8 <prvInsertTimerInActiveList+0x80>)
 800c4bc:	681a      	ldr	r2, [r3, #0]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	3304      	adds	r3, #4
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	4610      	mov	r0, r2
 800c4c6:	f7fe f8ba 	bl	800a63e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c4ca:	697b      	ldr	r3, [r7, #20]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3718      	adds	r7, #24
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	2400141c 	.word	0x2400141c
 800c4d8:	24001418 	.word	0x24001418

0800c4dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08e      	sub	sp, #56	@ 0x38
 800c4e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c4e2:	e0ce      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	da19      	bge.n	800c51e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c4ea:	1d3b      	adds	r3, r7, #4
 800c4ec:	3304      	adds	r3, #4
 800c4ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d10b      	bne.n	800c50e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c4f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4fa:	f383 8811 	msr	BASEPRI, r3
 800c4fe:	f3bf 8f6f 	isb	sy
 800c502:	f3bf 8f4f 	dsb	sy
 800c506:	61fb      	str	r3, [r7, #28]
}
 800c508:	bf00      	nop
 800c50a:	bf00      	nop
 800c50c:	e7fd      	b.n	800c50a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c50e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c514:	6850      	ldr	r0, [r2, #4]
 800c516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c518:	6892      	ldr	r2, [r2, #8]
 800c51a:	4611      	mov	r1, r2
 800c51c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	f2c0 80ae 	blt.w	800c682 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c52c:	695b      	ldr	r3, [r3, #20]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d004      	beq.n	800c53c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c534:	3304      	adds	r3, #4
 800c536:	4618      	mov	r0, r3
 800c538:	f7fe f8ba 	bl	800a6b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c53c:	463b      	mov	r3, r7
 800c53e:	4618      	mov	r0, r3
 800c540:	f7ff ff6a 	bl	800c418 <prvSampleTimeNow>
 800c544:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2b09      	cmp	r3, #9
 800c54a:	f200 8097 	bhi.w	800c67c <prvProcessReceivedCommands+0x1a0>
 800c54e:	a201      	add	r2, pc, #4	@ (adr r2, 800c554 <prvProcessReceivedCommands+0x78>)
 800c550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c554:	0800c57d 	.word	0x0800c57d
 800c558:	0800c57d 	.word	0x0800c57d
 800c55c:	0800c57d 	.word	0x0800c57d
 800c560:	0800c5f3 	.word	0x0800c5f3
 800c564:	0800c607 	.word	0x0800c607
 800c568:	0800c653 	.word	0x0800c653
 800c56c:	0800c57d 	.word	0x0800c57d
 800c570:	0800c57d 	.word	0x0800c57d
 800c574:	0800c5f3 	.word	0x0800c5f3
 800c578:	0800c607 	.word	0x0800c607
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c57e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c582:	f043 0301 	orr.w	r3, r3, #1
 800c586:	b2da      	uxtb	r2, r3
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c58e:	68ba      	ldr	r2, [r7, #8]
 800c590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c592:	699b      	ldr	r3, [r3, #24]
 800c594:	18d1      	adds	r1, r2, r3
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c59a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c59c:	f7ff ff5c 	bl	800c458 <prvInsertTimerInActiveList>
 800c5a0:	4603      	mov	r3, r0
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d06c      	beq.n	800c680 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5a8:	6a1b      	ldr	r3, [r3, #32]
 800c5aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5b4:	f003 0304 	and.w	r3, r3, #4
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d061      	beq.n	800c680 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c5bc:	68ba      	ldr	r2, [r7, #8]
 800c5be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	441a      	add	r2, r3
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	9300      	str	r3, [sp, #0]
 800c5c8:	2300      	movs	r3, #0
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c5ce:	f7ff fe01 	bl	800c1d4 <xTimerGenericCommand>
 800c5d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c5d4:	6a3b      	ldr	r3, [r7, #32]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d152      	bne.n	800c680 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	61bb      	str	r3, [r7, #24]
}
 800c5ec:	bf00      	nop
 800c5ee:	bf00      	nop
 800c5f0:	e7fd      	b.n	800c5ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	b2da      	uxtb	r2, r3
 800c5fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c604:	e03d      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c608:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c60c:	f043 0301 	orr.w	r3, r3, #1
 800c610:	b2da      	uxtb	r2, r3
 800c612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c614:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c618:	68ba      	ldr	r2, [r7, #8]
 800c61a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c61c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c620:	699b      	ldr	r3, [r3, #24]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d10b      	bne.n	800c63e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62a:	f383 8811 	msr	BASEPRI, r3
 800c62e:	f3bf 8f6f 	isb	sy
 800c632:	f3bf 8f4f 	dsb	sy
 800c636:	617b      	str	r3, [r7, #20]
}
 800c638:	bf00      	nop
 800c63a:	bf00      	nop
 800c63c:	e7fd      	b.n	800c63a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c63e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c640:	699a      	ldr	r2, [r3, #24]
 800c642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c644:	18d1      	adds	r1, r2, r3
 800c646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c64a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c64c:	f7ff ff04 	bl	800c458 <prvInsertTimerInActiveList>
					break;
 800c650:	e017      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c654:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c658:	f003 0302 	and.w	r3, r3, #2
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d103      	bne.n	800c668 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c660:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c662:	f000 fbe9 	bl	800ce38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c666:	e00c      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c66a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c66e:	f023 0301 	bic.w	r3, r3, #1
 800c672:	b2da      	uxtb	r2, r3
 800c674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c676:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c67a:	e002      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c67c:	bf00      	nop
 800c67e:	e000      	b.n	800c682 <prvProcessReceivedCommands+0x1a6>
					break;
 800c680:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c682:	4b08      	ldr	r3, [pc, #32]	@ (800c6a4 <prvProcessReceivedCommands+0x1c8>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	1d39      	adds	r1, r7, #4
 800c688:	2200      	movs	r2, #0
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7fe fb20 	bl	800acd0 <xQueueReceive>
 800c690:	4603      	mov	r3, r0
 800c692:	2b00      	cmp	r3, #0
 800c694:	f47f af26 	bne.w	800c4e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	3730      	adds	r7, #48	@ 0x30
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	24001420 	.word	0x24001420

0800c6a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b088      	sub	sp, #32
 800c6ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c6ae:	e049      	b.n	800c744 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6b0:	4b2e      	ldr	r3, [pc, #184]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	68db      	ldr	r3, [r3, #12]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6ba:	4b2c      	ldr	r3, [pc, #176]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68db      	ldr	r3, [r3, #12]
 800c6c0:	68db      	ldr	r3, [r3, #12]
 800c6c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	3304      	adds	r3, #4
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	f7fd fff1 	bl	800a6b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	6a1b      	ldr	r3, [r3, #32]
 800c6d2:	68f8      	ldr	r0, [r7, #12]
 800c6d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c6dc:	f003 0304 	and.w	r3, r3, #4
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d02f      	beq.n	800c744 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	699b      	ldr	r3, [r3, #24]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	4413      	add	r3, r2
 800c6ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c6ee:	68ba      	ldr	r2, [r7, #8]
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	429a      	cmp	r2, r3
 800c6f4:	d90e      	bls.n	800c714 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	68ba      	ldr	r2, [r7, #8]
 800c6fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	68fa      	ldr	r2, [r7, #12]
 800c700:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c702:	4b1a      	ldr	r3, [pc, #104]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c704:	681a      	ldr	r2, [r3, #0]
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	3304      	adds	r3, #4
 800c70a:	4619      	mov	r1, r3
 800c70c:	4610      	mov	r0, r2
 800c70e:	f7fd ff96 	bl	800a63e <vListInsert>
 800c712:	e017      	b.n	800c744 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c714:	2300      	movs	r3, #0
 800c716:	9300      	str	r3, [sp, #0]
 800c718:	2300      	movs	r3, #0
 800c71a:	693a      	ldr	r2, [r7, #16]
 800c71c:	2100      	movs	r1, #0
 800c71e:	68f8      	ldr	r0, [r7, #12]
 800c720:	f7ff fd58 	bl	800c1d4 <xTimerGenericCommand>
 800c724:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d10b      	bne.n	800c744 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c730:	f383 8811 	msr	BASEPRI, r3
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	f3bf 8f4f 	dsb	sy
 800c73c:	603b      	str	r3, [r7, #0]
}
 800c73e:	bf00      	nop
 800c740:	bf00      	nop
 800c742:	e7fd      	b.n	800c740 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c744:	4b09      	ldr	r3, [pc, #36]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d1b0      	bne.n	800c6b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c74e:	4b07      	ldr	r3, [pc, #28]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c754:	4b06      	ldr	r3, [pc, #24]	@ (800c770 <prvSwitchTimerLists+0xc8>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	4a04      	ldr	r2, [pc, #16]	@ (800c76c <prvSwitchTimerLists+0xc4>)
 800c75a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c75c:	4a04      	ldr	r2, [pc, #16]	@ (800c770 <prvSwitchTimerLists+0xc8>)
 800c75e:	697b      	ldr	r3, [r7, #20]
 800c760:	6013      	str	r3, [r2, #0]
}
 800c762:	bf00      	nop
 800c764:	3718      	adds	r7, #24
 800c766:	46bd      	mov	sp, r7
 800c768:	bd80      	pop	{r7, pc}
 800c76a:	bf00      	nop
 800c76c:	24001418 	.word	0x24001418
 800c770:	2400141c 	.word	0x2400141c

0800c774 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c77a:	f000 f96d 	bl	800ca58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c77e:	4b15      	ldr	r3, [pc, #84]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	2b00      	cmp	r3, #0
 800c784:	d120      	bne.n	800c7c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c786:	4814      	ldr	r0, [pc, #80]	@ (800c7d8 <prvCheckForValidListAndQueue+0x64>)
 800c788:	f7fd ff08 	bl	800a59c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c78c:	4813      	ldr	r0, [pc, #76]	@ (800c7dc <prvCheckForValidListAndQueue+0x68>)
 800c78e:	f7fd ff05 	bl	800a59c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c792:	4b13      	ldr	r3, [pc, #76]	@ (800c7e0 <prvCheckForValidListAndQueue+0x6c>)
 800c794:	4a10      	ldr	r2, [pc, #64]	@ (800c7d8 <prvCheckForValidListAndQueue+0x64>)
 800c796:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c798:	4b12      	ldr	r3, [pc, #72]	@ (800c7e4 <prvCheckForValidListAndQueue+0x70>)
 800c79a:	4a10      	ldr	r2, [pc, #64]	@ (800c7dc <prvCheckForValidListAndQueue+0x68>)
 800c79c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c79e:	2300      	movs	r3, #0
 800c7a0:	9300      	str	r3, [sp, #0]
 800c7a2:	4b11      	ldr	r3, [pc, #68]	@ (800c7e8 <prvCheckForValidListAndQueue+0x74>)
 800c7a4:	4a11      	ldr	r2, [pc, #68]	@ (800c7ec <prvCheckForValidListAndQueue+0x78>)
 800c7a6:	2110      	movs	r1, #16
 800c7a8:	200a      	movs	r0, #10
 800c7aa:	f7fe f815 	bl	800a7d8 <xQueueGenericCreateStatic>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	4a08      	ldr	r2, [pc, #32]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c7b4:	4b07      	ldr	r3, [pc, #28]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d005      	beq.n	800c7c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c7bc:	4b05      	ldr	r3, [pc, #20]	@ (800c7d4 <prvCheckForValidListAndQueue+0x60>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	490b      	ldr	r1, [pc, #44]	@ (800c7f0 <prvCheckForValidListAndQueue+0x7c>)
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7fe fcf8 	bl	800b1b8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c7c8:	f000 f978 	bl	800cabc <vPortExitCritical>
}
 800c7cc:	bf00      	nop
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	24001420 	.word	0x24001420
 800c7d8:	240013f0 	.word	0x240013f0
 800c7dc:	24001404 	.word	0x24001404
 800c7e0:	24001418 	.word	0x24001418
 800c7e4:	2400141c 	.word	0x2400141c
 800c7e8:	240014cc 	.word	0x240014cc
 800c7ec:	2400142c 	.word	0x2400142c
 800c7f0:	0800d148 	.word	0x0800d148

0800c7f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b085      	sub	sp, #20
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	3b04      	subs	r3, #4
 800c804:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c80c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	3b04      	subs	r3, #4
 800c812:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	f023 0201 	bic.w	r2, r3, #1
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	3b04      	subs	r3, #4
 800c822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c824:	4a0c      	ldr	r2, [pc, #48]	@ (800c858 <pxPortInitialiseStack+0x64>)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	3b14      	subs	r3, #20
 800c82e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c830:	687a      	ldr	r2, [r7, #4]
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	3b04      	subs	r3, #4
 800c83a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	f06f 0202 	mvn.w	r2, #2
 800c842:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	3b20      	subs	r3, #32
 800c848:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c84a:	68fb      	ldr	r3, [r7, #12]
}
 800c84c:	4618      	mov	r0, r3
 800c84e:	3714      	adds	r7, #20
 800c850:	46bd      	mov	sp, r7
 800c852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c856:	4770      	bx	lr
 800c858:	0800c85d 	.word	0x0800c85d

0800c85c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c85c:	b480      	push	{r7}
 800c85e:	b085      	sub	sp, #20
 800c860:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c866:	4b13      	ldr	r3, [pc, #76]	@ (800c8b4 <prvTaskExitError+0x58>)
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c86e:	d00b      	beq.n	800c888 <prvTaskExitError+0x2c>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	60fb      	str	r3, [r7, #12]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <prvTaskExitError+0x28>
	__asm volatile
 800c888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88c:	f383 8811 	msr	BASEPRI, r3
 800c890:	f3bf 8f6f 	isb	sy
 800c894:	f3bf 8f4f 	dsb	sy
 800c898:	60bb      	str	r3, [r7, #8]
}
 800c89a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c89c:	bf00      	nop
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d0fc      	beq.n	800c89e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop
 800c8a8:	3714      	adds	r7, #20
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b0:	4770      	bx	lr
 800c8b2:	bf00      	nop
 800c8b4:	24000010 	.word	0x24000010
	...

0800c8c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8c0:	4b07      	ldr	r3, [pc, #28]	@ (800c8e0 <pxCurrentTCBConst2>)
 800c8c2:	6819      	ldr	r1, [r3, #0]
 800c8c4:	6808      	ldr	r0, [r1, #0]
 800c8c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8ca:	f380 8809 	msr	PSP, r0
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f04f 0000 	mov.w	r0, #0
 800c8d6:	f380 8811 	msr	BASEPRI, r0
 800c8da:	4770      	bx	lr
 800c8dc:	f3af 8000 	nop.w

0800c8e0 <pxCurrentTCBConst2>:
 800c8e0:	24000ef0 	.word	0x24000ef0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop

0800c8e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8e8:	4808      	ldr	r0, [pc, #32]	@ (800c90c <prvPortStartFirstTask+0x24>)
 800c8ea:	6800      	ldr	r0, [r0, #0]
 800c8ec:	6800      	ldr	r0, [r0, #0]
 800c8ee:	f380 8808 	msr	MSP, r0
 800c8f2:	f04f 0000 	mov.w	r0, #0
 800c8f6:	f380 8814 	msr	CONTROL, r0
 800c8fa:	b662      	cpsie	i
 800c8fc:	b661      	cpsie	f
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	f3bf 8f6f 	isb	sy
 800c906:	df00      	svc	0
 800c908:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c90a:	bf00      	nop
 800c90c:	e000ed08 	.word	0xe000ed08

0800c910 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b086      	sub	sp, #24
 800c914:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c916:	4b47      	ldr	r3, [pc, #284]	@ (800ca34 <xPortStartScheduler+0x124>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	4a47      	ldr	r2, [pc, #284]	@ (800ca38 <xPortStartScheduler+0x128>)
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d10b      	bne.n	800c938 <xPortStartScheduler+0x28>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	613b      	str	r3, [r7, #16]
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	e7fd      	b.n	800c934 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c938:	4b3e      	ldr	r3, [pc, #248]	@ (800ca34 <xPortStartScheduler+0x124>)
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca3c <xPortStartScheduler+0x12c>)
 800c93e:	4293      	cmp	r3, r2
 800c940:	d10b      	bne.n	800c95a <xPortStartScheduler+0x4a>
	__asm volatile
 800c942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c946:	f383 8811 	msr	BASEPRI, r3
 800c94a:	f3bf 8f6f 	isb	sy
 800c94e:	f3bf 8f4f 	dsb	sy
 800c952:	60fb      	str	r3, [r7, #12]
}
 800c954:	bf00      	nop
 800c956:	bf00      	nop
 800c958:	e7fd      	b.n	800c956 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c95a:	4b39      	ldr	r3, [pc, #228]	@ (800ca40 <xPortStartScheduler+0x130>)
 800c95c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	b2db      	uxtb	r3, r3
 800c964:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	22ff      	movs	r2, #255	@ 0xff
 800c96a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c96c:	697b      	ldr	r3, [r7, #20]
 800c96e:	781b      	ldrb	r3, [r3, #0]
 800c970:	b2db      	uxtb	r3, r3
 800c972:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c974:	78fb      	ldrb	r3, [r7, #3]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c97c:	b2da      	uxtb	r2, r3
 800c97e:	4b31      	ldr	r3, [pc, #196]	@ (800ca44 <xPortStartScheduler+0x134>)
 800c980:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c982:	4b31      	ldr	r3, [pc, #196]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c984:	2207      	movs	r2, #7
 800c986:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c988:	e009      	b.n	800c99e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c98a:	4b2f      	ldr	r3, [pc, #188]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	3b01      	subs	r3, #1
 800c990:	4a2d      	ldr	r2, [pc, #180]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c992:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c994:	78fb      	ldrb	r3, [r7, #3]
 800c996:	b2db      	uxtb	r3, r3
 800c998:	005b      	lsls	r3, r3, #1
 800c99a:	b2db      	uxtb	r3, r3
 800c99c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c99e:	78fb      	ldrb	r3, [r7, #3]
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c9a6:	2b80      	cmp	r3, #128	@ 0x80
 800c9a8:	d0ef      	beq.n	800c98a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9aa:	4b27      	ldr	r3, [pc, #156]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f1c3 0307 	rsb	r3, r3, #7
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d00b      	beq.n	800c9ce <xPortStartScheduler+0xbe>
	__asm volatile
 800c9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ba:	f383 8811 	msr	BASEPRI, r3
 800c9be:	f3bf 8f6f 	isb	sy
 800c9c2:	f3bf 8f4f 	dsb	sy
 800c9c6:	60bb      	str	r3, [r7, #8]
}
 800c9c8:	bf00      	nop
 800c9ca:	bf00      	nop
 800c9cc:	e7fd      	b.n	800c9ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9ce:	4b1e      	ldr	r3, [pc, #120]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	021b      	lsls	r3, r3, #8
 800c9d4:	4a1c      	ldr	r2, [pc, #112]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9d8:	4b1b      	ldr	r3, [pc, #108]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c9e0:	4a19      	ldr	r2, [pc, #100]	@ (800ca48 <xPortStartScheduler+0x138>)
 800c9e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	697b      	ldr	r3, [r7, #20]
 800c9ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9ec:	4b17      	ldr	r3, [pc, #92]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	4a16      	ldr	r2, [pc, #88]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c9f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c9f8:	4b14      	ldr	r3, [pc, #80]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	4a13      	ldr	r2, [pc, #76]	@ (800ca4c <xPortStartScheduler+0x13c>)
 800c9fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ca02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca04:	f000 f8da 	bl	800cbbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca08:	4b11      	ldr	r3, [pc, #68]	@ (800ca50 <xPortStartScheduler+0x140>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca0e:	f000 f8f9 	bl	800cc04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca12:	4b10      	ldr	r3, [pc, #64]	@ (800ca54 <xPortStartScheduler+0x144>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	4a0f      	ldr	r2, [pc, #60]	@ (800ca54 <xPortStartScheduler+0x144>)
 800ca18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ca1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca1e:	f7ff ff63 	bl	800c8e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca22:	f7fe fff3 	bl	800ba0c <vTaskSwitchContext>
	prvTaskExitError();
 800ca26:	f7ff ff19 	bl	800c85c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca2a:	2300      	movs	r3, #0
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3718      	adds	r7, #24
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}
 800ca34:	e000ed00 	.word	0xe000ed00
 800ca38:	410fc271 	.word	0x410fc271
 800ca3c:	410fc270 	.word	0x410fc270
 800ca40:	e000e400 	.word	0xe000e400
 800ca44:	2400151c 	.word	0x2400151c
 800ca48:	24001520 	.word	0x24001520
 800ca4c:	e000ed20 	.word	0xe000ed20
 800ca50:	24000010 	.word	0x24000010
 800ca54:	e000ef34 	.word	0xe000ef34

0800ca58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b083      	sub	sp, #12
 800ca5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca62:	f383 8811 	msr	BASEPRI, r3
 800ca66:	f3bf 8f6f 	isb	sy
 800ca6a:	f3bf 8f4f 	dsb	sy
 800ca6e:	607b      	str	r3, [r7, #4]
}
 800ca70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca72:	4b10      	ldr	r3, [pc, #64]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	3301      	adds	r3, #1
 800ca78:	4a0e      	ldr	r2, [pc, #56]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca7c:	4b0d      	ldr	r3, [pc, #52]	@ (800cab4 <vPortEnterCritical+0x5c>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d110      	bne.n	800caa6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca84:	4b0c      	ldr	r3, [pc, #48]	@ (800cab8 <vPortEnterCritical+0x60>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	b2db      	uxtb	r3, r3
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d00b      	beq.n	800caa6 <vPortEnterCritical+0x4e>
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	603b      	str	r3, [r7, #0]
}
 800caa0:	bf00      	nop
 800caa2:	bf00      	nop
 800caa4:	e7fd      	b.n	800caa2 <vPortEnterCritical+0x4a>
	}
}
 800caa6:	bf00      	nop
 800caa8:	370c      	adds	r7, #12
 800caaa:	46bd      	mov	sp, r7
 800caac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cab0:	4770      	bx	lr
 800cab2:	bf00      	nop
 800cab4:	24000010 	.word	0x24000010
 800cab8:	e000ed04 	.word	0xe000ed04

0800cabc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cac2:	4b12      	ldr	r3, [pc, #72]	@ (800cb0c <vPortExitCritical+0x50>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d10b      	bne.n	800cae2 <vPortExitCritical+0x26>
	__asm volatile
 800caca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cace:	f383 8811 	msr	BASEPRI, r3
 800cad2:	f3bf 8f6f 	isb	sy
 800cad6:	f3bf 8f4f 	dsb	sy
 800cada:	607b      	str	r3, [r7, #4]
}
 800cadc:	bf00      	nop
 800cade:	bf00      	nop
 800cae0:	e7fd      	b.n	800cade <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cae2:	4b0a      	ldr	r3, [pc, #40]	@ (800cb0c <vPortExitCritical+0x50>)
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	3b01      	subs	r3, #1
 800cae8:	4a08      	ldr	r2, [pc, #32]	@ (800cb0c <vPortExitCritical+0x50>)
 800caea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caec:	4b07      	ldr	r3, [pc, #28]	@ (800cb0c <vPortExitCritical+0x50>)
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d105      	bne.n	800cb00 <vPortExitCritical+0x44>
 800caf4:	2300      	movs	r3, #0
 800caf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800caf8:	683b      	ldr	r3, [r7, #0]
 800cafa:	f383 8811 	msr	BASEPRI, r3
}
 800cafe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb00:	bf00      	nop
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	24000010 	.word	0x24000010

0800cb10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb10:	f3ef 8009 	mrs	r0, PSP
 800cb14:	f3bf 8f6f 	isb	sy
 800cb18:	4b15      	ldr	r3, [pc, #84]	@ (800cb70 <pxCurrentTCBConst>)
 800cb1a:	681a      	ldr	r2, [r3, #0]
 800cb1c:	f01e 0f10 	tst.w	lr, #16
 800cb20:	bf08      	it	eq
 800cb22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb2a:	6010      	str	r0, [r2, #0]
 800cb2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cb34:	f380 8811 	msr	BASEPRI, r0
 800cb38:	f3bf 8f4f 	dsb	sy
 800cb3c:	f3bf 8f6f 	isb	sy
 800cb40:	f7fe ff64 	bl	800ba0c <vTaskSwitchContext>
 800cb44:	f04f 0000 	mov.w	r0, #0
 800cb48:	f380 8811 	msr	BASEPRI, r0
 800cb4c:	bc09      	pop	{r0, r3}
 800cb4e:	6819      	ldr	r1, [r3, #0]
 800cb50:	6808      	ldr	r0, [r1, #0]
 800cb52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb56:	f01e 0f10 	tst.w	lr, #16
 800cb5a:	bf08      	it	eq
 800cb5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb60:	f380 8809 	msr	PSP, r0
 800cb64:	f3bf 8f6f 	isb	sy
 800cb68:	4770      	bx	lr
 800cb6a:	bf00      	nop
 800cb6c:	f3af 8000 	nop.w

0800cb70 <pxCurrentTCBConst>:
 800cb70:	24000ef0 	.word	0x24000ef0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb74:	bf00      	nop
 800cb76:	bf00      	nop

0800cb78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb82:	f383 8811 	msr	BASEPRI, r3
 800cb86:	f3bf 8f6f 	isb	sy
 800cb8a:	f3bf 8f4f 	dsb	sy
 800cb8e:	607b      	str	r3, [r7, #4]
}
 800cb90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cb92:	f7fe fe81 	bl	800b898 <xTaskIncrementTick>
 800cb96:	4603      	mov	r3, r0
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d003      	beq.n	800cba4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cb9c:	4b06      	ldr	r3, [pc, #24]	@ (800cbb8 <xPortSysTickHandler+0x40>)
 800cb9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cba2:	601a      	str	r2, [r3, #0]
 800cba4:	2300      	movs	r3, #0
 800cba6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	f383 8811 	msr	BASEPRI, r3
}
 800cbae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbb0:	bf00      	nop
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbc0:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbc6:	4b0b      	ldr	r3, [pc, #44]	@ (800cbf4 <vPortSetupTimerInterrupt+0x38>)
 800cbc8:	2200      	movs	r2, #0
 800cbca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbcc:	4b0a      	ldr	r3, [pc, #40]	@ (800cbf8 <vPortSetupTimerInterrupt+0x3c>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	4a0a      	ldr	r2, [pc, #40]	@ (800cbfc <vPortSetupTimerInterrupt+0x40>)
 800cbd2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbd6:	099b      	lsrs	r3, r3, #6
 800cbd8:	4a09      	ldr	r2, [pc, #36]	@ (800cc00 <vPortSetupTimerInterrupt+0x44>)
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbde:	4b04      	ldr	r3, [pc, #16]	@ (800cbf0 <vPortSetupTimerInterrupt+0x34>)
 800cbe0:	2207      	movs	r2, #7
 800cbe2:	601a      	str	r2, [r3, #0]
}
 800cbe4:	bf00      	nop
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbec:	4770      	bx	lr
 800cbee:	bf00      	nop
 800cbf0:	e000e010 	.word	0xe000e010
 800cbf4:	e000e018 	.word	0xe000e018
 800cbf8:	24000000 	.word	0x24000000
 800cbfc:	10624dd3 	.word	0x10624dd3
 800cc00:	e000e014 	.word	0xe000e014

0800cc04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cc14 <vPortEnableVFP+0x10>
 800cc08:	6801      	ldr	r1, [r0, #0]
 800cc0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cc0e:	6001      	str	r1, [r0, #0]
 800cc10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc12:	bf00      	nop
 800cc14:	e000ed88 	.word	0xe000ed88

0800cc18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc18:	b480      	push	{r7}
 800cc1a:	b085      	sub	sp, #20
 800cc1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc1e:	f3ef 8305 	mrs	r3, IPSR
 800cc22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	2b0f      	cmp	r3, #15
 800cc28:	d915      	bls.n	800cc56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc2a:	4a18      	ldr	r2, [pc, #96]	@ (800cc8c <vPortValidateInterruptPriority+0x74>)
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4413      	add	r3, r2
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc34:	4b16      	ldr	r3, [pc, #88]	@ (800cc90 <vPortValidateInterruptPriority+0x78>)
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	7afa      	ldrb	r2, [r7, #11]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d20b      	bcs.n	800cc56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cc3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc42:	f383 8811 	msr	BASEPRI, r3
 800cc46:	f3bf 8f6f 	isb	sy
 800cc4a:	f3bf 8f4f 	dsb	sy
 800cc4e:	607b      	str	r3, [r7, #4]
}
 800cc50:	bf00      	nop
 800cc52:	bf00      	nop
 800cc54:	e7fd      	b.n	800cc52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc56:	4b0f      	ldr	r3, [pc, #60]	@ (800cc94 <vPortValidateInterruptPriority+0x7c>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800cc98 <vPortValidateInterruptPriority+0x80>)
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	429a      	cmp	r2, r3
 800cc64:	d90b      	bls.n	800cc7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6a:	f383 8811 	msr	BASEPRI, r3
 800cc6e:	f3bf 8f6f 	isb	sy
 800cc72:	f3bf 8f4f 	dsb	sy
 800cc76:	603b      	str	r3, [r7, #0]
}
 800cc78:	bf00      	nop
 800cc7a:	bf00      	nop
 800cc7c:	e7fd      	b.n	800cc7a <vPortValidateInterruptPriority+0x62>
	}
 800cc7e:	bf00      	nop
 800cc80:	3714      	adds	r7, #20
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr
 800cc8a:	bf00      	nop
 800cc8c:	e000e3f0 	.word	0xe000e3f0
 800cc90:	2400151c 	.word	0x2400151c
 800cc94:	e000ed0c 	.word	0xe000ed0c
 800cc98:	24001520 	.word	0x24001520

0800cc9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b08a      	sub	sp, #40	@ 0x28
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cca4:	2300      	movs	r3, #0
 800cca6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cca8:	f7fe fd28 	bl	800b6fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccac:	4b5c      	ldr	r3, [pc, #368]	@ (800ce20 <pvPortMalloc+0x184>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d101      	bne.n	800ccb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccb4:	f000 f924 	bl	800cf00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccb8:	4b5a      	ldr	r3, [pc, #360]	@ (800ce24 <pvPortMalloc+0x188>)
 800ccba:	681a      	ldr	r2, [r3, #0]
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	4013      	ands	r3, r2
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	f040 8095 	bne.w	800cdf0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d01e      	beq.n	800cd0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cccc:	2208      	movs	r2, #8
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f003 0307 	and.w	r3, r3, #7
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d015      	beq.n	800cd0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	f023 0307 	bic.w	r3, r3, #7
 800cce4:	3308      	adds	r3, #8
 800cce6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f003 0307 	and.w	r3, r3, #7
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00b      	beq.n	800cd0a <pvPortMalloc+0x6e>
	__asm volatile
 800ccf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf6:	f383 8811 	msr	BASEPRI, r3
 800ccfa:	f3bf 8f6f 	isb	sy
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	617b      	str	r3, [r7, #20]
}
 800cd04:	bf00      	nop
 800cd06:	bf00      	nop
 800cd08:	e7fd      	b.n	800cd06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d06f      	beq.n	800cdf0 <pvPortMalloc+0x154>
 800cd10:	4b45      	ldr	r3, [pc, #276]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	687a      	ldr	r2, [r7, #4]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d86a      	bhi.n	800cdf0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd1a:	4b44      	ldr	r3, [pc, #272]	@ (800ce2c <pvPortMalloc+0x190>)
 800cd1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd1e:	4b43      	ldr	r3, [pc, #268]	@ (800ce2c <pvPortMalloc+0x190>)
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd24:	e004      	b.n	800cd30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cd26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd32:	685b      	ldr	r3, [r3, #4]
 800cd34:	687a      	ldr	r2, [r7, #4]
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d903      	bls.n	800cd42 <pvPortMalloc+0xa6>
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d1f1      	bne.n	800cd26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd42:	4b37      	ldr	r3, [pc, #220]	@ (800ce20 <pvPortMalloc+0x184>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d051      	beq.n	800cdf0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	2208      	movs	r2, #8
 800cd52:	4413      	add	r3, r2
 800cd54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd58:	681a      	ldr	r2, [r3, #0]
 800cd5a:	6a3b      	ldr	r3, [r7, #32]
 800cd5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	1ad2      	subs	r2, r2, r3
 800cd66:	2308      	movs	r3, #8
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	429a      	cmp	r2, r3
 800cd6c:	d920      	bls.n	800cdb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4413      	add	r3, r2
 800cd74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd76:	69bb      	ldr	r3, [r7, #24]
 800cd78:	f003 0307 	and.w	r3, r3, #7
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d00b      	beq.n	800cd98 <pvPortMalloc+0xfc>
	__asm volatile
 800cd80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	613b      	str	r3, [r7, #16]
}
 800cd92:	bf00      	nop
 800cd94:	bf00      	nop
 800cd96:	e7fd      	b.n	800cd94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd9a:	685a      	ldr	r2, [r3, #4]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	1ad2      	subs	r2, r2, r3
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda6:	687a      	ldr	r2, [r7, #4]
 800cda8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdaa:	69b8      	ldr	r0, [r7, #24]
 800cdac:	f000 f90a 	bl	800cfc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdb2:	681a      	ldr	r2, [r3, #0]
 800cdb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	1ad3      	subs	r3, r2, r3
 800cdba:	4a1b      	ldr	r2, [pc, #108]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdbe:	4b1a      	ldr	r3, [pc, #104]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdc0:	681a      	ldr	r2, [r3, #0]
 800cdc2:	4b1b      	ldr	r3, [pc, #108]	@ (800ce30 <pvPortMalloc+0x194>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	429a      	cmp	r2, r3
 800cdc8:	d203      	bcs.n	800cdd2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdca:	4b17      	ldr	r3, [pc, #92]	@ (800ce28 <pvPortMalloc+0x18c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	4a18      	ldr	r2, [pc, #96]	@ (800ce30 <pvPortMalloc+0x194>)
 800cdd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdd4:	685a      	ldr	r2, [r3, #4]
 800cdd6:	4b13      	ldr	r3, [pc, #76]	@ (800ce24 <pvPortMalloc+0x188>)
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	431a      	orrs	r2, r3
 800cddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cde0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cde2:	2200      	movs	r2, #0
 800cde4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cde6:	4b13      	ldr	r3, [pc, #76]	@ (800ce34 <pvPortMalloc+0x198>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	3301      	adds	r3, #1
 800cdec:	4a11      	ldr	r2, [pc, #68]	@ (800ce34 <pvPortMalloc+0x198>)
 800cdee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdf0:	f7fe fc92 	bl	800b718 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	f003 0307 	and.w	r3, r3, #7
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d00b      	beq.n	800ce16 <pvPortMalloc+0x17a>
	__asm volatile
 800cdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	60fb      	str	r3, [r7, #12]
}
 800ce10:	bf00      	nop
 800ce12:	bf00      	nop
 800ce14:	e7fd      	b.n	800ce12 <pvPortMalloc+0x176>
	return pvReturn;
 800ce16:	69fb      	ldr	r3, [r7, #28]
}
 800ce18:	4618      	mov	r0, r3
 800ce1a:	3728      	adds	r7, #40	@ 0x28
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	2400512c 	.word	0x2400512c
 800ce24:	24005140 	.word	0x24005140
 800ce28:	24005130 	.word	0x24005130
 800ce2c:	24005124 	.word	0x24005124
 800ce30:	24005134 	.word	0x24005134
 800ce34:	24005138 	.word	0x24005138

0800ce38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b086      	sub	sp, #24
 800ce3c:	af00      	add	r7, sp, #0
 800ce3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d04f      	beq.n	800ceea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce4a:	2308      	movs	r3, #8
 800ce4c:	425b      	negs	r3, r3
 800ce4e:	697a      	ldr	r2, [r7, #20]
 800ce50:	4413      	add	r3, r2
 800ce52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce58:	693b      	ldr	r3, [r7, #16]
 800ce5a:	685a      	ldr	r2, [r3, #4]
 800ce5c:	4b25      	ldr	r3, [pc, #148]	@ (800cef4 <vPortFree+0xbc>)
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	4013      	ands	r3, r2
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d10b      	bne.n	800ce7e <vPortFree+0x46>
	__asm volatile
 800ce66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	60fb      	str	r3, [r7, #12]
}
 800ce78:	bf00      	nop
 800ce7a:	bf00      	nop
 800ce7c:	e7fd      	b.n	800ce7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce7e:	693b      	ldr	r3, [r7, #16]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d00b      	beq.n	800ce9e <vPortFree+0x66>
	__asm volatile
 800ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce8a:	f383 8811 	msr	BASEPRI, r3
 800ce8e:	f3bf 8f6f 	isb	sy
 800ce92:	f3bf 8f4f 	dsb	sy
 800ce96:	60bb      	str	r3, [r7, #8]
}
 800ce98:	bf00      	nop
 800ce9a:	bf00      	nop
 800ce9c:	e7fd      	b.n	800ce9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	685a      	ldr	r2, [r3, #4]
 800cea2:	4b14      	ldr	r3, [pc, #80]	@ (800cef4 <vPortFree+0xbc>)
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	4013      	ands	r3, r2
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d01e      	beq.n	800ceea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ceac:	693b      	ldr	r3, [r7, #16]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d11a      	bne.n	800ceea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	685a      	ldr	r2, [r3, #4]
 800ceb8:	4b0e      	ldr	r3, [pc, #56]	@ (800cef4 <vPortFree+0xbc>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	43db      	mvns	r3, r3
 800cebe:	401a      	ands	r2, r3
 800cec0:	693b      	ldr	r3, [r7, #16]
 800cec2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cec4:	f7fe fc1a 	bl	800b6fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cec8:	693b      	ldr	r3, [r7, #16]
 800ceca:	685a      	ldr	r2, [r3, #4]
 800cecc:	4b0a      	ldr	r3, [pc, #40]	@ (800cef8 <vPortFree+0xc0>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	4413      	add	r3, r2
 800ced2:	4a09      	ldr	r2, [pc, #36]	@ (800cef8 <vPortFree+0xc0>)
 800ced4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ced6:	6938      	ldr	r0, [r7, #16]
 800ced8:	f000 f874 	bl	800cfc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cedc:	4b07      	ldr	r3, [pc, #28]	@ (800cefc <vPortFree+0xc4>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	3301      	adds	r3, #1
 800cee2:	4a06      	ldr	r2, [pc, #24]	@ (800cefc <vPortFree+0xc4>)
 800cee4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cee6:	f7fe fc17 	bl	800b718 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceea:	bf00      	nop
 800ceec:	3718      	adds	r7, #24
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	24005140 	.word	0x24005140
 800cef8:	24005130 	.word	0x24005130
 800cefc:	2400513c 	.word	0x2400513c

0800cf00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf00:	b480      	push	{r7}
 800cf02:	b085      	sub	sp, #20
 800cf04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cf0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf0c:	4b27      	ldr	r3, [pc, #156]	@ (800cfac <prvHeapInit+0xac>)
 800cf0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f003 0307 	and.w	r3, r3, #7
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00c      	beq.n	800cf34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	3307      	adds	r3, #7
 800cf1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f023 0307 	bic.w	r3, r3, #7
 800cf26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	1ad3      	subs	r3, r2, r3
 800cf2e:	4a1f      	ldr	r2, [pc, #124]	@ (800cfac <prvHeapInit+0xac>)
 800cf30:	4413      	add	r3, r2
 800cf32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf38:	4a1d      	ldr	r2, [pc, #116]	@ (800cfb0 <prvHeapInit+0xb0>)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf3e:	4b1c      	ldr	r3, [pc, #112]	@ (800cfb0 <prvHeapInit+0xb0>)
 800cf40:	2200      	movs	r2, #0
 800cf42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	68ba      	ldr	r2, [r7, #8]
 800cf48:	4413      	add	r3, r2
 800cf4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf4c:	2208      	movs	r2, #8
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	1a9b      	subs	r3, r3, r2
 800cf52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	f023 0307 	bic.w	r3, r3, #7
 800cf5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	4a15      	ldr	r2, [pc, #84]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf62:	4b14      	ldr	r3, [pc, #80]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	2200      	movs	r2, #0
 800cf68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf6a:	4b12      	ldr	r3, [pc, #72]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	2200      	movs	r2, #0
 800cf70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf76:	683b      	ldr	r3, [r7, #0]
 800cf78:	68fa      	ldr	r2, [r7, #12]
 800cf7a:	1ad2      	subs	r2, r2, r3
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf80:	4b0c      	ldr	r3, [pc, #48]	@ (800cfb4 <prvHeapInit+0xb4>)
 800cf82:	681a      	ldr	r2, [r3, #0]
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf88:	683b      	ldr	r3, [r7, #0]
 800cf8a:	685b      	ldr	r3, [r3, #4]
 800cf8c:	4a0a      	ldr	r2, [pc, #40]	@ (800cfb8 <prvHeapInit+0xb8>)
 800cf8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	4a09      	ldr	r2, [pc, #36]	@ (800cfbc <prvHeapInit+0xbc>)
 800cf96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cf98:	4b09      	ldr	r3, [pc, #36]	@ (800cfc0 <prvHeapInit+0xc0>)
 800cf9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cf9e:	601a      	str	r2, [r3, #0]
}
 800cfa0:	bf00      	nop
 800cfa2:	3714      	adds	r7, #20
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr
 800cfac:	24001524 	.word	0x24001524
 800cfb0:	24005124 	.word	0x24005124
 800cfb4:	2400512c 	.word	0x2400512c
 800cfb8:	24005134 	.word	0x24005134
 800cfbc:	24005130 	.word	0x24005130
 800cfc0:	24005140 	.word	0x24005140

0800cfc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfc4:	b480      	push	{r7}
 800cfc6:	b085      	sub	sp, #20
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfcc:	4b28      	ldr	r3, [pc, #160]	@ (800d070 <prvInsertBlockIntoFreeList+0xac>)
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	e002      	b.n	800cfd8 <prvInsertBlockIntoFreeList+0x14>
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	687a      	ldr	r2, [r7, #4]
 800cfde:	429a      	cmp	r2, r3
 800cfe0:	d8f7      	bhi.n	800cfd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	685b      	ldr	r3, [r3, #4]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	4413      	add	r3, r2
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d108      	bne.n	800d006 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	685a      	ldr	r2, [r3, #4]
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	441a      	add	r2, r3
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	68ba      	ldr	r2, [r7, #8]
 800d010:	441a      	add	r2, r3
 800d012:	68fb      	ldr	r3, [r7, #12]
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	429a      	cmp	r2, r3
 800d018:	d118      	bne.n	800d04c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	4b15      	ldr	r3, [pc, #84]	@ (800d074 <prvInsertBlockIntoFreeList+0xb0>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	429a      	cmp	r2, r3
 800d024:	d00d      	beq.n	800d042 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685a      	ldr	r2, [r3, #4]
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	685b      	ldr	r3, [r3, #4]
 800d030:	441a      	add	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	681a      	ldr	r2, [r3, #0]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	e008      	b.n	800d054 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d042:	4b0c      	ldr	r3, [pc, #48]	@ (800d074 <prvInsertBlockIntoFreeList+0xb0>)
 800d044:	681a      	ldr	r2, [r3, #0]
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	601a      	str	r2, [r3, #0]
 800d04a:	e003      	b.n	800d054 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681a      	ldr	r2, [r3, #0]
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d054:	68fa      	ldr	r2, [r7, #12]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	429a      	cmp	r2, r3
 800d05a:	d002      	beq.n	800d062 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	687a      	ldr	r2, [r7, #4]
 800d060:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d062:	bf00      	nop
 800d064:	3714      	adds	r7, #20
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr
 800d06e:	bf00      	nop
 800d070:	24005124 	.word	0x24005124
 800d074:	2400512c 	.word	0x2400512c

0800d078 <memset>:
 800d078:	4402      	add	r2, r0
 800d07a:	4603      	mov	r3, r0
 800d07c:	4293      	cmp	r3, r2
 800d07e:	d100      	bne.n	800d082 <memset+0xa>
 800d080:	4770      	bx	lr
 800d082:	f803 1b01 	strb.w	r1, [r3], #1
 800d086:	e7f9      	b.n	800d07c <memset+0x4>

0800d088 <__libc_init_array>:
 800d088:	b570      	push	{r4, r5, r6, lr}
 800d08a:	4d0d      	ldr	r5, [pc, #52]	@ (800d0c0 <__libc_init_array+0x38>)
 800d08c:	4c0d      	ldr	r4, [pc, #52]	@ (800d0c4 <__libc_init_array+0x3c>)
 800d08e:	1b64      	subs	r4, r4, r5
 800d090:	10a4      	asrs	r4, r4, #2
 800d092:	2600      	movs	r6, #0
 800d094:	42a6      	cmp	r6, r4
 800d096:	d109      	bne.n	800d0ac <__libc_init_array+0x24>
 800d098:	4d0b      	ldr	r5, [pc, #44]	@ (800d0c8 <__libc_init_array+0x40>)
 800d09a:	4c0c      	ldr	r4, [pc, #48]	@ (800d0cc <__libc_init_array+0x44>)
 800d09c:	f000 f826 	bl	800d0ec <_init>
 800d0a0:	1b64      	subs	r4, r4, r5
 800d0a2:	10a4      	asrs	r4, r4, #2
 800d0a4:	2600      	movs	r6, #0
 800d0a6:	42a6      	cmp	r6, r4
 800d0a8:	d105      	bne.n	800d0b6 <__libc_init_array+0x2e>
 800d0aa:	bd70      	pop	{r4, r5, r6, pc}
 800d0ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0b0:	4798      	blx	r3
 800d0b2:	3601      	adds	r6, #1
 800d0b4:	e7ee      	b.n	800d094 <__libc_init_array+0xc>
 800d0b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800d0ba:	4798      	blx	r3
 800d0bc:	3601      	adds	r6, #1
 800d0be:	e7f2      	b.n	800d0a6 <__libc_init_array+0x1e>
 800d0c0:	0800d1c8 	.word	0x0800d1c8
 800d0c4:	0800d1c8 	.word	0x0800d1c8
 800d0c8:	0800d1c8 	.word	0x0800d1c8
 800d0cc:	0800d1cc 	.word	0x0800d1cc

0800d0d0 <memcpy>:
 800d0d0:	440a      	add	r2, r1
 800d0d2:	4291      	cmp	r1, r2
 800d0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d0d8:	d100      	bne.n	800d0dc <memcpy+0xc>
 800d0da:	4770      	bx	lr
 800d0dc:	b510      	push	{r4, lr}
 800d0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d0e6:	4291      	cmp	r1, r2
 800d0e8:	d1f9      	bne.n	800d0de <memcpy+0xe>
 800d0ea:	bd10      	pop	{r4, pc}

0800d0ec <_init>:
 800d0ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0ee:	bf00      	nop
 800d0f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0f2:	bc08      	pop	{r3}
 800d0f4:	469e      	mov	lr, r3
 800d0f6:	4770      	bx	lr

0800d0f8 <_fini>:
 800d0f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d0fa:	bf00      	nop
 800d0fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0fe:	bc08      	pop	{r3}
 800d100:	469e      	mov	lr, r3
 800d102:	4770      	bx	lr
