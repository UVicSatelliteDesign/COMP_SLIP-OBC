
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f74  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08009214  08009214  0000a214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009294  08009294  0000a294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800929c  0800929c  0000a29c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080092a0  080092a0  0000a2a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000014  24000000  080092a4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000014  080092b8  0000b014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000074  08009318  0000b074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004fdc  240000d4  08009378  0000b0d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240050b0  08009378  0000c0b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000b0d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021e66  00000000  00000000  0000b102  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003dd7  00000000  00000000  0002cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00030d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001208  00000000  00000000  00032498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004690  00000000  00000000  000336a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bb0e  00000000  00000000  00037d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00168930  00000000  00000000  0005383e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001bc16e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006370  00000000  00000000  001bc1b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001c2524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080091fc 	.word	0x080091fc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	080091fc 	.word	0x080091fc

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002f4:	f000 b96a 	b.w	80005cc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	460c      	mov	r4, r1
 8000318:	2b00      	cmp	r3, #0
 800031a:	d14e      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031c:	4694      	mov	ip, r2
 800031e:	458c      	cmp	ip, r1
 8000320:	4686      	mov	lr, r0
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	d962      	bls.n	80003ee <__udivmoddi4+0xde>
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0320 	rsb	r3, r2, #32
 800032e:	4091      	lsls	r1, r2
 8000330:	fa20 f303 	lsr.w	r3, r0, r3
 8000334:	fa0c fc02 	lsl.w	ip, ip, r2
 8000338:	4319      	orrs	r1, r3
 800033a:	fa00 fe02 	lsl.w	lr, r0, r2
 800033e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000342:	fa1f f68c 	uxth.w	r6, ip
 8000346:	fbb1 f4f7 	udiv	r4, r1, r7
 800034a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800034e:	fb07 1114 	mls	r1, r7, r4, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb04 f106 	mul.w	r1, r4, r6
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000366:	f080 8112 	bcs.w	800058e <__udivmoddi4+0x27e>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 810f 	bls.w	800058e <__udivmoddi4+0x27e>
 8000370:	3c02      	subs	r4, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	fa1f f38e 	uxth.w	r3, lr
 800037a:	fbb1 f0f7 	udiv	r0, r1, r7
 800037e:	fb07 1110 	mls	r1, r7, r0, r1
 8000382:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000386:	fb00 f606 	mul.w	r6, r0, r6
 800038a:	429e      	cmp	r6, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x94>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000396:	f080 80fc 	bcs.w	8000592 <__udivmoddi4+0x282>
 800039a:	429e      	cmp	r6, r3
 800039c:	f240 80f9 	bls.w	8000592 <__udivmoddi4+0x282>
 80003a0:	4463      	add	r3, ip
 80003a2:	3802      	subs	r0, #2
 80003a4:	1b9b      	subs	r3, r3, r6
 80003a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003aa:	2100      	movs	r1, #0
 80003ac:	b11d      	cbz	r5, 80003b6 <__udivmoddi4+0xa6>
 80003ae:	40d3      	lsrs	r3, r2
 80003b0:	2200      	movs	r2, #0
 80003b2:	e9c5 3200 	strd	r3, r2, [r5]
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d905      	bls.n	80003ca <__udivmoddi4+0xba>
 80003be:	b10d      	cbz	r5, 80003c4 <__udivmoddi4+0xb4>
 80003c0:	e9c5 0100 	strd	r0, r1, [r5]
 80003c4:	2100      	movs	r1, #0
 80003c6:	4608      	mov	r0, r1
 80003c8:	e7f5      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ca:	fab3 f183 	clz	r1, r3
 80003ce:	2900      	cmp	r1, #0
 80003d0:	d146      	bne.n	8000460 <__udivmoddi4+0x150>
 80003d2:	42a3      	cmp	r3, r4
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xcc>
 80003d6:	4290      	cmp	r0, r2
 80003d8:	f0c0 80f0 	bcc.w	80005bc <__udivmoddi4+0x2ac>
 80003dc:	1a86      	subs	r6, r0, r2
 80003de:	eb64 0303 	sbc.w	r3, r4, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	2d00      	cmp	r5, #0
 80003e6:	d0e6      	beq.n	80003b6 <__udivmoddi4+0xa6>
 80003e8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ec:	e7e3      	b.n	80003b6 <__udivmoddi4+0xa6>
 80003ee:	2a00      	cmp	r2, #0
 80003f0:	f040 8090 	bne.w	8000514 <__udivmoddi4+0x204>
 80003f4:	eba1 040c 	sub.w	r4, r1, ip
 80003f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003fc:	fa1f f78c 	uxth.w	r7, ip
 8000400:	2101      	movs	r1, #1
 8000402:	fbb4 f6f8 	udiv	r6, r4, r8
 8000406:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800040a:	fb08 4416 	mls	r4, r8, r6, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb07 f006 	mul.w	r0, r7, r6
 8000416:	4298      	cmp	r0, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x11c>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x11a>
 8000424:	4298      	cmp	r0, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2b4>
 800042a:	4626      	mov	r6, r4
 800042c:	1a1c      	subs	r4, r3, r0
 800042e:	fa1f f38e 	uxth.w	r3, lr
 8000432:	fbb4 f0f8 	udiv	r0, r4, r8
 8000436:	fb08 4410 	mls	r4, r8, r0, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb00 f707 	mul.w	r7, r0, r7
 8000442:	429f      	cmp	r7, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x148>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x146>
 8000450:	429f      	cmp	r7, r3
 8000452:	f200 80b0 	bhi.w	80005b6 <__udivmoddi4+0x2a6>
 8000456:	4620      	mov	r0, r4
 8000458:	1bdb      	subs	r3, r3, r7
 800045a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800045e:	e7a5      	b.n	80003ac <__udivmoddi4+0x9c>
 8000460:	f1c1 0620 	rsb	r6, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 f706 	lsr.w	r7, r2, r6
 800046a:	431f      	orrs	r7, r3
 800046c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000470:	fa04 f301 	lsl.w	r3, r4, r1
 8000474:	ea43 030c 	orr.w	r3, r3, ip
 8000478:	40f4      	lsrs	r4, r6
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	0c38      	lsrs	r0, r7, #16
 8000480:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000484:	fbb4 fef0 	udiv	lr, r4, r0
 8000488:	fa1f fc87 	uxth.w	ip, r7
 800048c:	fb00 441e 	mls	r4, r0, lr, r4
 8000490:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000494:	fb0e f90c 	mul.w	r9, lr, ip
 8000498:	45a1      	cmp	r9, r4
 800049a:	fa02 f201 	lsl.w	r2, r2, r1
 800049e:	d90a      	bls.n	80004b6 <__udivmoddi4+0x1a6>
 80004a0:	193c      	adds	r4, r7, r4
 80004a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80004a6:	f080 8084 	bcs.w	80005b2 <__udivmoddi4+0x2a2>
 80004aa:	45a1      	cmp	r9, r4
 80004ac:	f240 8081 	bls.w	80005b2 <__udivmoddi4+0x2a2>
 80004b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	eba4 0409 	sub.w	r4, r4, r9
 80004ba:	fa1f f983 	uxth.w	r9, r3
 80004be:	fbb4 f3f0 	udiv	r3, r4, r0
 80004c2:	fb00 4413 	mls	r4, r0, r3, r4
 80004c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d907      	bls.n	80004e2 <__udivmoddi4+0x1d2>
 80004d2:	193c      	adds	r4, r7, r4
 80004d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d8:	d267      	bcs.n	80005aa <__udivmoddi4+0x29a>
 80004da:	45a4      	cmp	ip, r4
 80004dc:	d965      	bls.n	80005aa <__udivmoddi4+0x29a>
 80004de:	3b02      	subs	r3, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004e6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	429c      	cmp	r4, r3
 80004f0:	46ce      	mov	lr, r9
 80004f2:	469c      	mov	ip, r3
 80004f4:	d351      	bcc.n	800059a <__udivmoddi4+0x28a>
 80004f6:	d04e      	beq.n	8000596 <__udivmoddi4+0x286>
 80004f8:	b155      	cbz	r5, 8000510 <__udivmoddi4+0x200>
 80004fa:	ebb8 030e 	subs.w	r3, r8, lr
 80004fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000502:	fa04 f606 	lsl.w	r6, r4, r6
 8000506:	40cb      	lsrs	r3, r1
 8000508:	431e      	orrs	r6, r3
 800050a:	40cc      	lsrs	r4, r1
 800050c:	e9c5 6400 	strd	r6, r4, [r5]
 8000510:	2100      	movs	r1, #0
 8000512:	e750      	b.n	80003b6 <__udivmoddi4+0xa6>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f103 	lsr.w	r1, r0, r3
 800051c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000520:	fa24 f303 	lsr.w	r3, r4, r3
 8000524:	4094      	lsls	r4, r2
 8000526:	430c      	orrs	r4, r1
 8000528:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800052c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000530:	fa1f f78c 	uxth.w	r7, ip
 8000534:	fbb3 f0f8 	udiv	r0, r3, r8
 8000538:	fb08 3110 	mls	r1, r8, r0, r3
 800053c:	0c23      	lsrs	r3, r4, #16
 800053e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000542:	fb00 f107 	mul.w	r1, r0, r7
 8000546:	4299      	cmp	r1, r3
 8000548:	d908      	bls.n	800055c <__udivmoddi4+0x24c>
 800054a:	eb1c 0303 	adds.w	r3, ip, r3
 800054e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000552:	d22c      	bcs.n	80005ae <__udivmoddi4+0x29e>
 8000554:	4299      	cmp	r1, r3
 8000556:	d92a      	bls.n	80005ae <__udivmoddi4+0x29e>
 8000558:	3802      	subs	r0, #2
 800055a:	4463      	add	r3, ip
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b2a4      	uxth	r4, r4
 8000560:	fbb3 f1f8 	udiv	r1, r3, r8
 8000564:	fb08 3311 	mls	r3, r8, r1, r3
 8000568:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800056c:	fb01 f307 	mul.w	r3, r1, r7
 8000570:	42a3      	cmp	r3, r4
 8000572:	d908      	bls.n	8000586 <__udivmoddi4+0x276>
 8000574:	eb1c 0404 	adds.w	r4, ip, r4
 8000578:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800057c:	d213      	bcs.n	80005a6 <__udivmoddi4+0x296>
 800057e:	42a3      	cmp	r3, r4
 8000580:	d911      	bls.n	80005a6 <__udivmoddi4+0x296>
 8000582:	3902      	subs	r1, #2
 8000584:	4464      	add	r4, ip
 8000586:	1ae4      	subs	r4, r4, r3
 8000588:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800058c:	e739      	b.n	8000402 <__udivmoddi4+0xf2>
 800058e:	4604      	mov	r4, r0
 8000590:	e6f0      	b.n	8000374 <__udivmoddi4+0x64>
 8000592:	4608      	mov	r0, r1
 8000594:	e706      	b.n	80003a4 <__udivmoddi4+0x94>
 8000596:	45c8      	cmp	r8, r9
 8000598:	d2ae      	bcs.n	80004f8 <__udivmoddi4+0x1e8>
 800059a:	ebb9 0e02 	subs.w	lr, r9, r2
 800059e:	eb63 0c07 	sbc.w	ip, r3, r7
 80005a2:	3801      	subs	r0, #1
 80005a4:	e7a8      	b.n	80004f8 <__udivmoddi4+0x1e8>
 80005a6:	4631      	mov	r1, r6
 80005a8:	e7ed      	b.n	8000586 <__udivmoddi4+0x276>
 80005aa:	4603      	mov	r3, r0
 80005ac:	e799      	b.n	80004e2 <__udivmoddi4+0x1d2>
 80005ae:	4630      	mov	r0, r6
 80005b0:	e7d4      	b.n	800055c <__udivmoddi4+0x24c>
 80005b2:	46d6      	mov	lr, sl
 80005b4:	e77f      	b.n	80004b6 <__udivmoddi4+0x1a6>
 80005b6:	4463      	add	r3, ip
 80005b8:	3802      	subs	r0, #2
 80005ba:	e74d      	b.n	8000458 <__udivmoddi4+0x148>
 80005bc:	4606      	mov	r6, r0
 80005be:	4623      	mov	r3, r4
 80005c0:	4608      	mov	r0, r1
 80005c2:	e70f      	b.n	80003e4 <__udivmoddi4+0xd4>
 80005c4:	3e02      	subs	r6, #2
 80005c6:	4463      	add	r3, ip
 80005c8:	e730      	b.n	800042c <__udivmoddi4+0x11c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fcfe 	bl	8000fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f81c 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f964 	bl	80008a8 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f898 	bl	8000714 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f8e2 	bl	80007ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 f92c 	bl	8000844 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ec:	f006 f84e 	bl	800668c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005f0:	4a05      	ldr	r2, [pc, #20]	@ (8000608 <main+0x38>)
 80005f2:	2100      	movs	r1, #0
 80005f4:	4805      	ldr	r0, [pc, #20]	@ (800060c <main+0x3c>)
 80005f6:	f006 f893 	bl	8006720 <osThreadNew>
 80005fa:	4603      	mov	r3, r0
 80005fc:	4a04      	ldr	r2, [pc, #16]	@ (8000610 <main+0x40>)
 80005fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000600:	f006 f868 	bl	80066d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000604:	bf00      	nop
 8000606:	e7fd      	b.n	8000604 <main+0x34>
 8000608:	08009238 	.word	0x08009238
 800060c:	08000a61 	.word	0x08000a61
 8000610:	24000750 	.word	0x24000750

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09c      	sub	sp, #112	@ 0x70
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800061e:	224c      	movs	r2, #76	@ 0x4c
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f008 fdb0 	bl	8009188 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2220      	movs	r2, #32
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f008 fdaa 	bl	8009188 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000634:	2002      	movs	r0, #2
 8000636:	f001 fdb5 	bl	80021a4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800063a:	2300      	movs	r3, #0
 800063c:	603b      	str	r3, [r7, #0]
 800063e:	4b33      	ldr	r3, [pc, #204]	@ (800070c <SystemClock_Config+0xf8>)
 8000640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000642:	4a32      	ldr	r2, [pc, #200]	@ (800070c <SystemClock_Config+0xf8>)
 8000644:	f023 0301 	bic.w	r3, r3, #1
 8000648:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800064a:	4b30      	ldr	r3, [pc, #192]	@ (800070c <SystemClock_Config+0xf8>)
 800064c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	4b2e      	ldr	r3, [pc, #184]	@ (8000710 <SystemClock_Config+0xfc>)
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800065c:	4a2c      	ldr	r2, [pc, #176]	@ (8000710 <SystemClock_Config+0xfc>)
 800065e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000662:	6193      	str	r3, [r2, #24]
 8000664:	4b2a      	ldr	r3, [pc, #168]	@ (8000710 <SystemClock_Config+0xfc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000670:	bf00      	nop
 8000672:	4b27      	ldr	r3, [pc, #156]	@ (8000710 <SystemClock_Config+0xfc>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800067a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800067e:	d1f8      	bne.n	8000672 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000680:	2303      	movs	r3, #3
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000684:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000688:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800068a:	2301      	movs	r3, #1
 800068c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000696:	2302      	movs	r3, #2
 8000698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069a:	2301      	movs	r3, #1
 800069c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800069e:	2318      	movs	r3, #24
 80006a0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006a6:	2304      	movs	r3, #4
 80006a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006ae:	230c      	movs	r3, #12
 80006b0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006b2:	2300      	movs	r3, #0
 80006b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fdba 	bl	8002238 <HAL_RCC_OscConfig>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006ca:	f000 f9d1 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	233f      	movs	r3, #63	@ 0x3f
 80006d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006de:	2300      	movs	r3, #0
 80006e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ee:	1d3b      	adds	r3, r7, #4
 80006f0:	2101      	movs	r1, #1
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f9fa 	bl	8002aec <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006fe:	f000 f9b7 	bl	8000a70 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3770      	adds	r7, #112	@ 0x70
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58000400 	.word	0x58000400
 8000710:	58024800 	.word	0x58024800

08000714 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <MX_ETH_Init+0x80>)
 800071a:	4a1f      	ldr	r2, [pc, #124]	@ (8000798 <MX_ETH_Init+0x84>)
 800071c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800071e:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <MX_ETH_Init+0x88>)
 8000720:	2200      	movs	r2, #0
 8000722:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000724:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <MX_ETH_Init+0x88>)
 8000726:	2280      	movs	r2, #128	@ 0x80
 8000728:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800072a:	4b1c      	ldr	r3, [pc, #112]	@ (800079c <MX_ETH_Init+0x88>)
 800072c:	22e1      	movs	r2, #225	@ 0xe1
 800072e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000730:	4b1a      	ldr	r3, [pc, #104]	@ (800079c <MX_ETH_Init+0x88>)
 8000732:	2200      	movs	r2, #0
 8000734:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000736:	4b19      	ldr	r3, [pc, #100]	@ (800079c <MX_ETH_Init+0x88>)
 8000738:	2200      	movs	r2, #0
 800073a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800073c:	4b17      	ldr	r3, [pc, #92]	@ (800079c <MX_ETH_Init+0x88>)
 800073e:	2200      	movs	r2, #0
 8000740:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000742:	4b14      	ldr	r3, [pc, #80]	@ (8000794 <MX_ETH_Init+0x80>)
 8000744:	4a15      	ldr	r2, [pc, #84]	@ (800079c <MX_ETH_Init+0x88>)
 8000746:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000748:	4b12      	ldr	r3, [pc, #72]	@ (8000794 <MX_ETH_Init+0x80>)
 800074a:	2201      	movs	r2, #1
 800074c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800074e:	4b11      	ldr	r3, [pc, #68]	@ (8000794 <MX_ETH_Init+0x80>)
 8000750:	4a13      	ldr	r2, [pc, #76]	@ (80007a0 <MX_ETH_Init+0x8c>)
 8000752:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000754:	4b0f      	ldr	r3, [pc, #60]	@ (8000794 <MX_ETH_Init+0x80>)
 8000756:	4a13      	ldr	r2, [pc, #76]	@ (80007a4 <MX_ETH_Init+0x90>)
 8000758:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800075a:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <MX_ETH_Init+0x80>)
 800075c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000760:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000762:	480c      	ldr	r0, [pc, #48]	@ (8000794 <MX_ETH_Init+0x80>)
 8000764:	f000 fdf0 	bl	8001348 <HAL_ETH_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800076e:	f000 f97f 	bl	8000a70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000772:	2238      	movs	r2, #56	@ 0x38
 8000774:	2100      	movs	r1, #0
 8000776:	480c      	ldr	r0, [pc, #48]	@ (80007a8 <MX_ETH_Init+0x94>)
 8000778:	f008 fd06 	bl	8009188 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800077c:	4b0a      	ldr	r3, [pc, #40]	@ (80007a8 <MX_ETH_Init+0x94>)
 800077e:	2221      	movs	r2, #33	@ 0x21
 8000780:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <MX_ETH_Init+0x94>)
 8000784:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000788:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800078a:	4b07      	ldr	r3, [pc, #28]	@ (80007a8 <MX_ETH_Init+0x94>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000790:	bf00      	nop
 8000792:	bd80      	pop	{r7, pc}
 8000794:	24000128 	.word	0x24000128
 8000798:	40028000 	.word	0x40028000
 800079c:	24000754 	.word	0x24000754
 80007a0:	24000074 	.word	0x24000074
 80007a4:	24000014 	.word	0x24000014
 80007a8:	240000f0 	.word	0x240000f0

080007ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007b0:	4b22      	ldr	r3, [pc, #136]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	@ (8000840 <MX_USART3_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	@ (800083c <MX_USART3_UART_Init+0x90>)
 80007f6:	f004 fb31 	bl	8004e5c <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f000 f936 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	@ (800083c <MX_USART3_UART_Init+0x90>)
 8000808:	f005 fb39 	bl	8005e7e <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f000 f92d 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	@ (800083c <MX_USART3_UART_Init+0x90>)
 800081a:	f005 fb6e 	bl	8005efa <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f000 f924 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	@ (800083c <MX_USART3_UART_Init+0x90>)
 800082a:	f005 faef 	bl	8005e0c <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f000 f91c 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	240001d8 	.word	0x240001d8
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084a:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800084c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800084e:	4b14      	ldr	r3, [pc, #80]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000850:	2209      	movs	r2, #9
 8000852:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000856:	2202      	movs	r2, #2
 8000858:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800085a:	4b11      	ldr	r3, [pc, #68]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085c:	2200      	movs	r2, #0
 800085e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000860:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000862:	2202      	movs	r2, #2
 8000864:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000868:	2201      	movs	r2, #1
 800086a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086c:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086e:	2200      	movs	r2, #0
 8000870:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000872:	4b0b      	ldr	r3, [pc, #44]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000874:	2200      	movs	r2, #0
 8000876:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000878:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087a:	2201      	movs	r2, #1
 800087c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000880:	2201      	movs	r2, #1
 8000882:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000884:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000886:	2200      	movs	r2, #0
 8000888:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088c:	f001 fb59 	bl	8001f42 <HAL_PCD_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000896:	f000 f8eb 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2400026c 	.word	0x2400026c
 80008a4:	40080000 	.word	0x40080000

080008a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08c      	sub	sp, #48	@ 0x30
 80008ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008be:	4b62      	ldr	r3, [pc, #392]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c4:	4a60      	ldr	r2, [pc, #384]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008c6:	f043 0304 	orr.w	r3, r3, #4
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ce:	4b5e      	ldr	r3, [pc, #376]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	61bb      	str	r3, [r7, #24]
 80008da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008dc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e2:	4a59      	ldr	r2, [pc, #356]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008ec:	4b56      	ldr	r3, [pc, #344]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008f6:	617b      	str	r3, [r7, #20]
 80008f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b53      	ldr	r3, [pc, #332]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 80008fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000900:	4a51      	ldr	r2, [pc, #324]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000902:	f043 0301 	orr.w	r3, r3, #1
 8000906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800090a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000918:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000920:	f043 0302 	orr.w	r3, r3, #2
 8000924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000928:	4b47      	ldr	r3, [pc, #284]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	f003 0302 	and.w	r3, r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000936:	4b44      	ldr	r3, [pc, #272]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000938:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093c:	4a42      	ldr	r2, [pc, #264]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000946:	4b40      	ldr	r3, [pc, #256]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	f003 0308 	and.w	r3, r3, #8
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000954:	4b3c      	ldr	r3, [pc, #240]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000956:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800095c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000960:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000964:	4b38      	ldr	r3, [pc, #224]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000972:	4b35      	ldr	r3, [pc, #212]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000974:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000978:	4a33      	ldr	r2, [pc, #204]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000982:	4b31      	ldr	r3, [pc, #196]	@ (8000a48 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	f003 0310 	and.w	r3, r3, #16
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000996:	482d      	ldr	r0, [pc, #180]	@ (8000a4c <MX_GPIO_Init+0x1a4>)
 8000998:	f001 faba 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009a2:	482b      	ldr	r0, [pc, #172]	@ (8000a50 <MX_GPIO_Init+0x1a8>)
 80009a4:	f001 fab4 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	2102      	movs	r1, #2
 80009ac:	4829      	ldr	r0, [pc, #164]	@ (8000a54 <MX_GPIO_Init+0x1ac>)
 80009ae:	f001 faaf 	bl	8001f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4824      	ldr	r0, [pc, #144]	@ (8000a58 <MX_GPIO_Init+0x1b0>)
 80009c8:	f001 f8f2 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009cc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d2:	2301      	movs	r3, #1
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009de:	f107 031c 	add.w	r3, r7, #28
 80009e2:	4619      	mov	r1, r3
 80009e4:	4819      	ldr	r0, [pc, #100]	@ (8000a4c <MX_GPIO_Init+0x1a4>)
 80009e6:	f001 f8e3 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	4813      	ldr	r0, [pc, #76]	@ (8000a50 <MX_GPIO_Init+0x1a8>)
 8000a04:	f001 f8d4 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a08:	2380      	movs	r3, #128	@ 0x80
 8000a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <MX_GPIO_Init+0x1b4>)
 8000a1e:	f001 f8c7 	bl	8001bb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4806      	ldr	r0, [pc, #24]	@ (8000a54 <MX_GPIO_Init+0x1ac>)
 8000a3a:	f001 f8b9 	bl	8001bb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	@ 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	58024400 	.word	0x58024400
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	58020c00 	.word	0x58020c00
 8000a54:	58021000 	.word	0x58021000
 8000a58:	58020800 	.word	0x58020800
 8000a5c:	58021800 	.word	0x58021800

08000a60 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000a68:	2001      	movs	r0, #1
 8000a6a:	f005 feeb 	bl	8006844 <osDelay>
 8000a6e:	e7fb      	b.n	8000a68 <StartDefaultTask+0x8>

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab4 <HAL_MspInit+0x38>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_MspInit+0x38>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a92:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x38>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	210f      	movs	r1, #15
 8000aa4:	f06f 0001 	mvn.w	r0, #1
 8000aa8:	f000 fc27 	bl	80012fa <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	58024400 	.word	0x58024400

08000ab8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a59      	ldr	r2, [pc, #356]	@ (8000c3c <HAL_ETH_MspInit+0x184>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	f040 80ab 	bne.w	8000c32 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000adc:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ae2:	4a57      	ldr	r2, [pc, #348]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ae4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aec:	4b54      	ldr	r3, [pc, #336]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000af6:	623b      	str	r3, [r7, #32]
 8000af8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000afa:	4b51      	ldr	r3, [pc, #324]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b00:	4a4f      	ldr	r2, [pc, #316]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000b06:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b14:	61fb      	str	r3, [r7, #28]
 8000b16:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b18:	4b49      	ldr	r3, [pc, #292]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b1e:	4a48      	ldr	r2, [pc, #288]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b24:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b28:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b32:	61bb      	str	r3, [r7, #24]
 8000b34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b36:	4b42      	ldr	r3, [pc, #264]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3c:	4a40      	ldr	r2, [pc, #256]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f043 0304 	orr.w	r3, r3, #4
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b46:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4c:	f003 0304 	and.w	r3, r3, #4
 8000b50:	617b      	str	r3, [r7, #20]
 8000b52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5a:	4a39      	ldr	r2, [pc, #228]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b64:	4b36      	ldr	r3, [pc, #216]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b78:	4a31      	ldr	r2, [pc, #196]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b7a:	f043 0302 	orr.w	r3, r3, #2
 8000b7e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b82:	4b2f      	ldr	r3, [pc, #188]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b88:	f003 0302 	and.w	r3, r3, #2
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b90:	4b2b      	ldr	r3, [pc, #172]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b96:	4a2a      	ldr	r2, [pc, #168]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000b98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba0:	4b27      	ldr	r3, [pc, #156]	@ (8000c40 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000baa:	60bb      	str	r3, [r7, #8]
 8000bac:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000bae:	2332      	movs	r3, #50	@ 0x32
 8000bb0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbe:	230b      	movs	r3, #11
 8000bc0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	481e      	ldr	r0, [pc, #120]	@ (8000c44 <HAL_ETH_MspInit+0x18c>)
 8000bca:	f000 fff1 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bce:	2386      	movs	r3, #134	@ 0x86
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <HAL_ETH_MspInit+0x190>)
 8000bea:	f000 ffe1 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c00:	230b      	movs	r3, #11
 8000c02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4810      	ldr	r0, [pc, #64]	@ (8000c4c <HAL_ETH_MspInit+0x194>)
 8000c0c:	f000 ffd0 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c10:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c22:	230b      	movs	r3, #11
 8000c24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4808      	ldr	r0, [pc, #32]	@ (8000c50 <HAL_ETH_MspInit+0x198>)
 8000c2e:	f000 ffbf 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	@ 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40028000 	.word	0x40028000
 8000c40:	58024400 	.word	0x58024400
 8000c44:	58020800 	.word	0x58020800
 8000c48:	58020000 	.word	0x58020000
 8000c4c:	58020400 	.word	0x58020400
 8000c50:	58021800 	.word	0x58021800

08000c54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b0ba      	sub	sp, #232	@ 0xe8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c6c:	f107 0310 	add.w	r3, r7, #16
 8000c70:	22c0      	movs	r2, #192	@ 0xc0
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f008 fa87 	bl	8009188 <memset>
  if(huart->Instance==USART3)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a27      	ldr	r2, [pc, #156]	@ (8000d1c <HAL_UART_MspInit+0xc8>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d146      	bne.n	8000d12 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c84:	f04f 0202 	mov.w	r2, #2
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c96:	f107 0310 	add.w	r3, r7, #16
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 fab2 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000ca6:	f7ff fee3 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cb6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cba:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cbc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cc4:	60fb      	str	r3, [r7, #12]
 8000cc6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc8:	4b15      	ldr	r3, [pc, #84]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	4a14      	ldr	r2, [pc, #80]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cd0:	f043 0308 	orr.w	r3, r3, #8
 8000cd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd8:	4b11      	ldr	r3, [pc, #68]	@ (8000d20 <HAL_UART_MspInit+0xcc>)
 8000cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cde:	f003 0308 	and.w	r3, r3, #8
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ce6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000cea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d00:	2307      	movs	r3, #7
 8000d02:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d06:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4805      	ldr	r0, [pc, #20]	@ (8000d24 <HAL_UART_MspInit+0xd0>)
 8000d0e:	f000 ff4f 	bl	8001bb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	37e8      	adds	r7, #232	@ 0xe8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004800 	.word	0x40004800
 8000d20:	58024400 	.word	0x58024400
 8000d24:	58020c00 	.word	0x58020c00

08000d28 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	22c0      	movs	r2, #192	@ 0xc0
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f008 fa1d 	bl	8009188 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a30      	ldr	r2, [pc, #192]	@ (8000e14 <HAL_PCD_MspInit+0xec>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d159      	bne.n	8000e0c <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d58:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d64:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6c:	f107 0310 	add.w	r3, r7, #16
 8000d70:	4618      	mov	r0, r3
 8000d72:	f002 fa47 	bl	8003204 <HAL_RCCEx_PeriphCLKConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d7c:	f7ff fe78 	bl	8000a70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d80:	f001 fa4a 	bl	8002218 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b24      	ldr	r3, [pc, #144]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a23      	ldr	r2, [pc, #140]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b20      	ldr	r3, [pc, #128]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000da2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000da6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000daa:	2302      	movs	r3, #2
 8000dac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db6:	2300      	movs	r3, #0
 8000db8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000dbc:	230a      	movs	r3, #10
 8000dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4814      	ldr	r0, [pc, #80]	@ (8000e1c <HAL_PCD_MspInit+0xf4>)
 8000dca:	f000 fef1 	bl	8001bb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000de6:	4619      	mov	r1, r3
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <HAL_PCD_MspInit+0xf4>)
 8000dea:	f000 fee1 	bl	8001bb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000dee:	4b0a      	ldr	r3, [pc, #40]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000df6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000dfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dfe:	4b06      	ldr	r3, [pc, #24]	@ (8000e18 <HAL_PCD_MspInit+0xf0>)
 8000e00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e08:	60bb      	str	r3, [r7, #8]
 8000e0a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e0c:	bf00      	nop
 8000e0e:	37e8      	adds	r7, #232	@ 0xe8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40080000 	.word	0x40080000
 8000e18:	58024400 	.word	0x58024400
 8000e1c:	58020000 	.word	0x58020000

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr

08000e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e5a:	f000 f92d 	bl	80010b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e5e:	f007 f919 	bl	8008094 <xTaskGetSchedulerState>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d001      	beq.n	8000e6c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000e68:	f007 ff0e 	bl	8008c88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e74:	4b37      	ldr	r3, [pc, #220]	@ (8000f54 <SystemInit+0xe4>)
 8000e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e7a:	4a36      	ldr	r2, [pc, #216]	@ (8000f54 <SystemInit+0xe4>)
 8000e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e84:	4b34      	ldr	r3, [pc, #208]	@ (8000f58 <SystemInit+0xe8>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 030f 	and.w	r3, r3, #15
 8000e8c:	2b06      	cmp	r3, #6
 8000e8e:	d807      	bhi.n	8000ea0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e90:	4b31      	ldr	r3, [pc, #196]	@ (8000f58 <SystemInit+0xe8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 030f 	bic.w	r3, r3, #15
 8000e98:	4a2f      	ldr	r2, [pc, #188]	@ (8000f58 <SystemInit+0xe8>)
 8000e9a:	f043 0307 	orr.w	r3, r3, #7
 8000e9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ea0:	4b2e      	ldr	r3, [pc, #184]	@ (8000f5c <SystemInit+0xec>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a2d      	ldr	r2, [pc, #180]	@ (8000f5c <SystemInit+0xec>)
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eac:	4b2b      	ldr	r3, [pc, #172]	@ (8000f5c <SystemInit+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000f5c <SystemInit+0xec>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4929      	ldr	r1, [pc, #164]	@ (8000f5c <SystemInit+0xec>)
 8000eb8:	4b29      	ldr	r3, [pc, #164]	@ (8000f60 <SystemInit+0xf0>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ebe:	4b26      	ldr	r3, [pc, #152]	@ (8000f58 <SystemInit+0xe8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0308 	and.w	r3, r3, #8
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d007      	beq.n	8000eda <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000eca:	4b23      	ldr	r3, [pc, #140]	@ (8000f58 <SystemInit+0xe8>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f023 030f 	bic.w	r3, r3, #15
 8000ed2:	4a21      	ldr	r2, [pc, #132]	@ (8000f58 <SystemInit+0xe8>)
 8000ed4:	f043 0307 	orr.w	r3, r3, #7
 8000ed8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000eda:	4b20      	ldr	r3, [pc, #128]	@ (8000f5c <SystemInit+0xec>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8000f5c <SystemInit+0xec>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ee6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f5c <SystemInit+0xec>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	@ (8000f5c <SystemInit+0xec>)
 8000eee:	4a1d      	ldr	r2, [pc, #116]	@ (8000f64 <SystemInit+0xf4>)
 8000ef0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f5c <SystemInit+0xec>)
 8000ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8000f68 <SystemInit+0xf8>)
 8000ef6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ef8:	4b18      	ldr	r3, [pc, #96]	@ (8000f5c <SystemInit+0xec>)
 8000efa:	4a1c      	ldr	r2, [pc, #112]	@ (8000f6c <SystemInit+0xfc>)
 8000efc:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000efe:	4b17      	ldr	r3, [pc, #92]	@ (8000f5c <SystemInit+0xec>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f04:	4b15      	ldr	r3, [pc, #84]	@ (8000f5c <SystemInit+0xec>)
 8000f06:	4a19      	ldr	r2, [pc, #100]	@ (8000f6c <SystemInit+0xfc>)
 8000f08:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f0a:	4b14      	ldr	r3, [pc, #80]	@ (8000f5c <SystemInit+0xec>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f10:	4b12      	ldr	r3, [pc, #72]	@ (8000f5c <SystemInit+0xec>)
 8000f12:	4a16      	ldr	r2, [pc, #88]	@ (8000f6c <SystemInit+0xfc>)
 8000f14:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f16:	4b11      	ldr	r3, [pc, #68]	@ (8000f5c <SystemInit+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000f5c <SystemInit+0xec>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <SystemInit+0xec>)
 8000f22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f28:	4b0c      	ldr	r3, [pc, #48]	@ (8000f5c <SystemInit+0xec>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f2e:	4b10      	ldr	r3, [pc, #64]	@ (8000f70 <SystemInit+0x100>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	4b10      	ldr	r3, [pc, #64]	@ (8000f74 <SystemInit+0x104>)
 8000f34:	4013      	ands	r3, r2
 8000f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f3a:	d202      	bcs.n	8000f42 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f78 <SystemInit+0x108>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f42:	4b0e      	ldr	r3, [pc, #56]	@ (8000f7c <SystemInit+0x10c>)
 8000f44:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f48:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr
 8000f54:	e000ed00 	.word	0xe000ed00
 8000f58:	52002000 	.word	0x52002000
 8000f5c:	58024400 	.word	0x58024400
 8000f60:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f64:	02020200 	.word	0x02020200
 8000f68:	01ff0000 	.word	0x01ff0000
 8000f6c:	01010280 	.word	0x01010280
 8000f70:	5c001000 	.word	0x5c001000
 8000f74:	ffff0000 	.word	0xffff0000
 8000f78:	51008108 	.word	0x51008108
 8000f7c:	52004000 	.word	0x52004000

08000f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f84:	f7ff ff74 	bl	8000e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480c      	ldr	r0, [pc, #48]	@ (8000fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f8a:	490d      	ldr	r1, [pc, #52]	@ (8000fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8000fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fae:	f008 f8f3 	bl	8009198 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fb2:	f7ff fb0d 	bl	80005d0 <main>
  bx  lr
 8000fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc0:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000fc4:	080092a4 	.word	0x080092a4
  ldr r2, =_sbss
 8000fc8:	240000d4 	.word	0x240000d4
  ldr r4, =_ebss
 8000fcc:	240050b0 	.word	0x240050b0

08000fd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd0:	e7fe      	b.n	8000fd0 <ADC3_IRQHandler>
	...

08000fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fda:	2003      	movs	r0, #3
 8000fdc:	f000 f982 	bl	80012e4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe0:	f001 ff3a 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	4b15      	ldr	r3, [pc, #84]	@ (800103c <HAL_Init+0x68>)
 8000fe8:	699b      	ldr	r3, [r3, #24]
 8000fea:	0a1b      	lsrs	r3, r3, #8
 8000fec:	f003 030f 	and.w	r3, r3, #15
 8000ff0:	4913      	ldr	r1, [pc, #76]	@ (8001040 <HAL_Init+0x6c>)
 8000ff2:	5ccb      	ldrb	r3, [r1, r3]
 8000ff4:	f003 031f 	and.w	r3, r3, #31
 8000ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8000ffc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800103c <HAL_Init+0x68>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <HAL_Init+0x6c>)
 8001008:	5cd3      	ldrb	r3, [r2, r3]
 800100a:	f003 031f 	and.w	r3, r3, #31
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	fa22 f303 	lsr.w	r3, r2, r3
 8001014:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_Init+0x70>)
 8001016:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001018:	4a0b      	ldr	r2, [pc, #44]	@ (8001048 <HAL_Init+0x74>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800101e:	200f      	movs	r0, #15
 8001020:	f000 f814 	bl	800104c <HAL_InitTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e002      	b.n	8001034 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800102e:	f7ff fd25 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
}
 8001034:	4618      	mov	r0, r3
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	58024400 	.word	0x58024400
 8001040:	0800925c 	.word	0x0800925c
 8001044:	24000004 	.word	0x24000004
 8001048:	24000000 	.word	0x24000000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_InitTick+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e021      	b.n	80010a4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001060:	4b13      	ldr	r3, [pc, #76]	@ (80010b0 <HAL_InitTick+0x64>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b11      	ldr	r3, [pc, #68]	@ (80010ac <HAL_InitTick+0x60>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	4619      	mov	r1, r3
 800106a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800106e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001072:	fbb2 f3f3 	udiv	r3, r2, r3
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f959 	bl	800132e <HAL_SYSTICK_Config>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e00e      	b.n	80010a4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2b0f      	cmp	r3, #15
 800108a:	d80a      	bhi.n	80010a2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800108c:	2200      	movs	r2, #0
 800108e:	6879      	ldr	r1, [r7, #4]
 8001090:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001094:	f000 f931 	bl	80012fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001098:	4a06      	ldr	r2, [pc, #24]	@ (80010b4 <HAL_InitTick+0x68>)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
 80010a0:	e000      	b.n	80010a4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010a2:	2301      	movs	r3, #1
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2400000c 	.word	0x2400000c
 80010b0:	24000000 	.word	0x24000000
 80010b4:	24000008 	.word	0x24000008

080010b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <HAL_IncTick+0x20>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_IncTick+0x24>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4413      	add	r3, r2
 80010c8:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <HAL_IncTick+0x24>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	2400000c 	.word	0x2400000c
 80010dc:	2400075c 	.word	0x2400075c

080010e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  return uwTick;
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_GetTick+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	2400075c 	.word	0x2400075c

080010f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b084      	sub	sp, #16
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001100:	f7ff ffee 	bl	80010e0 <HAL_GetTick>
 8001104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001110:	d005      	beq.n	800111e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001112:	4b0a      	ldr	r3, [pc, #40]	@ (800113c <HAL_Delay+0x44>)
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	461a      	mov	r2, r3
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4413      	add	r3, r2
 800111c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800111e:	bf00      	nop
 8001120:	f7ff ffde 	bl	80010e0 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	68bb      	ldr	r3, [r7, #8]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	68fa      	ldr	r2, [r7, #12]
 800112c:	429a      	cmp	r2, r3
 800112e:	d8f7      	bhi.n	8001120 <HAL_Delay+0x28>
  {
  }
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3710      	adds	r7, #16
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2400000c 	.word	0x2400000c

08001140 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <HAL_GetREVID+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	0c1b      	lsrs	r3, r3, #16
}
 800114a:	4618      	mov	r0, r3
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	5c001000 	.word	0x5c001000

08001158 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001160:	4b06      	ldr	r3, [pc, #24]	@ (800117c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001168:	4904      	ldr	r1, [pc, #16]	@ (800117c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	604b      	str	r3, [r1, #4]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	58000400 	.word	0x58000400

08001180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800119c:	4013      	ands	r3, r2
 800119e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011a8:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	4313      	orrs	r3, r2
 80011ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ae:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <__NVIC_SetPriorityGrouping+0x40>)
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	60d3      	str	r3, [r2, #12]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	05fa0000 	.word	0x05fa0000

080011c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011cc:	4b04      	ldr	r3, [pc, #16]	@ (80011e0 <__NVIC_GetPriorityGrouping+0x18>)
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	0a1b      	lsrs	r3, r3, #8
 80011d2:	f003 0307 	and.w	r3, r3, #7
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b083      	sub	sp, #12
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	db0a      	blt.n	800120e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	b2da      	uxtb	r2, r3
 80011fc:	490c      	ldr	r1, [pc, #48]	@ (8001230 <__NVIC_SetPriority+0x4c>)
 80011fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001202:	0112      	lsls	r2, r2, #4
 8001204:	b2d2      	uxtb	r2, r2
 8001206:	440b      	add	r3, r1
 8001208:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800120c:	e00a      	b.n	8001224 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4908      	ldr	r1, [pc, #32]	@ (8001234 <__NVIC_SetPriority+0x50>)
 8001214:	88fb      	ldrh	r3, [r7, #6]
 8001216:	f003 030f 	and.w	r3, r3, #15
 800121a:	3b04      	subs	r3, #4
 800121c:	0112      	lsls	r2, r2, #4
 800121e:	b2d2      	uxtb	r2, r2
 8001220:	440b      	add	r3, r1
 8001222:	761a      	strb	r2, [r3, #24]
}
 8001224:	bf00      	nop
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	e000e100 	.word	0xe000e100
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001238:	b480      	push	{r7}
 800123a:	b089      	sub	sp, #36	@ 0x24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	f1c3 0307 	rsb	r3, r3, #7
 8001252:	2b04      	cmp	r3, #4
 8001254:	bf28      	it	cs
 8001256:	2304      	movcs	r3, #4
 8001258:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3304      	adds	r3, #4
 800125e:	2b06      	cmp	r3, #6
 8001260:	d902      	bls.n	8001268 <NVIC_EncodePriority+0x30>
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3b03      	subs	r3, #3
 8001266:	e000      	b.n	800126a <NVIC_EncodePriority+0x32>
 8001268:	2300      	movs	r3, #0
 800126a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800126c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	401a      	ands	r2, r3
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001280:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	fa01 f303 	lsl.w	r3, r1, r3
 800128a:	43d9      	mvns	r1, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001290:	4313      	orrs	r3, r2
         );
}
 8001292:	4618      	mov	r0, r3
 8001294:	3724      	adds	r7, #36	@ 0x24
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
	...

080012a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b0:	d301      	bcc.n	80012b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00f      	b.n	80012d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b6:	4a0a      	ldr	r2, [pc, #40]	@ (80012e0 <SysTick_Config+0x40>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012be:	210f      	movs	r1, #15
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012c4:	f7ff ff8e 	bl	80011e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c8:	4b05      	ldr	r3, [pc, #20]	@ (80012e0 <SysTick_Config+0x40>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ce:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <SysTick_Config+0x40>)
 80012d0:	2207      	movs	r2, #7
 80012d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	e000e010 	.word	0xe000e010

080012e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff ff47 	bl	8001180 <__NVIC_SetPriorityGrouping>
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b086      	sub	sp, #24
 80012fe:	af00      	add	r7, sp, #0
 8001300:	4603      	mov	r3, r0
 8001302:	60b9      	str	r1, [r7, #8]
 8001304:	607a      	str	r2, [r7, #4]
 8001306:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001308:	f7ff ff5e 	bl	80011c8 <__NVIC_GetPriorityGrouping>
 800130c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	68b9      	ldr	r1, [r7, #8]
 8001312:	6978      	ldr	r0, [r7, #20]
 8001314:	f7ff ff90 	bl	8001238 <NVIC_EncodePriority>
 8001318:	4602      	mov	r2, r0
 800131a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131e:	4611      	mov	r1, r2
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff5f 	bl	80011e4 <__NVIC_SetPriority>
}
 8001326:	bf00      	nop
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffb2 	bl	80012a0 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d101      	bne.n	800135a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	e0e3      	b.n	8001522 <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001360:	2b00      	cmp	r3, #0
 8001362:	d106      	bne.n	8001372 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2223      	movs	r2, #35	@ 0x23
 8001368:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f7ff fba3 	bl	8000ab8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b6e      	ldr	r3, [pc, #440]	@ (800152c <HAL_ETH_Init+0x1e4>)
 8001374:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001378:	4a6c      	ldr	r2, [pc, #432]	@ (800152c <HAL_ETH_Init+0x1e4>)
 800137a:	f043 0302 	orr.w	r3, r3, #2
 800137e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001382:	4b6a      	ldr	r3, [pc, #424]	@ (800152c <HAL_ETH_Init+0x1e4>)
 8001384:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	7a1b      	ldrb	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d103      	bne.n	80013a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001398:	2000      	movs	r0, #0
 800139a:	f7ff fedd 	bl	8001158 <HAL_SYSCFG_ETHInterfaceSelect>
 800139e:	e003      	b.n	80013a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013a0:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013a4:	f7ff fed8 	bl	8001158 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013a8:	4b61      	ldr	r3, [pc, #388]	@ (8001530 <HAL_ETH_Init+0x1e8>)
 80013aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	f043 0301 	orr.w	r3, r3, #1
 80013be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013c4:	f7ff fe8c 	bl	80010e0 <HAL_GetTick>
 80013c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013ca:	e011      	b.n	80013f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013cc:	f7ff fe88 	bl	80010e0 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013da:	d909      	bls.n	80013f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2204      	movs	r2, #4
 80013e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	22e0      	movs	r2, #224	@ 0xe0
 80013e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e098      	b.n	8001522 <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1e4      	bne.n	80013cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f000 f89e 	bl	8001544 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001408:	f001 fea0 	bl	800314c <HAL_RCC_GetHCLKFreq>
 800140c:	4603      	mov	r3, r0
 800140e:	4a49      	ldr	r2, [pc, #292]	@ (8001534 <HAL_ETH_Init+0x1ec>)
 8001410:	fba2 2303 	umull	r2, r3, r2, r3
 8001414:	0c9a      	lsrs	r2, r3, #18
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	3a01      	subs	r2, #1
 800141c:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fa81 	bl	8001928 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800142e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001432:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	6812      	ldr	r2, [r2, #0]
 800143a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800143e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001442:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	f003 0303 	and.w	r3, r3, #3
 800144e:	2b00      	cmp	r3, #0
 8001450:	d009      	beq.n	8001466 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	22e0      	movs	r2, #224	@ 0xe0
 800145e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e05d      	b.n	8001522 <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800146e:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001472:	4b31      	ldr	r3, [pc, #196]	@ (8001538 <HAL_ETH_Init+0x1f0>)
 8001474:	4013      	ands	r3, r2
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	6952      	ldr	r2, [r2, #20]
 800147a:	0051      	lsls	r1, r2, #1
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	430b      	orrs	r3, r1
 8001482:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001486:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fae9 	bl	8001a62 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f000 fb2f 	bl	8001af4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	3305      	adds	r3, #5
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	021a      	lsls	r2, r3, #8
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	3304      	adds	r3, #4
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	430a      	orrs	r2, r1
 80014b0:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	3303      	adds	r3, #3
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	061a      	lsls	r2, r3, #24
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	3302      	adds	r3, #2
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	041b      	lsls	r3, r3, #16
 80014c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	3301      	adds	r3, #1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e4:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	4b11      	ldr	r3, [pc, #68]	@ (800153c <HAL_ETH_Init+0x1f4>)
 80014f6:	430b      	orrs	r3, r1
 80014f8:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <HAL_ETH_Init+0x1f8>)
 800150a:	430b      	orrs	r3, r1
 800150c:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2210      	movs	r2, #16
 800151c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	58024400 	.word	0x58024400
 8001530:	58000400 	.word	0x58000400
 8001534:	431bde83 	.word	0x431bde83
 8001538:	ffff8001 	.word	0xffff8001
 800153c:	0c020060 	.word	0x0c020060
 8001540:	0c20c000 	.word	0x0c20c000

08001544 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001554:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800155c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800155e:	f001 fdf5 	bl	800314c <HAL_RCC_GetHCLKFreq>
 8001562:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4a1a      	ldr	r2, [pc, #104]	@ (80015d0 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d804      	bhi.n	8001576 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	e022      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4a16      	ldr	r2, [pc, #88]	@ (80015d4 <HAL_ETH_SetMDIOClockRange+0x90>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d204      	bcs.n	8001588 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001584:	60fb      	str	r3, [r7, #12]
 8001586:	e019      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4a13      	ldr	r2, [pc, #76]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x94>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d915      	bls.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4a12      	ldr	r2, [pc, #72]	@ (80015dc <HAL_ETH_SetMDIOClockRange+0x98>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d804      	bhi.n	80015a2 <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e00c      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d804      	bhi.n	80015b4 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e003      	b.n	80015bc <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015ba:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015c6:	bf00      	nop
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	02160ebf 	.word	0x02160ebf
 80015d4:	03938700 	.word	0x03938700
 80015d8:	05f5e0ff 	.word	0x05f5e0ff
 80015dc:	08f0d17f 	.word	0x08f0d17f
 80015e0:	0ee6b27f 	.word	0x0ee6b27f

080015e4 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	791b      	ldrb	r3, [r3, #4]
 80015fc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	7b1b      	ldrb	r3, [r3, #12]
 8001604:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b5b      	ldrb	r3, [r3, #13]
 800160c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b9b      	ldrb	r3, [r3, #14]
 8001614:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7bdb      	ldrb	r3, [r3, #15]
 800161c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800161e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	7c12      	ldrb	r2, [r2, #16]
 8001624:	2a00      	cmp	r2, #0
 8001626:	d102      	bne.n	800162e <ETH_SetMACConfig+0x4a>
 8001628:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800162c:	e000      	b.n	8001630 <ETH_SetMACConfig+0x4c>
 800162e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001630:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001632:	683a      	ldr	r2, [r7, #0]
 8001634:	7c52      	ldrb	r2, [r2, #17]
 8001636:	2a00      	cmp	r2, #0
 8001638:	d102      	bne.n	8001640 <ETH_SetMACConfig+0x5c>
 800163a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800163e:	e000      	b.n	8001642 <ETH_SetMACConfig+0x5e>
 8001640:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001642:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	7c9b      	ldrb	r3, [r3, #18]
 8001648:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800164a:	431a      	orrs	r2, r3
               macconf->Speed |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001650:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	7f1b      	ldrb	r3, [r3, #28]
 800165c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7f5b      	ldrb	r3, [r3, #29]
 8001664:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001666:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001668:	683a      	ldr	r2, [r7, #0]
 800166a:	7f92      	ldrb	r2, [r2, #30]
 800166c:	2a00      	cmp	r2, #0
 800166e:	d102      	bne.n	8001676 <ETH_SetMACConfig+0x92>
 8001670:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001674:	e000      	b.n	8001678 <ETH_SetMACConfig+0x94>
 8001676:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001678:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	7fdb      	ldrb	r3, [r3, #31]
 800167e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001680:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001688:	2a00      	cmp	r2, #0
 800168a:	d102      	bne.n	8001692 <ETH_SetMACConfig+0xae>
 800168c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001690:	e000      	b.n	8001694 <ETH_SetMACConfig+0xb0>
 8001692:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001694:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800169a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016a2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016a4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b56      	ldr	r3, [pc, #344]	@ (8001810 <ETH_SetMACConfig+0x22c>)
 80016b6:	4013      	ands	r3, r2
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6812      	ldr	r2, [r2, #0]
 80016bc:	68f9      	ldr	r1, [r7, #12]
 80016be:	430b      	orrs	r3, r1
 80016c0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016c6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016ce:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016d8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016e2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016e4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016ec:	2a00      	cmp	r2, #0
 80016ee:	d102      	bne.n	80016f6 <ETH_SetMACConfig+0x112>
 80016f0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016f4:	e000      	b.n	80016f8 <ETH_SetMACConfig+0x114>
 80016f6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016f8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016fe:	4313      	orrs	r3, r2
 8001700:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4b42      	ldr	r3, [pc, #264]	@ (8001814 <ETH_SetMACConfig+0x230>)
 800170a:	4013      	ands	r3, r2
 800170c:	687a      	ldr	r2, [r7, #4]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	68f9      	ldr	r1, [r7, #12]
 8001712:	430b      	orrs	r3, r1
 8001714:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800171c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001722:	4313      	orrs	r3, r2
 8001724:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	4b3a      	ldr	r3, [pc, #232]	@ (8001818 <ETH_SetMACConfig+0x234>)
 800172e:	4013      	ands	r3, r2
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	6812      	ldr	r2, [r2, #0]
 8001734:	68f9      	ldr	r1, [r7, #12]
 8001736:	430b      	orrs	r3, r1
 8001738:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001740:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001746:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800174e:	2a00      	cmp	r2, #0
 8001750:	d101      	bne.n	8001756 <ETH_SetMACConfig+0x172>
 8001752:	2280      	movs	r2, #128	@ 0x80
 8001754:	e000      	b.n	8001758 <ETH_SetMACConfig+0x174>
 8001756:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001758:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800175e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800176a:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800176e:	4013      	ands	r3, r2
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	6812      	ldr	r2, [r2, #0]
 8001774:	68f9      	ldr	r1, [r7, #12]
 8001776:	430b      	orrs	r3, r1
 8001778:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001780:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001788:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800178a:	4313      	orrs	r3, r2
 800178c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001796:	f023 0103 	bic.w	r1, r3, #3
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017ae:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	430a      	orrs	r2, r1
 80017bc:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017c4:	683a      	ldr	r2, [r7, #0]
 80017c6:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017ca:	2a00      	cmp	r2, #0
 80017cc:	d101      	bne.n	80017d2 <ETH_SetMACConfig+0x1ee>
 80017ce:	2240      	movs	r2, #64	@ 0x40
 80017d0:	e000      	b.n	80017d4 <ETH_SetMACConfig+0x1f0>
 80017d2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017d4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017dc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017e6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017e8:	4313      	orrs	r3, r2
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017f4:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	430a      	orrs	r2, r1
 8001800:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001804:	bf00      	nop
 8001806:	3714      	adds	r7, #20
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	00048083 	.word	0x00048083
 8001814:	c0f88000 	.word	0xc0f88000
 8001818:	fffffef0 	.word	0xfffffef0

0800181c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
 8001824:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	4b38      	ldr	r3, [pc, #224]	@ (8001914 <ETH_SetDMAConfig+0xf8>)
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	6811      	ldr	r1, [r2, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	6812      	ldr	r2, [r2, #0]
 800183c:	430b      	orrs	r3, r1
 800183e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001842:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	791b      	ldrb	r3, [r3, #4]
 8001848:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800184e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	7b1b      	ldrb	r3, [r3, #12]
 8001854:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001856:	4313      	orrs	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	4b2c      	ldr	r3, [pc, #176]	@ (8001918 <ETH_SetDMAConfig+0xfc>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	68f9      	ldr	r1, [r7, #12]
 800186e:	430b      	orrs	r3, r1
 8001870:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001874:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	7b5b      	ldrb	r3, [r3, #13]
 800187a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001880:	4313      	orrs	r3, r2
 8001882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188c:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001890:	4b22      	ldr	r3, [pc, #136]	@ (800191c <ETH_SetDMAConfig+0x100>)
 8001892:	4013      	ands	r3, r2
 8001894:	687a      	ldr	r2, [r7, #4]
 8001896:	6812      	ldr	r2, [r2, #0]
 8001898:	68f9      	ldr	r1, [r7, #12]
 800189a:	430b      	orrs	r3, r1
 800189c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	7d1b      	ldrb	r3, [r3, #20]
 80018ac:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ae:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7f5b      	ldrb	r3, [r3, #29]
 80018b4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b6:	4313      	orrs	r3, r2
 80018b8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018c2:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018c6:	4b16      	ldr	r3, [pc, #88]	@ (8001920 <ETH_SetDMAConfig+0x104>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6812      	ldr	r2, [r2, #0]
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	430b      	orrs	r3, r1
 80018d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	7f1b      	ldrb	r3, [r3, #28]
 80018de:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e4:	4313      	orrs	r3, r2
 80018e6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f0:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001924 <ETH_SetDMAConfig+0x108>)
 80018f6:	4013      	ands	r3, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	68f9      	ldr	r1, [r7, #12]
 80018fe:	430b      	orrs	r3, r1
 8001900:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001904:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	ffff87fd 	.word	0xffff87fd
 8001918:	ffff2ffe 	.word	0xffff2ffe
 800191c:	fffec000 	.word	0xfffec000
 8001920:	ffc0efef 	.word	0xffc0efef
 8001924:	7fc0ffff 	.word	0x7fc0ffff

08001928 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b0a4      	sub	sp, #144	@ 0x90
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001936:	2300      	movs	r3, #0
 8001938:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800193a:	2300      	movs	r3, #0
 800193c:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001946:	2301      	movs	r3, #1
 8001948:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800194c:	2301      	movs	r3, #1
 800194e:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001952:	2301      	movs	r3, #1
 8001954:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800195e:	2301      	movs	r3, #1
 8001960:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001964:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001968:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001970:	2300      	movs	r3, #0
 8001972:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001980:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001984:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800198c:	2300      	movs	r3, #0
 800198e:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001990:	2301      	movs	r3, #1
 8001992:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019a2:	2300      	movs	r3, #0
 80019a4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019a6:	2300      	movs	r3, #0
 80019a8:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019aa:	2300      	movs	r3, #0
 80019ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019ba:	2301      	movs	r3, #1
 80019bc:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019c0:	2320      	movs	r3, #32
 80019c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019c6:	2301      	movs	r3, #1
 80019c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019cc:	2300      	movs	r3, #0
 80019ce:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019d2:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019dc:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019de:	2300      	movs	r3, #0
 80019e0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019e4:	2302      	movs	r3, #2
 80019e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019fc:	2301      	movs	r3, #1
 80019fe:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a02:	2300      	movs	r3, #0
 8001a04:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a10:	4619      	mov	r1, r3
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff fde6 	bl	80015e4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a32:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a36:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a40:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a48:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	4619      	mov	r1, r3
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fee1 	bl	800181c <ETH_SetDMAConfig>
}
 8001a5a:	bf00      	nop
 8001a5c:	3790      	adds	r7, #144	@ 0x90
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b085      	sub	sp, #20
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60fb      	str	r3, [r7, #12]
 8001a6e:	e01d      	b.n	8001aac <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68d9      	ldr	r1, [r3, #12]
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	4613      	mov	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	4413      	add	r3, r2
 8001a7c:	00db      	lsls	r3, r3, #3
 8001a7e:	440b      	add	r3, r1
 8001a80:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a9a:	68b9      	ldr	r1, [r7, #8]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	3206      	adds	r2, #6
 8001aa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d9de      	bls.n	8001a70 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	68da      	ldr	r2, [r3, #12]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ad4:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68da      	ldr	r2, [r3, #12]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ae4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ae8:	bf00      	nop
 8001aea:	3714      	adds	r7, #20
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b085      	sub	sp, #20
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	e023      	b.n	8001b4a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6919      	ldr	r1, [r3, #16]
 8001b06:	68fa      	ldr	r2, [r7, #12]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	4413      	add	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	440b      	add	r3, r1
 8001b12:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2200      	movs	r2, #0
 8001b18:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	2200      	movs	r2, #0
 8001b36:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	3212      	adds	r2, #18
 8001b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	3301      	adds	r3, #1
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b03      	cmp	r3, #3
 8001b4e:	d9d8      	bls.n	8001b02 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b76:	461a      	mov	r2, r3
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	691a      	ldr	r2, [r3, #16]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b9e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001ba2:	bf00      	nop
 8001ba4:	3714      	adds	r7, #20
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
	...

08001bb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	@ 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bbe:	4b89      	ldr	r3, [pc, #548]	@ (8001de4 <HAL_GPIO_Init+0x234>)
 8001bc0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bc2:	e194      	b.n	8001eee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	2101      	movs	r1, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8186 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d005      	beq.n	8001bf4 <HAL_GPIO_Init+0x44>
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 0303 	and.w	r3, r3, #3
 8001bf0:	2b02      	cmp	r3, #2
 8001bf2:	d130      	bne.n	8001c56 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68da      	ldr	r2, [r3, #12]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	091b      	lsrs	r3, r3, #4
 8001c40:	f003 0201 	and.w	r2, r3, #1
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f003 0303 	and.w	r3, r3, #3
 8001c5e:	2b03      	cmp	r3, #3
 8001c60:	d017      	beq.n	8001c92 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	69ba      	ldr	r2, [r7, #24]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d123      	bne.n	8001ce6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	08da      	lsrs	r2, r3, #3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	3208      	adds	r2, #8
 8001ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001caa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cac:	69fb      	ldr	r3, [r7, #28]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	009b      	lsls	r3, r3, #2
 8001cb4:	220f      	movs	r2, #15
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	f003 0307 	and.w	r3, r3, #7
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	08da      	lsrs	r2, r3, #3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3208      	adds	r2, #8
 8001ce0:	69b9      	ldr	r1, [r7, #24]
 8001ce2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	f003 0203 	and.w	r2, r3, #3
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	f000 80e0 	beq.w	8001ee8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d28:	4b2f      	ldr	r3, [pc, #188]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d38:	4b2b      	ldr	r3, [pc, #172]	@ (8001de8 <HAL_GPIO_Init+0x238>)
 8001d3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d46:	4a29      	ldr	r2, [pc, #164]	@ (8001dec <HAL_GPIO_Init+0x23c>)
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	220f      	movs	r2, #15
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a20      	ldr	r2, [pc, #128]	@ (8001df0 <HAL_GPIO_Init+0x240>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d052      	beq.n	8001e18 <HAL_GPIO_Init+0x268>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a1f      	ldr	r2, [pc, #124]	@ (8001df4 <HAL_GPIO_Init+0x244>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d031      	beq.n	8001dde <HAL_GPIO_Init+0x22e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001df8 <HAL_GPIO_Init+0x248>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d02b      	beq.n	8001dda <HAL_GPIO_Init+0x22a>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1d      	ldr	r2, [pc, #116]	@ (8001dfc <HAL_GPIO_Init+0x24c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d025      	beq.n	8001dd6 <HAL_GPIO_Init+0x226>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e00 <HAL_GPIO_Init+0x250>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d01f      	beq.n	8001dd2 <HAL_GPIO_Init+0x222>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1b      	ldr	r2, [pc, #108]	@ (8001e04 <HAL_GPIO_Init+0x254>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d019      	beq.n	8001dce <HAL_GPIO_Init+0x21e>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001e08 <HAL_GPIO_Init+0x258>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d013      	beq.n	8001dca <HAL_GPIO_Init+0x21a>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a19      	ldr	r2, [pc, #100]	@ (8001e0c <HAL_GPIO_Init+0x25c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00d      	beq.n	8001dc6 <HAL_GPIO_Init+0x216>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a18      	ldr	r2, [pc, #96]	@ (8001e10 <HAL_GPIO_Init+0x260>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d007      	beq.n	8001dc2 <HAL_GPIO_Init+0x212>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a17      	ldr	r2, [pc, #92]	@ (8001e14 <HAL_GPIO_Init+0x264>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d101      	bne.n	8001dbe <HAL_GPIO_Init+0x20e>
 8001dba:	2309      	movs	r3, #9
 8001dbc:	e02d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dbe:	230a      	movs	r3, #10
 8001dc0:	e02b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc2:	2308      	movs	r3, #8
 8001dc4:	e029      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e027      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dca:	2306      	movs	r3, #6
 8001dcc:	e025      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dce:	2305      	movs	r3, #5
 8001dd0:	e023      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd2:	2304      	movs	r3, #4
 8001dd4:	e021      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e01f      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dda:	2302      	movs	r3, #2
 8001ddc:	e01d      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e01b      	b.n	8001e1a <HAL_GPIO_Init+0x26a>
 8001de2:	bf00      	nop
 8001de4:	58000080 	.word	0x58000080
 8001de8:	58024400 	.word	0x58024400
 8001dec:	58000400 	.word	0x58000400
 8001df0:	58020000 	.word	0x58020000
 8001df4:	58020400 	.word	0x58020400
 8001df8:	58020800 	.word	0x58020800
 8001dfc:	58020c00 	.word	0x58020c00
 8001e00:	58021000 	.word	0x58021000
 8001e04:	58021400 	.word	0x58021400
 8001e08:	58021800 	.word	0x58021800
 8001e0c:	58021c00 	.word	0x58021c00
 8001e10:	58022000 	.word	0x58022000
 8001e14:	58022400 	.word	0x58022400
 8001e18:	2300      	movs	r3, #0
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f002 0203 	and.w	r2, r2, #3
 8001e20:	0092      	lsls	r2, r2, #2
 8001e22:	4093      	lsls	r3, r2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e2a:	4938      	ldr	r1, [pc, #224]	@ (8001f0c <HAL_GPIO_Init+0x35c>)
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	089b      	lsrs	r3, r3, #2
 8001e30:	3302      	adds	r3, #2
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4013      	ands	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d003      	beq.n	8001e8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	43db      	mvns	r3, r3
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d003      	beq.n	8001eb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	3301      	adds	r3, #1
 8001eec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f47f ae63 	bne.w	8001bc4 <HAL_GPIO_Init+0x14>
  }
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3724      	adds	r7, #36	@ 0x24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	58000400 	.word	0x58000400

08001f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	460b      	mov	r3, r1
 8001f1a:	807b      	strh	r3, [r7, #2]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f20:	787b      	ldrb	r3, [r7, #1]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f26:	887a      	ldrh	r2, [r7, #2]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f2c:	e003      	b.n	8001f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	619a      	str	r2, [r3, #24]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af02      	add	r7, sp, #8
 8001f48:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0fe      	b.n	8002152 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d106      	bne.n	8001f6e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7fe fedd 	bl	8000d28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f004 f8bc 	bl	80060f8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6818      	ldr	r0, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	7c1a      	ldrb	r2, [r3, #16]
 8001f88:	f88d 2000 	strb.w	r2, [sp]
 8001f8c:	3304      	adds	r3, #4
 8001f8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f90:	f004 f840 	bl	8006014 <USB_CoreInit>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d005      	beq.n	8001fa6 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0d5      	b.n	8002152 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	2100      	movs	r1, #0
 8001fac:	4618      	mov	r0, r3
 8001fae:	f004 f8b4 	bl	800611a <USB_SetCurrentMode>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d005      	beq.n	8001fc4 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0c6      	b.n	8002152 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e04a      	b.n	8002060 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	3315      	adds	r3, #21
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	3314      	adds	r3, #20
 8001fee:	7bfa      	ldrb	r2, [r7, #15]
 8001ff0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	7bfb      	ldrb	r3, [r7, #15]
 8001ff6:	b298      	uxth	r0, r3
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	332e      	adds	r3, #46	@ 0x2e
 8002006:	4602      	mov	r2, r0
 8002008:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	3318      	adds	r3, #24
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800201e:	7bfa      	ldrb	r2, [r7, #15]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4413      	add	r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	331c      	adds	r3, #28
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002032:	7bfa      	ldrb	r2, [r7, #15]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	3320      	adds	r3, #32
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002046:	7bfa      	ldrb	r2, [r7, #15]
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4413      	add	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	440b      	add	r3, r1
 8002054:	3324      	adds	r3, #36	@ 0x24
 8002056:	2200      	movs	r2, #0
 8002058:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800205a:	7bfb      	ldrb	r3, [r7, #15]
 800205c:	3301      	adds	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	791b      	ldrb	r3, [r3, #4]
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	429a      	cmp	r2, r3
 8002068:	d3af      	bcc.n	8001fca <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800206a:	2300      	movs	r3, #0
 800206c:	73fb      	strb	r3, [r7, #15]
 800206e:	e044      	b.n	80020fa <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002070:	7bfa      	ldrb	r2, [r7, #15]
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002086:	7bfa      	ldrb	r2, [r7, #15]
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002098:	7bfa      	ldrb	r2, [r7, #15]
 800209a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020ae:	2200      	movs	r2, #0
 80020b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4413      	add	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	440b      	add	r3, r1
 80020c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020da:	2200      	movs	r2, #0
 80020dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020de:	7bfa      	ldrb	r2, [r7, #15]
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	4613      	mov	r3, r2
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020f4:	7bfb      	ldrb	r3, [r7, #15]
 80020f6:	3301      	adds	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	791b      	ldrb	r3, [r3, #4]
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	429a      	cmp	r2, r3
 8002102:	d3b5      	bcc.n	8002070 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	7c1a      	ldrb	r2, [r3, #16]
 800210c:	f88d 2000 	strb.w	r2, [sp]
 8002110:	3304      	adds	r3, #4
 8002112:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002114:	f004 f84e 	bl	80061b4 <USB_DevInit>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d005      	beq.n	800212a <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2202      	movs	r2, #2
 8002122:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e013      	b.n	8002152 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2201      	movs	r2, #1
 8002134:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	7b1b      	ldrb	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d102      	bne.n	8002146 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f000 f80b 	bl	800215c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f004 fa09 	bl	8006562 <USB_DevDisconnect>

  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800215c:	b480      	push	{r7}
 800215e:	b085      	sub	sp, #20
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	699b      	ldr	r3, [r3, #24]
 800217e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_PCDEx_ActivateLPM+0x44>)
 800218c:	4313      	orrs	r3, r2
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	10000003 	.word	0x10000003

080021a4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_PWREx_ConfigSupply+0x70>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 0304 	and.w	r3, r3, #4
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d00a      	beq.n	80021ce <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021b8:	4b16      	ldr	r3, [pc, #88]	@ (8002214 <HAL_PWREx_ConfigSupply+0x70>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d001      	beq.n	80021ca <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e01f      	b.n	800220a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021ca:	2300      	movs	r3, #0
 80021cc:	e01d      	b.n	800220a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021ce:	4b11      	ldr	r3, [pc, #68]	@ (8002214 <HAL_PWREx_ConfigSupply+0x70>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f023 0207 	bic.w	r2, r3, #7
 80021d6:	490f      	ldr	r1, [pc, #60]	@ (8002214 <HAL_PWREx_ConfigSupply+0x70>)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4313      	orrs	r3, r2
 80021dc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021de:	f7fe ff7f 	bl	80010e0 <HAL_GetTick>
 80021e2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021e4:	e009      	b.n	80021fa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021e6:	f7fe ff7b 	bl	80010e0 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f4:	d901      	bls.n	80021fa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e007      	b.n	800220a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_PWREx_ConfigSupply+0x70>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002202:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002206:	d1ee      	bne.n	80021e6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	58024800 	.word	0x58024800

08002218 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002218:	b480      	push	{r7}
 800221a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800221c:	4b05      	ldr	r3, [pc, #20]	@ (8002234 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002222:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	58024800 	.word	0x58024800

08002238 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08c      	sub	sp, #48	@ 0x30
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	f000 bc48 	b.w	8002adc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 8088 	beq.w	800236a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225a:	4b99      	ldr	r3, [pc, #612]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002264:	4b96      	ldr	r3, [pc, #600]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800226a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800226c:	2b10      	cmp	r3, #16
 800226e:	d007      	beq.n	8002280 <HAL_RCC_OscConfig+0x48>
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	2b18      	cmp	r3, #24
 8002274:	d111      	bne.n	800229a <HAL_RCC_OscConfig+0x62>
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	f003 0303 	and.w	r3, r3, #3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d10c      	bne.n	800229a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002280:	4b8f      	ldr	r3, [pc, #572]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d06d      	beq.n	8002368 <HAL_RCC_OscConfig+0x130>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d169      	bne.n	8002368 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f000 bc21 	b.w	8002adc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022a2:	d106      	bne.n	80022b2 <HAL_RCC_OscConfig+0x7a>
 80022a4:	4b86      	ldr	r3, [pc, #536]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a85      	ldr	r2, [pc, #532]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e02e      	b.n	8002310 <HAL_RCC_OscConfig+0xd8>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCC_OscConfig+0x9c>
 80022ba:	4b81      	ldr	r3, [pc, #516]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a80      	ldr	r2, [pc, #512]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b7e      	ldr	r3, [pc, #504]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a7d      	ldr	r2, [pc, #500]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d0:	6013      	str	r3, [r2, #0]
 80022d2:	e01d      	b.n	8002310 <HAL_RCC_OscConfig+0xd8>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022dc:	d10c      	bne.n	80022f8 <HAL_RCC_OscConfig+0xc0>
 80022de:	4b78      	ldr	r3, [pc, #480]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a77      	ldr	r2, [pc, #476]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022e8:	6013      	str	r3, [r2, #0]
 80022ea:	4b75      	ldr	r3, [pc, #468]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a74      	ldr	r2, [pc, #464]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022f4:	6013      	str	r3, [r2, #0]
 80022f6:	e00b      	b.n	8002310 <HAL_RCC_OscConfig+0xd8>
 80022f8:	4b71      	ldr	r3, [pc, #452]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a70      	ldr	r2, [pc, #448]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80022fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002302:	6013      	str	r3, [r2, #0]
 8002304:	4b6e      	ldr	r3, [pc, #440]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a6d      	ldr	r2, [pc, #436]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800230a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800230e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d013      	beq.n	8002340 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002318:	f7fe fee2 	bl	80010e0 <HAL_GetTick>
 800231c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800231e:	e008      	b.n	8002332 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002320:	f7fe fede 	bl	80010e0 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b64      	cmp	r3, #100	@ 0x64
 800232c:	d901      	bls.n	8002332 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e3d4      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002332:	4b63      	ldr	r3, [pc, #396]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d0f0      	beq.n	8002320 <HAL_RCC_OscConfig+0xe8>
 800233e:	e014      	b.n	800236a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fece 	bl	80010e0 <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002348:	f7fe feca 	bl	80010e0 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b64      	cmp	r3, #100	@ 0x64
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e3c0      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800235a:	4b59      	ldr	r3, [pc, #356]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x110>
 8002366:	e000      	b.n	800236a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	2b00      	cmp	r3, #0
 8002374:	f000 80ca 	beq.w	800250c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002378:	4b51      	ldr	r3, [pc, #324]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002380:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002382:	4b4f      	ldr	r3, [pc, #316]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002386:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002388:	6a3b      	ldr	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <HAL_RCC_OscConfig+0x166>
 800238e:	6a3b      	ldr	r3, [r7, #32]
 8002390:	2b18      	cmp	r3, #24
 8002392:	d156      	bne.n	8002442 <HAL_RCC_OscConfig+0x20a>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0303 	and.w	r3, r3, #3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d151      	bne.n	8002442 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800239e:	4b48      	ldr	r3, [pc, #288]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0304 	and.w	r3, r3, #4
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d005      	beq.n	80023b6 <HAL_RCC_OscConfig+0x17e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e392      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023b6:	4b42      	ldr	r3, [pc, #264]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f023 0219 	bic.w	r2, r3, #25
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	493f      	ldr	r1, [pc, #252]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fe8a 	bl	80010e0 <HAL_GetTick>
 80023cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d0:	f7fe fe86 	bl	80010e0 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e37c      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023e2:	4b37      	ldr	r3, [pc, #220]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0304 	and.w	r3, r3, #4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	f7fe fea7 	bl	8001140 <HAL_GetREVID>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d817      	bhi.n	800242c <HAL_RCC_OscConfig+0x1f4>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	2b40      	cmp	r3, #64	@ 0x40
 8002402:	d108      	bne.n	8002416 <HAL_RCC_OscConfig+0x1de>
 8002404:	4b2e      	ldr	r3, [pc, #184]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800240c:	4a2c      	ldr	r2, [pc, #176]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800240e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002412:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002414:	e07a      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b2a      	ldr	r3, [pc, #168]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	031b      	lsls	r3, r3, #12
 8002424:	4926      	ldr	r1, [pc, #152]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800242a:	e06f      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800242c:	4b24      	ldr	r3, [pc, #144]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	4921      	ldr	r1, [pc, #132]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002440:	e064      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d047      	beq.n	80024da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f023 0219 	bic.w	r2, r3, #25
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	491a      	ldr	r1, [pc, #104]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002458:	4313      	orrs	r3, r2
 800245a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7fe fe40 	bl	80010e0 <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7fe fe3c 	bl	80010e0 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e332      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002476:	4b12      	ldr	r3, [pc, #72]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0304 	and.w	r3, r3, #4
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002482:	f7fe fe5d 	bl	8001140 <HAL_GetREVID>
 8002486:	4603      	mov	r3, r0
 8002488:	f241 0203 	movw	r2, #4099	@ 0x1003
 800248c:	4293      	cmp	r3, r2
 800248e:	d819      	bhi.n	80024c4 <HAL_RCC_OscConfig+0x28c>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	2b40      	cmp	r3, #64	@ 0x40
 8002496:	d108      	bne.n	80024aa <HAL_RCC_OscConfig+0x272>
 8002498:	4b09      	ldr	r3, [pc, #36]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024a0:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80024a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a6:	6053      	str	r3, [r2, #4]
 80024a8:	e030      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
 80024aa:	4b05      	ldr	r3, [pc, #20]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	031b      	lsls	r3, r3, #12
 80024b8:	4901      	ldr	r1, [pc, #4]	@ (80024c0 <HAL_RCC_OscConfig+0x288>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
 80024be:	e025      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
 80024c0:	58024400 	.word	0x58024400
 80024c4:	4b9a      	ldr	r3, [pc, #616]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	4997      	ldr	r1, [pc, #604]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
 80024d8:	e018      	b.n	800250c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024da:	4b95      	ldr	r3, [pc, #596]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a94      	ldr	r2, [pc, #592]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fdfb 	bl	80010e0 <HAL_GetTick>
 80024ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ee:	f7fe fdf7 	bl	80010e0 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e2ed      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002500:	4b8b      	ldr	r3, [pc, #556]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0304 	and.w	r3, r3, #4
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 80a9 	beq.w	800266c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800251a:	4b85      	ldr	r3, [pc, #532]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002522:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002524:	4b82      	ldr	r3, [pc, #520]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002528:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d007      	beq.n	8002540 <HAL_RCC_OscConfig+0x308>
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2b18      	cmp	r3, #24
 8002534:	d13a      	bne.n	80025ac <HAL_RCC_OscConfig+0x374>
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d135      	bne.n	80025ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002540:	4b7b      	ldr	r3, [pc, #492]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d005      	beq.n	8002558 <HAL_RCC_OscConfig+0x320>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	2b80      	cmp	r3, #128	@ 0x80
 8002552:	d001      	beq.n	8002558 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e2c1      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002558:	f7fe fdf2 	bl	8001140 <HAL_GetREVID>
 800255c:	4603      	mov	r3, r0
 800255e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002562:	4293      	cmp	r3, r2
 8002564:	d817      	bhi.n	8002596 <HAL_RCC_OscConfig+0x35e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a1b      	ldr	r3, [r3, #32]
 800256a:	2b20      	cmp	r3, #32
 800256c:	d108      	bne.n	8002580 <HAL_RCC_OscConfig+0x348>
 800256e:	4b70      	ldr	r3, [pc, #448]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002576:	4a6e      	ldr	r2, [pc, #440]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800257c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800257e:	e075      	b.n	800266c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002580:	4b6b      	ldr	r3, [pc, #428]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	069b      	lsls	r3, r3, #26
 800258e:	4968      	ldr	r1, [pc, #416]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002594:	e06a      	b.n	800266c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002596:	4b66      	ldr	r3, [pc, #408]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	4962      	ldr	r1, [pc, #392]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025aa:	e05f      	b.n	800266c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d042      	beq.n	800263a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025b4:	4b5e      	ldr	r3, [pc, #376]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80025ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fd8e 	bl	80010e0 <HAL_GetTick>
 80025c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025c8:	f7fe fd8a 	bl	80010e0 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e280      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025da:	4b55      	ldr	r3, [pc, #340]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025e6:	f7fe fdab 	bl	8001140 <HAL_GetREVID>
 80025ea:	4603      	mov	r3, r0
 80025ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d817      	bhi.n	8002624 <HAL_RCC_OscConfig+0x3ec>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a1b      	ldr	r3, [r3, #32]
 80025f8:	2b20      	cmp	r3, #32
 80025fa:	d108      	bne.n	800260e <HAL_RCC_OscConfig+0x3d6>
 80025fc:	4b4c      	ldr	r3, [pc, #304]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002604:	4a4a      	ldr	r2, [pc, #296]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800260a:	6053      	str	r3, [r2, #4]
 800260c:	e02e      	b.n	800266c <HAL_RCC_OscConfig+0x434>
 800260e:	4b48      	ldr	r3, [pc, #288]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a1b      	ldr	r3, [r3, #32]
 800261a:	069b      	lsls	r3, r3, #26
 800261c:	4944      	ldr	r1, [pc, #272]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 800261e:	4313      	orrs	r3, r2
 8002620:	604b      	str	r3, [r1, #4]
 8002622:	e023      	b.n	800266c <HAL_RCC_OscConfig+0x434>
 8002624:	4b42      	ldr	r3, [pc, #264]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	061b      	lsls	r3, r3, #24
 8002632:	493f      	ldr	r1, [pc, #252]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002634:	4313      	orrs	r3, r2
 8002636:	60cb      	str	r3, [r1, #12]
 8002638:	e018      	b.n	800266c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800263a:	4b3d      	ldr	r3, [pc, #244]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a3c      	ldr	r2, [pc, #240]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002640:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002644:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f7fe fd4b 	bl	80010e0 <HAL_GetTick>
 800264a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800264e:	f7fe fd47 	bl	80010e0 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e23d      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002660:	4b33      	ldr	r3, [pc, #204]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d036      	beq.n	80026e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	695b      	ldr	r3, [r3, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d019      	beq.n	80026b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002680:	4b2b      	ldr	r3, [pc, #172]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002684:	4a2a      	ldr	r2, [pc, #168]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fd28 	bl	80010e0 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fd24 	bl	80010e0 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e21a      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026a6:	4b22      	ldr	r3, [pc, #136]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f0      	beq.n	8002694 <HAL_RCC_OscConfig+0x45c>
 80026b2:	e018      	b.n	80026e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80026b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80026ba:	f023 0301 	bic.w	r3, r3, #1
 80026be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fd0e 	bl	80010e0 <HAL_GetTick>
 80026c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7fe fd0a 	bl	80010e0 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e200      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80026dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f0      	bne.n	80026c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d039      	beq.n	8002766 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d01c      	beq.n	8002734 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002704:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002706:	f7fe fceb 	bl	80010e0 <HAL_GetTick>
 800270a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800270c:	e008      	b.n	8002720 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800270e:	f7fe fce7 	bl	80010e0 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d901      	bls.n	8002720 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e1dd      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002720:	4b03      	ldr	r3, [pc, #12]	@ (8002730 <HAL_RCC_OscConfig+0x4f8>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0f0      	beq.n	800270e <HAL_RCC_OscConfig+0x4d6>
 800272c:	e01b      	b.n	8002766 <HAL_RCC_OscConfig+0x52e>
 800272e:	bf00      	nop
 8002730:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002734:	4b9b      	ldr	r3, [pc, #620]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a9a      	ldr	r2, [pc, #616]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800273a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800273e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002740:	f7fe fcce 	bl	80010e0 <HAL_GetTick>
 8002744:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002748:	f7fe fcca 	bl	80010e0 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e1c0      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800275a:	4b92      	ldr	r3, [pc, #584]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8081 	beq.w	8002876 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002774:	4b8c      	ldr	r3, [pc, #560]	@ (80029a8 <HAL_RCC_OscConfig+0x770>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a8b      	ldr	r2, [pc, #556]	@ (80029a8 <HAL_RCC_OscConfig+0x770>)
 800277a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800277e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002780:	f7fe fcae 	bl	80010e0 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002788:	f7fe fcaa 	bl	80010e0 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e1a0      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800279a:	4b83      	ldr	r3, [pc, #524]	@ (80029a8 <HAL_RCC_OscConfig+0x770>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d106      	bne.n	80027bc <HAL_RCC_OscConfig+0x584>
 80027ae:	4b7d      	ldr	r3, [pc, #500]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b2:	4a7c      	ldr	r2, [pc, #496]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ba:	e02d      	b.n	8002818 <HAL_RCC_OscConfig+0x5e0>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10c      	bne.n	80027de <HAL_RCC_OscConfig+0x5a6>
 80027c4:	4b77      	ldr	r3, [pc, #476]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c8:	4a76      	ldr	r2, [pc, #472]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027ca:	f023 0301 	bic.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d0:	4b74      	ldr	r3, [pc, #464]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d4:	4a73      	ldr	r2, [pc, #460]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027d6:	f023 0304 	bic.w	r3, r3, #4
 80027da:	6713      	str	r3, [r2, #112]	@ 0x70
 80027dc:	e01c      	b.n	8002818 <HAL_RCC_OscConfig+0x5e0>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b05      	cmp	r3, #5
 80027e4:	d10c      	bne.n	8002800 <HAL_RCC_OscConfig+0x5c8>
 80027e6:	4b6f      	ldr	r3, [pc, #444]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ea:	4a6e      	ldr	r2, [pc, #440]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027ec:	f043 0304 	orr.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f2:	4b6c      	ldr	r3, [pc, #432]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f6:	4a6b      	ldr	r2, [pc, #428]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0x5e0>
 8002800:	4b68      	ldr	r3, [pc, #416]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002804:	4a67      	ldr	r2, [pc, #412]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	6713      	str	r3, [r2, #112]	@ 0x70
 800280c:	4b65      	ldr	r3, [pc, #404]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800280e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002810:	4a64      	ldr	r2, [pc, #400]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002812:	f023 0304 	bic.w	r3, r3, #4
 8002816:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002820:	f7fe fc5e 	bl	80010e0 <HAL_GetTick>
 8002824:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002826:	e00a      	b.n	800283e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002828:	f7fe fc5a 	bl	80010e0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002836:	4293      	cmp	r3, r2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e14e      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800283e:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0ee      	beq.n	8002828 <HAL_RCC_OscConfig+0x5f0>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800284c:	f7fe fc48 	bl	80010e0 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002852:	e00a      	b.n	800286a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002854:	f7fe fc44 	bl	80010e0 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002862:	4293      	cmp	r3, r2
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e138      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800286a:	4b4e      	ldr	r3, [pc, #312]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800286c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1ee      	bne.n	8002854 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 812d 	beq.w	8002ada <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002880:	4b48      	ldr	r3, [pc, #288]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002888:	2b18      	cmp	r3, #24
 800288a:	f000 80bd 	beq.w	8002a08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002892:	2b02      	cmp	r3, #2
 8002894:	f040 809e 	bne.w	80029d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002898:	4b42      	ldr	r3, [pc, #264]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a41      	ldr	r2, [pc, #260]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800289e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fc1c 	bl	80010e0 <HAL_GetTick>
 80028a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ac:	f7fe fc18 	bl	80010e0 <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e10e      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028be:	4b39      	ldr	r3, [pc, #228]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ca:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80028cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028ce:	4b37      	ldr	r3, [pc, #220]	@ (80029ac <HAL_RCC_OscConfig+0x774>)
 80028d0:	4013      	ands	r3, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028da:	0112      	lsls	r2, r2, #4
 80028dc:	430a      	orrs	r2, r1
 80028de:	4931      	ldr	r1, [pc, #196]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e8:	3b01      	subs	r3, #1
 80028ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f2:	3b01      	subs	r3, #1
 80028f4:	025b      	lsls	r3, r3, #9
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	431a      	orrs	r2, r3
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fe:	3b01      	subs	r3, #1
 8002900:	041b      	lsls	r3, r3, #16
 8002902:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290c:	3b01      	subs	r3, #1
 800290e:	061b      	lsls	r3, r3, #24
 8002910:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002914:	4923      	ldr	r1, [pc, #140]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002916:	4313      	orrs	r3, r2
 8002918:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800291a:	4b22      	ldr	r3, [pc, #136]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	4a21      	ldr	r2, [pc, #132]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002926:	4b1f      	ldr	r3, [pc, #124]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292a:	4b21      	ldr	r3, [pc, #132]	@ (80029b0 <HAL_RCC_OscConfig+0x778>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002932:	00d2      	lsls	r2, r2, #3
 8002934:	491b      	ldr	r1, [pc, #108]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002936:	4313      	orrs	r3, r2
 8002938:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800293a:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	f023 020c 	bic.w	r2, r3, #12
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	4917      	ldr	r1, [pc, #92]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002948:	4313      	orrs	r3, r2
 800294a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800294c:	4b15      	ldr	r3, [pc, #84]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800294e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002950:	f023 0202 	bic.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002958:	4912      	ldr	r1, [pc, #72]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800295a:	4313      	orrs	r3, r2
 800295c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800295e:	4b11      	ldr	r3, [pc, #68]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002962:	4a10      	ldr	r2, [pc, #64]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	4a0d      	ldr	r2, [pc, #52]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002974:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002976:	4b0b      	ldr	r3, [pc, #44]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 800297c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002980:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002982:	4b08      	ldr	r3, [pc, #32]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	4a07      	ldr	r2, [pc, #28]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298e:	4b05      	ldr	r3, [pc, #20]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a04      	ldr	r2, [pc, #16]	@ (80029a4 <HAL_RCC_OscConfig+0x76c>)
 8002994:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fba1 	bl	80010e0 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a0:	e011      	b.n	80029c6 <HAL_RCC_OscConfig+0x78e>
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	58024800 	.word	0x58024800
 80029ac:	fffffc0c 	.word	0xfffffc0c
 80029b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fb94 	bl	80010e0 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e08a      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029c6:	4b47      	ldr	r3, [pc, #284]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x77c>
 80029d2:	e082      	b.n	8002ada <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d4:	4b43      	ldr	r3, [pc, #268]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a42      	ldr	r2, [pc, #264]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fb7e 	bl	80010e0 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fb7a 	bl	80010e0 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e070      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029fa:	4b3a      	ldr	r3, [pc, #232]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x7b0>
 8002a06:	e068      	b.n	8002ada <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a08:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a0e:	4b35      	ldr	r3, [pc, #212]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d031      	beq.n	8002a80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	f003 0203 	and.w	r2, r3, #3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d12a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	091b      	lsrs	r3, r3, #4
 8002a2e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d122      	bne.n	8002a80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d11a      	bne.n	8002a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	0a5b      	lsrs	r3, r3, #9
 8002a4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d111      	bne.n	8002a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	0c1b      	lsrs	r3, r3, #16
 8002a60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d108      	bne.n	8002a80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	0e1b      	lsrs	r3, r3, #24
 8002a72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d001      	beq.n	8002a84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e02b      	b.n	8002adc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a88:	08db      	lsrs	r3, r3, #3
 8002a8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a94:	693a      	ldr	r2, [r7, #16]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d01f      	beq.n	8002ada <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a9a:	4b12      	ldr	r3, [pc, #72]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	4a11      	ldr	r2, [pc, #68]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa6:	f7fe fb1b 	bl	80010e0 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002aac:	bf00      	nop
 8002aae:	f7fe fb17 	bl	80010e0 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d0f9      	beq.n	8002aae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002aba:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002abc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002abe:	4b0a      	ldr	r3, [pc, #40]	@ (8002ae8 <HAL_RCC_OscConfig+0x8b0>)
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ac6:	00d2      	lsls	r2, r2, #3
 8002ac8:	4906      	ldr	r1, [pc, #24]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad2:	4a04      	ldr	r2, [pc, #16]	@ (8002ae4 <HAL_RCC_OscConfig+0x8ac>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3730      	adds	r7, #48	@ 0x30
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	58024400 	.word	0x58024400
 8002ae8:	ffff0007 	.word	0xffff0007

08002aec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b086      	sub	sp, #24
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
 8002af4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e19c      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b00:	4b8a      	ldr	r3, [pc, #552]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 030f 	and.w	r3, r3, #15
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d910      	bls.n	8002b30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b87      	ldr	r3, [pc, #540]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 020f 	bic.w	r2, r3, #15
 8002b16:	4985      	ldr	r1, [pc, #532]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b83      	ldr	r3, [pc, #524]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e184      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d010      	beq.n	8002b5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	4b7b      	ldr	r3, [pc, #492]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d908      	bls.n	8002b5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b4c:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	691b      	ldr	r3, [r3, #16]
 8002b58:	4975      	ldr	r1, [pc, #468]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d010      	beq.n	8002b8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	695a      	ldr	r2, [r3, #20]
 8002b6e:	4b70      	ldr	r3, [pc, #448]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d908      	bls.n	8002b8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	496a      	ldr	r1, [pc, #424]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0310 	and.w	r3, r3, #16
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d010      	beq.n	8002bba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	699a      	ldr	r2, [r3, #24]
 8002b9c:	4b64      	ldr	r3, [pc, #400]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002b9e:	69db      	ldr	r3, [r3, #28]
 8002ba0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d908      	bls.n	8002bba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ba8:	4b61      	ldr	r3, [pc, #388]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	495e      	ldr	r1, [pc, #376]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0320 	and.w	r3, r3, #32
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d010      	beq.n	8002be8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69da      	ldr	r2, [r3, #28]
 8002bca:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d908      	bls.n	8002be8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bd6:	4b56      	ldr	r3, [pc, #344]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4953      	ldr	r1, [pc, #332]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d010      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	68da      	ldr	r2, [r3, #12]
 8002bf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d908      	bls.n	8002c16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c04:	4b4a      	ldr	r3, [pc, #296]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f023 020f 	bic.w	r2, r3, #15
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4947      	ldr	r1, [pc, #284]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d055      	beq.n	8002cce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c22:	4b43      	ldr	r3, [pc, #268]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	4940      	ldr	r1, [pc, #256]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c3c:	4b3c      	ldr	r3, [pc, #240]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d121      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e0f6      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	2b03      	cmp	r3, #3
 8002c52:	d107      	bne.n	8002c64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c54:	4b36      	ldr	r3, [pc, #216]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d115      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ea      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c6c:	4b30      	ldr	r3, [pc, #192]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d109      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e0de      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c7c:	4b2c      	ldr	r3, [pc, #176]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d101      	bne.n	8002c8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0d6      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c8c:	4b28      	ldr	r3, [pc, #160]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	f023 0207 	bic.w	r2, r3, #7
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4925      	ldr	r1, [pc, #148]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c9e:	f7fe fa1f 	bl	80010e0 <HAL_GetTick>
 8002ca2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca6:	f7fe fa1b 	bl	80010e0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e0be      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d1eb      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d010      	beq.n	8002cfc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	4b14      	ldr	r3, [pc, #80]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 030f 	and.w	r3, r3, #15
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d208      	bcs.n	8002cfc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f023 020f 	bic.w	r2, r3, #15
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	490e      	ldr	r1, [pc, #56]	@ (8002d30 <HAL_RCC_ClockConfig+0x244>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 030f 	and.w	r3, r3, #15
 8002d04:	683a      	ldr	r2, [r7, #0]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d214      	bcs.n	8002d34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0a:	4b08      	ldr	r3, [pc, #32]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f023 020f 	bic.w	r2, r3, #15
 8002d12:	4906      	ldr	r1, [pc, #24]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d1a:	4b04      	ldr	r3, [pc, #16]	@ (8002d2c <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 030f 	and.w	r3, r3, #15
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d005      	beq.n	8002d34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e086      	b.n	8002e3a <HAL_RCC_ClockConfig+0x34e>
 8002d2c:	52002000 	.word	0x52002000
 8002d30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0304 	and.w	r3, r3, #4
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d010      	beq.n	8002d62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	4b3f      	ldr	r3, [pc, #252]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d46:	699b      	ldr	r3, [r3, #24]
 8002d48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d208      	bcs.n	8002d62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d50:	4b3c      	ldr	r3, [pc, #240]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d52:	699b      	ldr	r3, [r3, #24]
 8002d54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	4939      	ldr	r1, [pc, #228]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0308 	and.w	r3, r3, #8
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	695a      	ldr	r2, [r3, #20]
 8002d72:	4b34      	ldr	r3, [pc, #208]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d74:	69db      	ldr	r3, [r3, #28]
 8002d76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d208      	bcs.n	8002d90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d7e:	4b31      	ldr	r3, [pc, #196]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	492e      	ldr	r1, [pc, #184]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0310 	and.w	r3, r3, #16
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d010      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699a      	ldr	r2, [r3, #24]
 8002da0:	4b28      	ldr	r3, [pc, #160]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d208      	bcs.n	8002dbe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dac:	4b25      	ldr	r3, [pc, #148]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	4922      	ldr	r1, [pc, #136]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d010      	beq.n	8002dec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d208      	bcs.n	8002dec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dda:	4b1a      	ldr	r3, [pc, #104]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	4917      	ldr	r1, [pc, #92]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dec:	f000 f834 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8002df0:	4602      	mov	r2, r0
 8002df2:	4b14      	ldr	r3, [pc, #80]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	0a1b      	lsrs	r3, r3, #8
 8002df8:	f003 030f 	and.w	r3, r3, #15
 8002dfc:	4912      	ldr	r1, [pc, #72]	@ (8002e48 <HAL_RCC_ClockConfig+0x35c>)
 8002dfe:	5ccb      	ldrb	r3, [r1, r3]
 8002e00:	f003 031f 	and.w	r3, r3, #31
 8002e04:	fa22 f303 	lsr.w	r3, r2, r3
 8002e08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <HAL_RCC_ClockConfig+0x358>)
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <HAL_RCC_ClockConfig+0x35c>)
 8002e14:	5cd3      	ldrb	r3, [r2, r3]
 8002e16:	f003 031f 	and.w	r3, r3, #31
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e20:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <HAL_RCC_ClockConfig+0x360>)
 8002e22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e24:	4a0a      	ldr	r2, [pc, #40]	@ (8002e50 <HAL_RCC_ClockConfig+0x364>)
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x368>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fe f90c 	bl	800104c <HAL_InitTick>
 8002e34:	4603      	mov	r3, r0
 8002e36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	58024400 	.word	0x58024400
 8002e48:	0800925c 	.word	0x0800925c
 8002e4c:	24000004 	.word	0x24000004
 8002e50:	24000000 	.word	0x24000000
 8002e54:	24000008 	.word	0x24000008

08002e58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b089      	sub	sp, #36	@ 0x24
 8002e5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e5e:	4bb3      	ldr	r3, [pc, #716]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e66:	2b18      	cmp	r3, #24
 8002e68:	f200 8155 	bhi.w	8003116 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e72:	bf00      	nop
 8002e74:	08002ed9 	.word	0x08002ed9
 8002e78:	08003117 	.word	0x08003117
 8002e7c:	08003117 	.word	0x08003117
 8002e80:	08003117 	.word	0x08003117
 8002e84:	08003117 	.word	0x08003117
 8002e88:	08003117 	.word	0x08003117
 8002e8c:	08003117 	.word	0x08003117
 8002e90:	08003117 	.word	0x08003117
 8002e94:	08002eff 	.word	0x08002eff
 8002e98:	08003117 	.word	0x08003117
 8002e9c:	08003117 	.word	0x08003117
 8002ea0:	08003117 	.word	0x08003117
 8002ea4:	08003117 	.word	0x08003117
 8002ea8:	08003117 	.word	0x08003117
 8002eac:	08003117 	.word	0x08003117
 8002eb0:	08003117 	.word	0x08003117
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08003117 	.word	0x08003117
 8002ebc:	08003117 	.word	0x08003117
 8002ec0:	08003117 	.word	0x08003117
 8002ec4:	08003117 	.word	0x08003117
 8002ec8:	08003117 	.word	0x08003117
 8002ecc:	08003117 	.word	0x08003117
 8002ed0:	08003117 	.word	0x08003117
 8002ed4:	08002f0b 	.word	0x08002f0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ed8:	4b94      	ldr	r3, [pc, #592]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0320 	and.w	r3, r3, #32
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ee4:	4b91      	ldr	r3, [pc, #580]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	08db      	lsrs	r3, r3, #3
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	4a90      	ldr	r2, [pc, #576]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ef4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ef6:	e111      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ef8:	4b8d      	ldr	r3, [pc, #564]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002efa:	61bb      	str	r3, [r7, #24]
      break;
 8002efc:	e10e      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002efe:	4b8d      	ldr	r3, [pc, #564]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f00:	61bb      	str	r3, [r7, #24]
      break;
 8002f02:	e10b      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f04:	4b8c      	ldr	r3, [pc, #560]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f06:	61bb      	str	r3, [r7, #24]
      break;
 8002f08:	e108      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f0a:	4b88      	ldr	r3, [pc, #544]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f14:	4b85      	ldr	r3, [pc, #532]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f18:	091b      	lsrs	r3, r3, #4
 8002f1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f20:	4b82      	ldr	r3, [pc, #520]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f2a:	4b80      	ldr	r3, [pc, #512]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f2e:	08db      	lsrs	r3, r3, #3
 8002f30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	fb02 f303 	mul.w	r3, r2, r3
 8002f3a:	ee07 3a90 	vmov	s15, r3
 8002f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80e1 	beq.w	8003110 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	f000 8083 	beq.w	800305c <HAL_RCC_GetSysClockFreq+0x204>
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f200 80a1 	bhi.w	80030a0 <HAL_RCC_GetSysClockFreq+0x248>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d003      	beq.n	8002f6c <HAL_RCC_GetSysClockFreq+0x114>
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d056      	beq.n	8003018 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f6a:	e099      	b.n	80030a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f6c:	4b6f      	ldr	r3, [pc, #444]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d02d      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f78:	4b6c      	ldr	r3, [pc, #432]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	08db      	lsrs	r3, r3, #3
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	4a6b      	ldr	r2, [pc, #428]	@ (8003130 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
 8002f88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	ee07 3a90 	vmov	s15, r3
 8002f90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa2:	4b62      	ldr	r3, [pc, #392]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002faa:	ee07 3a90 	vmov	s15, r3
 8002fae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fd2:	e087      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	ee07 3a90 	vmov	s15, r3
 8002fda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003140 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fe2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fe6:	4b51      	ldr	r3, [pc, #324]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fee:	ee07 3a90 	vmov	s15, r3
 8002ff2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ff6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ffa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ffe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003002:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003006:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800300a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800300e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003012:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003016:	e065      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	ee07 3a90 	vmov	s15, r3
 800301e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003022:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800302a:	4b40      	ldr	r3, [pc, #256]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800302e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003032:	ee07 3a90 	vmov	s15, r3
 8003036:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800303a:	ed97 6a02 	vldr	s12, [r7, #8]
 800303e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003042:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003046:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800304a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800304e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003056:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800305a:	e043      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	ee07 3a90 	vmov	s15, r3
 8003062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003066:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003148 <HAL_RCC_GetSysClockFreq+0x2f0>
 800306a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800306e:	4b2f      	ldr	r3, [pc, #188]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800307e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003082:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003086:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800308a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800308e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003092:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800309e:	e021      	b.n	80030e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	ee07 3a90 	vmov	s15, r3
 80030a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030aa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2ec>
 80030ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030b2:	4b1e      	ldr	r3, [pc, #120]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ba:	ee07 3a90 	vmov	s15, r3
 80030be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030c6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800313c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030e4:	4b11      	ldr	r3, [pc, #68]	@ (800312c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e8:	0a5b      	lsrs	r3, r3, #9
 80030ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030ee:	3301      	adds	r3, #1
 80030f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	ee07 3a90 	vmov	s15, r3
 80030f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003104:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003108:	ee17 3a90 	vmov	r3, s15
 800310c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800310e:	e005      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61bb      	str	r3, [r7, #24]
      break;
 8003114:	e002      	b.n	800311c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003116:	4b07      	ldr	r3, [pc, #28]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003118:	61bb      	str	r3, [r7, #24]
      break;
 800311a:	bf00      	nop
  }

  return sysclockfreq;
 800311c:	69bb      	ldr	r3, [r7, #24]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	@ 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	58024400 	.word	0x58024400
 8003130:	03d09000 	.word	0x03d09000
 8003134:	003d0900 	.word	0x003d0900
 8003138:	007a1200 	.word	0x007a1200
 800313c:	46000000 	.word	0x46000000
 8003140:	4c742400 	.word	0x4c742400
 8003144:	4a742400 	.word	0x4a742400
 8003148:	4af42400 	.word	0x4af42400

0800314c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003152:	f7ff fe81 	bl	8002e58 <HAL_RCC_GetSysClockFreq>
 8003156:	4602      	mov	r2, r0
 8003158:	4b10      	ldr	r3, [pc, #64]	@ (800319c <HAL_RCC_GetHCLKFreq+0x50>)
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	0a1b      	lsrs	r3, r3, #8
 800315e:	f003 030f 	and.w	r3, r3, #15
 8003162:	490f      	ldr	r1, [pc, #60]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003164:	5ccb      	ldrb	r3, [r1, r3]
 8003166:	f003 031f 	and.w	r3, r3, #31
 800316a:	fa22 f303 	lsr.w	r3, r2, r3
 800316e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003170:	4b0a      	ldr	r3, [pc, #40]	@ (800319c <HAL_RCC_GetHCLKFreq+0x50>)
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	f003 030f 	and.w	r3, r3, #15
 8003178:	4a09      	ldr	r2, [pc, #36]	@ (80031a0 <HAL_RCC_GetHCLKFreq+0x54>)
 800317a:	5cd3      	ldrb	r3, [r2, r3]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	fa22 f303 	lsr.w	r3, r2, r3
 8003186:	4a07      	ldr	r2, [pc, #28]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003188:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800318a:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003190:	4b04      	ldr	r3, [pc, #16]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x58>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3708      	adds	r7, #8
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58024400 	.word	0x58024400
 80031a0:	0800925c 	.word	0x0800925c
 80031a4:	24000004 	.word	0x24000004
 80031a8:	24000000 	.word	0x24000000

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031b0:	f7ff ffcc 	bl	800314c <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	091b      	lsrs	r3, r3, #4
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4904      	ldr	r1, [pc, #16]	@ (80031d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	58024400 	.word	0x58024400
 80031d4:	0800925c 	.word	0x0800925c

080031d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031dc:	f7ff ffb6 	bl	800314c <HAL_RCC_GetHCLKFreq>
 80031e0:	4602      	mov	r2, r0
 80031e2:	4b06      	ldr	r3, [pc, #24]	@ (80031fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	0a1b      	lsrs	r3, r3, #8
 80031e8:	f003 0307 	and.w	r3, r3, #7
 80031ec:	4904      	ldr	r1, [pc, #16]	@ (8003200 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ee:	5ccb      	ldrb	r3, [r1, r3]
 80031f0:	f003 031f 	and.w	r3, r3, #31
 80031f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	58024400 	.word	0x58024400
 8003200:	0800925c 	.word	0x0800925c

08003204 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003204:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003208:	b0ca      	sub	sp, #296	@ 0x128
 800320a:	af00      	add	r7, sp, #0
 800320c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003216:	2300      	movs	r3, #0
 8003218:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800321c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003224:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003228:	2500      	movs	r5, #0
 800322a:	ea54 0305 	orrs.w	r3, r4, r5
 800322e:	d049      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003234:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800323a:	d02f      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800323c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003240:	d828      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003246:	d01a      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003248:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324c:	d822      	bhi.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003252:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003256:	d007      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003258:	e01c      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800325a:	4bb8      	ldr	r3, [pc, #736]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800325c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325e:	4ab7      	ldr	r2, [pc, #732]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003266:	e01a      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800326c:	3308      	adds	r3, #8
 800326e:	2102      	movs	r1, #2
 8003270:	4618      	mov	r0, r3
 8003272:	f001 fc8f 	bl	8004b94 <RCCEx_PLL2_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800327c:	e00f      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800327e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003282:	3328      	adds	r3, #40	@ 0x28
 8003284:	2102      	movs	r1, #2
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fd36 	bl	8004cf8 <RCCEx_PLL3_Config>
 800328c:	4603      	mov	r3, r0
 800328e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003292:	e004      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800329a:	e000      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800329c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800329e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032a6:	4ba5      	ldr	r3, [pc, #660]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032aa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032b4:	4aa1      	ldr	r2, [pc, #644]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b6:	430b      	orrs	r3, r1
 80032b8:	6513      	str	r3, [r2, #80]	@ 0x50
 80032ba:	e003      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032d0:	f04f 0900 	mov.w	r9, #0
 80032d4:	ea58 0309 	orrs.w	r3, r8, r9
 80032d8:	d047      	beq.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e0:	2b04      	cmp	r3, #4
 80032e2:	d82a      	bhi.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032e4:	a201      	add	r2, pc, #4	@ (adr r2, 80032ec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ea:	bf00      	nop
 80032ec:	08003301 	.word	0x08003301
 80032f0:	0800330f 	.word	0x0800330f
 80032f4:	08003325 	.word	0x08003325
 80032f8:	08003343 	.word	0x08003343
 80032fc:	08003343 	.word	0x08003343
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003300:	4b8e      	ldr	r3, [pc, #568]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003304:	4a8d      	ldr	r2, [pc, #564]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800330a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800330c:	e01a      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800330e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003312:	3308      	adds	r3, #8
 8003314:	2100      	movs	r1, #0
 8003316:	4618      	mov	r0, r3
 8003318:	f001 fc3c 	bl	8004b94 <RCCEx_PLL2_Config>
 800331c:	4603      	mov	r3, r0
 800331e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003322:	e00f      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003328:	3328      	adds	r3, #40	@ 0x28
 800332a:	2100      	movs	r1, #0
 800332c:	4618      	mov	r0, r3
 800332e:	f001 fce3 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003332:	4603      	mov	r3, r0
 8003334:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003338:	e004      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003340:	e000      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10a      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800334c:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800334e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003350:	f023 0107 	bic.w	r1, r3, #7
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	4a78      	ldr	r2, [pc, #480]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335c:	430b      	orrs	r3, r1
 800335e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003360:	e003      	b.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003372:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003376:	f04f 0b00 	mov.w	fp, #0
 800337a:	ea5a 030b 	orrs.w	r3, sl, fp
 800337e:	d04c      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003380:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003384:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003386:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800338a:	d030      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800338c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003390:	d829      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003392:	2bc0      	cmp	r3, #192	@ 0xc0
 8003394:	d02d      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003396:	2bc0      	cmp	r3, #192	@ 0xc0
 8003398:	d825      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800339a:	2b80      	cmp	r3, #128	@ 0x80
 800339c:	d018      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800339e:	2b80      	cmp	r3, #128	@ 0x80
 80033a0:	d821      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d002      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033a6:	2b40      	cmp	r3, #64	@ 0x40
 80033a8:	d007      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033aa:	e01c      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ac:	4b63      	ldr	r3, [pc, #396]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4a62      	ldr	r2, [pc, #392]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033b8:	e01c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	3308      	adds	r3, #8
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fbe6 	bl	8004b94 <RCCEx_PLL2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033ce:	e011      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	3328      	adds	r3, #40	@ 0x28
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fc8d 	bl	8004cf8 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033fc:	4b4f      	ldr	r3, [pc, #316]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340a:	4a4c      	ldr	r2, [pc, #304]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800340c:	430b      	orrs	r3, r1
 800340e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003416:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003426:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003430:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d053      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800343e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003446:	d035      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003448:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800344c:	d82e      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800344e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003452:	d031      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003454:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003458:	d828      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800345a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800345e:	d01a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003464:	d822      	bhi.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800346a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800346e:	d007      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003470:	e01c      	b.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003472:	4b32      	ldr	r3, [pc, #200]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003476:	4a31      	ldr	r2, [pc, #196]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003478:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800347c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800347e:	e01c      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003484:	3308      	adds	r3, #8
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fb83 	bl	8004b94 <RCCEx_PLL2_Config>
 800348e:	4603      	mov	r3, r0
 8003490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003494:	e011      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	3328      	adds	r3, #40	@ 0x28
 800349c:	2100      	movs	r1, #0
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 fc2a 	bl	8004cf8 <RCCEx_PLL3_Config>
 80034a4:	4603      	mov	r3, r0
 80034a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034aa:	e006      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034b2:	e002      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d10b      	bne.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034c2:	4b1e      	ldr	r3, [pc, #120]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034d2:	4a1a      	ldr	r2, [pc, #104]	@ (800353c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d8:	e003      	b.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034f2:	2300      	movs	r3, #0
 80034f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034fc:	460b      	mov	r3, r1
 80034fe:	4313      	orrs	r3, r2
 8003500:	d056      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003506:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800350a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800350e:	d038      	beq.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003510:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003514:	d831      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003516:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800351a:	d034      	beq.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800351c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003520:	d82b      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003522:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003526:	d01d      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003528:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352c:	d825      	bhi.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003532:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003538:	e01f      	b.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800353a:	bf00      	nop
 800353c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4ba2      	ldr	r3, [pc, #648]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003544:	4aa1      	ldr	r2, [pc, #644]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800354c:	e01c      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800354e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003552:	3308      	adds	r3, #8
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f001 fb1c 	bl	8004b94 <RCCEx_PLL2_Config>
 800355c:	4603      	mov	r3, r0
 800355e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003562:	e011      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	3328      	adds	r3, #40	@ 0x28
 800356a:	2100      	movs	r1, #0
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fbc3 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003572:	4603      	mov	r3, r0
 8003574:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003578:	e006      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003580:	e002      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003582:	bf00      	nop
 8003584:	e000      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003588:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10b      	bne.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003590:	4b8e      	ldr	r3, [pc, #568]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003594:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003598:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a0:	4a8a      	ldr	r2, [pc, #552]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035a2:	430b      	orrs	r3, r1
 80035a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035a6:	e003      	b.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035c0:	2300      	movs	r3, #0
 80035c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035ca:	460b      	mov	r3, r1
 80035cc:	4313      	orrs	r3, r2
 80035ce:	d03a      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035d6:	2b30      	cmp	r3, #48	@ 0x30
 80035d8:	d01f      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035da:	2b30      	cmp	r3, #48	@ 0x30
 80035dc:	d819      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d00c      	beq.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035e2:	2b20      	cmp	r3, #32
 80035e4:	d815      	bhi.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d019      	beq.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035ea:	2b10      	cmp	r3, #16
 80035ec:	d111      	bne.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ee:	4b77      	ldr	r3, [pc, #476]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f2:	4a76      	ldr	r2, [pc, #472]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035fa:	e011      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	3308      	adds	r3, #8
 8003602:	2102      	movs	r1, #2
 8003604:	4618      	mov	r0, r3
 8003606:	f001 fac5 	bl	8004b94 <RCCEx_PLL2_Config>
 800360a:	4603      	mov	r3, r0
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003610:	e006      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003618:	e002      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800361a:	bf00      	nop
 800361c:	e000      	b.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800361e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10a      	bne.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003628:	4b68      	ldr	r3, [pc, #416]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800362a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003636:	4a65      	ldr	r2, [pc, #404]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003638:	430b      	orrs	r3, r1
 800363a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800363c:	e003      	b.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003642:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003652:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003656:	2300      	movs	r3, #0
 8003658:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800365c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003660:	460b      	mov	r3, r1
 8003662:	4313      	orrs	r3, r2
 8003664:	d051      	beq.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800366a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800366c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003670:	d035      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003672:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003676:	d82e      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003678:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800367c:	d031      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800367e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003682:	d828      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003684:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003688:	d01a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800368a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800368e:	d822      	bhi.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003690:	2b00      	cmp	r3, #0
 8003692:	d003      	beq.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003694:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003698:	d007      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800369a:	e01c      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b4b      	ldr	r3, [pc, #300]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a0:	4a4a      	ldr	r2, [pc, #296]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a8:	e01c      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	3308      	adds	r3, #8
 80036b0:	2100      	movs	r1, #0
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 fa6e 	bl	8004b94 <RCCEx_PLL2_Config>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036be:	e011      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	3328      	adds	r3, #40	@ 0x28
 80036c6:	2100      	movs	r1, #0
 80036c8:	4618      	mov	r0, r3
 80036ca:	f001 fb15 	bl	8004cf8 <RCCEx_PLL3_Config>
 80036ce:	4603      	mov	r3, r0
 80036d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036d4:	e006      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036dc:	e002      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036de:	bf00      	nop
 80036e0:	e000      	b.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10a      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036ec:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036fa:	4a34      	ldr	r2, [pc, #208]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036fc:	430b      	orrs	r3, r1
 80036fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8003700:	e003      	b.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003702:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003706:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003720:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d056      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800372a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003730:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003734:	d033      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003736:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373a:	d82c      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800373c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003740:	d02f      	beq.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003742:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003746:	d826      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003748:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800374c:	d02b      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800374e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003752:	d820      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003754:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003758:	d012      	beq.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800375a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800375e:	d81a      	bhi.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d022      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d115      	bne.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800376a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376e:	3308      	adds	r3, #8
 8003770:	2101      	movs	r1, #1
 8003772:	4618      	mov	r0, r3
 8003774:	f001 fa0e 	bl	8004b94 <RCCEx_PLL2_Config>
 8003778:	4603      	mov	r3, r0
 800377a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800377e:	e015      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003780:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003784:	3328      	adds	r3, #40	@ 0x28
 8003786:	2101      	movs	r1, #1
 8003788:	4618      	mov	r0, r3
 800378a:	f001 fab5 	bl	8004cf8 <RCCEx_PLL3_Config>
 800378e:	4603      	mov	r3, r0
 8003790:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003794:	e00a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800379e:	bf00      	nop
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a2:	bf00      	nop
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037c2:	4a02      	ldr	r2, [pc, #8]	@ (80037cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037ca:	bf00      	nop
 80037cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037e8:	2300      	movs	r3, #0
 80037ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4313      	orrs	r3, r2
 80037f6:	d055      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003800:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003804:	d033      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003806:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380a:	d82c      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800380c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003810:	d02f      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003812:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003816:	d826      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003818:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800381c:	d02b      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800381e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003822:	d820      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003824:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003828:	d012      	beq.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800382a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800382e:	d81a      	bhi.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003830:	2b00      	cmp	r3, #0
 8003832:	d022      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003834:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003838:	d115      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	3308      	adds	r3, #8
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f001 f9a6 	bl	8004b94 <RCCEx_PLL2_Config>
 8003848:	4603      	mov	r3, r0
 800384a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800384e:	e015      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003854:	3328      	adds	r3, #40	@ 0x28
 8003856:	2101      	movs	r1, #1
 8003858:	4618      	mov	r0, r3
 800385a:	f001 fa4d 	bl	8004cf8 <RCCEx_PLL3_Config>
 800385e:	4603      	mov	r3, r0
 8003860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003864:	e00a      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800386c:	e006      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800386e:	bf00      	nop
 8003870:	e004      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003872:	bf00      	nop
 8003874:	e002      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003876:	bf00      	nop
 8003878:	e000      	b.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800387c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003880:	2b00      	cmp	r3, #0
 8003882:	d10b      	bne.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003884:	4ba3      	ldr	r3, [pc, #652]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003888:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800388c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003890:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003894:	4a9f      	ldr	r2, [pc, #636]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003896:	430b      	orrs	r3, r1
 8003898:	6593      	str	r3, [r2, #88]	@ 0x58
 800389a:	e003      	b.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038be:	460b      	mov	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	d037      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ce:	d00e      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d4:	d816      	bhi.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038de:	d111      	bne.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e0:	4b8c      	ldr	r3, [pc, #560]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e4:	4a8b      	ldr	r2, [pc, #556]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038ec:	e00f      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f2:	3308      	adds	r3, #8
 80038f4:	2101      	movs	r1, #1
 80038f6:	4618      	mov	r0, r3
 80038f8:	f001 f94c 	bl	8004b94 <RCCEx_PLL2_Config>
 80038fc:	4603      	mov	r3, r0
 80038fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003902:	e004      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800390a:	e000      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800390c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800390e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003912:	2b00      	cmp	r3, #0
 8003914:	d10a      	bne.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003916:	4b7f      	ldr	r3, [pc, #508]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003918:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800391a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	4a7b      	ldr	r2, [pc, #492]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003926:	430b      	orrs	r3, r1
 8003928:	6513      	str	r3, [r2, #80]	@ 0x50
 800392a:	e003      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800392c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003944:	2300      	movs	r3, #0
 8003946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800394a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d039      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003954:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003958:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800395a:	2b03      	cmp	r3, #3
 800395c:	d81c      	bhi.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800395e:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003964:	080039a1 	.word	0x080039a1
 8003968:	08003975 	.word	0x08003975
 800396c:	08003983 	.word	0x08003983
 8003970:	080039a1 	.word	0x080039a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003974:	4b67      	ldr	r3, [pc, #412]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	4a66      	ldr	r2, [pc, #408]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800397e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003980:	e00f      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	3308      	adds	r3, #8
 8003988:	2102      	movs	r1, #2
 800398a:	4618      	mov	r0, r3
 800398c:	f001 f902 	bl	8004b94 <RCCEx_PLL2_Config>
 8003990:	4603      	mov	r3, r0
 8003992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003996:	e004      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10a      	bne.n	80039c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039aa:	4b5a      	ldr	r3, [pc, #360]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ae:	f023 0103 	bic.w	r1, r3, #3
 80039b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b8:	4a56      	ldr	r2, [pc, #344]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ba:	430b      	orrs	r3, r1
 80039bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039be:	e003      	b.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039e2:	460b      	mov	r3, r1
 80039e4:	4313      	orrs	r3, r2
 80039e6:	f000 809f 	beq.w	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ea:	4b4b      	ldr	r3, [pc, #300]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a4a      	ldr	r2, [pc, #296]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039f6:	f7fd fb73 	bl	80010e0 <HAL_GetTick>
 80039fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fe:	e00b      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a00:	f7fd fb6e 	bl	80010e0 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	2b64      	cmp	r3, #100	@ 0x64
 8003a0e:	d903      	bls.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a10:	2303      	movs	r3, #3
 8003a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a16:	e005      	b.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a18:	4b3f      	ldr	r3, [pc, #252]	@ (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d0ed      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d179      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a2c:	4b39      	ldr	r3, [pc, #228]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a34:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a38:	4053      	eors	r3, r2
 8003a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d015      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a42:	4b34      	ldr	r3, [pc, #208]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a4a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a4e:	4b31      	ldr	r3, [pc, #196]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a52:	4a30      	ldr	r2, [pc, #192]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a58:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a64:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a66:	4a2b      	ldr	r2, [pc, #172]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a72:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a7a:	d118      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fd fb30 	bl	80010e0 <HAL_GetTick>
 8003a80:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a84:	e00d      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a86:	f7fd fb2b 	bl	80010e0 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a90:	1ad2      	subs	r2, r2, r3
 8003a92:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d903      	bls.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003aa0:	e005      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0eb      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d129      	bne.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003abe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ac8:	4b12      	ldr	r3, [pc, #72]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ad8:	091a      	lsrs	r2, r3, #4
 8003ada:	4b10      	ldr	r3, [pc, #64]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	4a0d      	ldr	r2, [pc, #52]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae0:	430b      	orrs	r3, r1
 8003ae2:	6113      	str	r3, [r2, #16]
 8003ae4:	e005      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	4a0a      	ldr	r2, [pc, #40]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af0:	6113      	str	r3, [r2, #16]
 8003af2:	4b08      	ldr	r3, [pc, #32]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003afe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b02:	4a04      	ldr	r2, [pc, #16]	@ (8003b14 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b04:	430b      	orrs	r3, r1
 8003b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b08:	e00e      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b12:	e009      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b14:	58024400 	.word	0x58024400
 8003b18:	58024800 	.word	0x58024800
 8003b1c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b30:	f002 0301 	and.w	r3, r2, #1
 8003b34:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b42:	460b      	mov	r3, r1
 8003b44:	4313      	orrs	r3, r2
 8003b46:	f000 8089 	beq.w	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b4e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b50:	2b28      	cmp	r3, #40	@ 0x28
 8003b52:	d86b      	bhi.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b54:	a201      	add	r2, pc, #4	@ (adr r2, 8003b5c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b5a:	bf00      	nop
 8003b5c:	08003c35 	.word	0x08003c35
 8003b60:	08003c2d 	.word	0x08003c2d
 8003b64:	08003c2d 	.word	0x08003c2d
 8003b68:	08003c2d 	.word	0x08003c2d
 8003b6c:	08003c2d 	.word	0x08003c2d
 8003b70:	08003c2d 	.word	0x08003c2d
 8003b74:	08003c2d 	.word	0x08003c2d
 8003b78:	08003c2d 	.word	0x08003c2d
 8003b7c:	08003c01 	.word	0x08003c01
 8003b80:	08003c2d 	.word	0x08003c2d
 8003b84:	08003c2d 	.word	0x08003c2d
 8003b88:	08003c2d 	.word	0x08003c2d
 8003b8c:	08003c2d 	.word	0x08003c2d
 8003b90:	08003c2d 	.word	0x08003c2d
 8003b94:	08003c2d 	.word	0x08003c2d
 8003b98:	08003c2d 	.word	0x08003c2d
 8003b9c:	08003c17 	.word	0x08003c17
 8003ba0:	08003c2d 	.word	0x08003c2d
 8003ba4:	08003c2d 	.word	0x08003c2d
 8003ba8:	08003c2d 	.word	0x08003c2d
 8003bac:	08003c2d 	.word	0x08003c2d
 8003bb0:	08003c2d 	.word	0x08003c2d
 8003bb4:	08003c2d 	.word	0x08003c2d
 8003bb8:	08003c2d 	.word	0x08003c2d
 8003bbc:	08003c35 	.word	0x08003c35
 8003bc0:	08003c2d 	.word	0x08003c2d
 8003bc4:	08003c2d 	.word	0x08003c2d
 8003bc8:	08003c2d 	.word	0x08003c2d
 8003bcc:	08003c2d 	.word	0x08003c2d
 8003bd0:	08003c2d 	.word	0x08003c2d
 8003bd4:	08003c2d 	.word	0x08003c2d
 8003bd8:	08003c2d 	.word	0x08003c2d
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c2d 	.word	0x08003c2d
 8003be4:	08003c2d 	.word	0x08003c2d
 8003be8:	08003c2d 	.word	0x08003c2d
 8003bec:	08003c2d 	.word	0x08003c2d
 8003bf0:	08003c2d 	.word	0x08003c2d
 8003bf4:	08003c2d 	.word	0x08003c2d
 8003bf8:	08003c2d 	.word	0x08003c2d
 8003bfc:	08003c35 	.word	0x08003c35
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	3308      	adds	r3, #8
 8003c06:	2101      	movs	r1, #1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 ffc3 	bl	8004b94 <RCCEx_PLL2_Config>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c14:	e00f      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	3328      	adds	r3, #40	@ 0x28
 8003c1c:	2101      	movs	r1, #1
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f001 f86a 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c2a:	e004      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c32:	e000      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10a      	bne.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c3e:	4bbf      	ldr	r3, [pc, #764]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c42:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c4c:	4abb      	ldr	r2, [pc, #748]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c4e:	430b      	orrs	r3, r1
 8003c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c52:	e003      	b.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c64:	f002 0302 	and.w	r3, r2, #2
 8003c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c76:	460b      	mov	r3, r1
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	d041      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c80:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c82:	2b05      	cmp	r3, #5
 8003c84:	d824      	bhi.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c86:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003ca5 	.word	0x08003ca5
 8003c94:	08003cbb 	.word	0x08003cbb
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca8:	3308      	adds	r3, #8
 8003caa:	2101      	movs	r1, #1
 8003cac:	4618      	mov	r0, r3
 8003cae:	f000 ff71 	bl	8004b94 <RCCEx_PLL2_Config>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cb8:	e00f      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbe:	3328      	adds	r3, #40	@ 0x28
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f001 f818 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cce:	e004      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd6:	e000      	b.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003cd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10a      	bne.n	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ce2:	4b96      	ldr	r3, [pc, #600]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce6:	f023 0107 	bic.w	r1, r3, #7
 8003cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf0:	4a92      	ldr	r2, [pc, #584]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf2:	430b      	orrs	r3, r1
 8003cf4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cf6:	e003      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f002 0304 	and.w	r3, r2, #4
 8003d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	d044      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	d825      	bhi.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d2c:	a201      	add	r2, pc, #4	@ (adr r2, 8003d34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d32:	bf00      	nop
 8003d34:	08003d81 	.word	0x08003d81
 8003d38:	08003d4d 	.word	0x08003d4d
 8003d3c:	08003d63 	.word	0x08003d63
 8003d40:	08003d81 	.word	0x08003d81
 8003d44:	08003d81 	.word	0x08003d81
 8003d48:	08003d81 	.word	0x08003d81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	3308      	adds	r3, #8
 8003d52:	2101      	movs	r1, #1
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 ff1d 	bl	8004b94 <RCCEx_PLL2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d60:	e00f      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d66:	3328      	adds	r3, #40	@ 0x28
 8003d68:	2101      	movs	r1, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 ffc4 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003d70:	4603      	mov	r3, r0
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d76:	e004      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d7e:	e000      	b.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d10b      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d8a:	4b6c      	ldr	r3, [pc, #432]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d8e:	f023 0107 	bic.w	r1, r3, #7
 8003d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d9a:	4a68      	ldr	r2, [pc, #416]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d9c:	430b      	orrs	r3, r1
 8003d9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da0:	e003      	b.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003da2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f002 0320 	and.w	r3, r2, #32
 8003db6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	d055      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dd6:	d033      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ddc:	d82c      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de2:	d02f      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003de4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003de8:	d826      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dee:	d02b      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003df0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df4:	d820      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003df6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dfa:	d012      	beq.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003dfc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e00:	d81a      	bhi.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d022      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e0a:	d115      	bne.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e10:	3308      	adds	r3, #8
 8003e12:	2100      	movs	r1, #0
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 febd 	bl	8004b94 <RCCEx_PLL2_Config>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e20:	e015      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e26:	3328      	adds	r3, #40	@ 0x28
 8003e28:	2102      	movs	r1, #2
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f000 ff64 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e36:	e00a      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e3e:	e006      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e40:	bf00      	nop
 8003e42:	e004      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e44:	bf00      	nop
 8003e46:	e002      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e000      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d10b      	bne.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e56:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e66:	4a35      	ldr	r2, [pc, #212]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e6c:	e003      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e86:	2300      	movs	r3, #0
 8003e88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4313      	orrs	r3, r2
 8003e94:	d058      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ea2:	d033      	beq.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003ea4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ea8:	d82c      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eaa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eae:	d02f      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb4:	d826      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003eba:	d02b      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ebc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec0:	d820      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ec2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ec6:	d012      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ec8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ecc:	d81a      	bhi.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d022      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ed2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed6:	d115      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003edc:	3308      	adds	r3, #8
 8003ede:	2100      	movs	r1, #0
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f000 fe57 	bl	8004b94 <RCCEx_PLL2_Config>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003eec:	e015      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ef2:	3328      	adds	r3, #40	@ 0x28
 8003ef4:	2102      	movs	r1, #2
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f000 fefe 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003efc:	4603      	mov	r3, r0
 8003efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f02:	e00a      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f0a:	e006      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f0c:	bf00      	nop
 8003f0e:	e004      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f10:	bf00      	nop
 8003f12:	e002      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f14:	bf00      	nop
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10e      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f22:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f32:	4a02      	ldr	r2, [pc, #8]	@ (8003f3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f38:	e006      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f3a:	bf00      	nop
 8003f3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f62:	460b      	mov	r3, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d055      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f74:	d033      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f7a:	d82c      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f80:	d02f      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f86:	d826      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f8c:	d02b      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f92:	d820      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f98:	d012      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f9e:	d81a      	bhi.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d022      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fa8:	d115      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fae:	3308      	adds	r3, #8
 8003fb0:	2100      	movs	r1, #0
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fdee 	bl	8004b94 <RCCEx_PLL2_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fbe:	e015      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc4:	3328      	adds	r3, #40	@ 0x28
 8003fc6:	2102      	movs	r1, #2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fe95 	bl	8004cf8 <RCCEx_PLL3_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fd4:	e00a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fdc:	e006      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fde:	bf00      	nop
 8003fe0:	e004      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe2:	bf00      	nop
 8003fe4:	e002      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10b      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ff4:	4ba1      	ldr	r3, [pc, #644]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ff8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004000:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004004:	4a9d      	ldr	r2, [pc, #628]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004006:	430b      	orrs	r3, r1
 8004008:	6593      	str	r3, [r2, #88]	@ 0x58
 800400a:	e003      	b.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800400c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401c:	f002 0308 	and.w	r3, r2, #8
 8004020:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800402a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800402e:	460b      	mov	r3, r1
 8004030:	4313      	orrs	r3, r2
 8004032:	d01e      	beq.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004038:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800403c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004040:	d10c      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	3328      	adds	r3, #40	@ 0x28
 8004048:	2102      	movs	r1, #2
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fe54 	bl	8004cf8 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d002      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800405c:	4b87      	ldr	r3, [pc, #540]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800405e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004060:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004068:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800406c:	4a83      	ldr	r2, [pc, #524]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406e:	430b      	orrs	r3, r1
 8004070:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800407a:	f002 0310 	and.w	r3, r2, #16
 800407e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004082:	2300      	movs	r3, #0
 8004084:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004088:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800408c:	460b      	mov	r3, r1
 800408e:	4313      	orrs	r3, r2
 8004090:	d01e      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004096:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800409a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409e:	d10c      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3328      	adds	r3, #40	@ 0x28
 80040a6:	2102      	movs	r1, #2
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 fe25 	bl	8004cf8 <RCCEx_PLL3_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d002      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040ba:	4b70      	ldr	r3, [pc, #448]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040ca:	4a6c      	ldr	r2, [pc, #432]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e0:	2300      	movs	r3, #0
 80040e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040ea:	460b      	mov	r3, r1
 80040ec:	4313      	orrs	r3, r2
 80040ee:	d03e      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040fc:	d022      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004102:	d81b      	bhi.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d003      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800410c:	d00b      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800410e:	e015      	b.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	3308      	adds	r3, #8
 8004116:	2100      	movs	r1, #0
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd3b 	bl	8004b94 <RCCEx_PLL2_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004124:	e00f      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412a:	3328      	adds	r3, #40	@ 0x28
 800412c:	2102      	movs	r1, #2
 800412e:	4618      	mov	r0, r3
 8004130:	f000 fde2 	bl	8004cf8 <RCCEx_PLL3_Config>
 8004134:	4603      	mov	r3, r0
 8004136:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800413a:	e004      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004142:	e000      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004144:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800414a:	2b00      	cmp	r3, #0
 800414c:	d10b      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800414e:	4b4b      	ldr	r3, [pc, #300]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800415e:	4a47      	ldr	r2, [pc, #284]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004160:	430b      	orrs	r3, r1
 8004162:	6593      	str	r3, [r2, #88]	@ 0x58
 8004164:	e003      	b.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004166:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800416a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004176:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800417a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800417c:	2300      	movs	r3, #0
 800417e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004180:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004184:	460b      	mov	r3, r1
 8004186:	4313      	orrs	r3, r2
 8004188:	d03b      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800418a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004192:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004196:	d01f      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004198:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419c:	d818      	bhi.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800419e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041a2:	d003      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041a4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041a8:	d007      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041aa:	e011      	b.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041ac:	4b33      	ldr	r3, [pc, #204]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b0:	4a32      	ldr	r2, [pc, #200]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041b8:	e00f      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041be:	3328      	adds	r3, #40	@ 0x28
 80041c0:	2101      	movs	r1, #1
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fd98 	bl	8004cf8 <RCCEx_PLL3_Config>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041ce:	e004      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041d6:	e000      	b.n	80041da <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041e2:	4b26      	ldr	r3, [pc, #152]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f2:	4a22      	ldr	r2, [pc, #136]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041f4:	430b      	orrs	r3, r1
 80041f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80041f8:	e003      	b.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800420e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004210:	2300      	movs	r3, #0
 8004212:	677b      	str	r3, [r7, #116]	@ 0x74
 8004214:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004218:	460b      	mov	r3, r1
 800421a:	4313      	orrs	r3, r2
 800421c:	d034      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800421e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004224:	2b00      	cmp	r3, #0
 8004226:	d003      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800422c:	d007      	beq.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800422e:	e011      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004230:	4b12      	ldr	r3, [pc, #72]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004232:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004234:	4a11      	ldr	r2, [pc, #68]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004236:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800423a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800423c:	e00e      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	3308      	adds	r3, #8
 8004244:	2102      	movs	r1, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f000 fca4 	bl	8004b94 <RCCEx_PLL2_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004252:	e003      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800425a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800425c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004264:	4b05      	ldr	r3, [pc, #20]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004268:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004270:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004272:	4a02      	ldr	r2, [pc, #8]	@ (800427c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004274:	430b      	orrs	r3, r1
 8004276:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004278:	e006      	b.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800427a:	bf00      	nop
 800427c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004284:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004290:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004294:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004296:	2300      	movs	r3, #0
 8004298:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800429a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800429e:	460b      	mov	r3, r1
 80042a0:	4313      	orrs	r3, r2
 80042a2:	d00c      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a8:	3328      	adds	r3, #40	@ 0x28
 80042aa:	2102      	movs	r1, #2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd23 	bl	8004cf8 <RCCEx_PLL3_Config>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042ca:	663b      	str	r3, [r7, #96]	@ 0x60
 80042cc:	2300      	movs	r3, #0
 80042ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042d4:	460b      	mov	r3, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d038      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042e6:	d018      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ec:	d811      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f2:	d014      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042f8:	d80b      	bhi.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d011      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004302:	d106      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004304:	4bc3      	ldr	r3, [pc, #780]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004308:	4ac2      	ldr	r2, [pc, #776]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800430e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004318:	e004      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800431a:	bf00      	nop
 800431c:	e002      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800431e:	bf00      	nop
 8004320:	e000      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004322:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004324:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800432c:	4bb9      	ldr	r3, [pc, #740]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800432e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004330:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800433c:	4ab5      	ldr	r2, [pc, #724]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800433e:	430b      	orrs	r3, r1
 8004340:	6553      	str	r3, [r2, #84]	@ 0x54
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800434c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004354:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004358:	65bb      	str	r3, [r7, #88]	@ 0x58
 800435a:	2300      	movs	r3, #0
 800435c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800435e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004362:	460b      	mov	r3, r1
 8004364:	4313      	orrs	r3, r2
 8004366:	d009      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004368:	4baa      	ldr	r3, [pc, #680]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800436c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004374:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004376:	4aa7      	ldr	r2, [pc, #668]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004378:	430b      	orrs	r3, r1
 800437a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800437c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004384:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004388:	653b      	str	r3, [r7, #80]	@ 0x50
 800438a:	2300      	movs	r3, #0
 800438c:	657b      	str	r3, [r7, #84]	@ 0x54
 800438e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004392:	460b      	mov	r3, r1
 8004394:	4313      	orrs	r3, r2
 8004396:	d00a      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004398:	4b9e      	ldr	r3, [pc, #632]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043a8:	4a9a      	ldr	r2, [pc, #616]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043aa:	430b      	orrs	r3, r1
 80043ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043bc:	2300      	movs	r3, #0
 80043be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d009      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ca:	4b92      	ldr	r3, [pc, #584]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043d8:	4a8e      	ldr	r2, [pc, #568]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043da:	430b      	orrs	r3, r1
 80043dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80043ec:	2300      	movs	r3, #0
 80043ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d00e      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043fa:	4b86      	ldr	r3, [pc, #536]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	4a85      	ldr	r2, [pc, #532]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004400:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004404:	6113      	str	r3, [r2, #16]
 8004406:	4b83      	ldr	r3, [pc, #524]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004408:	6919      	ldr	r1, [r3, #16]
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004412:	4a80      	ldr	r2, [pc, #512]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004414:	430b      	orrs	r3, r1
 8004416:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004424:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004426:	2300      	movs	r3, #0
 8004428:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800442a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d009      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004434:	4b77      	ldr	r3, [pc, #476]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004438:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800443c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004442:	4a74      	ldr	r2, [pc, #464]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004444:	430b      	orrs	r3, r1
 8004446:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004454:	633b      	str	r3, [r7, #48]	@ 0x30
 8004456:	2300      	movs	r3, #0
 8004458:	637b      	str	r3, [r7, #52]	@ 0x34
 800445a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800445e:	460b      	mov	r3, r1
 8004460:	4313      	orrs	r3, r2
 8004462:	d00a      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004464:	4b6b      	ldr	r3, [pc, #428]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004468:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800446c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004470:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004474:	4a67      	ldr	r2, [pc, #412]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004476:	430b      	orrs	r3, r1
 8004478:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	2100      	movs	r1, #0
 8004484:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800448c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004490:	460b      	mov	r3, r1
 8004492:	4313      	orrs	r3, r2
 8004494:	d011      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800449a:	3308      	adds	r3, #8
 800449c:	2100      	movs	r1, #0
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fb78 	bl	8004b94 <RCCEx_PLL2_Config>
 80044a4:	4603      	mov	r3, r0
 80044a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c2:	2100      	movs	r1, #0
 80044c4:	6239      	str	r1, [r7, #32]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80044cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044d0:	460b      	mov	r3, r1
 80044d2:	4313      	orrs	r3, r2
 80044d4:	d011      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044da:	3308      	adds	r3, #8
 80044dc:	2101      	movs	r1, #1
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 fb58 	bl	8004b94 <RCCEx_PLL2_Config>
 80044e4:	4603      	mov	r3, r0
 80044e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d003      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004502:	2100      	movs	r1, #0
 8004504:	61b9      	str	r1, [r7, #24]
 8004506:	f003 0304 	and.w	r3, r3, #4
 800450a:	61fb      	str	r3, [r7, #28]
 800450c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004510:	460b      	mov	r3, r1
 8004512:	4313      	orrs	r3, r2
 8004514:	d011      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800451a:	3308      	adds	r3, #8
 800451c:	2102      	movs	r1, #2
 800451e:	4618      	mov	r0, r3
 8004520:	f000 fb38 	bl	8004b94 <RCCEx_PLL2_Config>
 8004524:	4603      	mov	r3, r0
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800452a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004542:	2100      	movs	r1, #0
 8004544:	6139      	str	r1, [r7, #16]
 8004546:	f003 0308 	and.w	r3, r3, #8
 800454a:	617b      	str	r3, [r7, #20]
 800454c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004550:	460b      	mov	r3, r1
 8004552:	4313      	orrs	r3, r2
 8004554:	d011      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	3328      	adds	r3, #40	@ 0x28
 800455c:	2100      	movs	r1, #0
 800455e:	4618      	mov	r0, r3
 8004560:	f000 fbca 	bl	8004cf8 <RCCEx_PLL3_Config>
 8004564:	4603      	mov	r3, r0
 8004566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800456a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456e:	2b00      	cmp	r3, #0
 8004570:	d003      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004576:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004582:	2100      	movs	r1, #0
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	60fb      	str	r3, [r7, #12]
 800458c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004590:	460b      	mov	r3, r1
 8004592:	4313      	orrs	r3, r2
 8004594:	d011      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800459a:	3328      	adds	r3, #40	@ 0x28
 800459c:	2101      	movs	r1, #1
 800459e:	4618      	mov	r0, r3
 80045a0:	f000 fbaa 	bl	8004cf8 <RCCEx_PLL3_Config>
 80045a4:	4603      	mov	r3, r0
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d003      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c2:	2100      	movs	r1, #0
 80045c4:	6039      	str	r1, [r7, #0]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	607b      	str	r3, [r7, #4]
 80045cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045d0:	460b      	mov	r3, r1
 80045d2:	4313      	orrs	r3, r2
 80045d4:	d011      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	3328      	adds	r3, #40	@ 0x28
 80045dc:	2102      	movs	r1, #2
 80045de:	4618      	mov	r0, r3
 80045e0:	f000 fb8a 	bl	8004cf8 <RCCEx_PLL3_Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80045fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d101      	bne.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	e000      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800460e:	46bd      	mov	sp, r7
 8004610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004614:	58024400 	.word	0x58024400

08004618 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800461c:	f7fe fd96 	bl	800314c <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b06      	ldr	r3, [pc, #24]	@ (800463c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	091b      	lsrs	r3, r3, #4
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4904      	ldr	r1, [pc, #16]	@ (8004640 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	58024400 	.word	0x58024400
 8004640:	0800925c 	.word	0x0800925c

08004644 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004644:	b480      	push	{r7}
 8004646:	b089      	sub	sp, #36	@ 0x24
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800464c:	4ba1      	ldr	r3, [pc, #644]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800464e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004656:	4b9f      	ldr	r3, [pc, #636]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800465a:	0b1b      	lsrs	r3, r3, #12
 800465c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004660:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004662:	4b9c      	ldr	r3, [pc, #624]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800466e:	4b99      	ldr	r3, [pc, #612]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004672:	08db      	lsrs	r3, r3, #3
 8004674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004678:	693a      	ldr	r2, [r7, #16]
 800467a:	fb02 f303 	mul.w	r3, r2, r3
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004686:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f000 8111 	beq.w	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b02      	cmp	r3, #2
 8004696:	f000 8083 	beq.w	80047a0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f200 80a1 	bhi.w	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d003      	beq.n	80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d056      	beq.n	800475c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046ae:	e099      	b.n	80047e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b0:	4b88      	ldr	r3, [pc, #544]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02d      	beq.n	8004718 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046bc:	4b85      	ldr	r3, [pc, #532]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	08db      	lsrs	r3, r3, #3
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	4a84      	ldr	r2, [pc, #528]	@ (80048d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	ee07 3a90 	vmov	s15, r3
 80046d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	ee07 3a90 	vmov	s15, r3
 80046de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046e6:	4b7b      	ldr	r3, [pc, #492]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ee:	ee07 3a90 	vmov	s15, r3
 80046f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046fa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800470a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800470e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004712:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004716:	e087      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	ee07 3a90 	vmov	s15, r3
 800471e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004722:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800472a:	4b6a      	ldr	r3, [pc, #424]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800472e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800473a:	ed97 6a03 	vldr	s12, [r7, #12]
 800473e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800474a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800474e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004756:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800475a:	e065      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	ee07 3a90 	vmov	s15, r3
 8004762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004766:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800476a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800476e:	4b59      	ldr	r3, [pc, #356]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800477e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004782:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800478a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800478e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800479e:	e043      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	ee07 3a90 	vmov	s15, r3
 80047a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047aa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b2:	4b48      	ldr	r3, [pc, #288]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ba:	ee07 3a90 	vmov	s15, r3
 80047be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047c6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047e2:	e021      	b.n	8004828 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	ee07 3a90 	vmov	s15, r3
 80047ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047f6:	4b37      	ldr	r3, [pc, #220]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004806:	ed97 6a03 	vldr	s12, [r7, #12]
 800480a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800480e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004812:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004816:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800481e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004822:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004826:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004828:	4b2a      	ldr	r3, [pc, #168]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482c:	0a5b      	lsrs	r3, r3, #9
 800482e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800483e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004842:	edd7 6a07 	vldr	s13, [r7, #28]
 8004846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800484a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800484e:	ee17 2a90 	vmov	r2, s15
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004856:	4b1f      	ldr	r3, [pc, #124]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	0c1b      	lsrs	r3, r3, #16
 800485c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004860:	ee07 3a90 	vmov	s15, r3
 8004864:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004868:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800486c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004870:	edd7 6a07 	vldr	s13, [r7, #28]
 8004874:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004878:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800487c:	ee17 2a90 	vmov	r2, s15
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004884:	4b13      	ldr	r3, [pc, #76]	@ (80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004888:	0e1b      	lsrs	r3, r3, #24
 800488a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800489a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800489e:	edd7 6a07 	vldr	s13, [r7, #28]
 80048a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048aa:	ee17 2a90 	vmov	r2, s15
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048b2:	e008      	b.n	80048c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	609a      	str	r2, [r3, #8]
}
 80048c6:	bf00      	nop
 80048c8:	3724      	adds	r7, #36	@ 0x24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d0:	4770      	bx	lr
 80048d2:	bf00      	nop
 80048d4:	58024400 	.word	0x58024400
 80048d8:	03d09000 	.word	0x03d09000
 80048dc:	46000000 	.word	0x46000000
 80048e0:	4c742400 	.word	0x4c742400
 80048e4:	4a742400 	.word	0x4a742400
 80048e8:	4af42400 	.word	0x4af42400

080048ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b089      	sub	sp, #36	@ 0x24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048f4:	4ba1      	ldr	r3, [pc, #644]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0303 	and.w	r3, r3, #3
 80048fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048fe:	4b9f      	ldr	r3, [pc, #636]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004900:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004902:	0d1b      	lsrs	r3, r3, #20
 8004904:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004908:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800490a:	4b9c      	ldr	r3, [pc, #624]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800490e:	0a1b      	lsrs	r3, r3, #8
 8004910:	f003 0301 	and.w	r3, r3, #1
 8004914:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004916:	4b99      	ldr	r3, [pc, #612]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491a:	08db      	lsrs	r3, r3, #3
 800491c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	fb02 f303 	mul.w	r3, r2, r3
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	2b00      	cmp	r3, #0
 8004936:	f000 8111 	beq.w	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	2b02      	cmp	r3, #2
 800493e:	f000 8083 	beq.w	8004a48 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f200 80a1 	bhi.w	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d003      	beq.n	8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	2b01      	cmp	r3, #1
 8004954:	d056      	beq.n	8004a04 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004956:	e099      	b.n	8004a8c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004958:	4b88      	ldr	r3, [pc, #544]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d02d      	beq.n	80049c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004964:	4b85      	ldr	r3, [pc, #532]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	08db      	lsrs	r3, r3, #3
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	4a84      	ldr	r2, [pc, #528]	@ (8004b80 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
 8004974:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	ee07 3a90 	vmov	s15, r3
 800497c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800498e:	4b7b      	ldr	r3, [pc, #492]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004996:	ee07 3a90 	vmov	s15, r3
 800499a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800499e:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049be:	e087      	b.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	ee07 3a90 	vmov	s15, r3
 80049c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049da:	ee07 3a90 	vmov	s15, r3
 80049de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a02:	e065      	b.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a0e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a16:	4b59      	ldr	r3, [pc, #356]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1e:	ee07 3a90 	vmov	s15, r3
 8004a22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a46:	e043      	b.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	ee07 3a90 	vmov	s15, r3
 8004a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a52:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5a:	4b48      	ldr	r3, [pc, #288]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a62:	ee07 3a90 	vmov	s15, r3
 8004a66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a6e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a8a:	e021      	b.n	8004ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	ee07 3a90 	vmov	s15, r3
 8004a92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a96:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a9e:	4b37      	ldr	r3, [pc, #220]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004aae:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ab6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004abe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ac6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ace:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ad0:	4b2a      	ldr	r3, [pc, #168]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad4:	0a5b      	lsrs	r3, r3, #9
 8004ad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004aea:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004af2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af6:	ee17 2a90 	vmov	r2, s15
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004afe:	4b1f      	ldr	r3, [pc, #124]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b02:	0c1b      	lsrs	r3, r3, #16
 8004b04:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b08:	ee07 3a90 	vmov	s15, r3
 8004b0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b10:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b14:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b18:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b24:	ee17 2a90 	vmov	r2, s15
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	@ (8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b30:	0e1b      	lsrs	r3, r3, #24
 8004b32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b52:	ee17 2a90 	vmov	r2, s15
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b5a:	e008      	b.n	8004b6e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	609a      	str	r2, [r3, #8]
}
 8004b6e:	bf00      	nop
 8004b70:	3724      	adds	r7, #36	@ 0x24
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr
 8004b7a:	bf00      	nop
 8004b7c:	58024400 	.word	0x58024400
 8004b80:	03d09000 	.word	0x03d09000
 8004b84:	46000000 	.word	0x46000000
 8004b88:	4c742400 	.word	0x4c742400
 8004b8c:	4a742400 	.word	0x4a742400
 8004b90:	4af42400 	.word	0x4af42400

08004b94 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ba2:	4b53      	ldr	r3, [pc, #332]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	d101      	bne.n	8004bb2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e099      	b.n	8004ce6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004bb8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fa8f 	bl	80010e0 <HAL_GetTick>
 8004bc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bc4:	e008      	b.n	8004bd8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bc6:	f7fc fa8b 	bl	80010e0 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e086      	b.n	8004ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bd8:	4b45      	ldr	r3, [pc, #276]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f0      	bne.n	8004bc6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004be4:	4b42      	ldr	r3, [pc, #264]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004be8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	493f      	ldr	r1, [pc, #252]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	3b01      	subs	r3, #1
 8004c08:	025b      	lsls	r3, r3, #9
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	431a      	orrs	r2, r3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	3b01      	subs	r3, #1
 8004c14:	041b      	lsls	r3, r3, #16
 8004c16:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	061b      	lsls	r3, r3, #24
 8004c24:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c28:	4931      	ldr	r1, [pc, #196]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c2e:	4b30      	ldr	r3, [pc, #192]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	492d      	ldr	r1, [pc, #180]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c40:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c44:	f023 0220 	bic.w	r2, r3, #32
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	4928      	ldr	r1, [pc, #160]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c52:	4b27      	ldr	r3, [pc, #156]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	4a26      	ldr	r2, [pc, #152]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	f023 0310 	bic.w	r3, r3, #16
 8004c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c5e:	4b24      	ldr	r3, [pc, #144]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c62:	4b24      	ldr	r3, [pc, #144]	@ (8004cf4 <RCCEx_PLL2_Config+0x160>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	69d2      	ldr	r2, [r2, #28]
 8004c6a:	00d2      	lsls	r2, r2, #3
 8004c6c:	4920      	ldr	r1, [pc, #128]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c72:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c78:	f043 0310 	orr.w	r3, r3, #16
 8004c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c84:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c88:	4a19      	ldr	r2, [pc, #100]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c8a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c90:	e00f      	b.n	8004cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d106      	bne.n	8004ca6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c98:	4b15      	ldr	r3, [pc, #84]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9c:	4a14      	ldr	r2, [pc, #80]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004c9e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ca4:	e005      	b.n	8004cb2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ca6:	4b12      	ldr	r3, [pc, #72]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004caa:	4a11      	ldr	r2, [pc, #68]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004cac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004cb8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cbe:	f7fc fa0f 	bl	80010e0 <HAL_GetTick>
 8004cc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cc4:	e008      	b.n	8004cd8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cc6:	f7fc fa0b 	bl	80010e0 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e006      	b.n	8004ce6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cd8:	4b05      	ldr	r3, [pc, #20]	@ (8004cf0 <RCCEx_PLL2_Config+0x15c>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}
 8004cee:	bf00      	nop
 8004cf0:	58024400 	.word	0x58024400
 8004cf4:	ffff0007 	.word	0xffff0007

08004cf8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d02:	2300      	movs	r3, #0
 8004d04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d06:	4b53      	ldr	r3, [pc, #332]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0a:	f003 0303 	and.w	r3, r3, #3
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d101      	bne.n	8004d16 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e099      	b.n	8004e4a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a4e      	ldr	r2, [pc, #312]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d22:	f7fc f9dd 	bl	80010e0 <HAL_GetTick>
 8004d26:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d28:	e008      	b.n	8004d3c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d2a:	f7fc f9d9 	bl	80010e0 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e086      	b.n	8004e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d3c:	4b45      	ldr	r3, [pc, #276]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1f0      	bne.n	8004d2a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d48:	4b42      	ldr	r3, [pc, #264]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d4c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	051b      	lsls	r3, r3, #20
 8004d56:	493f      	ldr	r1, [pc, #252]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	3b01      	subs	r3, #1
 8004d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	025b      	lsls	r3, r3, #9
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	431a      	orrs	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	041b      	lsls	r3, r3, #16
 8004d7a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	3b01      	subs	r3, #1
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d8c:	4931      	ldr	r1, [pc, #196]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d92:	4b30      	ldr	r3, [pc, #192]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	695b      	ldr	r3, [r3, #20]
 8004d9e:	492d      	ldr	r1, [pc, #180]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004da0:	4313      	orrs	r3, r2
 8004da2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004da4:	4b2b      	ldr	r3, [pc, #172]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4928      	ldr	r1, [pc, #160]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004db2:	4313      	orrs	r3, r2
 8004db4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004db6:	4b27      	ldr	r3, [pc, #156]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004db8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dba:	4a26      	ldr	r2, [pc, #152]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dc2:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dc6:	4b24      	ldr	r3, [pc, #144]	@ (8004e58 <RCCEx_PLL3_Config+0x160>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	69d2      	ldr	r2, [r2, #28]
 8004dce:	00d2      	lsls	r2, r2, #3
 8004dd0:	4920      	ldr	r1, [pc, #128]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a1e      	ldr	r2, [pc, #120]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d106      	bne.n	8004df6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004de8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dec:	4a19      	ldr	r2, [pc, #100]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dee:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004df2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004df4:	e00f      	b.n	8004e16 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d106      	bne.n	8004e0a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004dfc:	4b15      	ldr	r3, [pc, #84]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	4a14      	ldr	r2, [pc, #80]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e02:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e06:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e08:	e005      	b.n	8004e16 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e0a:	4b12      	ldr	r3, [pc, #72]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0e:	4a11      	ldr	r2, [pc, #68]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e10:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e14:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e16:	4b0f      	ldr	r3, [pc, #60]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a0e      	ldr	r2, [pc, #56]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e22:	f7fc f95d 	bl	80010e0 <HAL_GetTick>
 8004e26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e28:	e008      	b.n	8004e3c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e2a:	f7fc f959 	bl	80010e0 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e006      	b.n	8004e4a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <RCCEx_PLL3_Config+0x15c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3710      	adds	r7, #16
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	58024400 	.word	0x58024400
 8004e58:	ffff0007 	.word	0xffff0007

08004e5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b082      	sub	sp, #8
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e042      	b.n	8004ef4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d106      	bne.n	8004e86 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f7fb fee7 	bl	8000c54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2224      	movs	r2, #36	@ 0x24
 8004e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d002      	beq.n	8004eac <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 fd90 	bl	80059cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f825 	bl	8004efc <UART_SetConfig>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e01b      	b.n	8004ef4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685a      	ldr	r2, [r3, #4]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004eca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004eda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f042 0201 	orr.w	r2, r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 fe0f 	bl	8005b10 <UART_CheckIdleState>
 8004ef2:	4603      	mov	r3, r0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3708      	adds	r7, #8
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004efc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f00:	b092      	sub	sp, #72	@ 0x48
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	431a      	orrs	r2, r3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	431a      	orrs	r2, r3
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	69db      	ldr	r3, [r3, #28]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	4bbe      	ldr	r3, [pc, #760]	@ (8005224 <UART_SetConfig+0x328>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	697a      	ldr	r2, [r7, #20]
 8004f30:	6812      	ldr	r2, [r2, #0]
 8004f32:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f34:	430b      	orrs	r3, r1
 8004f36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	68da      	ldr	r2, [r3, #12]
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	699b      	ldr	r3, [r3, #24]
 8004f52:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4ab3      	ldr	r2, [pc, #716]	@ (8005228 <UART_SetConfig+0x32c>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d004      	beq.n	8004f68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f64:	4313      	orrs	r3, r2
 8004f66:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4baf      	ldr	r3, [pc, #700]	@ (800522c <UART_SetConfig+0x330>)
 8004f70:	4013      	ands	r3, r2
 8004f72:	697a      	ldr	r2, [r7, #20]
 8004f74:	6812      	ldr	r2, [r2, #0]
 8004f76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f78:	430b      	orrs	r3, r1
 8004f7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f82:	f023 010f 	bic.w	r1, r3, #15
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	430a      	orrs	r2, r1
 8004f90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4aa6      	ldr	r2, [pc, #664]	@ (8005230 <UART_SetConfig+0x334>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d177      	bne.n	800508c <UART_SetConfig+0x190>
 8004f9c:	4ba5      	ldr	r3, [pc, #660]	@ (8005234 <UART_SetConfig+0x338>)
 8004f9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fa4:	2b28      	cmp	r3, #40	@ 0x28
 8004fa6:	d86d      	bhi.n	8005084 <UART_SetConfig+0x188>
 8004fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb0 <UART_SetConfig+0xb4>)
 8004faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fae:	bf00      	nop
 8004fb0:	08005055 	.word	0x08005055
 8004fb4:	08005085 	.word	0x08005085
 8004fb8:	08005085 	.word	0x08005085
 8004fbc:	08005085 	.word	0x08005085
 8004fc0:	08005085 	.word	0x08005085
 8004fc4:	08005085 	.word	0x08005085
 8004fc8:	08005085 	.word	0x08005085
 8004fcc:	08005085 	.word	0x08005085
 8004fd0:	0800505d 	.word	0x0800505d
 8004fd4:	08005085 	.word	0x08005085
 8004fd8:	08005085 	.word	0x08005085
 8004fdc:	08005085 	.word	0x08005085
 8004fe0:	08005085 	.word	0x08005085
 8004fe4:	08005085 	.word	0x08005085
 8004fe8:	08005085 	.word	0x08005085
 8004fec:	08005085 	.word	0x08005085
 8004ff0:	08005065 	.word	0x08005065
 8004ff4:	08005085 	.word	0x08005085
 8004ff8:	08005085 	.word	0x08005085
 8004ffc:	08005085 	.word	0x08005085
 8005000:	08005085 	.word	0x08005085
 8005004:	08005085 	.word	0x08005085
 8005008:	08005085 	.word	0x08005085
 800500c:	08005085 	.word	0x08005085
 8005010:	0800506d 	.word	0x0800506d
 8005014:	08005085 	.word	0x08005085
 8005018:	08005085 	.word	0x08005085
 800501c:	08005085 	.word	0x08005085
 8005020:	08005085 	.word	0x08005085
 8005024:	08005085 	.word	0x08005085
 8005028:	08005085 	.word	0x08005085
 800502c:	08005085 	.word	0x08005085
 8005030:	08005075 	.word	0x08005075
 8005034:	08005085 	.word	0x08005085
 8005038:	08005085 	.word	0x08005085
 800503c:	08005085 	.word	0x08005085
 8005040:	08005085 	.word	0x08005085
 8005044:	08005085 	.word	0x08005085
 8005048:	08005085 	.word	0x08005085
 800504c:	08005085 	.word	0x08005085
 8005050:	0800507d 	.word	0x0800507d
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e222      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800505c:	2304      	movs	r3, #4
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e21e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005064:	2308      	movs	r3, #8
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e21a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800506c:	2310      	movs	r3, #16
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e216      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005074:	2320      	movs	r3, #32
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e212      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800507c:	2340      	movs	r3, #64	@ 0x40
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e20e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005084:	2380      	movs	r3, #128	@ 0x80
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e20a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a69      	ldr	r2, [pc, #420]	@ (8005238 <UART_SetConfig+0x33c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d130      	bne.n	80050f8 <UART_SetConfig+0x1fc>
 8005096:	4b67      	ldr	r3, [pc, #412]	@ (8005234 <UART_SetConfig+0x338>)
 8005098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800509a:	f003 0307 	and.w	r3, r3, #7
 800509e:	2b05      	cmp	r3, #5
 80050a0:	d826      	bhi.n	80050f0 <UART_SetConfig+0x1f4>
 80050a2:	a201      	add	r2, pc, #4	@ (adr r2, 80050a8 <UART_SetConfig+0x1ac>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050c1 	.word	0x080050c1
 80050ac:	080050c9 	.word	0x080050c9
 80050b0:	080050d1 	.word	0x080050d1
 80050b4:	080050d9 	.word	0x080050d9
 80050b8:	080050e1 	.word	0x080050e1
 80050bc:	080050e9 	.word	0x080050e9
 80050c0:	2300      	movs	r3, #0
 80050c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c6:	e1ec      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050c8:	2304      	movs	r3, #4
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e1e8      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050d0:	2308      	movs	r3, #8
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e1e4      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050d8:	2310      	movs	r3, #16
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e1e0      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050e0:	2320      	movs	r3, #32
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e1dc      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050e8:	2340      	movs	r3, #64	@ 0x40
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e1d8      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050f0:	2380      	movs	r3, #128	@ 0x80
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e1d4      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	4a4f      	ldr	r2, [pc, #316]	@ (800523c <UART_SetConfig+0x340>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d130      	bne.n	8005164 <UART_SetConfig+0x268>
 8005102:	4b4c      	ldr	r3, [pc, #304]	@ (8005234 <UART_SetConfig+0x338>)
 8005104:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	2b05      	cmp	r3, #5
 800510c:	d826      	bhi.n	800515c <UART_SetConfig+0x260>
 800510e:	a201      	add	r2, pc, #4	@ (adr r2, 8005114 <UART_SetConfig+0x218>)
 8005110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005114:	0800512d 	.word	0x0800512d
 8005118:	08005135 	.word	0x08005135
 800511c:	0800513d 	.word	0x0800513d
 8005120:	08005145 	.word	0x08005145
 8005124:	0800514d 	.word	0x0800514d
 8005128:	08005155 	.word	0x08005155
 800512c:	2300      	movs	r3, #0
 800512e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005132:	e1b6      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005134:	2304      	movs	r3, #4
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e1b2      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800513c:	2308      	movs	r3, #8
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e1ae      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005144:	2310      	movs	r3, #16
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e1aa      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800514c:	2320      	movs	r3, #32
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e1a6      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005154:	2340      	movs	r3, #64	@ 0x40
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e1a2      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e19e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a35      	ldr	r2, [pc, #212]	@ (8005240 <UART_SetConfig+0x344>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d130      	bne.n	80051d0 <UART_SetConfig+0x2d4>
 800516e:	4b31      	ldr	r3, [pc, #196]	@ (8005234 <UART_SetConfig+0x338>)
 8005170:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005172:	f003 0307 	and.w	r3, r3, #7
 8005176:	2b05      	cmp	r3, #5
 8005178:	d826      	bhi.n	80051c8 <UART_SetConfig+0x2cc>
 800517a:	a201      	add	r2, pc, #4	@ (adr r2, 8005180 <UART_SetConfig+0x284>)
 800517c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005180:	08005199 	.word	0x08005199
 8005184:	080051a1 	.word	0x080051a1
 8005188:	080051a9 	.word	0x080051a9
 800518c:	080051b1 	.word	0x080051b1
 8005190:	080051b9 	.word	0x080051b9
 8005194:	080051c1 	.word	0x080051c1
 8005198:	2300      	movs	r3, #0
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e180      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051a0:	2304      	movs	r3, #4
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e17c      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051a8:	2308      	movs	r3, #8
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e178      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051b0:	2310      	movs	r3, #16
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e174      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051b8:	2320      	movs	r3, #32
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e170      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051c0:	2340      	movs	r3, #64	@ 0x40
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e16c      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051c8:	2380      	movs	r3, #128	@ 0x80
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e168      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a1b      	ldr	r2, [pc, #108]	@ (8005244 <UART_SetConfig+0x348>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d142      	bne.n	8005260 <UART_SetConfig+0x364>
 80051da:	4b16      	ldr	r3, [pc, #88]	@ (8005234 <UART_SetConfig+0x338>)
 80051dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051de:	f003 0307 	and.w	r3, r3, #7
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	d838      	bhi.n	8005258 <UART_SetConfig+0x35c>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <UART_SetConfig+0x2f0>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	08005205 	.word	0x08005205
 80051f0:	0800520d 	.word	0x0800520d
 80051f4:	08005215 	.word	0x08005215
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005249 	.word	0x08005249
 8005200:	08005251 	.word	0x08005251
 8005204:	2300      	movs	r3, #0
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e14a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800520c:	2304      	movs	r3, #4
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e146      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005214:	2308      	movs	r3, #8
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e142      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800521c:	2310      	movs	r3, #16
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e13e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005224:	cfff69f3 	.word	0xcfff69f3
 8005228:	58000c00 	.word	0x58000c00
 800522c:	11fff4ff 	.word	0x11fff4ff
 8005230:	40011000 	.word	0x40011000
 8005234:	58024400 	.word	0x58024400
 8005238:	40004400 	.word	0x40004400
 800523c:	40004800 	.word	0x40004800
 8005240:	40004c00 	.word	0x40004c00
 8005244:	40005000 	.word	0x40005000
 8005248:	2320      	movs	r3, #32
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524e:	e128      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005250:	2340      	movs	r3, #64	@ 0x40
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e124      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005258:	2380      	movs	r3, #128	@ 0x80
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e120      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4acb      	ldr	r2, [pc, #812]	@ (8005594 <UART_SetConfig+0x698>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d176      	bne.n	8005358 <UART_SetConfig+0x45c>
 800526a:	4bcb      	ldr	r3, [pc, #812]	@ (8005598 <UART_SetConfig+0x69c>)
 800526c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800526e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005272:	2b28      	cmp	r3, #40	@ 0x28
 8005274:	d86c      	bhi.n	8005350 <UART_SetConfig+0x454>
 8005276:	a201      	add	r2, pc, #4	@ (adr r2, 800527c <UART_SetConfig+0x380>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	08005321 	.word	0x08005321
 8005280:	08005351 	.word	0x08005351
 8005284:	08005351 	.word	0x08005351
 8005288:	08005351 	.word	0x08005351
 800528c:	08005351 	.word	0x08005351
 8005290:	08005351 	.word	0x08005351
 8005294:	08005351 	.word	0x08005351
 8005298:	08005351 	.word	0x08005351
 800529c:	08005329 	.word	0x08005329
 80052a0:	08005351 	.word	0x08005351
 80052a4:	08005351 	.word	0x08005351
 80052a8:	08005351 	.word	0x08005351
 80052ac:	08005351 	.word	0x08005351
 80052b0:	08005351 	.word	0x08005351
 80052b4:	08005351 	.word	0x08005351
 80052b8:	08005351 	.word	0x08005351
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005351 	.word	0x08005351
 80052c4:	08005351 	.word	0x08005351
 80052c8:	08005351 	.word	0x08005351
 80052cc:	08005351 	.word	0x08005351
 80052d0:	08005351 	.word	0x08005351
 80052d4:	08005351 	.word	0x08005351
 80052d8:	08005351 	.word	0x08005351
 80052dc:	08005339 	.word	0x08005339
 80052e0:	08005351 	.word	0x08005351
 80052e4:	08005351 	.word	0x08005351
 80052e8:	08005351 	.word	0x08005351
 80052ec:	08005351 	.word	0x08005351
 80052f0:	08005351 	.word	0x08005351
 80052f4:	08005351 	.word	0x08005351
 80052f8:	08005351 	.word	0x08005351
 80052fc:	08005341 	.word	0x08005341
 8005300:	08005351 	.word	0x08005351
 8005304:	08005351 	.word	0x08005351
 8005308:	08005351 	.word	0x08005351
 800530c:	08005351 	.word	0x08005351
 8005310:	08005351 	.word	0x08005351
 8005314:	08005351 	.word	0x08005351
 8005318:	08005351 	.word	0x08005351
 800531c:	08005349 	.word	0x08005349
 8005320:	2301      	movs	r3, #1
 8005322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005326:	e0bc      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005328:	2304      	movs	r3, #4
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e0b8      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005330:	2308      	movs	r3, #8
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e0b4      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005338:	2310      	movs	r3, #16
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e0b0      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005340:	2320      	movs	r3, #32
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e0ac      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005348:	2340      	movs	r3, #64	@ 0x40
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e0a8      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e0a4      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4a8f      	ldr	r2, [pc, #572]	@ (800559c <UART_SetConfig+0x6a0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d130      	bne.n	80053c4 <UART_SetConfig+0x4c8>
 8005362:	4b8d      	ldr	r3, [pc, #564]	@ (8005598 <UART_SetConfig+0x69c>)
 8005364:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	2b05      	cmp	r3, #5
 800536c:	d826      	bhi.n	80053bc <UART_SetConfig+0x4c0>
 800536e:	a201      	add	r2, pc, #4	@ (adr r2, 8005374 <UART_SetConfig+0x478>)
 8005370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005374:	0800538d 	.word	0x0800538d
 8005378:	08005395 	.word	0x08005395
 800537c:	0800539d 	.word	0x0800539d
 8005380:	080053a5 	.word	0x080053a5
 8005384:	080053ad 	.word	0x080053ad
 8005388:	080053b5 	.word	0x080053b5
 800538c:	2300      	movs	r3, #0
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e086      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005394:	2304      	movs	r3, #4
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e082      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800539c:	2308      	movs	r3, #8
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e07e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80053a4:	2310      	movs	r3, #16
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e07a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80053ac:	2320      	movs	r3, #32
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e076      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80053b4:	2340      	movs	r3, #64	@ 0x40
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e072      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80053bc:	2380      	movs	r3, #128	@ 0x80
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e06e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a75      	ldr	r2, [pc, #468]	@ (80055a0 <UART_SetConfig+0x6a4>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d130      	bne.n	8005430 <UART_SetConfig+0x534>
 80053ce:	4b72      	ldr	r3, [pc, #456]	@ (8005598 <UART_SetConfig+0x69c>)
 80053d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053d2:	f003 0307 	and.w	r3, r3, #7
 80053d6:	2b05      	cmp	r3, #5
 80053d8:	d826      	bhi.n	8005428 <UART_SetConfig+0x52c>
 80053da:	a201      	add	r2, pc, #4	@ (adr r2, 80053e0 <UART_SetConfig+0x4e4>)
 80053dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e0:	080053f9 	.word	0x080053f9
 80053e4:	08005401 	.word	0x08005401
 80053e8:	08005409 	.word	0x08005409
 80053ec:	08005411 	.word	0x08005411
 80053f0:	08005419 	.word	0x08005419
 80053f4:	08005421 	.word	0x08005421
 80053f8:	2300      	movs	r3, #0
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e050      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e04c      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e048      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e044      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005418:	2320      	movs	r3, #32
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e040      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005420:	2340      	movs	r3, #64	@ 0x40
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e03c      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005428:	2380      	movs	r3, #128	@ 0x80
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e038      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4a5b      	ldr	r2, [pc, #364]	@ (80055a4 <UART_SetConfig+0x6a8>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d130      	bne.n	800549c <UART_SetConfig+0x5a0>
 800543a:	4b57      	ldr	r3, [pc, #348]	@ (8005598 <UART_SetConfig+0x69c>)
 800543c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	2b05      	cmp	r3, #5
 8005444:	d826      	bhi.n	8005494 <UART_SetConfig+0x598>
 8005446:	a201      	add	r2, pc, #4	@ (adr r2, 800544c <UART_SetConfig+0x550>)
 8005448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800544c:	08005465 	.word	0x08005465
 8005450:	0800546d 	.word	0x0800546d
 8005454:	08005475 	.word	0x08005475
 8005458:	0800547d 	.word	0x0800547d
 800545c:	08005485 	.word	0x08005485
 8005460:	0800548d 	.word	0x0800548d
 8005464:	2302      	movs	r3, #2
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e01a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800546c:	2304      	movs	r3, #4
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e016      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005474:	2308      	movs	r3, #8
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e012      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800547c:	2310      	movs	r3, #16
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e00e      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005484:	2320      	movs	r3, #32
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e00a      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800548c:	2340      	movs	r3, #64	@ 0x40
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e006      	b.n	80054a2 <UART_SetConfig+0x5a6>
 8005494:	2380      	movs	r3, #128	@ 0x80
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e002      	b.n	80054a2 <UART_SetConfig+0x5a6>
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a3f      	ldr	r2, [pc, #252]	@ (80055a4 <UART_SetConfig+0x6a8>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	f040 80f8 	bne.w	800569e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054ae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054b2:	2b20      	cmp	r3, #32
 80054b4:	dc46      	bgt.n	8005544 <UART_SetConfig+0x648>
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	f2c0 8082 	blt.w	80055c0 <UART_SetConfig+0x6c4>
 80054bc:	3b02      	subs	r3, #2
 80054be:	2b1e      	cmp	r3, #30
 80054c0:	d87e      	bhi.n	80055c0 <UART_SetConfig+0x6c4>
 80054c2:	a201      	add	r2, pc, #4	@ (adr r2, 80054c8 <UART_SetConfig+0x5cc>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	0800554b 	.word	0x0800554b
 80054cc:	080055c1 	.word	0x080055c1
 80054d0:	08005553 	.word	0x08005553
 80054d4:	080055c1 	.word	0x080055c1
 80054d8:	080055c1 	.word	0x080055c1
 80054dc:	080055c1 	.word	0x080055c1
 80054e0:	08005563 	.word	0x08005563
 80054e4:	080055c1 	.word	0x080055c1
 80054e8:	080055c1 	.word	0x080055c1
 80054ec:	080055c1 	.word	0x080055c1
 80054f0:	080055c1 	.word	0x080055c1
 80054f4:	080055c1 	.word	0x080055c1
 80054f8:	080055c1 	.word	0x080055c1
 80054fc:	080055c1 	.word	0x080055c1
 8005500:	08005573 	.word	0x08005573
 8005504:	080055c1 	.word	0x080055c1
 8005508:	080055c1 	.word	0x080055c1
 800550c:	080055c1 	.word	0x080055c1
 8005510:	080055c1 	.word	0x080055c1
 8005514:	080055c1 	.word	0x080055c1
 8005518:	080055c1 	.word	0x080055c1
 800551c:	080055c1 	.word	0x080055c1
 8005520:	080055c1 	.word	0x080055c1
 8005524:	080055c1 	.word	0x080055c1
 8005528:	080055c1 	.word	0x080055c1
 800552c:	080055c1 	.word	0x080055c1
 8005530:	080055c1 	.word	0x080055c1
 8005534:	080055c1 	.word	0x080055c1
 8005538:	080055c1 	.word	0x080055c1
 800553c:	080055c1 	.word	0x080055c1
 8005540:	080055b3 	.word	0x080055b3
 8005544:	2b40      	cmp	r3, #64	@ 0x40
 8005546:	d037      	beq.n	80055b8 <UART_SetConfig+0x6bc>
 8005548:	e03a      	b.n	80055c0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800554a:	f7ff f865 	bl	8004618 <HAL_RCCEx_GetD3PCLK1Freq>
 800554e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005550:	e03c      	b.n	80055cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005552:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005556:	4618      	mov	r0, r3
 8005558:	f7ff f874 	bl	8004644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800555c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005560:	e034      	b.n	80055cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005562:	f107 0318 	add.w	r3, r7, #24
 8005566:	4618      	mov	r0, r3
 8005568:	f7ff f9c0 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005570:	e02c      	b.n	80055cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005572:	4b09      	ldr	r3, [pc, #36]	@ (8005598 <UART_SetConfig+0x69c>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d016      	beq.n	80055ac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800557e:	4b06      	ldr	r3, [pc, #24]	@ (8005598 <UART_SetConfig+0x69c>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	08db      	lsrs	r3, r3, #3
 8005584:	f003 0303 	and.w	r3, r3, #3
 8005588:	4a07      	ldr	r2, [pc, #28]	@ (80055a8 <UART_SetConfig+0x6ac>)
 800558a:	fa22 f303 	lsr.w	r3, r2, r3
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005590:	e01c      	b.n	80055cc <UART_SetConfig+0x6d0>
 8005592:	bf00      	nop
 8005594:	40011400 	.word	0x40011400
 8005598:	58024400 	.word	0x58024400
 800559c:	40007800 	.word	0x40007800
 80055a0:	40007c00 	.word	0x40007c00
 80055a4:	58000c00 	.word	0x58000c00
 80055a8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055ac:	4b9d      	ldr	r3, [pc, #628]	@ (8005824 <UART_SetConfig+0x928>)
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b0:	e00c      	b.n	80055cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055b2:	4b9d      	ldr	r3, [pc, #628]	@ (8005828 <UART_SetConfig+0x92c>)
 80055b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b6:	e009      	b.n	80055cc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055be:	e005      	b.n	80055cc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055c0:	2300      	movs	r3, #0
 80055c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055ca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f000 81de 	beq.w	8005990 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055d4:	697b      	ldr	r3, [r7, #20]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d8:	4a94      	ldr	r2, [pc, #592]	@ (800582c <UART_SetConfig+0x930>)
 80055da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055de:	461a      	mov	r2, r3
 80055e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80055e6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	685a      	ldr	r2, [r3, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d305      	bcc.n	8005604 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005600:	429a      	cmp	r2, r3
 8005602:	d903      	bls.n	800560c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800560a:	e1c1      	b.n	8005990 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800560c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560e:	2200      	movs	r2, #0
 8005610:	60bb      	str	r3, [r7, #8]
 8005612:	60fa      	str	r2, [r7, #12]
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	4a84      	ldr	r2, [pc, #528]	@ (800582c <UART_SetConfig+0x930>)
 800561a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800561e:	b29b      	uxth	r3, r3
 8005620:	2200      	movs	r2, #0
 8005622:	603b      	str	r3, [r7, #0]
 8005624:	607a      	str	r2, [r7, #4]
 8005626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800562a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800562e:	f7fa fe57 	bl	80002e0 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	f04f 0300 	mov.w	r3, #0
 8005642:	020b      	lsls	r3, r1, #8
 8005644:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005648:	0202      	lsls	r2, r0, #8
 800564a:	6979      	ldr	r1, [r7, #20]
 800564c:	6849      	ldr	r1, [r1, #4]
 800564e:	0849      	lsrs	r1, r1, #1
 8005650:	2000      	movs	r0, #0
 8005652:	460c      	mov	r4, r1
 8005654:	4605      	mov	r5, r0
 8005656:	eb12 0804 	adds.w	r8, r2, r4
 800565a:	eb43 0905 	adc.w	r9, r3, r5
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	469a      	mov	sl, r3
 8005666:	4693      	mov	fp, r2
 8005668:	4652      	mov	r2, sl
 800566a:	465b      	mov	r3, fp
 800566c:	4640      	mov	r0, r8
 800566e:	4649      	mov	r1, r9
 8005670:	f7fa fe36 	bl	80002e0 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005682:	d308      	bcc.n	8005696 <UART_SetConfig+0x79a>
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800568a:	d204      	bcs.n	8005696 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005692:	60da      	str	r2, [r3, #12]
 8005694:	e17c      	b.n	8005990 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800569c:	e178      	b.n	8005990 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	69db      	ldr	r3, [r3, #28]
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056a6:	f040 80c5 	bne.w	8005834 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	dc48      	bgt.n	8005744 <UART_SetConfig+0x848>
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	db7b      	blt.n	80057ae <UART_SetConfig+0x8b2>
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	d879      	bhi.n	80057ae <UART_SetConfig+0x8b2>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x7c4>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	0800574b 	.word	0x0800574b
 80056c4:	08005753 	.word	0x08005753
 80056c8:	080057af 	.word	0x080057af
 80056cc:	080057af 	.word	0x080057af
 80056d0:	0800575b 	.word	0x0800575b
 80056d4:	080057af 	.word	0x080057af
 80056d8:	080057af 	.word	0x080057af
 80056dc:	080057af 	.word	0x080057af
 80056e0:	0800576b 	.word	0x0800576b
 80056e4:	080057af 	.word	0x080057af
 80056e8:	080057af 	.word	0x080057af
 80056ec:	080057af 	.word	0x080057af
 80056f0:	080057af 	.word	0x080057af
 80056f4:	080057af 	.word	0x080057af
 80056f8:	080057af 	.word	0x080057af
 80056fc:	080057af 	.word	0x080057af
 8005700:	0800577b 	.word	0x0800577b
 8005704:	080057af 	.word	0x080057af
 8005708:	080057af 	.word	0x080057af
 800570c:	080057af 	.word	0x080057af
 8005710:	080057af 	.word	0x080057af
 8005714:	080057af 	.word	0x080057af
 8005718:	080057af 	.word	0x080057af
 800571c:	080057af 	.word	0x080057af
 8005720:	080057af 	.word	0x080057af
 8005724:	080057af 	.word	0x080057af
 8005728:	080057af 	.word	0x080057af
 800572c:	080057af 	.word	0x080057af
 8005730:	080057af 	.word	0x080057af
 8005734:	080057af 	.word	0x080057af
 8005738:	080057af 	.word	0x080057af
 800573c:	080057af 	.word	0x080057af
 8005740:	080057a1 	.word	0x080057a1
 8005744:	2b40      	cmp	r3, #64	@ 0x40
 8005746:	d02e      	beq.n	80057a6 <UART_SetConfig+0x8aa>
 8005748:	e031      	b.n	80057ae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800574a:	f7fd fd2f 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800574e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005750:	e033      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005752:	f7fd fd41 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 8005756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005758:	e02f      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800575a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe ff70 	bl	8004644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005768:	e027      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800576a:	f107 0318 	add.w	r3, r7, #24
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff f8bc 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005778:	e01f      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800577a:	4b2d      	ldr	r3, [pc, #180]	@ (8005830 <UART_SetConfig+0x934>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0320 	and.w	r3, r3, #32
 8005782:	2b00      	cmp	r3, #0
 8005784:	d009      	beq.n	800579a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005786:	4b2a      	ldr	r3, [pc, #168]	@ (8005830 <UART_SetConfig+0x934>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	08db      	lsrs	r3, r3, #3
 800578c:	f003 0303 	and.w	r3, r3, #3
 8005790:	4a24      	ldr	r2, [pc, #144]	@ (8005824 <UART_SetConfig+0x928>)
 8005792:	fa22 f303 	lsr.w	r3, r2, r3
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005798:	e00f      	b.n	80057ba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800579a:	4b22      	ldr	r3, [pc, #136]	@ (8005824 <UART_SetConfig+0x928>)
 800579c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800579e:	e00c      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a0:	4b21      	ldr	r3, [pc, #132]	@ (8005828 <UART_SetConfig+0x92c>)
 80057a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a4:	e009      	b.n	80057ba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ac:	e005      	b.n	80057ba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f000 80e7 	beq.w	8005990 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	4a19      	ldr	r2, [pc, #100]	@ (800582c <UART_SetConfig+0x930>)
 80057c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057cc:	461a      	mov	r2, r3
 80057ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d4:	005a      	lsls	r2, r3, #1
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	441a      	add	r2, r3
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ea:	2b0f      	cmp	r3, #15
 80057ec:	d916      	bls.n	800581c <UART_SetConfig+0x920>
 80057ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057f4:	d212      	bcs.n	800581c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f023 030f 	bic.w	r3, r3, #15
 80057fe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	b29b      	uxth	r3, r3
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	b29a      	uxth	r2, r3
 800580c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800580e:	4313      	orrs	r3, r2
 8005810:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005818:	60da      	str	r2, [r3, #12]
 800581a:	e0b9      	b.n	8005990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005822:	e0b5      	b.n	8005990 <UART_SetConfig+0xa94>
 8005824:	03d09000 	.word	0x03d09000
 8005828:	003d0900 	.word	0x003d0900
 800582c:	0800926c 	.word	0x0800926c
 8005830:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005834:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005838:	2b20      	cmp	r3, #32
 800583a:	dc49      	bgt.n	80058d0 <UART_SetConfig+0x9d4>
 800583c:	2b00      	cmp	r3, #0
 800583e:	db7c      	blt.n	800593a <UART_SetConfig+0xa3e>
 8005840:	2b20      	cmp	r3, #32
 8005842:	d87a      	bhi.n	800593a <UART_SetConfig+0xa3e>
 8005844:	a201      	add	r2, pc, #4	@ (adr r2, 800584c <UART_SetConfig+0x950>)
 8005846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800584a:	bf00      	nop
 800584c:	080058d7 	.word	0x080058d7
 8005850:	080058df 	.word	0x080058df
 8005854:	0800593b 	.word	0x0800593b
 8005858:	0800593b 	.word	0x0800593b
 800585c:	080058e7 	.word	0x080058e7
 8005860:	0800593b 	.word	0x0800593b
 8005864:	0800593b 	.word	0x0800593b
 8005868:	0800593b 	.word	0x0800593b
 800586c:	080058f7 	.word	0x080058f7
 8005870:	0800593b 	.word	0x0800593b
 8005874:	0800593b 	.word	0x0800593b
 8005878:	0800593b 	.word	0x0800593b
 800587c:	0800593b 	.word	0x0800593b
 8005880:	0800593b 	.word	0x0800593b
 8005884:	0800593b 	.word	0x0800593b
 8005888:	0800593b 	.word	0x0800593b
 800588c:	08005907 	.word	0x08005907
 8005890:	0800593b 	.word	0x0800593b
 8005894:	0800593b 	.word	0x0800593b
 8005898:	0800593b 	.word	0x0800593b
 800589c:	0800593b 	.word	0x0800593b
 80058a0:	0800593b 	.word	0x0800593b
 80058a4:	0800593b 	.word	0x0800593b
 80058a8:	0800593b 	.word	0x0800593b
 80058ac:	0800593b 	.word	0x0800593b
 80058b0:	0800593b 	.word	0x0800593b
 80058b4:	0800593b 	.word	0x0800593b
 80058b8:	0800593b 	.word	0x0800593b
 80058bc:	0800593b 	.word	0x0800593b
 80058c0:	0800593b 	.word	0x0800593b
 80058c4:	0800593b 	.word	0x0800593b
 80058c8:	0800593b 	.word	0x0800593b
 80058cc:	0800592d 	.word	0x0800592d
 80058d0:	2b40      	cmp	r3, #64	@ 0x40
 80058d2:	d02e      	beq.n	8005932 <UART_SetConfig+0xa36>
 80058d4:	e031      	b.n	800593a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058d6:	f7fd fc69 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 80058da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058dc:	e033      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058de:	f7fd fc7b 	bl	80031d8 <HAL_RCC_GetPCLK2Freq>
 80058e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e4:	e02f      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe feaa 	bl	8004644 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f4:	e027      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058f6:	f107 0318 	add.w	r3, r7, #24
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7fe fff6 	bl	80048ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005904:	e01f      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005906:	4b2d      	ldr	r3, [pc, #180]	@ (80059bc <UART_SetConfig+0xac0>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0320 	and.w	r3, r3, #32
 800590e:	2b00      	cmp	r3, #0
 8005910:	d009      	beq.n	8005926 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005912:	4b2a      	ldr	r3, [pc, #168]	@ (80059bc <UART_SetConfig+0xac0>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	08db      	lsrs	r3, r3, #3
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	4a28      	ldr	r2, [pc, #160]	@ (80059c0 <UART_SetConfig+0xac4>)
 800591e:	fa22 f303 	lsr.w	r3, r2, r3
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005924:	e00f      	b.n	8005946 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005926:	4b26      	ldr	r3, [pc, #152]	@ (80059c0 <UART_SetConfig+0xac4>)
 8005928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800592a:	e00c      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800592c:	4b25      	ldr	r3, [pc, #148]	@ (80059c4 <UART_SetConfig+0xac8>)
 800592e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005930:	e009      	b.n	8005946 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005938:	e005      	b.n	8005946 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800593a:	2300      	movs	r3, #0
 800593c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005944:	bf00      	nop
    }

    if (pclk != 0U)
 8005946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005948:	2b00      	cmp	r3, #0
 800594a:	d021      	beq.n	8005990 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005950:	4a1d      	ldr	r2, [pc, #116]	@ (80059c8 <UART_SetConfig+0xacc>)
 8005952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005956:	461a      	mov	r2, r3
 8005958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800595a:	fbb3 f2f2 	udiv	r2, r3, r2
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	085b      	lsrs	r3, r3, #1
 8005964:	441a      	add	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	fbb2 f3f3 	udiv	r3, r2, r3
 800596e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	2b0f      	cmp	r3, #15
 8005974:	d909      	bls.n	800598a <UART_SetConfig+0xa8e>
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800597c:	d205      	bcs.n	800598a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	b29a      	uxth	r2, r3
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	60da      	str	r2, [r3, #12]
 8005988:	e002      	b.n	8005990 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	2201      	movs	r2, #1
 8005994:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2200      	movs	r2, #0
 80059a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2200      	movs	r2, #0
 80059aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3748      	adds	r7, #72	@ 0x48
 80059b4:	46bd      	mov	sp, r7
 80059b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059ba:	bf00      	nop
 80059bc:	58024400 	.word	0x58024400
 80059c0:	03d09000 	.word	0x03d09000
 80059c4:	003d0900 	.word	0x003d0900
 80059c8:	0800926c 	.word	0x0800926c

080059cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b083      	sub	sp, #12
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d00a      	beq.n	80059f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	430a      	orrs	r2, r1
 80059f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00a      	beq.n	8005a18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	430a      	orrs	r2, r1
 8005a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00a      	beq.n	8005a3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	685b      	ldr	r3, [r3, #4]
 8005a2a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00a      	beq.n	8005a5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	430a      	orrs	r2, r1
 8005a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d00a      	beq.n	8005a7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	430a      	orrs	r2, r1
 8005a7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a82:	f003 0320 	and.w	r3, r3, #32
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d00a      	beq.n	8005aa0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	689b      	ldr	r3, [r3, #8]
 8005a90:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d01a      	beq.n	8005ae2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ac6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005aca:	d10a      	bne.n	8005ae2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d00a      	beq.n	8005b04 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	685b      	ldr	r3, [r3, #4]
 8005af4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	605a      	str	r2, [r3, #4]
  }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr

08005b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b098      	sub	sp, #96	@ 0x60
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b20:	f7fb fade 	bl	80010e0 <HAL_GetTick>
 8005b24:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0308 	and.w	r3, r3, #8
 8005b30:	2b08      	cmp	r3, #8
 8005b32:	d12f      	bne.n	8005b94 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b34:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b38:	9300      	str	r3, [sp, #0]
 8005b3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 f88e 	bl	8005c64 <UART_WaitOnFlagUntilTimeout>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d022      	beq.n	8005b94 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b62:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	461a      	mov	r2, r3
 8005b6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b6e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b72:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e6      	bne.n	8005b4e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b90:	2303      	movs	r3, #3
 8005b92:	e063      	b.n	8005c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 0304 	and.w	r3, r3, #4
 8005b9e:	2b04      	cmp	r3, #4
 8005ba0:	d149      	bne.n	8005c36 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ba2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005ba6:	9300      	str	r3, [sp, #0]
 8005ba8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005baa:	2200      	movs	r2, #0
 8005bac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 f857 	bl	8005c64 <UART_WaitOnFlagUntilTimeout>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d03c      	beq.n	8005c36 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bda:	633b      	str	r3, [r7, #48]	@ 0x30
 8005bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e6      	bne.n	8005bbc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	3308      	adds	r3, #8
 8005bf4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f023 0301 	bic.w	r3, r3, #1
 8005c04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	3308      	adds	r3, #8
 8005c0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c0e:	61fa      	str	r2, [r7, #28]
 8005c10:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	69b9      	ldr	r1, [r7, #24]
 8005c14:	69fa      	ldr	r2, [r7, #28]
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c32:	2303      	movs	r3, #3
 8005c34:	e012      	b.n	8005c5c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2220      	movs	r2, #32
 8005c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3758      	adds	r7, #88	@ 0x58
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	603b      	str	r3, [r7, #0]
 8005c70:	4613      	mov	r3, r2
 8005c72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c74:	e04f      	b.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c7c:	d04b      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c7e:	f7fb fa2f 	bl	80010e0 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d302      	bcc.n	8005c94 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e04e      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f003 0304 	and.w	r3, r3, #4
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d037      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	2b80      	cmp	r3, #128	@ 0x80
 8005caa:	d034      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2b40      	cmp	r3, #64	@ 0x40
 8005cb0:	d031      	beq.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	69db      	ldr	r3, [r3, #28]
 8005cb8:	f003 0308 	and.w	r3, r3, #8
 8005cbc:	2b08      	cmp	r3, #8
 8005cbe:	d110      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2208      	movs	r2, #8
 8005cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f839 	bl	8005d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2208      	movs	r2, #8
 8005cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e029      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf0:	d111      	bne.n	8005d16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cfa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f81f 	bl	8005d40 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d12:	2303      	movs	r3, #3
 8005d14:	e00f      	b.n	8005d36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	4013      	ands	r3, r2
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	bf0c      	ite	eq
 8005d26:	2301      	moveq	r3, #1
 8005d28:	2300      	movne	r3, #0
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d0a0      	beq.n	8005c76 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3710      	adds	r7, #16
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
	...

08005d40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b095      	sub	sp, #84	@ 0x54
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d66:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d68:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e6      	bne.n	8005d48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	3308      	adds	r3, #8
 8005d80:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d82:	6a3b      	ldr	r3, [r7, #32]
 8005d84:	e853 3f00 	ldrex	r3, [r3]
 8005d88:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <UART_EndRxTransfer+0xc8>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	3308      	adds	r3, #8
 8005d98:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da2:	e841 2300 	strex	r3, r2, [r1]
 8005da6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1e5      	bne.n	8005d7a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d118      	bne.n	8005de8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0310 	bic.w	r3, r3, #16
 8005dca:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	613b      	str	r3, [r7, #16]
   return(result);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e6      	bne.n	8005db6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dfc:	bf00      	nop
 8005dfe:	3754      	adds	r7, #84	@ 0x54
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr
 8005e08:	effffffe 	.word	0xeffffffe

08005e0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e027      	b.n	8005e72 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2224      	movs	r2, #36	@ 0x24
 8005e2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0201 	bic.w	r2, r2, #1
 8005e48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3714      	adds	r7, #20
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr

08005e7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e02d      	b.n	8005ef2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2224      	movs	r2, #36	@ 0x24
 8005ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0201 	bic.w	r2, r2, #1
 8005ebc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	683a      	ldr	r2, [r7, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f850 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68fa      	ldr	r2, [r7, #12]
 8005ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2220      	movs	r2, #32
 8005ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3710      	adds	r7, #16
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b084      	sub	sp, #16
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d101      	bne.n	8005f12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f0e:	2302      	movs	r3, #2
 8005f10:	e02d      	b.n	8005f6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2224      	movs	r2, #36	@ 0x24
 8005f1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0201 	bic.w	r2, r2, #1
 8005f38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f812 	bl	8005f78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	68fa      	ldr	r2, [r7, #12]
 8005f5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d108      	bne.n	8005f9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f98:	e031      	b.n	8005ffe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f9a:	2310      	movs	r3, #16
 8005f9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f9e:	2310      	movs	r3, #16
 8005fa0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	0e5b      	lsrs	r3, r3, #25
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689b      	ldr	r3, [r3, #8]
 8005fb8:	0f5b      	lsrs	r3, r3, #29
 8005fba:	b2db      	uxtb	r3, r3
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	7b3a      	ldrb	r2, [r7, #12]
 8005fc6:	4911      	ldr	r1, [pc, #68]	@ (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fc8:	5c8a      	ldrb	r2, [r1, r2]
 8005fca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fce:	7b3a      	ldrb	r2, [r7, #12]
 8005fd0:	490f      	ldr	r1, [pc, #60]	@ (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fd8:	b29a      	uxth	r2, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	7b7a      	ldrb	r2, [r7, #13]
 8005fe4:	4909      	ldr	r1, [pc, #36]	@ (800600c <UARTEx_SetNbDataToProcess+0x94>)
 8005fe6:	5c8a      	ldrb	r2, [r1, r2]
 8005fe8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fec:	7b7a      	ldrb	r2, [r7, #13]
 8005fee:	4908      	ldr	r1, [pc, #32]	@ (8006010 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ff2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	08009284 	.word	0x08009284
 8006010:	0800928c 	.word	0x0800928c

08006014 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006014:	b084      	sub	sp, #16
 8006016:	b580      	push	{r7, lr}
 8006018:	b084      	sub	sp, #16
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	f107 001c 	add.w	r0, r7, #28
 8006022:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006026:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800602a:	2b01      	cmp	r3, #1
 800602c:	d121      	bne.n	8006072 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	4b2c      	ldr	r3, [pc, #176]	@ (80060f0 <USB_CoreInit+0xdc>)
 8006040:	4013      	ands	r3, r2
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006056:	2b01      	cmp	r3, #1
 8006058:	d105      	bne.n	8006066 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	68db      	ldr	r3, [r3, #12]
 800605e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 faaa 	bl	80065c0 <USB_CoreReset>
 800606c:	4603      	mov	r3, r0
 800606e:	73fb      	strb	r3, [r7, #15]
 8006070:	e01b      	b.n	80060aa <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 fa9e 	bl	80065c0 <USB_CoreReset>
 8006084:	4603      	mov	r3, r0
 8006086:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006088:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800608c:	2b00      	cmp	r3, #0
 800608e:	d106      	bne.n	800609e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	639a      	str	r2, [r3, #56]	@ 0x38
 800609c:	e005      	b.n	80060aa <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060aa:	7fbb      	ldrb	r3, [r7, #30]
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d116      	bne.n	80060de <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060b4:	b29a      	uxth	r2, r3
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <USB_CoreInit+0xe0>)
 80060c0:	4313      	orrs	r3, r2
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f043 0206 	orr.w	r2, r3, #6
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060de:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ea:	b004      	add	sp, #16
 80060ec:	4770      	bx	lr
 80060ee:	bf00      	nop
 80060f0:	ffbdffbf 	.word	0xffbdffbf
 80060f4:	03ee0000 	.word	0x03ee0000

080060f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	f023 0201 	bic.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800611a:	b580      	push	{r7, lr}
 800611c:	b084      	sub	sp, #16
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
 8006122:	460b      	mov	r3, r1
 8006124:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006136:	78fb      	ldrb	r3, [r7, #3]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d115      	bne.n	8006168 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006148:	200a      	movs	r0, #10
 800614a:	f7fa ffd5 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	330a      	adds	r3, #10
 8006152:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fa25 	bl	80065a4 <USB_GetMode>
 800615a:	4603      	mov	r3, r0
 800615c:	2b01      	cmp	r3, #1
 800615e:	d01e      	beq.n	800619e <USB_SetCurrentMode+0x84>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2bc7      	cmp	r3, #199	@ 0xc7
 8006164:	d9f0      	bls.n	8006148 <USB_SetCurrentMode+0x2e>
 8006166:	e01a      	b.n	800619e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d115      	bne.n	800619a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	68db      	ldr	r3, [r3, #12]
 8006172:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800617a:	200a      	movs	r0, #10
 800617c:	f7fa ffbc 	bl	80010f8 <HAL_Delay>
      ms += 10U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	330a      	adds	r3, #10
 8006184:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f000 fa0c 	bl	80065a4 <USB_GetMode>
 800618c:	4603      	mov	r3, r0
 800618e:	2b00      	cmp	r3, #0
 8006190:	d005      	beq.n	800619e <USB_SetCurrentMode+0x84>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2bc7      	cmp	r3, #199	@ 0xc7
 8006196:	d9f0      	bls.n	800617a <USB_SetCurrentMode+0x60>
 8006198:	e001      	b.n	800619e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e005      	b.n	80061aa <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2bc8      	cmp	r3, #200	@ 0xc8
 80061a2:	d101      	bne.n	80061a8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3710      	adds	r7, #16
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
	...

080061b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061b4:	b084      	sub	sp, #16
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b086      	sub	sp, #24
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061c6:	2300      	movs	r3, #0
 80061c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061ce:	2300      	movs	r3, #0
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	e009      	b.n	80061e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3340      	adds	r3, #64	@ 0x40
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	4413      	add	r3, r2
 80061de:	2200      	movs	r2, #0
 80061e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	3301      	adds	r3, #1
 80061e6:	613b      	str	r3, [r7, #16]
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	2b0e      	cmp	r3, #14
 80061ec:	d9f2      	bls.n	80061d4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d11c      	bne.n	8006230 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006204:	f043 0302 	orr.w	r3, r3, #2
 8006208:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800620e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e005      	b.n	800623c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006234:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006242:	461a      	mov	r2, r3
 8006244:	2300      	movs	r3, #0
 8006246:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006248:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800624c:	2b01      	cmp	r3, #1
 800624e:	d10d      	bne.n	800626c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006254:	2b00      	cmp	r3, #0
 8006256:	d104      	bne.n	8006262 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f968 	bl	8006530 <USB_SetDevSpeed>
 8006260:	e008      	b.n	8006274 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006262:	2101      	movs	r1, #1
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f963 	bl	8006530 <USB_SetDevSpeed>
 800626a:	e003      	b.n	8006274 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800626c:	2103      	movs	r1, #3
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f95e 	bl	8006530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006274:	2110      	movs	r1, #16
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f8fa 	bl	8006470 <USB_FlushTxFifo>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006282:	2301      	movs	r3, #1
 8006284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 f924 	bl	80064d4 <USB_FlushRxFifo>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d001      	beq.n	8006296 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006292:	2301      	movs	r3, #1
 8006294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800629c:	461a      	mov	r2, r3
 800629e:	2300      	movs	r3, #0
 80062a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a8:	461a      	mov	r2, r3
 80062aa:	2300      	movs	r3, #0
 80062ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	461a      	mov	r2, r3
 80062b6:	2300      	movs	r3, #0
 80062b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	e043      	b.n	8006348 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062d6:	d118      	bne.n	800630a <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	015a      	lsls	r2, r3, #5
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	4413      	add	r3, r2
 80062e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ea:	461a      	mov	r2, r3
 80062ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f0:	6013      	str	r3, [r2, #0]
 80062f2:	e013      	b.n	800631c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	461a      	mov	r2, r3
 8006302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006306:	6013      	str	r3, [r2, #0]
 8006308:	e008      	b.n	800631c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006316:	461a      	mov	r2, r3
 8006318:	2300      	movs	r3, #0
 800631a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006328:	461a      	mov	r2, r3
 800632a:	2300      	movs	r3, #0
 800632c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	015a      	lsls	r2, r3, #5
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	4413      	add	r3, r2
 8006336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800633a:	461a      	mov	r2, r3
 800633c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006342:	693b      	ldr	r3, [r7, #16]
 8006344:	3301      	adds	r3, #1
 8006346:	613b      	str	r3, [r7, #16]
 8006348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800634c:	461a      	mov	r2, r3
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	4293      	cmp	r3, r2
 8006352:	d3b5      	bcc.n	80062c0 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
 8006358:	e043      	b.n	80063e2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800636c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006370:	d118      	bne.n	80063a4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d10a      	bne.n	800638e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	015a      	lsls	r2, r3, #5
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006384:	461a      	mov	r2, r3
 8006386:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	e013      	b.n	80063b6 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639a:	461a      	mov	r2, r3
 800639c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	e008      	b.n	80063b6 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	461a      	mov	r2, r3
 80063b2:	2300      	movs	r3, #0
 80063b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	015a      	lsls	r2, r3, #5
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4413      	add	r3, r2
 80063be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c2:	461a      	mov	r2, r3
 80063c4:	2300      	movs	r3, #0
 80063c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	015a      	lsls	r2, r3, #5
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d4:	461a      	mov	r2, r3
 80063d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	3301      	adds	r3, #1
 80063e0:	613b      	str	r3, [r7, #16]
 80063e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063e6:	461a      	mov	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d3b5      	bcc.n	800635a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063f4:	691b      	ldr	r3, [r3, #16]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006400:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800640e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	f043 0210 	orr.w	r2, r3, #16
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	699a      	ldr	r2, [r3, #24]
 8006428:	4b0f      	ldr	r3, [pc, #60]	@ (8006468 <USB_DevInit+0x2b4>)
 800642a:	4313      	orrs	r3, r2
 800642c:	687a      	ldr	r2, [r7, #4]
 800642e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006430:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f043 0208 	orr.w	r2, r3, #8
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006444:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	699a      	ldr	r2, [r3, #24]
 8006450:	4b06      	ldr	r3, [pc, #24]	@ (800646c <USB_DevInit+0x2b8>)
 8006452:	4313      	orrs	r3, r2
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006458:	7dfb      	ldrb	r3, [r7, #23]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006464:	b004      	add	sp, #16
 8006466:	4770      	bx	lr
 8006468:	803c3800 	.word	0x803c3800
 800646c:	40000004 	.word	0x40000004

08006470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3301      	adds	r3, #1
 8006482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800648a:	d901      	bls.n	8006490 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e01b      	b.n	80064c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	2b00      	cmp	r3, #0
 8006496:	daf2      	bge.n	800647e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	019b      	lsls	r3, r3, #6
 80064a0:	f043 0220 	orr.w	r2, r3, #32
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b4:	d901      	bls.n	80064ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e006      	b.n	80064c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0320 	and.w	r3, r3, #32
 80064c2:	2b20      	cmp	r3, #32
 80064c4:	d0f0      	beq.n	80064a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3714      	adds	r7, #20
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064dc:	2300      	movs	r3, #0
 80064de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ec:	d901      	bls.n	80064f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e018      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	daf2      	bge.n	80064e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2210      	movs	r2, #16
 8006502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	3301      	adds	r3, #1
 8006508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006510:	d901      	bls.n	8006516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e006      	b.n	8006524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0310 	and.w	r3, r3, #16
 800651e:	2b10      	cmp	r3, #16
 8006520:	d0f0      	beq.n	8006504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006522:	2300      	movs	r3, #0
}
 8006524:	4618      	mov	r0, r3
 8006526:	3714      	adds	r7, #20
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	460b      	mov	r3, r1
 800653a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006550:	4313      	orrs	r3, r2
 8006552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006562:	b480      	push	{r7}
 8006564:	b085      	sub	sp, #20
 8006566:	af00      	add	r7, sp, #0
 8006568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68fa      	ldr	r2, [r7, #12]
 8006578:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800657c:	f023 0303 	bic.w	r3, r3, #3
 8006580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	68fa      	ldr	r2, [r7, #12]
 800658c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006590:	f043 0302 	orr.w	r3, r3, #2
 8006594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	f003 0301 	and.w	r3, r3, #1
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	370c      	adds	r7, #12
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3301      	adds	r3, #1
 80065d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065d8:	d901      	bls.n	80065de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e01b      	b.n	8006616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	daf2      	bge.n	80065cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065e6:	2300      	movs	r3, #0
 80065e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f043 0201 	orr.w	r2, r3, #1
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3301      	adds	r3, #1
 80065fa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006602:	d901      	bls.n	8006608 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e006      	b.n	8006616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	f003 0301 	and.w	r3, r3, #1
 8006610:	2b01      	cmp	r3, #1
 8006612:	d0f0      	beq.n	80065f6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <__NVIC_SetPriority>:
{
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	4603      	mov	r3, r0
 800662c:	6039      	str	r1, [r7, #0]
 800662e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8006630:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006634:	2b00      	cmp	r3, #0
 8006636:	db0a      	blt.n	800664e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	490c      	ldr	r1, [pc, #48]	@ (8006670 <__NVIC_SetPriority+0x4c>)
 800663e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006642:	0112      	lsls	r2, r2, #4
 8006644:	b2d2      	uxtb	r2, r2
 8006646:	440b      	add	r3, r1
 8006648:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800664c:	e00a      	b.n	8006664 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	b2da      	uxtb	r2, r3
 8006652:	4908      	ldr	r1, [pc, #32]	@ (8006674 <__NVIC_SetPriority+0x50>)
 8006654:	88fb      	ldrh	r3, [r7, #6]
 8006656:	f003 030f 	and.w	r3, r3, #15
 800665a:	3b04      	subs	r3, #4
 800665c:	0112      	lsls	r2, r2, #4
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	440b      	add	r3, r1
 8006662:	761a      	strb	r2, [r3, #24]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	e000e100 	.word	0xe000e100
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800667c:	2100      	movs	r1, #0
 800667e:	f06f 0004 	mvn.w	r0, #4
 8006682:	f7ff ffcf 	bl	8006624 <__NVIC_SetPriority>
#endif
}
 8006686:	bf00      	nop
 8006688:	bd80      	pop	{r7, pc}
	...

0800668c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800668c:	b480      	push	{r7}
 800668e:	b083      	sub	sp, #12
 8006690:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006692:	f3ef 8305 	mrs	r3, IPSR
 8006696:	603b      	str	r3, [r7, #0]
  return(result);
 8006698:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800669e:	f06f 0305 	mvn.w	r3, #5
 80066a2:	607b      	str	r3, [r7, #4]
 80066a4:	e00c      	b.n	80066c0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80066a6:	4b0a      	ldr	r3, [pc, #40]	@ (80066d0 <osKernelInitialize+0x44>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d105      	bne.n	80066ba <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80066ae:	4b08      	ldr	r3, [pc, #32]	@ (80066d0 <osKernelInitialize+0x44>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80066b4:	2300      	movs	r3, #0
 80066b6:	607b      	str	r3, [r7, #4]
 80066b8:	e002      	b.n	80066c0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80066ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066be:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80066c0:	687b      	ldr	r3, [r7, #4]
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr
 80066ce:	bf00      	nop
 80066d0:	24000760 	.word	0x24000760

080066d4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b082      	sub	sp, #8
 80066d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066da:	f3ef 8305 	mrs	r3, IPSR
 80066de:	603b      	str	r3, [r7, #0]
  return(result);
 80066e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d003      	beq.n	80066ee <osKernelStart+0x1a>
    stat = osErrorISR;
 80066e6:	f06f 0305 	mvn.w	r3, #5
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e010      	b.n	8006710 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80066ee:	4b0b      	ldr	r3, [pc, #44]	@ (800671c <osKernelStart+0x48>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d109      	bne.n	800670a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80066f6:	f7ff ffbf 	bl	8006678 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80066fa:	4b08      	ldr	r3, [pc, #32]	@ (800671c <osKernelStart+0x48>)
 80066fc:	2202      	movs	r2, #2
 80066fe:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006700:	f001 f87a 	bl	80077f8 <vTaskStartScheduler>
      stat = osOK;
 8006704:	2300      	movs	r3, #0
 8006706:	607b      	str	r3, [r7, #4]
 8006708:	e002      	b.n	8006710 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800670a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800670e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006710:	687b      	ldr	r3, [r7, #4]
}
 8006712:	4618      	mov	r0, r3
 8006714:	3708      	adds	r7, #8
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	24000760 	.word	0x24000760

08006720 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08e      	sub	sp, #56	@ 0x38
 8006724:	af04      	add	r7, sp, #16
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006730:	f3ef 8305 	mrs	r3, IPSR
 8006734:	617b      	str	r3, [r7, #20]
  return(result);
 8006736:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006738:	2b00      	cmp	r3, #0
 800673a:	d17e      	bne.n	800683a <osThreadNew+0x11a>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d07b      	beq.n	800683a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006742:	2380      	movs	r3, #128	@ 0x80
 8006744:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006746:	2318      	movs	r3, #24
 8006748:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800674a:	2300      	movs	r3, #0
 800674c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006752:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d045      	beq.n	80067e6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d002      	beq.n	8006768 <osThreadNew+0x48>
        name = attr->name;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d002      	beq.n	8006776 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d008      	beq.n	800678e <osThreadNew+0x6e>
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	2b38      	cmp	r3, #56	@ 0x38
 8006780:	d805      	bhi.n	800678e <osThreadNew+0x6e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	685b      	ldr	r3, [r3, #4]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <osThreadNew+0x72>
        return (NULL);
 800678e:	2300      	movs	r3, #0
 8006790:	e054      	b.n	800683c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	089b      	lsrs	r3, r3, #2
 80067a0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <osThreadNew+0xa8>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	2b5b      	cmp	r3, #91	@ 0x5b
 80067b0:	d90a      	bls.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d006      	beq.n	80067c8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <osThreadNew+0xa8>
        mem = 1;
 80067c2:	2301      	movs	r3, #1
 80067c4:	61bb      	str	r3, [r7, #24]
 80067c6:	e010      	b.n	80067ea <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10c      	bne.n	80067ea <osThreadNew+0xca>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d108      	bne.n	80067ea <osThreadNew+0xca>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d104      	bne.n	80067ea <osThreadNew+0xca>
          mem = 0;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	e001      	b.n	80067ea <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80067e6:	2300      	movs	r3, #0
 80067e8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	2b01      	cmp	r3, #1
 80067ee:	d110      	bne.n	8006812 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80067f8:	9202      	str	r2, [sp, #8]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	6a3a      	ldr	r2, [r7, #32]
 8006804:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 fe1a 	bl	8007440 <xTaskCreateStatic>
 800680c:	4603      	mov	r3, r0
 800680e:	613b      	str	r3, [r7, #16]
 8006810:	e013      	b.n	800683a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d110      	bne.n	800683a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	b29a      	uxth	r2, r3
 800681c:	f107 0310 	add.w	r3, r7, #16
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f000 fe68 	bl	8007500 <xTaskCreate>
 8006830:	4603      	mov	r3, r0
 8006832:	2b01      	cmp	r3, #1
 8006834:	d001      	beq.n	800683a <osThreadNew+0x11a>
            hTask = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800683a:	693b      	ldr	r3, [r7, #16]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3728      	adds	r7, #40	@ 0x28
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}

08006844 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800684c:	f3ef 8305 	mrs	r3, IPSR
 8006850:	60bb      	str	r3, [r7, #8]
  return(result);
 8006852:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006854:	2b00      	cmp	r3, #0
 8006856:	d003      	beq.n	8006860 <osDelay+0x1c>
    stat = osErrorISR;
 8006858:	f06f 0305 	mvn.w	r3, #5
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	e007      	b.n	8006870 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <osDelay+0x2c>
      vTaskDelay(ticks);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 ff8e 	bl	800778c <vTaskDelay>
    }
  }

  return (stat);
 8006870:	68fb      	ldr	r3, [r7, #12]
}
 8006872:	4618      	mov	r0, r3
 8006874:	3710      	adds	r7, #16
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
	...

0800687c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800687c:	b480      	push	{r7}
 800687e:	b085      	sub	sp, #20
 8006880:	af00      	add	r7, sp, #0
 8006882:	60f8      	str	r0, [r7, #12]
 8006884:	60b9      	str	r1, [r7, #8]
 8006886:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	4a07      	ldr	r2, [pc, #28]	@ (80068a8 <vApplicationGetIdleTaskMemory+0x2c>)
 800688c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4a06      	ldr	r2, [pc, #24]	@ (80068ac <vApplicationGetIdleTaskMemory+0x30>)
 8006892:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2280      	movs	r2, #128	@ 0x80
 8006898:	601a      	str	r2, [r3, #0]
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr
 80068a6:	bf00      	nop
 80068a8:	24000764 	.word	0x24000764
 80068ac:	240007c0 	.word	0x240007c0

080068b0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	4a07      	ldr	r2, [pc, #28]	@ (80068dc <vApplicationGetTimerTaskMemory+0x2c>)
 80068c0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	4a06      	ldr	r2, [pc, #24]	@ (80068e0 <vApplicationGetTimerTaskMemory+0x30>)
 80068c6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80068ce:	601a      	str	r2, [r3, #0]
}
 80068d0:	bf00      	nop
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	240009c0 	.word	0x240009c0
 80068e0:	24000a1c 	.word	0x24000a1c

080068e4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f103 0208 	add.w	r2, r3, #8
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80068fc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f103 0208 	add.w	r2, r3, #8
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f103 0208 	add.w	r2, r3, #8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006932:	bf00      	nop
 8006934:	370c      	adds	r7, #12
 8006936:	46bd      	mov	sp, r7
 8006938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693c:	4770      	bx	lr

0800693e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800693e:	b480      	push	{r7}
 8006940:	b085      	sub	sp, #20
 8006942:	af00      	add	r7, sp, #0
 8006944:	6078      	str	r0, [r7, #4]
 8006946:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	689a      	ldr	r2, [r3, #8]
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	683a      	ldr	r2, [r7, #0]
 8006962:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	683a      	ldr	r2, [r7, #0]
 8006968:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	687a      	ldr	r2, [r7, #4]
 800696e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	1c5a      	adds	r2, r3, #1
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	601a      	str	r2, [r3, #0]
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006986:	b480      	push	{r7}
 8006988:	b085      	sub	sp, #20
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
 800698e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800699c:	d103      	bne.n	80069a6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	60fb      	str	r3, [r7, #12]
 80069a4:	e00c      	b.n	80069c0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	3308      	adds	r3, #8
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e002      	b.n	80069b4 <vListInsert+0x2e>
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	60fb      	str	r3, [r7, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	68ba      	ldr	r2, [r7, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d2f6      	bcs.n	80069ae <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	683a      	ldr	r2, [r7, #0]
 80069ce:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	1c5a      	adds	r2, r3, #1
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	601a      	str	r2, [r3, #0]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6892      	ldr	r2, [r2, #8]
 8006a0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6852      	ldr	r2, [r2, #4]
 8006a18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d103      	bne.n	8006a2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689a      	ldr	r2, [r3, #8]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3714      	adds	r7, #20
 8006a44:	46bd      	mov	sp, r7
 8006a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4a:	4770      	bx	lr

08006a4c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d10b      	bne.n	8006a78 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006a78:	f002 f876 	bl	8008b68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006a84:	68f9      	ldr	r1, [r7, #12]
 8006a86:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006a88:	fb01 f303 	mul.w	r3, r1, r3
 8006a8c:	441a      	add	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	68f9      	ldr	r1, [r7, #12]
 8006aac:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006aae:	fb01 f303 	mul.w	r3, r1, r3
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	22ff      	movs	r2, #255	@ 0xff
 8006abc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	22ff      	movs	r2, #255	@ 0xff
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d114      	bne.n	8006af8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d01a      	beq.n	8006b0c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	3310      	adds	r3, #16
 8006ada:	4618      	mov	r0, r3
 8006adc:	f001 f91a 	bl	8007d14 <xTaskRemoveFromEventList>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d012      	beq.n	8006b0c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b1c <xQueueGenericReset+0xd0>)
 8006ae8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006aec:	601a      	str	r2, [r3, #0]
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	e009      	b.n	8006b0c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	3310      	adds	r3, #16
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fef1 	bl	80068e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	3324      	adds	r3, #36	@ 0x24
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff feec 	bl	80068e4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006b0c:	f002 f85e 	bl	8008bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006b10:	2301      	movs	r3, #1
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	3710      	adds	r7, #16
 8006b16:	46bd      	mov	sp, r7
 8006b18:	bd80      	pop	{r7, pc}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed04 	.word	0xe000ed04

08006b20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	@ 0x38
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d10b      	bne.n	8006b4c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006b46:	bf00      	nop
 8006b48:	bf00      	nop
 8006b4a:	e7fd      	b.n	8006b48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10b      	bne.n	8006b6a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b56:	f383 8811 	msr	BASEPRI, r3
 8006b5a:	f3bf 8f6f 	isb	sy
 8006b5e:	f3bf 8f4f 	dsb	sy
 8006b62:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b64:	bf00      	nop
 8006b66:	bf00      	nop
 8006b68:	e7fd      	b.n	8006b66 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d002      	beq.n	8006b76 <xQueueGenericCreateStatic+0x56>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <xQueueGenericCreateStatic+0x5a>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericCreateStatic+0x5c>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10b      	bne.n	8006b98 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	623b      	str	r3, [r7, #32]
}
 8006b92:	bf00      	nop
 8006b94:	bf00      	nop
 8006b96:	e7fd      	b.n	8006b94 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d102      	bne.n	8006ba4 <xQueueGenericCreateStatic+0x84>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d101      	bne.n	8006ba8 <xQueueGenericCreateStatic+0x88>
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e000      	b.n	8006baa <xQueueGenericCreateStatic+0x8a>
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10b      	bne.n	8006bc6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8006bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	61fb      	str	r3, [r7, #28]
}
 8006bc0:	bf00      	nop
 8006bc2:	bf00      	nop
 8006bc4:	e7fd      	b.n	8006bc2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006bc6:	2350      	movs	r3, #80	@ 0x50
 8006bc8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b50      	cmp	r3, #80	@ 0x50
 8006bce:	d00b      	beq.n	8006be8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd4:	f383 8811 	msr	BASEPRI, r3
 8006bd8:	f3bf 8f6f 	isb	sy
 8006bdc:	f3bf 8f4f 	dsb	sy
 8006be0:	61bb      	str	r3, [r7, #24]
}
 8006be2:	bf00      	nop
 8006be4:	bf00      	nop
 8006be6:	e7fd      	b.n	8006be4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006be8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00d      	beq.n	8006c10 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006bfc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	4613      	mov	r3, r2
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	68b9      	ldr	r1, [r7, #8]
 8006c0a:	68f8      	ldr	r0, [r7, #12]
 8006c0c:	f000 f805 	bl	8006c1a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006c10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3730      	adds	r7, #48	@ 0x30
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006c1a:	b580      	push	{r7, lr}
 8006c1c:	b084      	sub	sp, #16
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d103      	bne.n	8006c36 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006c2e:	69bb      	ldr	r3, [r7, #24]
 8006c30:	69ba      	ldr	r2, [r7, #24]
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e002      	b.n	8006c3c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006c48:	2101      	movs	r1, #1
 8006c4a:	69b8      	ldr	r0, [r7, #24]
 8006c4c:	f7ff fefe 	bl	8006a4c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006c50:	69bb      	ldr	r3, [r7, #24]
 8006c52:	78fa      	ldrb	r2, [r7, #3]
 8006c54:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006c58:	bf00      	nop
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b08e      	sub	sp, #56	@ 0x38
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
 8006c6c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueGenericSend+0x34>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d103      	bne.n	8006ca2 <xQueueGenericSend+0x42>
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <xQueueGenericSend+0x46>
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e000      	b.n	8006ca8 <xQueueGenericSend+0x48>
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10b      	bne.n	8006cc4 <xQueueGenericSend+0x64>
	__asm volatile
 8006cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb0:	f383 8811 	msr	BASEPRI, r3
 8006cb4:	f3bf 8f6f 	isb	sy
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006cbe:	bf00      	nop
 8006cc0:	bf00      	nop
 8006cc2:	e7fd      	b.n	8006cc0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d103      	bne.n	8006cd2 <xQueueGenericSend+0x72>
 8006cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d101      	bne.n	8006cd6 <xQueueGenericSend+0x76>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e000      	b.n	8006cd8 <xQueueGenericSend+0x78>
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d10b      	bne.n	8006cf4 <xQueueGenericSend+0x94>
	__asm volatile
 8006cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ce0:	f383 8811 	msr	BASEPRI, r3
 8006ce4:	f3bf 8f6f 	isb	sy
 8006ce8:	f3bf 8f4f 	dsb	sy
 8006cec:	623b      	str	r3, [r7, #32]
}
 8006cee:	bf00      	nop
 8006cf0:	bf00      	nop
 8006cf2:	e7fd      	b.n	8006cf0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006cf4:	f001 f9ce 	bl	8008094 <xTaskGetSchedulerState>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d102      	bne.n	8006d04 <xQueueGenericSend+0xa4>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <xQueueGenericSend+0xa8>
 8006d04:	2301      	movs	r3, #1
 8006d06:	e000      	b.n	8006d0a <xQueueGenericSend+0xaa>
 8006d08:	2300      	movs	r3, #0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d10b      	bne.n	8006d26 <xQueueGenericSend+0xc6>
	__asm volatile
 8006d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d12:	f383 8811 	msr	BASEPRI, r3
 8006d16:	f3bf 8f6f 	isb	sy
 8006d1a:	f3bf 8f4f 	dsb	sy
 8006d1e:	61fb      	str	r3, [r7, #28]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006d26:	f001 ff1f 	bl	8008b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d302      	bcc.n	8006d3c <xQueueGenericSend+0xdc>
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	2b02      	cmp	r3, #2
 8006d3a:	d129      	bne.n	8006d90 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	68b9      	ldr	r1, [r7, #8]
 8006d40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d42:	f000 fa0f 	bl	8007164 <prvCopyDataToQueue>
 8006d46:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d010      	beq.n	8006d72 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d52:	3324      	adds	r3, #36	@ 0x24
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 ffdd 	bl	8007d14 <xTaskRemoveFromEventList>
 8006d5a:	4603      	mov	r3, r0
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d013      	beq.n	8006d88 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006d60:	4b3f      	ldr	r3, [pc, #252]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d66:	601a      	str	r2, [r3, #0]
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	e00a      	b.n	8006d88 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006d72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d007      	beq.n	8006d88 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006d78:	4b39      	ldr	r3, [pc, #228]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d7e:	601a      	str	r2, [r3, #0]
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006d88:	f001 ff20 	bl	8008bcc <vPortExitCritical>
				return pdPASS;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	e063      	b.n	8006e58 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d103      	bne.n	8006d9e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006d96:	f001 ff19 	bl	8008bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	e05c      	b.n	8006e58 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d106      	bne.n	8006db2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006da4:	f107 0314 	add.w	r3, r7, #20
 8006da8:	4618      	mov	r0, r3
 8006daa:	f001 f817 	bl	8007ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006dae:	2301      	movs	r3, #1
 8006db0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006db2:	f001 ff0b 	bl	8008bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006db6:	f000 fd87 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006dba:	f001 fed5 	bl	8008b68 <vPortEnterCritical>
 8006dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006dc4:	b25b      	sxtb	r3, r3
 8006dc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006dca:	d103      	bne.n	8006dd4 <xQueueGenericSend+0x174>
 8006dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006dda:	b25b      	sxtb	r3, r3
 8006ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006de0:	d103      	bne.n	8006dea <xQueueGenericSend+0x18a>
 8006de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006de4:	2200      	movs	r2, #0
 8006de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006dea:	f001 feef 	bl	8008bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006dee:	1d3a      	adds	r2, r7, #4
 8006df0:	f107 0314 	add.w	r3, r7, #20
 8006df4:	4611      	mov	r1, r2
 8006df6:	4618      	mov	r0, r3
 8006df8:	f001 f806 	bl	8007e08 <xTaskCheckForTimeOut>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d124      	bne.n	8006e4c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006e02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e04:	f000 faa6 	bl	8007354 <prvIsQueueFull>
 8006e08:	4603      	mov	r3, r0
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e10:	3310      	adds	r3, #16
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4611      	mov	r1, r2
 8006e16:	4618      	mov	r0, r3
 8006e18:	f000 ff2a 	bl	8007c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006e1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e1e:	f000 fa31 	bl	8007284 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006e22:	f000 fd5f 	bl	80078e4 <xTaskResumeAll>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f47f af7c 	bne.w	8006d26 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006e2e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e60 <xQueueGenericSend+0x200>)
 8006e30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e34:	601a      	str	r2, [r3, #0]
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	f3bf 8f6f 	isb	sy
 8006e3e:	e772      	b.n	8006d26 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e42:	f000 fa1f 	bl	8007284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006e46:	f000 fd4d 	bl	80078e4 <xTaskResumeAll>
 8006e4a:	e76c      	b.n	8006d26 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006e4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e4e:	f000 fa19 	bl	8007284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006e52:	f000 fd47 	bl	80078e4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006e56:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	3738      	adds	r7, #56	@ 0x38
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}
 8006e60:	e000ed04 	.word	0xe000ed04

08006e64 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b090      	sub	sp, #64	@ 0x40
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10b      	bne.n	8006e94 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006e8e:	bf00      	nop
 8006e90:	bf00      	nop
 8006e92:	e7fd      	b.n	8006e90 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d103      	bne.n	8006ea2 <xQueueGenericSendFromISR+0x3e>
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <xQueueGenericSendFromISR+0x42>
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e000      	b.n	8006ea8 <xQueueGenericSendFromISR+0x44>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10b      	bne.n	8006ec4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb0:	f383 8811 	msr	BASEPRI, r3
 8006eb4:	f3bf 8f6f 	isb	sy
 8006eb8:	f3bf 8f4f 	dsb	sy
 8006ebc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	e7fd      	b.n	8006ec0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d103      	bne.n	8006ed2 <xQueueGenericSendFromISR+0x6e>
 8006eca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ecc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d101      	bne.n	8006ed6 <xQueueGenericSendFromISR+0x72>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e000      	b.n	8006ed8 <xQueueGenericSendFromISR+0x74>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d10b      	bne.n	8006ef4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ee0:	f383 8811 	msr	BASEPRI, r3
 8006ee4:	f3bf 8f6f 	isb	sy
 8006ee8:	f3bf 8f4f 	dsb	sy
 8006eec:	623b      	str	r3, [r7, #32]
}
 8006eee:	bf00      	nop
 8006ef0:	bf00      	nop
 8006ef2:	e7fd      	b.n	8006ef0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006ef4:	f001 ff18 	bl	8008d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006ef8:	f3ef 8211 	mrs	r2, BASEPRI
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	61fa      	str	r2, [r7, #28]
 8006f0e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006f10:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006f12:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d302      	bcc.n	8006f26 <xQueueGenericSendFromISR+0xc2>
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d12f      	bne.n	8006f86 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006f2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f34:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006f36:	683a      	ldr	r2, [r7, #0]
 8006f38:	68b9      	ldr	r1, [r7, #8]
 8006f3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006f3c:	f000 f912 	bl	8007164 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006f40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006f48:	d112      	bne.n	8006f70 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d016      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f54:	3324      	adds	r3, #36	@ 0x24
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fedc 	bl	8007d14 <xTaskRemoveFromEventList>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00e      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00b      	beq.n	8006f80 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e007      	b.n	8006f80 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006f70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006f74:	3301      	adds	r3, #1
 8006f76:	b2db      	uxtb	r3, r3
 8006f78:	b25a      	sxtb	r2, r3
 8006f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006f84:	e001      	b.n	8006f8a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006f86:	2300      	movs	r3, #0
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f8c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006f94:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006f96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3740      	adds	r7, #64	@ 0x40
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b08c      	sub	sp, #48	@ 0x30
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	60f8      	str	r0, [r7, #12]
 8006fa8:	60b9      	str	r1, [r7, #8]
 8006faa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10b      	bne.n	8006fd2 <xQueueReceive+0x32>
	__asm volatile
 8006fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fbe:	f383 8811 	msr	BASEPRI, r3
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	f3bf 8f4f 	dsb	sy
 8006fca:	623b      	str	r3, [r7, #32]
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	e7fd      	b.n	8006fce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d103      	bne.n	8006fe0 <xQueueReceive+0x40>
 8006fd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d101      	bne.n	8006fe4 <xQueueReceive+0x44>
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <xQueueReceive+0x46>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <xQueueReceive+0x62>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	61fb      	str	r3, [r7, #28]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007002:	f001 f847 	bl	8008094 <xTaskGetSchedulerState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d102      	bne.n	8007012 <xQueueReceive+0x72>
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d101      	bne.n	8007016 <xQueueReceive+0x76>
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <xQueueReceive+0x78>
 8007016:	2300      	movs	r3, #0
 8007018:	2b00      	cmp	r3, #0
 800701a:	d10b      	bne.n	8007034 <xQueueReceive+0x94>
	__asm volatile
 800701c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007020:	f383 8811 	msr	BASEPRI, r3
 8007024:	f3bf 8f6f 	isb	sy
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	61bb      	str	r3, [r7, #24]
}
 800702e:	bf00      	nop
 8007030:	bf00      	nop
 8007032:	e7fd      	b.n	8007030 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007034:	f001 fd98 	bl	8008b68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800703e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01f      	beq.n	8007084 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007044:	68b9      	ldr	r1, [r7, #8]
 8007046:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007048:	f000 f8f6 	bl	8007238 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	1e5a      	subs	r2, r3, #1
 8007050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007056:	691b      	ldr	r3, [r3, #16]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00f      	beq.n	800707c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800705c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705e:	3310      	adds	r3, #16
 8007060:	4618      	mov	r0, r3
 8007062:	f000 fe57 	bl	8007d14 <xTaskRemoveFromEventList>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d007      	beq.n	800707c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800706c:	4b3c      	ldr	r3, [pc, #240]	@ (8007160 <xQueueReceive+0x1c0>)
 800706e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007072:	601a      	str	r2, [r3, #0]
 8007074:	f3bf 8f4f 	dsb	sy
 8007078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800707c:	f001 fda6 	bl	8008bcc <vPortExitCritical>
				return pdPASS;
 8007080:	2301      	movs	r3, #1
 8007082:	e069      	b.n	8007158 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d103      	bne.n	8007092 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800708a:	f001 fd9f 	bl	8008bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800708e:	2300      	movs	r3, #0
 8007090:	e062      	b.n	8007158 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007094:	2b00      	cmp	r3, #0
 8007096:	d106      	bne.n	80070a6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007098:	f107 0310 	add.w	r3, r7, #16
 800709c:	4618      	mov	r0, r3
 800709e:	f000 fe9d 	bl	8007ddc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80070a2:	2301      	movs	r3, #1
 80070a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80070a6:	f001 fd91 	bl	8008bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80070aa:	f000 fc0d 	bl	80078c8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80070ae:	f001 fd5b 	bl	8008b68 <vPortEnterCritical>
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070b8:	b25b      	sxtb	r3, r3
 80070ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070be:	d103      	bne.n	80070c8 <xQueueReceive+0x128>
 80070c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c2:	2200      	movs	r2, #0
 80070c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80070ce:	b25b      	sxtb	r3, r3
 80070d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070d4:	d103      	bne.n	80070de <xQueueReceive+0x13e>
 80070d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80070de:	f001 fd75 	bl	8008bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80070e2:	1d3a      	adds	r2, r7, #4
 80070e4:	f107 0310 	add.w	r3, r7, #16
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 fe8c 	bl	8007e08 <xTaskCheckForTimeOut>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d123      	bne.n	800713e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070f8:	f000 f916 	bl	8007328 <prvIsQueueEmpty>
 80070fc:	4603      	mov	r3, r0
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d017      	beq.n	8007132 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007104:	3324      	adds	r3, #36	@ 0x24
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f000 fdb0 	bl	8007c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007112:	f000 f8b7 	bl	8007284 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007116:	f000 fbe5 	bl	80078e4 <xTaskResumeAll>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d189      	bne.n	8007034 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007120:	4b0f      	ldr	r3, [pc, #60]	@ (8007160 <xQueueReceive+0x1c0>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
 8007130:	e780      	b.n	8007034 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007132:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007134:	f000 f8a6 	bl	8007284 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007138:	f000 fbd4 	bl	80078e4 <xTaskResumeAll>
 800713c:	e77a      	b.n	8007034 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800713e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007140:	f000 f8a0 	bl	8007284 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007144:	f000 fbce 	bl	80078e4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007148:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800714a:	f000 f8ed 	bl	8007328 <prvIsQueueEmpty>
 800714e:	4603      	mov	r3, r0
 8007150:	2b00      	cmp	r3, #0
 8007152:	f43f af6f 	beq.w	8007034 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007156:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007158:	4618      	mov	r0, r3
 800715a:	3730      	adds	r7, #48	@ 0x30
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}
 8007160:	e000ed04 	.word	0xe000ed04

08007164 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007170:	2300      	movs	r3, #0
 8007172:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007178:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10d      	bne.n	800719e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d14d      	bne.n	8007226 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f000 ff9e 	bl	80080d0 <xTaskPriorityDisinherit>
 8007194:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	609a      	str	r2, [r3, #8]
 800719c:	e043      	b.n	8007226 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d119      	bne.n	80071d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	6858      	ldr	r0, [r3, #4]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ac:	461a      	mov	r2, r3
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	f002 f816 	bl	80091e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	685a      	ldr	r2, [r3, #4]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d32b      	bcc.n	8007226 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	605a      	str	r2, [r3, #4]
 80071d6:	e026      	b.n	8007226 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68d8      	ldr	r0, [r3, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	461a      	mov	r2, r3
 80071e2:	68b9      	ldr	r1, [r7, #8]
 80071e4:	f001 fffc 	bl	80091e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f0:	425b      	negs	r3, r3
 80071f2:	441a      	add	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	68da      	ldr	r2, [r3, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d207      	bcs.n	8007214 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	689a      	ldr	r2, [r3, #8]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720c:	425b      	negs	r3, r3
 800720e:	441a      	add	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2b02      	cmp	r3, #2
 8007218:	d105      	bne.n	8007226 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d002      	beq.n	8007226 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	3b01      	subs	r3, #1
 8007224:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	1c5a      	adds	r2, r3, #1
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800722e:	697b      	ldr	r3, [r7, #20]
}
 8007230:	4618      	mov	r0, r3
 8007232:	3718      	adds	r7, #24
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}

08007238 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007246:	2b00      	cmp	r3, #0
 8007248:	d018      	beq.n	800727c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	441a      	add	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	68da      	ldr	r2, [r3, #12]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	689b      	ldr	r3, [r3, #8]
 8007260:	429a      	cmp	r2, r3
 8007262:	d303      	bcc.n	800726c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	68d9      	ldr	r1, [r3, #12]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007274:	461a      	mov	r2, r3
 8007276:	6838      	ldr	r0, [r7, #0]
 8007278:	f001 ffb2 	bl	80091e0 <memcpy>
	}
}
 800727c:	bf00      	nop
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800728c:	f001 fc6c 	bl	8008b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007296:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007298:	e011      	b.n	80072be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d012      	beq.n	80072c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	3324      	adds	r3, #36	@ 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f000 fd34 	bl	8007d14 <xTaskRemoveFromEventList>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d001      	beq.n	80072b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80072b2:	f000 fe0d 	bl	8007ed0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80072b6:	7bfb      	ldrb	r3, [r7, #15]
 80072b8:	3b01      	subs	r3, #1
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80072be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	dce9      	bgt.n	800729a <prvUnlockQueue+0x16>
 80072c6:	e000      	b.n	80072ca <prvUnlockQueue+0x46>
					break;
 80072c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	22ff      	movs	r2, #255	@ 0xff
 80072ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80072d2:	f001 fc7b 	bl	8008bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80072d6:	f001 fc47 	bl	8008b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80072e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80072e2:	e011      	b.n	8007308 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d012      	beq.n	8007312 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	3310      	adds	r3, #16
 80072f0:	4618      	mov	r0, r3
 80072f2:	f000 fd0f 	bl	8007d14 <xTaskRemoveFromEventList>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80072fc:	f000 fde8 	bl	8007ed0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	3b01      	subs	r3, #1
 8007304:	b2db      	uxtb	r3, r3
 8007306:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007308:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800730c:	2b00      	cmp	r3, #0
 800730e:	dce9      	bgt.n	80072e4 <prvUnlockQueue+0x60>
 8007310:	e000      	b.n	8007314 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007312:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	22ff      	movs	r2, #255	@ 0xff
 8007318:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800731c:	f001 fc56 	bl	8008bcc <vPortExitCritical>
}
 8007320:	bf00      	nop
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007330:	f001 fc1a 	bl	8008b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007338:	2b00      	cmp	r3, #0
 800733a:	d102      	bne.n	8007342 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800733c:	2301      	movs	r3, #1
 800733e:	60fb      	str	r3, [r7, #12]
 8007340:	e001      	b.n	8007346 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007342:	2300      	movs	r3, #0
 8007344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007346:	f001 fc41 	bl	8008bcc <vPortExitCritical>

	return xReturn;
 800734a:	68fb      	ldr	r3, [r7, #12]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800735c:	f001 fc04 	bl	8008b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007368:	429a      	cmp	r2, r3
 800736a:	d102      	bne.n	8007372 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800736c:	2301      	movs	r3, #1
 800736e:	60fb      	str	r3, [r7, #12]
 8007370:	e001      	b.n	8007376 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007372:	2300      	movs	r3, #0
 8007374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007376:	f001 fc29 	bl	8008bcc <vPortExitCritical>

	return xReturn;
 800737a:	68fb      	ldr	r3, [r7, #12]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800738e:	2300      	movs	r3, #0
 8007390:	60fb      	str	r3, [r7, #12]
 8007392:	e014      	b.n	80073be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007394:	4a0f      	ldr	r2, [pc, #60]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d10b      	bne.n	80073b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80073a0:	490c      	ldr	r1, [pc, #48]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	683a      	ldr	r2, [r7, #0]
 80073a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80073aa:	4a0a      	ldr	r2, [pc, #40]	@ (80073d4 <vQueueAddToRegistry+0x50>)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	4413      	add	r3, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80073b6:	e006      	b.n	80073c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	3301      	adds	r3, #1
 80073bc:	60fb      	str	r3, [r7, #12]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b07      	cmp	r3, #7
 80073c2:	d9e7      	bls.n	8007394 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	3714      	adds	r7, #20
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr
 80073d2:	bf00      	nop
 80073d4:	24000e1c 	.word	0x24000e1c

080073d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	60f8      	str	r0, [r7, #12]
 80073e0:	60b9      	str	r1, [r7, #8]
 80073e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80073e8:	f001 fbbe 	bl	8008b68 <vPortEnterCritical>
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80073f2:	b25b      	sxtb	r3, r3
 80073f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073f8:	d103      	bne.n	8007402 <vQueueWaitForMessageRestricted+0x2a>
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	2200      	movs	r2, #0
 80073fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007408:	b25b      	sxtb	r3, r3
 800740a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800740e:	d103      	bne.n	8007418 <vQueueWaitForMessageRestricted+0x40>
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007418:	f001 fbd8 	bl	8008bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007420:	2b00      	cmp	r3, #0
 8007422:	d106      	bne.n	8007432 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	3324      	adds	r3, #36	@ 0x24
 8007428:	687a      	ldr	r2, [r7, #4]
 800742a:	68b9      	ldr	r1, [r7, #8]
 800742c:	4618      	mov	r0, r3
 800742e:	f000 fc45 	bl	8007cbc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007432:	6978      	ldr	r0, [r7, #20]
 8007434:	f7ff ff26 	bl	8007284 <prvUnlockQueue>
	}
 8007438:	bf00      	nop
 800743a:	3718      	adds	r7, #24
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007440:	b580      	push	{r7, lr}
 8007442:	b08e      	sub	sp, #56	@ 0x38
 8007444:	af04      	add	r7, sp, #16
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	607a      	str	r2, [r7, #4]
 800744c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800744e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007450:	2b00      	cmp	r3, #0
 8007452:	d10b      	bne.n	800746c <xTaskCreateStatic+0x2c>
	__asm volatile
 8007454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007458:	f383 8811 	msr	BASEPRI, r3
 800745c:	f3bf 8f6f 	isb	sy
 8007460:	f3bf 8f4f 	dsb	sy
 8007464:	623b      	str	r3, [r7, #32]
}
 8007466:	bf00      	nop
 8007468:	bf00      	nop
 800746a:	e7fd      	b.n	8007468 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <xTaskCreateStatic+0x4a>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	61fb      	str	r3, [r7, #28]
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop
 8007488:	e7fd      	b.n	8007486 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800748a:	235c      	movs	r3, #92	@ 0x5c
 800748c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	2b5c      	cmp	r3, #92	@ 0x5c
 8007492:	d00b      	beq.n	80074ac <xTaskCreateStatic+0x6c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	61bb      	str	r3, [r7, #24]
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80074ac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80074ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d01e      	beq.n	80074f2 <xTaskCreateStatic+0xb2>
 80074b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d01b      	beq.n	80074f2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80074ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074c2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80074cc:	2300      	movs	r3, #0
 80074ce:	9303      	str	r3, [sp, #12]
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	9302      	str	r3, [sp, #8]
 80074d4:	f107 0314 	add.w	r3, r7, #20
 80074d8:	9301      	str	r3, [sp, #4]
 80074da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	68b9      	ldr	r1, [r7, #8]
 80074e4:	68f8      	ldr	r0, [r7, #12]
 80074e6:	f000 f850 	bl	800758a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80074ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074ec:	f000 f8de 	bl	80076ac <prvAddNewTaskToReadyList>
 80074f0:	e001      	b.n	80074f6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80074f2:	2300      	movs	r3, #0
 80074f4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80074f6:	697b      	ldr	r3, [r7, #20]
	}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	@ 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08c      	sub	sp, #48	@ 0x30
 8007504:	af04      	add	r7, sp, #16
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	603b      	str	r3, [r7, #0]
 800750c:	4613      	mov	r3, r2
 800750e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	009b      	lsls	r3, r3, #2
 8007514:	4618      	mov	r0, r3
 8007516:	f001 fc49 	bl	8008dac <pvPortMalloc>
 800751a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00e      	beq.n	8007540 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007522:	205c      	movs	r0, #92	@ 0x5c
 8007524:	f001 fc42 	bl	8008dac <pvPortMalloc>
 8007528:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	697a      	ldr	r2, [r7, #20]
 8007534:	631a      	str	r2, [r3, #48]	@ 0x30
 8007536:	e005      	b.n	8007544 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007538:	6978      	ldr	r0, [r7, #20]
 800753a:	f001 fd05 	bl	8008f48 <vPortFree>
 800753e:	e001      	b.n	8007544 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007540:	2300      	movs	r3, #0
 8007542:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d017      	beq.n	800757a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007552:	88fa      	ldrh	r2, [r7, #6]
 8007554:	2300      	movs	r3, #0
 8007556:	9303      	str	r3, [sp, #12]
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	9302      	str	r3, [sp, #8]
 800755c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800755e:	9301      	str	r3, [sp, #4]
 8007560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	68b9      	ldr	r1, [r7, #8]
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f000 f80e 	bl	800758a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800756e:	69f8      	ldr	r0, [r7, #28]
 8007570:	f000 f89c 	bl	80076ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007574:	2301      	movs	r3, #1
 8007576:	61bb      	str	r3, [r7, #24]
 8007578:	e002      	b.n	8007580 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800757a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800757e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007580:	69bb      	ldr	r3, [r7, #24]
	}
 8007582:	4618      	mov	r0, r3
 8007584:	3720      	adds	r7, #32
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800758a:	b580      	push	{r7, lr}
 800758c:	b088      	sub	sp, #32
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	60b9      	str	r1, [r7, #8]
 8007594:	607a      	str	r2, [r7, #4]
 8007596:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800759a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	009b      	lsls	r3, r3, #2
 80075a0:	461a      	mov	r2, r3
 80075a2:	21a5      	movs	r1, #165	@ 0xa5
 80075a4:	f001 fdf0 	bl	8009188 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80075a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80075b2:	440b      	add	r3, r1
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	4413      	add	r3, r2
 80075b8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075ba:	69bb      	ldr	r3, [r7, #24]
 80075bc:	f023 0307 	bic.w	r3, r3, #7
 80075c0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	f003 0307 	and.w	r3, r3, #7
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00b      	beq.n	80075e4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80075cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	617b      	str	r3, [r7, #20]
}
 80075de:	bf00      	nop
 80075e0:	bf00      	nop
 80075e2:	e7fd      	b.n	80075e0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01f      	beq.n	800762a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075ea:	2300      	movs	r3, #0
 80075ec:	61fb      	str	r3, [r7, #28]
 80075ee:	e012      	b.n	8007616 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4413      	add	r3, r2
 80075f6:	7819      	ldrb	r1, [r3, #0]
 80075f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	3334      	adds	r3, #52	@ 0x34
 8007600:	460a      	mov	r2, r1
 8007602:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	781b      	ldrb	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d006      	beq.n	800761e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	3301      	adds	r3, #1
 8007614:	61fb      	str	r3, [r7, #28]
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	2b0f      	cmp	r3, #15
 800761a:	d9e9      	bls.n	80075f0 <prvInitialiseNewTask+0x66>
 800761c:	e000      	b.n	8007620 <prvInitialiseNewTask+0x96>
			{
				break;
 800761e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007622:	2200      	movs	r2, #0
 8007624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007628:	e003      	b.n	8007632 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007634:	2b37      	cmp	r3, #55	@ 0x37
 8007636:	d901      	bls.n	800763c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007638:	2337      	movs	r3, #55	@ 0x37
 800763a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800763c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800763e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007640:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007646:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	2200      	movs	r2, #0
 800764c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800764e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007650:	3304      	adds	r3, #4
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f966 	bl	8006924 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765a:	3318      	adds	r3, #24
 800765c:	4618      	mov	r0, r3
 800765e:	f7ff f961 	bl	8006924 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007666:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800766a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007672:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007676:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800767a:	2200      	movs	r2, #0
 800767c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800767e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007686:	683a      	ldr	r2, [r7, #0]
 8007688:	68f9      	ldr	r1, [r7, #12]
 800768a:	69b8      	ldr	r0, [r7, #24]
 800768c:	f001 f93e 	bl	800890c <pxPortInitialiseStack>
 8007690:	4602      	mov	r2, r0
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d002      	beq.n	80076a2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800769c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800769e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076a2:	bf00      	nop
 80076a4:	3720      	adds	r7, #32
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b082      	sub	sp, #8
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80076b4:	f001 fa58 	bl	8008b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80076b8:	4b2d      	ldr	r3, [pc, #180]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	3301      	adds	r3, #1
 80076be:	4a2c      	ldr	r2, [pc, #176]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80076c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d109      	bne.n	80076de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80076ca:	4a2a      	ldr	r2, [pc, #168]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076d0:	4b27      	ldr	r3, [pc, #156]	@ (8007770 <prvAddNewTaskToReadyList+0xc4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d110      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80076d8:	f000 fc1e 	bl	8007f18 <prvInitialiseTaskLists>
 80076dc:	e00d      	b.n	80076fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80076de:	4b26      	ldr	r3, [pc, #152]	@ (8007778 <prvAddNewTaskToReadyList+0xcc>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d109      	bne.n	80076fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076e6:	4b23      	ldr	r3, [pc, #140]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076f0:	429a      	cmp	r2, r3
 80076f2:	d802      	bhi.n	80076fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80076f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80076fa:	4b20      	ldr	r3, [pc, #128]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	3301      	adds	r3, #1
 8007700:	4a1e      	ldr	r2, [pc, #120]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007704:	4b1d      	ldr	r3, [pc, #116]	@ (800777c <prvAddNewTaskToReadyList+0xd0>)
 8007706:	681a      	ldr	r2, [r3, #0]
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007710:	4b1b      	ldr	r3, [pc, #108]	@ (8007780 <prvAddNewTaskToReadyList+0xd4>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	429a      	cmp	r2, r3
 8007716:	d903      	bls.n	8007720 <prvAddNewTaskToReadyList+0x74>
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800771c:	4a18      	ldr	r2, [pc, #96]	@ (8007780 <prvAddNewTaskToReadyList+0xd4>)
 800771e:	6013      	str	r3, [r2, #0]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007724:	4613      	mov	r3, r2
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	4413      	add	r3, r2
 800772a:	009b      	lsls	r3, r3, #2
 800772c:	4a15      	ldr	r2, [pc, #84]	@ (8007784 <prvAddNewTaskToReadyList+0xd8>)
 800772e:	441a      	add	r2, r3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	3304      	adds	r3, #4
 8007734:	4619      	mov	r1, r3
 8007736:	4610      	mov	r0, r2
 8007738:	f7ff f901 	bl	800693e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800773c:	f001 fa46 	bl	8008bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007740:	4b0d      	ldr	r3, [pc, #52]	@ (8007778 <prvAddNewTaskToReadyList+0xcc>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007748:	4b0a      	ldr	r3, [pc, #40]	@ (8007774 <prvAddNewTaskToReadyList+0xc8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007752:	429a      	cmp	r2, r3
 8007754:	d207      	bcs.n	8007766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007756:	4b0c      	ldr	r3, [pc, #48]	@ (8007788 <prvAddNewTaskToReadyList+0xdc>)
 8007758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800775c:	601a      	str	r2, [r3, #0]
 800775e:	f3bf 8f4f 	dsb	sy
 8007762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007766:	bf00      	nop
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	24001330 	.word	0x24001330
 8007774:	24000e5c 	.word	0x24000e5c
 8007778:	2400133c 	.word	0x2400133c
 800777c:	2400134c 	.word	0x2400134c
 8007780:	24001338 	.word	0x24001338
 8007784:	24000e60 	.word	0x24000e60
 8007788:	e000ed04 	.word	0xe000ed04

0800778c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2b00      	cmp	r3, #0
 800779c:	d018      	beq.n	80077d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800779e:	4b14      	ldr	r3, [pc, #80]	@ (80077f0 <vTaskDelay+0x64>)
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00b      	beq.n	80077be <vTaskDelay+0x32>
	__asm volatile
 80077a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077aa:	f383 8811 	msr	BASEPRI, r3
 80077ae:	f3bf 8f6f 	isb	sy
 80077b2:	f3bf 8f4f 	dsb	sy
 80077b6:	60bb      	str	r3, [r7, #8]
}
 80077b8:	bf00      	nop
 80077ba:	bf00      	nop
 80077bc:	e7fd      	b.n	80077ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80077be:	f000 f883 	bl	80078c8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80077c2:	2100      	movs	r1, #0
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fcf3 	bl	80081b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80077ca:	f000 f88b 	bl	80078e4 <xTaskResumeAll>
 80077ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d107      	bne.n	80077e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80077d6:	4b07      	ldr	r3, [pc, #28]	@ (80077f4 <vTaskDelay+0x68>)
 80077d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80077dc:	601a      	str	r2, [r3, #0]
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80077e6:	bf00      	nop
 80077e8:	3710      	adds	r7, #16
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	bf00      	nop
 80077f0:	24001358 	.word	0x24001358
 80077f4:	e000ed04 	.word	0xe000ed04

080077f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	@ 0x28
 80077fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007806:	463a      	mov	r2, r7
 8007808:	1d39      	adds	r1, r7, #4
 800780a:	f107 0308 	add.w	r3, r7, #8
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff f834 	bl	800687c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	9202      	str	r2, [sp, #8]
 800781c:	9301      	str	r3, [sp, #4]
 800781e:	2300      	movs	r3, #0
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	2300      	movs	r3, #0
 8007824:	460a      	mov	r2, r1
 8007826:	4922      	ldr	r1, [pc, #136]	@ (80078b0 <vTaskStartScheduler+0xb8>)
 8007828:	4822      	ldr	r0, [pc, #136]	@ (80078b4 <vTaskStartScheduler+0xbc>)
 800782a:	f7ff fe09 	bl	8007440 <xTaskCreateStatic>
 800782e:	4603      	mov	r3, r0
 8007830:	4a21      	ldr	r2, [pc, #132]	@ (80078b8 <vTaskStartScheduler+0xc0>)
 8007832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007834:	4b20      	ldr	r3, [pc, #128]	@ (80078b8 <vTaskStartScheduler+0xc0>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800783c:	2301      	movs	r3, #1
 800783e:	617b      	str	r3, [r7, #20]
 8007840:	e001      	b.n	8007846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007842:	2300      	movs	r3, #0
 8007844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d102      	bne.n	8007852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800784c:	f000 fd04 	bl	8008258 <xTimerCreateTimerTask>
 8007850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d116      	bne.n	8007886 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	613b      	str	r3, [r7, #16]
}
 800786a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800786c:	4b13      	ldr	r3, [pc, #76]	@ (80078bc <vTaskStartScheduler+0xc4>)
 800786e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007872:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007874:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <vTaskStartScheduler+0xc8>)
 8007876:	2201      	movs	r2, #1
 8007878:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800787a:	4b12      	ldr	r3, [pc, #72]	@ (80078c4 <vTaskStartScheduler+0xcc>)
 800787c:	2200      	movs	r2, #0
 800787e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007880:	f001 f8ce 	bl	8008a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007884:	e00f      	b.n	80078a6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800788c:	d10b      	bne.n	80078a6 <vTaskStartScheduler+0xae>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	60fb      	str	r3, [r7, #12]
}
 80078a0:	bf00      	nop
 80078a2:	bf00      	nop
 80078a4:	e7fd      	b.n	80078a2 <vTaskStartScheduler+0xaa>
}
 80078a6:	bf00      	nop
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	08009220 	.word	0x08009220
 80078b4:	08007ee9 	.word	0x08007ee9
 80078b8:	24001354 	.word	0x24001354
 80078bc:	24001350 	.word	0x24001350
 80078c0:	2400133c 	.word	0x2400133c
 80078c4:	24001334 	.word	0x24001334

080078c8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80078c8:	b480      	push	{r7}
 80078ca:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80078cc:	4b04      	ldr	r3, [pc, #16]	@ (80078e0 <vTaskSuspendAll+0x18>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	3301      	adds	r3, #1
 80078d2:	4a03      	ldr	r2, [pc, #12]	@ (80078e0 <vTaskSuspendAll+0x18>)
 80078d4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80078d6:	bf00      	nop
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr
 80078e0:	24001358 	.word	0x24001358

080078e4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b084      	sub	sp, #16
 80078e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80078ee:	2300      	movs	r3, #0
 80078f0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80078f2:	4b42      	ldr	r3, [pc, #264]	@ (80079fc <xTaskResumeAll+0x118>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d10b      	bne.n	8007912 <xTaskResumeAll+0x2e>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	603b      	str	r3, [r7, #0]
}
 800790c:	bf00      	nop
 800790e:	bf00      	nop
 8007910:	e7fd      	b.n	800790e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007912:	f001 f929 	bl	8008b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007916:	4b39      	ldr	r3, [pc, #228]	@ (80079fc <xTaskResumeAll+0x118>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a37      	ldr	r2, [pc, #220]	@ (80079fc <xTaskResumeAll+0x118>)
 800791e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007920:	4b36      	ldr	r3, [pc, #216]	@ (80079fc <xTaskResumeAll+0x118>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d162      	bne.n	80079ee <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007928:	4b35      	ldr	r3, [pc, #212]	@ (8007a00 <xTaskResumeAll+0x11c>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d05e      	beq.n	80079ee <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007930:	e02f      	b.n	8007992 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007932:	4b34      	ldr	r3, [pc, #208]	@ (8007a04 <xTaskResumeAll+0x120>)
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	3318      	adds	r3, #24
 800793e:	4618      	mov	r0, r3
 8007940:	f7ff f85a 	bl	80069f8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3304      	adds	r3, #4
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff f855 	bl	80069f8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007952:	4b2d      	ldr	r3, [pc, #180]	@ (8007a08 <xTaskResumeAll+0x124>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <xTaskResumeAll+0x7e>
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800795e:	4a2a      	ldr	r2, [pc, #168]	@ (8007a08 <xTaskResumeAll+0x124>)
 8007960:	6013      	str	r3, [r2, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	009b      	lsls	r3, r3, #2
 800796e:	4a27      	ldr	r2, [pc, #156]	@ (8007a0c <xTaskResumeAll+0x128>)
 8007970:	441a      	add	r2, r3
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	3304      	adds	r3, #4
 8007976:	4619      	mov	r1, r3
 8007978:	4610      	mov	r0, r2
 800797a:	f7fe ffe0 	bl	800693e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007982:	4b23      	ldr	r3, [pc, #140]	@ (8007a10 <xTaskResumeAll+0x12c>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007988:	429a      	cmp	r2, r3
 800798a:	d302      	bcc.n	8007992 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800798c:	4b21      	ldr	r3, [pc, #132]	@ (8007a14 <xTaskResumeAll+0x130>)
 800798e:	2201      	movs	r2, #1
 8007990:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007992:	4b1c      	ldr	r3, [pc, #112]	@ (8007a04 <xTaskResumeAll+0x120>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1cb      	bne.n	8007932 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80079a0:	f000 fb58 	bl	8008054 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80079a4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a18 <xTaskResumeAll+0x134>)
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d010      	beq.n	80079d2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80079b0:	f000 f846 	bl	8007a40 <xTaskIncrementTick>
 80079b4:	4603      	mov	r3, r0
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d002      	beq.n	80079c0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80079ba:	4b16      	ldr	r3, [pc, #88]	@ (8007a14 <xTaskResumeAll+0x130>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d1f1      	bne.n	80079b0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80079cc:	4b12      	ldr	r3, [pc, #72]	@ (8007a18 <xTaskResumeAll+0x134>)
 80079ce:	2200      	movs	r2, #0
 80079d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80079d2:	4b10      	ldr	r3, [pc, #64]	@ (8007a14 <xTaskResumeAll+0x130>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80079da:	2301      	movs	r3, #1
 80079dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80079de:	4b0f      	ldr	r3, [pc, #60]	@ (8007a1c <xTaskResumeAll+0x138>)
 80079e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80079ee:	f001 f8ed 	bl	8008bcc <vPortExitCritical>

	return xAlreadyYielded;
 80079f2:	68bb      	ldr	r3, [r7, #8]
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	3710      	adds	r7, #16
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	24001358 	.word	0x24001358
 8007a00:	24001330 	.word	0x24001330
 8007a04:	240012f0 	.word	0x240012f0
 8007a08:	24001338 	.word	0x24001338
 8007a0c:	24000e60 	.word	0x24000e60
 8007a10:	24000e5c 	.word	0x24000e5c
 8007a14:	24001344 	.word	0x24001344
 8007a18:	24001340 	.word	0x24001340
 8007a1c:	e000ed04 	.word	0xe000ed04

08007a20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007a26:	4b05      	ldr	r3, [pc, #20]	@ (8007a3c <xTaskGetTickCount+0x1c>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007a2c:	687b      	ldr	r3, [r7, #4]
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	24001334 	.word	0x24001334

08007a40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a4a:	4b4f      	ldr	r3, [pc, #316]	@ (8007b88 <xTaskIncrementTick+0x148>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f040 8090 	bne.w	8007b74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007a54:	4b4d      	ldr	r3, [pc, #308]	@ (8007b8c <xTaskIncrementTick+0x14c>)
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	3301      	adds	r3, #1
 8007a5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8007b8c <xTaskIncrementTick+0x14c>)
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d121      	bne.n	8007aac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007a68:	4b49      	ldr	r3, [pc, #292]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d00b      	beq.n	8007a8a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	603b      	str	r3, [r7, #0]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xTaskIncrementTick+0x46>
 8007a8a:	4b41      	ldr	r3, [pc, #260]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	60fb      	str	r3, [r7, #12]
 8007a90:	4b40      	ldr	r3, [pc, #256]	@ (8007b94 <xTaskIncrementTick+0x154>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a3e      	ldr	r2, [pc, #248]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007a96:	6013      	str	r3, [r2, #0]
 8007a98:	4a3e      	ldr	r2, [pc, #248]	@ (8007b94 <xTaskIncrementTick+0x154>)
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	6013      	str	r3, [r2, #0]
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	@ (8007b98 <xTaskIncrementTick+0x158>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	4a3c      	ldr	r2, [pc, #240]	@ (8007b98 <xTaskIncrementTick+0x158>)
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	f000 fad4 	bl	8008054 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007aac:	4b3b      	ldr	r3, [pc, #236]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	693a      	ldr	r2, [r7, #16]
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d349      	bcc.n	8007b4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007ab6:	4b36      	ldr	r3, [pc, #216]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d104      	bne.n	8007aca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ac0:	4b36      	ldr	r3, [pc, #216]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007ac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007ac6:	601a      	str	r2, [r3, #0]
					break;
 8007ac8:	e03f      	b.n	8007b4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007aca:	4b31      	ldr	r3, [pc, #196]	@ (8007b90 <xTaskIncrementTick+0x150>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	68db      	ldr	r3, [r3, #12]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d203      	bcs.n	8007aea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007ae2:	4a2e      	ldr	r2, [pc, #184]	@ (8007b9c <xTaskIncrementTick+0x15c>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007ae8:	e02f      	b.n	8007b4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	3304      	adds	r3, #4
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7fe ff82 	bl	80069f8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	3318      	adds	r3, #24
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fe ff79 	bl	80069f8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b0a:	4b25      	ldr	r3, [pc, #148]	@ (8007ba0 <xTaskIncrementTick+0x160>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d903      	bls.n	8007b1a <xTaskIncrementTick+0xda>
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b16:	4a22      	ldr	r2, [pc, #136]	@ (8007ba0 <xTaskIncrementTick+0x160>)
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b1e:	4613      	mov	r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	4413      	add	r3, r2
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	4a1f      	ldr	r2, [pc, #124]	@ (8007ba4 <xTaskIncrementTick+0x164>)
 8007b28:	441a      	add	r2, r3
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	3304      	adds	r3, #4
 8007b2e:	4619      	mov	r1, r3
 8007b30:	4610      	mov	r0, r2
 8007b32:	f7fe ff04 	bl	800693e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8007ba8 <xTaskIncrementTick+0x168>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b40:	429a      	cmp	r2, r3
 8007b42:	d3b8      	bcc.n	8007ab6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007b44:	2301      	movs	r3, #1
 8007b46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b48:	e7b5      	b.n	8007ab6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007b4a:	4b17      	ldr	r3, [pc, #92]	@ (8007ba8 <xTaskIncrementTick+0x168>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b50:	4914      	ldr	r1, [pc, #80]	@ (8007ba4 <xTaskIncrementTick+0x164>)
 8007b52:	4613      	mov	r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	4413      	add	r3, r2
 8007b58:	009b      	lsls	r3, r3, #2
 8007b5a:	440b      	add	r3, r1
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d901      	bls.n	8007b66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007b62:	2301      	movs	r3, #1
 8007b64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007b66:	4b11      	ldr	r3, [pc, #68]	@ (8007bac <xTaskIncrementTick+0x16c>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d007      	beq.n	8007b7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	617b      	str	r3, [r7, #20]
 8007b72:	e004      	b.n	8007b7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007b74:	4b0e      	ldr	r3, [pc, #56]	@ (8007bb0 <xTaskIncrementTick+0x170>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	3301      	adds	r3, #1
 8007b7a:	4a0d      	ldr	r2, [pc, #52]	@ (8007bb0 <xTaskIncrementTick+0x170>)
 8007b7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007b7e:	697b      	ldr	r3, [r7, #20]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3718      	adds	r7, #24
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}
 8007b88:	24001358 	.word	0x24001358
 8007b8c:	24001334 	.word	0x24001334
 8007b90:	240012e8 	.word	0x240012e8
 8007b94:	240012ec 	.word	0x240012ec
 8007b98:	24001348 	.word	0x24001348
 8007b9c:	24001350 	.word	0x24001350
 8007ba0:	24001338 	.word	0x24001338
 8007ba4:	24000e60 	.word	0x24000e60
 8007ba8:	24000e5c 	.word	0x24000e5c
 8007bac:	24001344 	.word	0x24001344
 8007bb0:	24001340 	.word	0x24001340

08007bb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b085      	sub	sp, #20
 8007bb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007bba:	4b28      	ldr	r3, [pc, #160]	@ (8007c5c <vTaskSwitchContext+0xa8>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007bc2:	4b27      	ldr	r3, [pc, #156]	@ (8007c60 <vTaskSwitchContext+0xac>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007bc8:	e042      	b.n	8007c50 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8007bca:	4b25      	ldr	r3, [pc, #148]	@ (8007c60 <vTaskSwitchContext+0xac>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bd0:	4b24      	ldr	r3, [pc, #144]	@ (8007c64 <vTaskSwitchContext+0xb0>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	60fb      	str	r3, [r7, #12]
 8007bd6:	e011      	b.n	8007bfc <vTaskSwitchContext+0x48>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d10b      	bne.n	8007bf6 <vTaskSwitchContext+0x42>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <vTaskSwitchContext+0x3e>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	60fb      	str	r3, [r7, #12]
 8007bfc:	491a      	ldr	r1, [pc, #104]	@ (8007c68 <vTaskSwitchContext+0xb4>)
 8007bfe:	68fa      	ldr	r2, [r7, #12]
 8007c00:	4613      	mov	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	440b      	add	r3, r1
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d0e3      	beq.n	8007bd8 <vTaskSwitchContext+0x24>
 8007c10:	68fa      	ldr	r2, [r7, #12]
 8007c12:	4613      	mov	r3, r2
 8007c14:	009b      	lsls	r3, r3, #2
 8007c16:	4413      	add	r3, r2
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	4a13      	ldr	r2, [pc, #76]	@ (8007c68 <vTaskSwitchContext+0xb4>)
 8007c1c:	4413      	add	r3, r2
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	605a      	str	r2, [r3, #4]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	3308      	adds	r3, #8
 8007c32:	429a      	cmp	r2, r3
 8007c34:	d104      	bne.n	8007c40 <vTaskSwitchContext+0x8c>
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	685b      	ldr	r3, [r3, #4]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	605a      	str	r2, [r3, #4]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	4a09      	ldr	r2, [pc, #36]	@ (8007c6c <vTaskSwitchContext+0xb8>)
 8007c48:	6013      	str	r3, [r2, #0]
 8007c4a:	4a06      	ldr	r2, [pc, #24]	@ (8007c64 <vTaskSwitchContext+0xb0>)
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	6013      	str	r3, [r2, #0]
}
 8007c50:	bf00      	nop
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr
 8007c5c:	24001358 	.word	0x24001358
 8007c60:	24001344 	.word	0x24001344
 8007c64:	24001338 	.word	0x24001338
 8007c68:	24000e60 	.word	0x24000e60
 8007c6c:	24000e5c 	.word	0x24000e5c

08007c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d10b      	bne.n	8007c98 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c84:	f383 8811 	msr	BASEPRI, r3
 8007c88:	f3bf 8f6f 	isb	sy
 8007c8c:	f3bf 8f4f 	dsb	sy
 8007c90:	60fb      	str	r3, [r7, #12]
}
 8007c92:	bf00      	nop
 8007c94:	bf00      	nop
 8007c96:	e7fd      	b.n	8007c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c98:	4b07      	ldr	r3, [pc, #28]	@ (8007cb8 <vTaskPlaceOnEventList+0x48>)
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	3318      	adds	r3, #24
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fe fe70 	bl	8006986 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007ca6:	2101      	movs	r1, #1
 8007ca8:	6838      	ldr	r0, [r7, #0]
 8007caa:	f000 fa81 	bl	80081b0 <prvAddCurrentTaskToDelayedList>
}
 8007cae:	bf00      	nop
 8007cb0:	3710      	adds	r7, #16
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
 8007cb6:	bf00      	nop
 8007cb8:	24000e5c 	.word	0x24000e5c

08007cbc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b086      	sub	sp, #24
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10b      	bne.n	8007ce6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	617b      	str	r3, [r7, #20]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007ce6:	4b0a      	ldr	r3, [pc, #40]	@ (8007d10 <vTaskPlaceOnEventListRestricted+0x54>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	3318      	adds	r3, #24
 8007cec:	4619      	mov	r1, r3
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f7fe fe25 	bl	800693e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d002      	beq.n	8007d00 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8007cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007cfe:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	68b8      	ldr	r0, [r7, #8]
 8007d04:	f000 fa54 	bl	80081b0 <prvAddCurrentTaskToDelayedList>
	}
 8007d08:	bf00      	nop
 8007d0a:	3718      	adds	r7, #24
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	24000e5c 	.word	0x24000e5c

08007d14 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b086      	sub	sp, #24
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d10b      	bne.n	8007d42 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8007d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2e:	f383 8811 	msr	BASEPRI, r3
 8007d32:	f3bf 8f6f 	isb	sy
 8007d36:	f3bf 8f4f 	dsb	sy
 8007d3a:	60fb      	str	r3, [r7, #12]
}
 8007d3c:	bf00      	nop
 8007d3e:	bf00      	nop
 8007d40:	e7fd      	b.n	8007d3e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	3318      	adds	r3, #24
 8007d46:	4618      	mov	r0, r3
 8007d48:	f7fe fe56 	bl	80069f8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc4 <xTaskRemoveFromEventList+0xb0>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11d      	bne.n	8007d90 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7fe fe4d 	bl	80069f8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d62:	4b19      	ldr	r3, [pc, #100]	@ (8007dc8 <xTaskRemoveFromEventList+0xb4>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d903      	bls.n	8007d72 <xTaskRemoveFromEventList+0x5e>
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d6e:	4a16      	ldr	r2, [pc, #88]	@ (8007dc8 <xTaskRemoveFromEventList+0xb4>)
 8007d70:	6013      	str	r3, [r2, #0]
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d76:	4613      	mov	r3, r2
 8007d78:	009b      	lsls	r3, r3, #2
 8007d7a:	4413      	add	r3, r2
 8007d7c:	009b      	lsls	r3, r3, #2
 8007d7e:	4a13      	ldr	r2, [pc, #76]	@ (8007dcc <xTaskRemoveFromEventList+0xb8>)
 8007d80:	441a      	add	r2, r3
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	3304      	adds	r3, #4
 8007d86:	4619      	mov	r1, r3
 8007d88:	4610      	mov	r0, r2
 8007d8a:	f7fe fdd8 	bl	800693e <vListInsertEnd>
 8007d8e:	e005      	b.n	8007d9c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	3318      	adds	r3, #24
 8007d94:	4619      	mov	r1, r3
 8007d96:	480e      	ldr	r0, [pc, #56]	@ (8007dd0 <xTaskRemoveFromEventList+0xbc>)
 8007d98:	f7fe fdd1 	bl	800693e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007da0:	4b0c      	ldr	r3, [pc, #48]	@ (8007dd4 <xTaskRemoveFromEventList+0xc0>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d905      	bls.n	8007db6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007daa:	2301      	movs	r3, #1
 8007dac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007dae:	4b0a      	ldr	r3, [pc, #40]	@ (8007dd8 <xTaskRemoveFromEventList+0xc4>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	e001      	b.n	8007dba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007db6:	2300      	movs	r3, #0
 8007db8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007dba:	697b      	ldr	r3, [r7, #20]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3718      	adds	r7, #24
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	24001358 	.word	0x24001358
 8007dc8:	24001338 	.word	0x24001338
 8007dcc:	24000e60 	.word	0x24000e60
 8007dd0:	240012f0 	.word	0x240012f0
 8007dd4:	24000e5c 	.word	0x24000e5c
 8007dd8:	24001344 	.word	0x24001344

08007ddc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007de4:	4b06      	ldr	r3, [pc, #24]	@ (8007e00 <vTaskInternalSetTimeOutState+0x24>)
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007dec:	4b05      	ldr	r3, [pc, #20]	@ (8007e04 <vTaskInternalSetTimeOutState+0x28>)
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	605a      	str	r2, [r3, #4]
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	24001348 	.word	0x24001348
 8007e04:	24001334 	.word	0x24001334

08007e08 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b088      	sub	sp, #32
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d10b      	bne.n	8007e30 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	613b      	str	r3, [r7, #16]
}
 8007e2a:	bf00      	nop
 8007e2c:	bf00      	nop
 8007e2e:	e7fd      	b.n	8007e2c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d10b      	bne.n	8007e4e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e3a:	f383 8811 	msr	BASEPRI, r3
 8007e3e:	f3bf 8f6f 	isb	sy
 8007e42:	f3bf 8f4f 	dsb	sy
 8007e46:	60fb      	str	r3, [r7, #12]
}
 8007e48:	bf00      	nop
 8007e4a:	bf00      	nop
 8007e4c:	e7fd      	b.n	8007e4a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007e4e:	f000 fe8b 	bl	8008b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007e52:	4b1d      	ldr	r3, [pc, #116]	@ (8007ec8 <xTaskCheckForTimeOut+0xc0>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	1ad3      	subs	r3, r2, r3
 8007e60:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e6a:	d102      	bne.n	8007e72 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	e023      	b.n	8007eba <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681a      	ldr	r2, [r3, #0]
 8007e76:	4b15      	ldr	r3, [pc, #84]	@ (8007ecc <xTaskCheckForTimeOut+0xc4>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d007      	beq.n	8007e8e <xTaskCheckForTimeOut+0x86>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	69ba      	ldr	r2, [r7, #24]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d302      	bcc.n	8007e8e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	e015      	b.n	8007eba <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	429a      	cmp	r2, r3
 8007e96:	d20b      	bcs.n	8007eb0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	1ad2      	subs	r2, r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f7ff ff99 	bl	8007ddc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	61fb      	str	r3, [r7, #28]
 8007eae:	e004      	b.n	8007eba <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007eba:	f000 fe87 	bl	8008bcc <vPortExitCritical>

	return xReturn;
 8007ebe:	69fb      	ldr	r3, [r7, #28]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3720      	adds	r7, #32
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	24001334 	.word	0x24001334
 8007ecc:	24001348 	.word	0x24001348

08007ed0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	@ (8007ee4 <vTaskMissedYield+0x14>)
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	601a      	str	r2, [r3, #0]
}
 8007eda:	bf00      	nop
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	24001344 	.word	0x24001344

08007ee8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ef0:	f000 f852 	bl	8007f98 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ef4:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <prvIdleTask+0x28>)
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d9f9      	bls.n	8007ef0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <prvIdleTask+0x2c>)
 8007efe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f02:	601a      	str	r2, [r3, #0]
 8007f04:	f3bf 8f4f 	dsb	sy
 8007f08:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f0c:	e7f0      	b.n	8007ef0 <prvIdleTask+0x8>
 8007f0e:	bf00      	nop
 8007f10:	24000e60 	.word	0x24000e60
 8007f14:	e000ed04 	.word	0xe000ed04

08007f18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b082      	sub	sp, #8
 8007f1c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f1e:	2300      	movs	r3, #0
 8007f20:	607b      	str	r3, [r7, #4]
 8007f22:	e00c      	b.n	8007f3e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007f24:	687a      	ldr	r2, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4a12      	ldr	r2, [pc, #72]	@ (8007f78 <prvInitialiseTaskLists+0x60>)
 8007f30:	4413      	add	r3, r2
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fe fcd6 	bl	80068e4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	607b      	str	r3, [r7, #4]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2b37      	cmp	r3, #55	@ 0x37
 8007f42:	d9ef      	bls.n	8007f24 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007f44:	480d      	ldr	r0, [pc, #52]	@ (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f46:	f7fe fccd 	bl	80068e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007f4a:	480d      	ldr	r0, [pc, #52]	@ (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f4c:	f7fe fcca 	bl	80068e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007f50:	480c      	ldr	r0, [pc, #48]	@ (8007f84 <prvInitialiseTaskLists+0x6c>)
 8007f52:	f7fe fcc7 	bl	80068e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007f56:	480c      	ldr	r0, [pc, #48]	@ (8007f88 <prvInitialiseTaskLists+0x70>)
 8007f58:	f7fe fcc4 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007f5c:	480b      	ldr	r0, [pc, #44]	@ (8007f8c <prvInitialiseTaskLists+0x74>)
 8007f5e:	f7fe fcc1 	bl	80068e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007f62:	4b0b      	ldr	r3, [pc, #44]	@ (8007f90 <prvInitialiseTaskLists+0x78>)
 8007f64:	4a05      	ldr	r2, [pc, #20]	@ (8007f7c <prvInitialiseTaskLists+0x64>)
 8007f66:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007f68:	4b0a      	ldr	r3, [pc, #40]	@ (8007f94 <prvInitialiseTaskLists+0x7c>)
 8007f6a:	4a05      	ldr	r2, [pc, #20]	@ (8007f80 <prvInitialiseTaskLists+0x68>)
 8007f6c:	601a      	str	r2, [r3, #0]
}
 8007f6e:	bf00      	nop
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	24000e60 	.word	0x24000e60
 8007f7c:	240012c0 	.word	0x240012c0
 8007f80:	240012d4 	.word	0x240012d4
 8007f84:	240012f0 	.word	0x240012f0
 8007f88:	24001304 	.word	0x24001304
 8007f8c:	2400131c 	.word	0x2400131c
 8007f90:	240012e8 	.word	0x240012e8
 8007f94:	240012ec 	.word	0x240012ec

08007f98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b082      	sub	sp, #8
 8007f9c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f9e:	e019      	b.n	8007fd4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007fa0:	f000 fde2 	bl	8008b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa4:	4b10      	ldr	r3, [pc, #64]	@ (8007fe8 <prvCheckTasksWaitingTermination+0x50>)
 8007fa6:	68db      	ldr	r3, [r3, #12]
 8007fa8:	68db      	ldr	r3, [r3, #12]
 8007faa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	3304      	adds	r3, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7fe fd21 	bl	80069f8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8007fec <prvCheckTasksWaitingTermination+0x54>)
 8007fbe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3b01      	subs	r3, #1
 8007fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fc8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007fca:	f000 fdff 	bl	8008bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007fce:	6878      	ldr	r0, [r7, #4]
 8007fd0:	f000 f810 	bl	8007ff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007fd4:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <prvCheckTasksWaitingTermination+0x58>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e1      	bne.n	8007fa0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007fdc:	bf00      	nop
 8007fde:	bf00      	nop
 8007fe0:	3708      	adds	r7, #8
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}
 8007fe6:	bf00      	nop
 8007fe8:	24001304 	.word	0x24001304
 8007fec:	24001330 	.word	0x24001330
 8007ff0:	24001318 	.word	0x24001318

08007ff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008002:	2b00      	cmp	r3, #0
 8008004:	d108      	bne.n	8008018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800800a:	4618      	mov	r0, r3
 800800c:	f000 ff9c 	bl	8008f48 <vPortFree>
				vPortFree( pxTCB );
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f000 ff99 	bl	8008f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008016:	e019      	b.n	800804c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800801e:	2b01      	cmp	r3, #1
 8008020:	d103      	bne.n	800802a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f000 ff90 	bl	8008f48 <vPortFree>
	}
 8008028:	e010      	b.n	800804c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8008030:	2b02      	cmp	r3, #2
 8008032:	d00b      	beq.n	800804c <prvDeleteTCB+0x58>
	__asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	60fb      	str	r3, [r7, #12]
}
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <prvDeleteTCB+0x54>
	}
 800804c:	bf00      	nop
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b083      	sub	sp, #12
 8008058:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800805a:	4b0c      	ldr	r3, [pc, #48]	@ (800808c <prvResetNextTaskUnblockTime+0x38>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d104      	bne.n	800806e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008064:	4b0a      	ldr	r3, [pc, #40]	@ (8008090 <prvResetNextTaskUnblockTime+0x3c>)
 8008066:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800806a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800806c:	e008      	b.n	8008080 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800806e:	4b07      	ldr	r3, [pc, #28]	@ (800808c <prvResetNextTaskUnblockTime+0x38>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	685b      	ldr	r3, [r3, #4]
 800807c:	4a04      	ldr	r2, [pc, #16]	@ (8008090 <prvResetNextTaskUnblockTime+0x3c>)
 800807e:	6013      	str	r3, [r2, #0]
}
 8008080:	bf00      	nop
 8008082:	370c      	adds	r7, #12
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr
 800808c:	240012e8 	.word	0x240012e8
 8008090:	24001350 	.word	0x24001350

08008094 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800809a:	4b0b      	ldr	r3, [pc, #44]	@ (80080c8 <xTaskGetSchedulerState+0x34>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d102      	bne.n	80080a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80080a2:	2301      	movs	r3, #1
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	e008      	b.n	80080ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80080a8:	4b08      	ldr	r3, [pc, #32]	@ (80080cc <xTaskGetSchedulerState+0x38>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80080b0:	2302      	movs	r3, #2
 80080b2:	607b      	str	r3, [r7, #4]
 80080b4:	e001      	b.n	80080ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80080b6:	2300      	movs	r3, #0
 80080b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80080ba:	687b      	ldr	r3, [r7, #4]
	}
 80080bc:	4618      	mov	r0, r3
 80080be:	370c      	adds	r7, #12
 80080c0:	46bd      	mov	sp, r7
 80080c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c6:	4770      	bx	lr
 80080c8:	2400133c 	.word	0x2400133c
 80080cc:	24001358 	.word	0x24001358

080080d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b086      	sub	sp, #24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80080dc:	2300      	movs	r3, #0
 80080de:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d058      	beq.n	8008198 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80080e6:	4b2f      	ldr	r3, [pc, #188]	@ (80081a4 <xTaskPriorityDisinherit+0xd4>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	693a      	ldr	r2, [r7, #16]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d00b      	beq.n	8008108 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800810c:	2b00      	cmp	r3, #0
 800810e:	d10b      	bne.n	8008128 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008110:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008114:	f383 8811 	msr	BASEPRI, r3
 8008118:	f3bf 8f6f 	isb	sy
 800811c:	f3bf 8f4f 	dsb	sy
 8008120:	60bb      	str	r3, [r7, #8]
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	e7fd      	b.n	8008124 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800812c:	1e5a      	subs	r2, r3, #1
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800813a:	429a      	cmp	r2, r3
 800813c:	d02c      	beq.n	8008198 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800813e:	693b      	ldr	r3, [r7, #16]
 8008140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008142:	2b00      	cmp	r3, #0
 8008144:	d128      	bne.n	8008198 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	3304      	adds	r3, #4
 800814a:	4618      	mov	r0, r3
 800814c:	f7fe fc54 	bl	80069f8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008158:	693b      	ldr	r3, [r7, #16]
 800815a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800815c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008160:	693b      	ldr	r3, [r7, #16]
 8008162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008168:	4b0f      	ldr	r3, [pc, #60]	@ (80081a8 <xTaskPriorityDisinherit+0xd8>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	429a      	cmp	r2, r3
 800816e:	d903      	bls.n	8008178 <xTaskPriorityDisinherit+0xa8>
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4a0c      	ldr	r2, [pc, #48]	@ (80081a8 <xTaskPriorityDisinherit+0xd8>)
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800817c:	4613      	mov	r3, r2
 800817e:	009b      	lsls	r3, r3, #2
 8008180:	4413      	add	r3, r2
 8008182:	009b      	lsls	r3, r3, #2
 8008184:	4a09      	ldr	r2, [pc, #36]	@ (80081ac <xTaskPriorityDisinherit+0xdc>)
 8008186:	441a      	add	r2, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	3304      	adds	r3, #4
 800818c:	4619      	mov	r1, r3
 800818e:	4610      	mov	r0, r2
 8008190:	f7fe fbd5 	bl	800693e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008194:	2301      	movs	r3, #1
 8008196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008198:	697b      	ldr	r3, [r7, #20]
	}
 800819a:	4618      	mov	r0, r3
 800819c:	3718      	adds	r7, #24
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	24000e5c 	.word	0x24000e5c
 80081a8:	24001338 	.word	0x24001338
 80081ac:	24000e60 	.word	0x24000e60

080081b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80081ba:	4b21      	ldr	r3, [pc, #132]	@ (8008240 <prvAddCurrentTaskToDelayedList+0x90>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081c0:	4b20      	ldr	r3, [pc, #128]	@ (8008244 <prvAddCurrentTaskToDelayedList+0x94>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3304      	adds	r3, #4
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7fe fc16 	bl	80069f8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081d2:	d10a      	bne.n	80081ea <prvAddCurrentTaskToDelayedList+0x3a>
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d007      	beq.n	80081ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80081da:	4b1a      	ldr	r3, [pc, #104]	@ (8008244 <prvAddCurrentTaskToDelayedList+0x94>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	3304      	adds	r3, #4
 80081e0:	4619      	mov	r1, r3
 80081e2:	4819      	ldr	r0, [pc, #100]	@ (8008248 <prvAddCurrentTaskToDelayedList+0x98>)
 80081e4:	f7fe fbab 	bl	800693e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80081e8:	e026      	b.n	8008238 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80081ea:	68fa      	ldr	r2, [r7, #12]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80081f2:	4b14      	ldr	r3, [pc, #80]	@ (8008244 <prvAddCurrentTaskToDelayedList+0x94>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	68ba      	ldr	r2, [r7, #8]
 80081f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80081fa:	68ba      	ldr	r2, [r7, #8]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d209      	bcs.n	8008216 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008202:	4b12      	ldr	r3, [pc, #72]	@ (800824c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	4b0f      	ldr	r3, [pc, #60]	@ (8008244 <prvAddCurrentTaskToDelayedList+0x94>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3304      	adds	r3, #4
 800820c:	4619      	mov	r1, r3
 800820e:	4610      	mov	r0, r2
 8008210:	f7fe fbb9 	bl	8006986 <vListInsert>
}
 8008214:	e010      	b.n	8008238 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008216:	4b0e      	ldr	r3, [pc, #56]	@ (8008250 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008218:	681a      	ldr	r2, [r3, #0]
 800821a:	4b0a      	ldr	r3, [pc, #40]	@ (8008244 <prvAddCurrentTaskToDelayedList+0x94>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fbaf 	bl	8006986 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008228:	4b0a      	ldr	r3, [pc, #40]	@ (8008254 <prvAddCurrentTaskToDelayedList+0xa4>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	429a      	cmp	r2, r3
 8008230:	d202      	bcs.n	8008238 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008232:	4a08      	ldr	r2, [pc, #32]	@ (8008254 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6013      	str	r3, [r2, #0]
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	24001334 	.word	0x24001334
 8008244:	24000e5c 	.word	0x24000e5c
 8008248:	2400131c 	.word	0x2400131c
 800824c:	240012ec 	.word	0x240012ec
 8008250:	240012e8 	.word	0x240012e8
 8008254:	24001350 	.word	0x24001350

08008258 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008258:	b580      	push	{r7, lr}
 800825a:	b08a      	sub	sp, #40	@ 0x28
 800825c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800825e:	2300      	movs	r3, #0
 8008260:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008262:	f000 fb13 	bl	800888c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008266:	4b1d      	ldr	r3, [pc, #116]	@ (80082dc <xTimerCreateTimerTask+0x84>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d021      	beq.n	80082b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800826e:	2300      	movs	r3, #0
 8008270:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008272:	2300      	movs	r3, #0
 8008274:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008276:	1d3a      	adds	r2, r7, #4
 8008278:	f107 0108 	add.w	r1, r7, #8
 800827c:	f107 030c 	add.w	r3, r7, #12
 8008280:	4618      	mov	r0, r3
 8008282:	f7fe fb15 	bl	80068b0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008286:	6879      	ldr	r1, [r7, #4]
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	9202      	str	r2, [sp, #8]
 800828e:	9301      	str	r3, [sp, #4]
 8008290:	2302      	movs	r3, #2
 8008292:	9300      	str	r3, [sp, #0]
 8008294:	2300      	movs	r3, #0
 8008296:	460a      	mov	r2, r1
 8008298:	4911      	ldr	r1, [pc, #68]	@ (80082e0 <xTimerCreateTimerTask+0x88>)
 800829a:	4812      	ldr	r0, [pc, #72]	@ (80082e4 <xTimerCreateTimerTask+0x8c>)
 800829c:	f7ff f8d0 	bl	8007440 <xTaskCreateStatic>
 80082a0:	4603      	mov	r3, r0
 80082a2:	4a11      	ldr	r2, [pc, #68]	@ (80082e8 <xTimerCreateTimerTask+0x90>)
 80082a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80082a6:	4b10      	ldr	r3, [pc, #64]	@ (80082e8 <xTimerCreateTimerTask+0x90>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80082ae:	2301      	movs	r3, #1
 80082b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80082b2:	697b      	ldr	r3, [r7, #20]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d10b      	bne.n	80082d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80082b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082bc:	f383 8811 	msr	BASEPRI, r3
 80082c0:	f3bf 8f6f 	isb	sy
 80082c4:	f3bf 8f4f 	dsb	sy
 80082c8:	613b      	str	r3, [r7, #16]
}
 80082ca:	bf00      	nop
 80082cc:	bf00      	nop
 80082ce:	e7fd      	b.n	80082cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80082d0:	697b      	ldr	r3, [r7, #20]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3718      	adds	r7, #24
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	bf00      	nop
 80082dc:	2400138c 	.word	0x2400138c
 80082e0:	08009228 	.word	0x08009228
 80082e4:	08008425 	.word	0x08008425
 80082e8:	24001390 	.word	0x24001390

080082ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]
 80082f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80082fa:	2300      	movs	r3, #0
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d10b      	bne.n	800831c <xTimerGenericCommand+0x30>
	__asm volatile
 8008304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	623b      	str	r3, [r7, #32]
}
 8008316:	bf00      	nop
 8008318:	bf00      	nop
 800831a:	e7fd      	b.n	8008318 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800831c:	4b19      	ldr	r3, [pc, #100]	@ (8008384 <xTimerGenericCommand+0x98>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d02a      	beq.n	800837a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	2b05      	cmp	r3, #5
 8008334:	dc18      	bgt.n	8008368 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008336:	f7ff fead 	bl	8008094 <xTaskGetSchedulerState>
 800833a:	4603      	mov	r3, r0
 800833c:	2b02      	cmp	r3, #2
 800833e:	d109      	bne.n	8008354 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008340:	4b10      	ldr	r3, [pc, #64]	@ (8008384 <xTimerGenericCommand+0x98>)
 8008342:	6818      	ldr	r0, [r3, #0]
 8008344:	f107 0110 	add.w	r1, r7, #16
 8008348:	2300      	movs	r3, #0
 800834a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800834c:	f7fe fc88 	bl	8006c60 <xQueueGenericSend>
 8008350:	6278      	str	r0, [r7, #36]	@ 0x24
 8008352:	e012      	b.n	800837a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008354:	4b0b      	ldr	r3, [pc, #44]	@ (8008384 <xTimerGenericCommand+0x98>)
 8008356:	6818      	ldr	r0, [r3, #0]
 8008358:	f107 0110 	add.w	r1, r7, #16
 800835c:	2300      	movs	r3, #0
 800835e:	2200      	movs	r2, #0
 8008360:	f7fe fc7e 	bl	8006c60 <xQueueGenericSend>
 8008364:	6278      	str	r0, [r7, #36]	@ 0x24
 8008366:	e008      	b.n	800837a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008368:	4b06      	ldr	r3, [pc, #24]	@ (8008384 <xTimerGenericCommand+0x98>)
 800836a:	6818      	ldr	r0, [r3, #0]
 800836c:	f107 0110 	add.w	r1, r7, #16
 8008370:	2300      	movs	r3, #0
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	f7fe fd76 	bl	8006e64 <xQueueGenericSendFromISR>
 8008378:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800837c:	4618      	mov	r0, r3
 800837e:	3728      	adds	r7, #40	@ 0x28
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	2400138c 	.word	0x2400138c

08008388 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af02      	add	r7, sp, #8
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008392:	4b23      	ldr	r3, [pc, #140]	@ (8008420 <prvProcessExpiredTimer+0x98>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	68db      	ldr	r3, [r3, #12]
 8008398:	68db      	ldr	r3, [r3, #12]
 800839a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	3304      	adds	r3, #4
 80083a0:	4618      	mov	r0, r3
 80083a2:	f7fe fb29 	bl	80069f8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083ac:	f003 0304 	and.w	r3, r3, #4
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d023      	beq.n	80083fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	699a      	ldr	r2, [r3, #24]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	18d1      	adds	r1, r2, r3
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	683a      	ldr	r2, [r7, #0]
 80083c0:	6978      	ldr	r0, [r7, #20]
 80083c2:	f000 f8d5 	bl	8008570 <prvInsertTimerInActiveList>
 80083c6:	4603      	mov	r3, r0
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d020      	beq.n	800840e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80083cc:	2300      	movs	r3, #0
 80083ce:	9300      	str	r3, [sp, #0]
 80083d0:	2300      	movs	r3, #0
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	2100      	movs	r1, #0
 80083d6:	6978      	ldr	r0, [r7, #20]
 80083d8:	f7ff ff88 	bl	80082ec <xTimerGenericCommand>
 80083dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d114      	bne.n	800840e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80083e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e8:	f383 8811 	msr	BASEPRI, r3
 80083ec:	f3bf 8f6f 	isb	sy
 80083f0:	f3bf 8f4f 	dsb	sy
 80083f4:	60fb      	str	r3, [r7, #12]
}
 80083f6:	bf00      	nop
 80083f8:	bf00      	nop
 80083fa:	e7fd      	b.n	80083f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008402:	f023 0301 	bic.w	r3, r3, #1
 8008406:	b2da      	uxtb	r2, r3
 8008408:	697b      	ldr	r3, [r7, #20]
 800840a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	6a1b      	ldr	r3, [r3, #32]
 8008412:	6978      	ldr	r0, [r7, #20]
 8008414:	4798      	blx	r3
}
 8008416:	bf00      	nop
 8008418:	3718      	adds	r7, #24
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	24001384 	.word	0x24001384

08008424 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	4618      	mov	r0, r3
 8008432:	f000 f859 	bl	80084e8 <prvGetNextExpireTime>
 8008436:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	4619      	mov	r1, r3
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f805 	bl	800844c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008442:	f000 f8d7 	bl	80085f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008446:	bf00      	nop
 8008448:	e7f0      	b.n	800842c <prvTimerTask+0x8>
	...

0800844c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b084      	sub	sp, #16
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
 8008454:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008456:	f7ff fa37 	bl	80078c8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	4618      	mov	r0, r3
 8008460:	f000 f866 	bl	8008530 <prvSampleTimeNow>
 8008464:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d130      	bne.n	80084ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <prvProcessTimerOrBlockTask+0x3c>
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	429a      	cmp	r2, r3
 8008478:	d806      	bhi.n	8008488 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800847a:	f7ff fa33 	bl	80078e4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800847e:	68f9      	ldr	r1, [r7, #12]
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f7ff ff81 	bl	8008388 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008486:	e024      	b.n	80084d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008488:	683b      	ldr	r3, [r7, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d008      	beq.n	80084a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800848e:	4b13      	ldr	r3, [pc, #76]	@ (80084dc <prvProcessTimerOrBlockTask+0x90>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d101      	bne.n	800849c <prvProcessTimerOrBlockTask+0x50>
 8008498:	2301      	movs	r3, #1
 800849a:	e000      	b.n	800849e <prvProcessTimerOrBlockTask+0x52>
 800849c:	2300      	movs	r3, #0
 800849e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80084a0:	4b0f      	ldr	r3, [pc, #60]	@ (80084e0 <prvProcessTimerOrBlockTask+0x94>)
 80084a2:	6818      	ldr	r0, [r3, #0]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	683a      	ldr	r2, [r7, #0]
 80084ac:	4619      	mov	r1, r3
 80084ae:	f7fe ff93 	bl	80073d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80084b2:	f7ff fa17 	bl	80078e4 <xTaskResumeAll>
 80084b6:	4603      	mov	r3, r0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d10a      	bne.n	80084d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80084bc:	4b09      	ldr	r3, [pc, #36]	@ (80084e4 <prvProcessTimerOrBlockTask+0x98>)
 80084be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084c2:	601a      	str	r2, [r3, #0]
 80084c4:	f3bf 8f4f 	dsb	sy
 80084c8:	f3bf 8f6f 	isb	sy
}
 80084cc:	e001      	b.n	80084d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80084ce:	f7ff fa09 	bl	80078e4 <xTaskResumeAll>
}
 80084d2:	bf00      	nop
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}
 80084da:	bf00      	nop
 80084dc:	24001388 	.word	0x24001388
 80084e0:	2400138c 	.word	0x2400138c
 80084e4:	e000ed04 	.word	0xe000ed04

080084e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80084f0:	4b0e      	ldr	r3, [pc, #56]	@ (800852c <prvGetNextExpireTime+0x44>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d101      	bne.n	80084fe <prvGetNextExpireTime+0x16>
 80084fa:	2201      	movs	r2, #1
 80084fc:	e000      	b.n	8008500 <prvGetNextExpireTime+0x18>
 80084fe:	2200      	movs	r2, #0
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d105      	bne.n	8008518 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800850c:	4b07      	ldr	r3, [pc, #28]	@ (800852c <prvGetNextExpireTime+0x44>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	e001      	b.n	800851c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800851c:	68fb      	ldr	r3, [r7, #12]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3714      	adds	r7, #20
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr
 800852a:	bf00      	nop
 800852c:	24001384 	.word	0x24001384

08008530 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008538:	f7ff fa72 	bl	8007a20 <xTaskGetTickCount>
 800853c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800853e:	4b0b      	ldr	r3, [pc, #44]	@ (800856c <prvSampleTimeNow+0x3c>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	429a      	cmp	r2, r3
 8008546:	d205      	bcs.n	8008554 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008548:	f000 f93a 	bl	80087c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
 8008552:	e002      	b.n	800855a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800855a:	4a04      	ldr	r2, [pc, #16]	@ (800856c <prvSampleTimeNow+0x3c>)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008560:	68fb      	ldr	r3, [r7, #12]
}
 8008562:	4618      	mov	r0, r3
 8008564:	3710      	adds	r7, #16
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	24001394 	.word	0x24001394

08008570 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800857e:	2300      	movs	r3, #0
 8008580:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	68ba      	ldr	r2, [r7, #8]
 8008586:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68fa      	ldr	r2, [r7, #12]
 800858c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	429a      	cmp	r2, r3
 8008594:	d812      	bhi.n	80085bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	1ad2      	subs	r2, r2, r3
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	699b      	ldr	r3, [r3, #24]
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d302      	bcc.n	80085aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	617b      	str	r3, [r7, #20]
 80085a8:	e01b      	b.n	80085e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80085aa:	4b10      	ldr	r3, [pc, #64]	@ (80085ec <prvInsertTimerInActiveList+0x7c>)
 80085ac:	681a      	ldr	r2, [r3, #0]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3304      	adds	r3, #4
 80085b2:	4619      	mov	r1, r3
 80085b4:	4610      	mov	r0, r2
 80085b6:	f7fe f9e6 	bl	8006986 <vListInsert>
 80085ba:	e012      	b.n	80085e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80085bc:	687a      	ldr	r2, [r7, #4]
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d206      	bcs.n	80085d2 <prvInsertTimerInActiveList+0x62>
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	d302      	bcc.n	80085d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80085cc:	2301      	movs	r3, #1
 80085ce:	617b      	str	r3, [r7, #20]
 80085d0:	e007      	b.n	80085e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085d2:	4b07      	ldr	r3, [pc, #28]	@ (80085f0 <prvInsertTimerInActiveList+0x80>)
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	3304      	adds	r3, #4
 80085da:	4619      	mov	r1, r3
 80085dc:	4610      	mov	r0, r2
 80085de:	f7fe f9d2 	bl	8006986 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80085e2:	697b      	ldr	r3, [r7, #20]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3718      	adds	r7, #24
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	24001388 	.word	0x24001388
 80085f0:	24001384 	.word	0x24001384

080085f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08e      	sub	sp, #56	@ 0x38
 80085f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80085fa:	e0ce      	b.n	800879a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	da19      	bge.n	8008636 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008602:	1d3b      	adds	r3, r7, #4
 8008604:	3304      	adds	r3, #4
 8008606:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008608:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10b      	bne.n	8008626 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	61fb      	str	r3, [r7, #28]
}
 8008620:	bf00      	nop
 8008622:	bf00      	nop
 8008624:	e7fd      	b.n	8008622 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800862c:	6850      	ldr	r0, [r2, #4]
 800862e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008630:	6892      	ldr	r2, [r2, #8]
 8008632:	4611      	mov	r1, r2
 8008634:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f2c0 80ae 	blt.w	800879a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008644:	695b      	ldr	r3, [r3, #20]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d004      	beq.n	8008654 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800864a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800864c:	3304      	adds	r3, #4
 800864e:	4618      	mov	r0, r3
 8008650:	f7fe f9d2 	bl	80069f8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008654:	463b      	mov	r3, r7
 8008656:	4618      	mov	r0, r3
 8008658:	f7ff ff6a 	bl	8008530 <prvSampleTimeNow>
 800865c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2b09      	cmp	r3, #9
 8008662:	f200 8097 	bhi.w	8008794 <prvProcessReceivedCommands+0x1a0>
 8008666:	a201      	add	r2, pc, #4	@ (adr r2, 800866c <prvProcessReceivedCommands+0x78>)
 8008668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800866c:	08008695 	.word	0x08008695
 8008670:	08008695 	.word	0x08008695
 8008674:	08008695 	.word	0x08008695
 8008678:	0800870b 	.word	0x0800870b
 800867c:	0800871f 	.word	0x0800871f
 8008680:	0800876b 	.word	0x0800876b
 8008684:	08008695 	.word	0x08008695
 8008688:	08008695 	.word	0x08008695
 800868c:	0800870b 	.word	0x0800870b
 8008690:	0800871f 	.word	0x0800871f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008696:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800869a:	f043 0301 	orr.w	r3, r3, #1
 800869e:	b2da      	uxtb	r2, r3
 80086a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	699b      	ldr	r3, [r3, #24]
 80086ac:	18d1      	adds	r1, r2, r3
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086b4:	f7ff ff5c 	bl	8008570 <prvInsertTimerInActiveList>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d06c      	beq.n	8008798 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80086be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c0:	6a1b      	ldr	r3, [r3, #32]
 80086c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80086c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80086cc:	f003 0304 	and.w	r3, r3, #4
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d061      	beq.n	8008798 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80086d4:	68ba      	ldr	r2, [r7, #8]
 80086d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	441a      	add	r2, r3
 80086dc:	2300      	movs	r3, #0
 80086de:	9300      	str	r3, [sp, #0]
 80086e0:	2300      	movs	r3, #0
 80086e2:	2100      	movs	r1, #0
 80086e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80086e6:	f7ff fe01 	bl	80082ec <xTimerGenericCommand>
 80086ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d152      	bne.n	8008798 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80086f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	61bb      	str	r3, [r7, #24]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800870a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800870c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008718:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800871c:	e03d      	b.n	800879a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800871e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008724:	f043 0301 	orr.w	r3, r3, #1
 8008728:	b2da      	uxtb	r2, r3
 800872a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800872c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008730:	68ba      	ldr	r2, [r7, #8]
 8008732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008734:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d10b      	bne.n	8008756 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800873e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008742:	f383 8811 	msr	BASEPRI, r3
 8008746:	f3bf 8f6f 	isb	sy
 800874a:	f3bf 8f4f 	dsb	sy
 800874e:	617b      	str	r3, [r7, #20]
}
 8008750:	bf00      	nop
 8008752:	bf00      	nop
 8008754:	e7fd      	b.n	8008752 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008758:	699a      	ldr	r2, [r3, #24]
 800875a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875c:	18d1      	adds	r1, r2, r3
 800875e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008762:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008764:	f7ff ff04 	bl	8008570 <prvInsertTimerInActiveList>
					break;
 8008768:	e017      	b.n	800879a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800876a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d103      	bne.n	8008780 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800877a:	f000 fbe5 	bl	8008f48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800877e:	e00c      	b.n	800879a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008782:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	b2da      	uxtb	r2, r3
 800878c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008792:	e002      	b.n	800879a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <prvProcessReceivedCommands+0x1a6>
					break;
 8008798:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800879a:	4b08      	ldr	r3, [pc, #32]	@ (80087bc <prvProcessReceivedCommands+0x1c8>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	1d39      	adds	r1, r7, #4
 80087a0:	2200      	movs	r2, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f7fe fbfc 	bl	8006fa0 <xQueueReceive>
 80087a8:	4603      	mov	r3, r0
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	f47f af26 	bne.w	80085fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	3730      	adds	r7, #48	@ 0x30
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	2400138c 	.word	0x2400138c

080087c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b088      	sub	sp, #32
 80087c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80087c6:	e049      	b.n	800885c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80087c8:	4b2e      	ldr	r3, [pc, #184]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087d2:	4b2c      	ldr	r3, [pc, #176]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	68db      	ldr	r3, [r3, #12]
 80087da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3304      	adds	r3, #4
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe f909 	bl	80069f8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80087f4:	f003 0304 	and.w	r3, r3, #4
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d02f      	beq.n	800885c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	699b      	ldr	r3, [r3, #24]
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	4413      	add	r3, r2
 8008804:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008806:	68ba      	ldr	r2, [r7, #8]
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	429a      	cmp	r2, r3
 800880c:	d90e      	bls.n	800882c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	68ba      	ldr	r2, [r7, #8]
 8008812:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	68fa      	ldr	r2, [r7, #12]
 8008818:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800881a:	4b1a      	ldr	r3, [pc, #104]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	3304      	adds	r3, #4
 8008822:	4619      	mov	r1, r3
 8008824:	4610      	mov	r0, r2
 8008826:	f7fe f8ae 	bl	8006986 <vListInsert>
 800882a:	e017      	b.n	800885c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800882c:	2300      	movs	r3, #0
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	2300      	movs	r3, #0
 8008832:	693a      	ldr	r2, [r7, #16]
 8008834:	2100      	movs	r1, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f7ff fd58 	bl	80082ec <xTimerGenericCommand>
 800883c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d10b      	bne.n	800885c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008848:	f383 8811 	msr	BASEPRI, r3
 800884c:	f3bf 8f6f 	isb	sy
 8008850:	f3bf 8f4f 	dsb	sy
 8008854:	603b      	str	r3, [r7, #0]
}
 8008856:	bf00      	nop
 8008858:	bf00      	nop
 800885a:	e7fd      	b.n	8008858 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800885c:	4b09      	ldr	r3, [pc, #36]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d1b0      	bne.n	80087c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008866:	4b07      	ldr	r3, [pc, #28]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800886c:	4b06      	ldr	r3, [pc, #24]	@ (8008888 <prvSwitchTimerLists+0xc8>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a04      	ldr	r2, [pc, #16]	@ (8008884 <prvSwitchTimerLists+0xc4>)
 8008872:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008874:	4a04      	ldr	r2, [pc, #16]	@ (8008888 <prvSwitchTimerLists+0xc8>)
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	6013      	str	r3, [r2, #0]
}
 800887a:	bf00      	nop
 800887c:	3718      	adds	r7, #24
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}
 8008882:	bf00      	nop
 8008884:	24001384 	.word	0x24001384
 8008888:	24001388 	.word	0x24001388

0800888c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008892:	f000 f969 	bl	8008b68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008896:	4b15      	ldr	r3, [pc, #84]	@ (80088ec <prvCheckForValidListAndQueue+0x60>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d120      	bne.n	80088e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800889e:	4814      	ldr	r0, [pc, #80]	@ (80088f0 <prvCheckForValidListAndQueue+0x64>)
 80088a0:	f7fe f820 	bl	80068e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088a4:	4813      	ldr	r0, [pc, #76]	@ (80088f4 <prvCheckForValidListAndQueue+0x68>)
 80088a6:	f7fe f81d 	bl	80068e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088aa:	4b13      	ldr	r3, [pc, #76]	@ (80088f8 <prvCheckForValidListAndQueue+0x6c>)
 80088ac:	4a10      	ldr	r2, [pc, #64]	@ (80088f0 <prvCheckForValidListAndQueue+0x64>)
 80088ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088b0:	4b12      	ldr	r3, [pc, #72]	@ (80088fc <prvCheckForValidListAndQueue+0x70>)
 80088b2:	4a10      	ldr	r2, [pc, #64]	@ (80088f4 <prvCheckForValidListAndQueue+0x68>)
 80088b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088b6:	2300      	movs	r3, #0
 80088b8:	9300      	str	r3, [sp, #0]
 80088ba:	4b11      	ldr	r3, [pc, #68]	@ (8008900 <prvCheckForValidListAndQueue+0x74>)
 80088bc:	4a11      	ldr	r2, [pc, #68]	@ (8008904 <prvCheckForValidListAndQueue+0x78>)
 80088be:	2110      	movs	r1, #16
 80088c0:	200a      	movs	r0, #10
 80088c2:	f7fe f92d 	bl	8006b20 <xQueueGenericCreateStatic>
 80088c6:	4603      	mov	r3, r0
 80088c8:	4a08      	ldr	r2, [pc, #32]	@ (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80088cc:	4b07      	ldr	r3, [pc, #28]	@ (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d005      	beq.n	80088e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <prvCheckForValidListAndQueue+0x60>)
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	490b      	ldr	r1, [pc, #44]	@ (8008908 <prvCheckForValidListAndQueue+0x7c>)
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fe fd52 	bl	8007384 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088e0:	f000 f974 	bl	8008bcc <vPortExitCritical>
}
 80088e4:	bf00      	nop
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop
 80088ec:	2400138c 	.word	0x2400138c
 80088f0:	2400135c 	.word	0x2400135c
 80088f4:	24001370 	.word	0x24001370
 80088f8:	24001384 	.word	0x24001384
 80088fc:	24001388 	.word	0x24001388
 8008900:	24001438 	.word	0x24001438
 8008904:	24001398 	.word	0x24001398
 8008908:	08009230 	.word	0x08009230

0800890c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3b04      	subs	r3, #4
 800891c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	3b04      	subs	r3, #4
 800892a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	f023 0201 	bic.w	r2, r3, #1
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3b04      	subs	r3, #4
 800893a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800893c:	4a0c      	ldr	r2, [pc, #48]	@ (8008970 <pxPortInitialiseStack+0x64>)
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3b14      	subs	r3, #20
 8008946:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008948:	687a      	ldr	r2, [r7, #4]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	3b04      	subs	r3, #4
 8008952:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f06f 0202 	mvn.w	r2, #2
 800895a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	3b20      	subs	r3, #32
 8008960:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008962:	68fb      	ldr	r3, [r7, #12]
}
 8008964:	4618      	mov	r0, r3
 8008966:	3714      	adds	r7, #20
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	08008975 	.word	0x08008975

08008974 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800897a:	2300      	movs	r3, #0
 800897c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800897e:	4b13      	ldr	r3, [pc, #76]	@ (80089cc <prvTaskExitError+0x58>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008986:	d00b      	beq.n	80089a0 <prvTaskExitError+0x2c>
	__asm volatile
 8008988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800898c:	f383 8811 	msr	BASEPRI, r3
 8008990:	f3bf 8f6f 	isb	sy
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	60fb      	str	r3, [r7, #12]
}
 800899a:	bf00      	nop
 800899c:	bf00      	nop
 800899e:	e7fd      	b.n	800899c <prvTaskExitError+0x28>
	__asm volatile
 80089a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a4:	f383 8811 	msr	BASEPRI, r3
 80089a8:	f3bf 8f6f 	isb	sy
 80089ac:	f3bf 8f4f 	dsb	sy
 80089b0:	60bb      	str	r3, [r7, #8]
}
 80089b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089b4:	bf00      	nop
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d0fc      	beq.n	80089b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089bc:	bf00      	nop
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	24000010 	.word	0x24000010

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089d0:	4b07      	ldr	r3, [pc, #28]	@ (80089f0 <pxCurrentTCBConst2>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6808      	ldr	r0, [r1, #0]
 80089d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	f380 8809 	msr	PSP, r0
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8811 	msr	BASEPRI, r0
 80089ea:	4770      	bx	lr
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst2>:
 80089f0:	24000e5c 	.word	0x24000e5c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089f8:	4808      	ldr	r0, [pc, #32]	@ (8008a1c <prvPortStartFirstTask+0x24>)
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f380 8808 	msr	MSP, r0
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8814 	msr	CONTROL, r0
 8008a0a:	b662      	cpsie	i
 8008a0c:	b661      	cpsie	f
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	df00      	svc	0
 8008a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a1a:	bf00      	nop
 8008a1c:	e000ed08 	.word	0xe000ed08

08008a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a26:	4b47      	ldr	r3, [pc, #284]	@ (8008b44 <xPortStartScheduler+0x124>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a47      	ldr	r2, [pc, #284]	@ (8008b48 <xPortStartScheduler+0x128>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d10b      	bne.n	8008a48 <xPortStartScheduler+0x28>
	__asm volatile
 8008a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
}
 8008a42:	bf00      	nop
 8008a44:	bf00      	nop
 8008a46:	e7fd      	b.n	8008a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a48:	4b3e      	ldr	r3, [pc, #248]	@ (8008b44 <xPortStartScheduler+0x124>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8008b4c <xPortStartScheduler+0x12c>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d10b      	bne.n	8008a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8008a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a56:	f383 8811 	msr	BASEPRI, r3
 8008a5a:	f3bf 8f6f 	isb	sy
 8008a5e:	f3bf 8f4f 	dsb	sy
 8008a62:	60fb      	str	r3, [r7, #12]
}
 8008a64:	bf00      	nop
 8008a66:	bf00      	nop
 8008a68:	e7fd      	b.n	8008a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a6a:	4b39      	ldr	r3, [pc, #228]	@ (8008b50 <xPortStartScheduler+0x130>)
 8008a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	781b      	ldrb	r3, [r3, #0]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	22ff      	movs	r2, #255	@ 0xff
 8008a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a7c:	697b      	ldr	r3, [r7, #20]
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a84:	78fb      	ldrb	r3, [r7, #3]
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008a8c:	b2da      	uxtb	r2, r3
 8008a8e:	4b31      	ldr	r3, [pc, #196]	@ (8008b54 <xPortStartScheduler+0x134>)
 8008a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a92:	4b31      	ldr	r3, [pc, #196]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008a94:	2207      	movs	r2, #7
 8008a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a98:	e009      	b.n	8008aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008aa4:	78fb      	ldrb	r3, [r7, #3]
 8008aa6:	b2db      	uxtb	r3, r3
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	b2db      	uxtb	r3, r3
 8008ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab6:	2b80      	cmp	r3, #128	@ 0x80
 8008ab8:	d0ef      	beq.n	8008a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008aba:	4b27      	ldr	r3, [pc, #156]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f1c3 0307 	rsb	r3, r3, #7
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d00b      	beq.n	8008ade <xPortStartScheduler+0xbe>
	__asm volatile
 8008ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008aca:	f383 8811 	msr	BASEPRI, r3
 8008ace:	f3bf 8f6f 	isb	sy
 8008ad2:	f3bf 8f4f 	dsb	sy
 8008ad6:	60bb      	str	r3, [r7, #8]
}
 8008ad8:	bf00      	nop
 8008ada:	bf00      	nop
 8008adc:	e7fd      	b.n	8008ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ade:	4b1e      	ldr	r3, [pc, #120]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008af0:	4a19      	ldr	r2, [pc, #100]	@ (8008b58 <xPortStartScheduler+0x138>)
 8008af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	b2da      	uxtb	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008afc:	4b17      	ldr	r3, [pc, #92]	@ (8008b5c <xPortStartScheduler+0x13c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a16      	ldr	r2, [pc, #88]	@ (8008b5c <xPortStartScheduler+0x13c>)
 8008b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008b08:	4b14      	ldr	r3, [pc, #80]	@ (8008b5c <xPortStartScheduler+0x13c>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4a13      	ldr	r2, [pc, #76]	@ (8008b5c <xPortStartScheduler+0x13c>)
 8008b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b14:	f000 f8da 	bl	8008ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b18:	4b11      	ldr	r3, [pc, #68]	@ (8008b60 <xPortStartScheduler+0x140>)
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b1e:	f000 f8f9 	bl	8008d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b22:	4b10      	ldr	r3, [pc, #64]	@ (8008b64 <xPortStartScheduler+0x144>)
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	4a0f      	ldr	r2, [pc, #60]	@ (8008b64 <xPortStartScheduler+0x144>)
 8008b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b2e:	f7ff ff63 	bl	80089f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b32:	f7ff f83f 	bl	8007bb4 <vTaskSwitchContext>
	prvTaskExitError();
 8008b36:	f7ff ff1d 	bl	8008974 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b3a:	2300      	movs	r3, #0
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3718      	adds	r7, #24
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	e000ed00 	.word	0xe000ed00
 8008b48:	410fc271 	.word	0x410fc271
 8008b4c:	410fc270 	.word	0x410fc270
 8008b50:	e000e400 	.word	0xe000e400
 8008b54:	24001488 	.word	0x24001488
 8008b58:	2400148c 	.word	0x2400148c
 8008b5c:	e000ed20 	.word	0xe000ed20
 8008b60:	24000010 	.word	0x24000010
 8008b64:	e000ef34 	.word	0xe000ef34

08008b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b82:	4b10      	ldr	r3, [pc, #64]	@ (8008bc4 <vPortEnterCritical+0x5c>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3301      	adds	r3, #1
 8008b88:	4a0e      	ldr	r2, [pc, #56]	@ (8008bc4 <vPortEnterCritical+0x5c>)
 8008b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8008bc4 <vPortEnterCritical+0x5c>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d110      	bne.n	8008bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b94:	4b0c      	ldr	r3, [pc, #48]	@ (8008bc8 <vPortEnterCritical+0x60>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	b2db      	uxtb	r3, r3
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00b      	beq.n	8008bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8008b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba2:	f383 8811 	msr	BASEPRI, r3
 8008ba6:	f3bf 8f6f 	isb	sy
 8008baa:	f3bf 8f4f 	dsb	sy
 8008bae:	603b      	str	r3, [r7, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	bf00      	nop
 8008bb4:	e7fd      	b.n	8008bb2 <vPortEnterCritical+0x4a>
	}
}
 8008bb6:	bf00      	nop
 8008bb8:	370c      	adds	r7, #12
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc0:	4770      	bx	lr
 8008bc2:	bf00      	nop
 8008bc4:	24000010 	.word	0x24000010
 8008bc8:	e000ed04 	.word	0xe000ed04

08008bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bd2:	4b12      	ldr	r3, [pc, #72]	@ (8008c1c <vPortExitCritical+0x50>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10b      	bne.n	8008bf2 <vPortExitCritical+0x26>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	607b      	str	r3, [r7, #4]
}
 8008bec:	bf00      	nop
 8008bee:	bf00      	nop
 8008bf0:	e7fd      	b.n	8008bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8008c1c <vPortExitCritical+0x50>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	4a08      	ldr	r2, [pc, #32]	@ (8008c1c <vPortExitCritical+0x50>)
 8008bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bfc:	4b07      	ldr	r3, [pc, #28]	@ (8008c1c <vPortExitCritical+0x50>)
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d105      	bne.n	8008c10 <vPortExitCritical+0x44>
 8008c04:	2300      	movs	r3, #0
 8008c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	f383 8811 	msr	BASEPRI, r3
}
 8008c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008c10:	bf00      	nop
 8008c12:	370c      	adds	r7, #12
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	24000010 	.word	0x24000010

08008c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c20:	f3ef 8009 	mrs	r0, PSP
 8008c24:	f3bf 8f6f 	isb	sy
 8008c28:	4b15      	ldr	r3, [pc, #84]	@ (8008c80 <pxCurrentTCBConst>)
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	f01e 0f10 	tst.w	lr, #16
 8008c30:	bf08      	it	eq
 8008c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c3a:	6010      	str	r0, [r2, #0]
 8008c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008c44:	f380 8811 	msr	BASEPRI, r0
 8008c48:	f3bf 8f4f 	dsb	sy
 8008c4c:	f3bf 8f6f 	isb	sy
 8008c50:	f7fe ffb0 	bl	8007bb4 <vTaskSwitchContext>
 8008c54:	f04f 0000 	mov.w	r0, #0
 8008c58:	f380 8811 	msr	BASEPRI, r0
 8008c5c:	bc09      	pop	{r0, r3}
 8008c5e:	6819      	ldr	r1, [r3, #0]
 8008c60:	6808      	ldr	r0, [r1, #0]
 8008c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c66:	f01e 0f10 	tst.w	lr, #16
 8008c6a:	bf08      	it	eq
 8008c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c70:	f380 8809 	msr	PSP, r0
 8008c74:	f3bf 8f6f 	isb	sy
 8008c78:	4770      	bx	lr
 8008c7a:	bf00      	nop
 8008c7c:	f3af 8000 	nop.w

08008c80 <pxCurrentTCBConst>:
 8008c80:	24000e5c 	.word	0x24000e5c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c84:	bf00      	nop
 8008c86:	bf00      	nop

08008c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c92:	f383 8811 	msr	BASEPRI, r3
 8008c96:	f3bf 8f6f 	isb	sy
 8008c9a:	f3bf 8f4f 	dsb	sy
 8008c9e:	607b      	str	r3, [r7, #4]
}
 8008ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ca2:	f7fe fecd 	bl	8007a40 <xTaskIncrementTick>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d003      	beq.n	8008cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008cac:	4b06      	ldr	r3, [pc, #24]	@ (8008cc8 <xPortSysTickHandler+0x40>)
 8008cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cb2:	601a      	str	r2, [r3, #0]
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	f383 8811 	msr	BASEPRI, r3
}
 8008cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}
 8008cc8:	e000ed04 	.word	0xe000ed04

08008ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008ccc:	b480      	push	{r7}
 8008cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8008d00 <vPortSetupTimerInterrupt+0x34>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008d04 <vPortSetupTimerInterrupt+0x38>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8008d08 <vPortSetupTimerInterrupt+0x3c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8008d0c <vPortSetupTimerInterrupt+0x40>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	099b      	lsrs	r3, r3, #6
 8008ce8:	4a09      	ldr	r2, [pc, #36]	@ (8008d10 <vPortSetupTimerInterrupt+0x44>)
 8008cea:	3b01      	subs	r3, #1
 8008cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cee:	4b04      	ldr	r3, [pc, #16]	@ (8008d00 <vPortSetupTimerInterrupt+0x34>)
 8008cf0:	2207      	movs	r2, #7
 8008cf2:	601a      	str	r2, [r3, #0]
}
 8008cf4:	bf00      	nop
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfc:	4770      	bx	lr
 8008cfe:	bf00      	nop
 8008d00:	e000e010 	.word	0xe000e010
 8008d04:	e000e018 	.word	0xe000e018
 8008d08:	24000000 	.word	0x24000000
 8008d0c:	10624dd3 	.word	0x10624dd3
 8008d10:	e000e014 	.word	0xe000e014

08008d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008d24 <vPortEnableVFP+0x10>
 8008d18:	6801      	ldr	r1, [r0, #0]
 8008d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008d1e:	6001      	str	r1, [r0, #0]
 8008d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d22:	bf00      	nop
 8008d24:	e000ed88 	.word	0xe000ed88

08008d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d2e:	f3ef 8305 	mrs	r3, IPSR
 8008d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b0f      	cmp	r3, #15
 8008d38:	d915      	bls.n	8008d66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d3a:	4a18      	ldr	r2, [pc, #96]	@ (8008d9c <vPortValidateInterruptPriority+0x74>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4413      	add	r3, r2
 8008d40:	781b      	ldrb	r3, [r3, #0]
 8008d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d44:	4b16      	ldr	r3, [pc, #88]	@ (8008da0 <vPortValidateInterruptPriority+0x78>)
 8008d46:	781b      	ldrb	r3, [r3, #0]
 8008d48:	7afa      	ldrb	r2, [r7, #11]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d20b      	bcs.n	8008d66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d52:	f383 8811 	msr	BASEPRI, r3
 8008d56:	f3bf 8f6f 	isb	sy
 8008d5a:	f3bf 8f4f 	dsb	sy
 8008d5e:	607b      	str	r3, [r7, #4]
}
 8008d60:	bf00      	nop
 8008d62:	bf00      	nop
 8008d64:	e7fd      	b.n	8008d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d66:	4b0f      	ldr	r3, [pc, #60]	@ (8008da4 <vPortValidateInterruptPriority+0x7c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8008da8 <vPortValidateInterruptPriority+0x80>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d90b      	bls.n	8008d8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d7a:	f383 8811 	msr	BASEPRI, r3
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f3bf 8f4f 	dsb	sy
 8008d86:	603b      	str	r3, [r7, #0]
}
 8008d88:	bf00      	nop
 8008d8a:	bf00      	nop
 8008d8c:	e7fd      	b.n	8008d8a <vPortValidateInterruptPriority+0x62>
	}
 8008d8e:	bf00      	nop
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	e000e3f0 	.word	0xe000e3f0
 8008da0:	24001488 	.word	0x24001488
 8008da4:	e000ed0c 	.word	0xe000ed0c
 8008da8:	2400148c 	.word	0x2400148c

08008dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b08a      	sub	sp, #40	@ 0x28
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008db8:	f7fe fd86 	bl	80078c8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008f30 <pvPortMalloc+0x184>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008dc4:	f000 f924 	bl	8009010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8008f34 <pvPortMalloc+0x188>)
 8008dca:	681a      	ldr	r2, [r3, #0]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f040 8095 	bne.w	8008f00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008ddc:	2208      	movs	r2, #8
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4413      	add	r3, r2
 8008de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d015      	beq.n	8008e1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f023 0307 	bic.w	r3, r3, #7
 8008df4:	3308      	adds	r3, #8
 8008df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d00b      	beq.n	8008e1a <pvPortMalloc+0x6e>
	__asm volatile
 8008e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e06:	f383 8811 	msr	BASEPRI, r3
 8008e0a:	f3bf 8f6f 	isb	sy
 8008e0e:	f3bf 8f4f 	dsb	sy
 8008e12:	617b      	str	r3, [r7, #20]
}
 8008e14:	bf00      	nop
 8008e16:	bf00      	nop
 8008e18:	e7fd      	b.n	8008e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d06f      	beq.n	8008f00 <pvPortMalloc+0x154>
 8008e20:	4b45      	ldr	r3, [pc, #276]	@ (8008f38 <pvPortMalloc+0x18c>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d86a      	bhi.n	8008f00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e2a:	4b44      	ldr	r3, [pc, #272]	@ (8008f3c <pvPortMalloc+0x190>)
 8008e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e2e:	4b43      	ldr	r3, [pc, #268]	@ (8008f3c <pvPortMalloc+0x190>)
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e34:	e004      	b.n	8008e40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d903      	bls.n	8008e52 <pvPortMalloc+0xa6>
 8008e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d1f1      	bne.n	8008e36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e52:	4b37      	ldr	r3, [pc, #220]	@ (8008f30 <pvPortMalloc+0x184>)
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d051      	beq.n	8008f00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e5c:	6a3b      	ldr	r3, [r7, #32]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2208      	movs	r2, #8
 8008e62:	4413      	add	r3, r2
 8008e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e68:	681a      	ldr	r2, [r3, #0]
 8008e6a:	6a3b      	ldr	r3, [r7, #32]
 8008e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e70:	685a      	ldr	r2, [r3, #4]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	1ad2      	subs	r2, r2, r3
 8008e76:	2308      	movs	r3, #8
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	d920      	bls.n	8008ec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	4413      	add	r3, r2
 8008e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <pvPortMalloc+0xfc>
	__asm volatile
 8008e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e94:	f383 8811 	msr	BASEPRI, r3
 8008e98:	f3bf 8f6f 	isb	sy
 8008e9c:	f3bf 8f4f 	dsb	sy
 8008ea0:	613b      	str	r3, [r7, #16]
}
 8008ea2:	bf00      	nop
 8008ea4:	bf00      	nop
 8008ea6:	e7fd      	b.n	8008ea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eaa:	685a      	ldr	r2, [r3, #4]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	1ad2      	subs	r2, r2, r3
 8008eb0:	69bb      	ldr	r3, [r7, #24]
 8008eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008eba:	69b8      	ldr	r0, [r7, #24]
 8008ebc:	f000 f90a 	bl	80090d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8008f38 <pvPortMalloc+0x18c>)
 8008ec2:	681a      	ldr	r2, [r3, #0]
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	4a1b      	ldr	r2, [pc, #108]	@ (8008f38 <pvPortMalloc+0x18c>)
 8008ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008ece:	4b1a      	ldr	r3, [pc, #104]	@ (8008f38 <pvPortMalloc+0x18c>)
 8008ed0:	681a      	ldr	r2, [r3, #0]
 8008ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8008f40 <pvPortMalloc+0x194>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d203      	bcs.n	8008ee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eda:	4b17      	ldr	r3, [pc, #92]	@ (8008f38 <pvPortMalloc+0x18c>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a18      	ldr	r2, [pc, #96]	@ (8008f40 <pvPortMalloc+0x194>)
 8008ee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	4b13      	ldr	r3, [pc, #76]	@ (8008f34 <pvPortMalloc+0x188>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	431a      	orrs	r2, r3
 8008eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008ef6:	4b13      	ldr	r3, [pc, #76]	@ (8008f44 <pvPortMalloc+0x198>)
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3301      	adds	r3, #1
 8008efc:	4a11      	ldr	r2, [pc, #68]	@ (8008f44 <pvPortMalloc+0x198>)
 8008efe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008f00:	f7fe fcf0 	bl	80078e4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	f003 0307 	and.w	r3, r3, #7
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d00b      	beq.n	8008f26 <pvPortMalloc+0x17a>
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	60fb      	str	r3, [r7, #12]
}
 8008f20:	bf00      	nop
 8008f22:	bf00      	nop
 8008f24:	e7fd      	b.n	8008f22 <pvPortMalloc+0x176>
	return pvReturn;
 8008f26:	69fb      	ldr	r3, [r7, #28]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3728      	adds	r7, #40	@ 0x28
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	24005098 	.word	0x24005098
 8008f34:	240050ac 	.word	0x240050ac
 8008f38:	2400509c 	.word	0x2400509c
 8008f3c:	24005090 	.word	0x24005090
 8008f40:	240050a0 	.word	0x240050a0
 8008f44:	240050a4 	.word	0x240050a4

08008f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d04f      	beq.n	8008ffa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	425b      	negs	r3, r3
 8008f5e:	697a      	ldr	r2, [r7, #20]
 8008f60:	4413      	add	r3, r2
 8008f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	685a      	ldr	r2, [r3, #4]
 8008f6c:	4b25      	ldr	r3, [pc, #148]	@ (8009004 <vPortFree+0xbc>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4013      	ands	r3, r2
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10b      	bne.n	8008f8e <vPortFree+0x46>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	60fb      	str	r3, [r7, #12]
}
 8008f88:	bf00      	nop
 8008f8a:	bf00      	nop
 8008f8c:	e7fd      	b.n	8008f8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d00b      	beq.n	8008fae <vPortFree+0x66>
	__asm volatile
 8008f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f9a:	f383 8811 	msr	BASEPRI, r3
 8008f9e:	f3bf 8f6f 	isb	sy
 8008fa2:	f3bf 8f4f 	dsb	sy
 8008fa6:	60bb      	str	r3, [r7, #8]
}
 8008fa8:	bf00      	nop
 8008faa:	bf00      	nop
 8008fac:	e7fd      	b.n	8008faa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	685a      	ldr	r2, [r3, #4]
 8008fb2:	4b14      	ldr	r3, [pc, #80]	@ (8009004 <vPortFree+0xbc>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4013      	ands	r3, r2
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d01e      	beq.n	8008ffa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d11a      	bne.n	8008ffa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8009004 <vPortFree+0xbc>)
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	401a      	ands	r2, r3
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008fd4:	f7fe fc78 	bl	80078c8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	685a      	ldr	r2, [r3, #4]
 8008fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8009008 <vPortFree+0xc0>)
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4413      	add	r3, r2
 8008fe2:	4a09      	ldr	r2, [pc, #36]	@ (8009008 <vPortFree+0xc0>)
 8008fe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008fe6:	6938      	ldr	r0, [r7, #16]
 8008fe8:	f000 f874 	bl	80090d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008fec:	4b07      	ldr	r3, [pc, #28]	@ (800900c <vPortFree+0xc4>)
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	4a06      	ldr	r2, [pc, #24]	@ (800900c <vPortFree+0xc4>)
 8008ff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008ff6:	f7fe fc75 	bl	80078e4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008ffa:	bf00      	nop
 8008ffc:	3718      	adds	r7, #24
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bd80      	pop	{r7, pc}
 8009002:	bf00      	nop
 8009004:	240050ac 	.word	0x240050ac
 8009008:	2400509c 	.word	0x2400509c
 800900c:	240050a8 	.word	0x240050a8

08009010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009010:	b480      	push	{r7}
 8009012:	b085      	sub	sp, #20
 8009014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009016:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800901a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800901c:	4b27      	ldr	r3, [pc, #156]	@ (80090bc <prvHeapInit+0xac>)
 800901e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 0307 	and.w	r3, r3, #7
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00c      	beq.n	8009044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	3307      	adds	r3, #7
 800902e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0307 	bic.w	r3, r3, #7
 8009036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009038:	68ba      	ldr	r2, [r7, #8]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	4a1f      	ldr	r2, [pc, #124]	@ (80090bc <prvHeapInit+0xac>)
 8009040:	4413      	add	r3, r2
 8009042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009048:	4a1d      	ldr	r2, [pc, #116]	@ (80090c0 <prvHeapInit+0xb0>)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800904e:	4b1c      	ldr	r3, [pc, #112]	@ (80090c0 <prvHeapInit+0xb0>)
 8009050:	2200      	movs	r2, #0
 8009052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	4413      	add	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800905c:	2208      	movs	r2, #8
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	1a9b      	subs	r3, r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f023 0307 	bic.w	r3, r3, #7
 800906a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4a15      	ldr	r2, [pc, #84]	@ (80090c4 <prvHeapInit+0xb4>)
 8009070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009072:	4b14      	ldr	r3, [pc, #80]	@ (80090c4 <prvHeapInit+0xb4>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	2200      	movs	r2, #0
 8009078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800907a:	4b12      	ldr	r3, [pc, #72]	@ (80090c4 <prvHeapInit+0xb4>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	2200      	movs	r2, #0
 8009080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	1ad2      	subs	r2, r2, r3
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009090:	4b0c      	ldr	r3, [pc, #48]	@ (80090c4 <prvHeapInit+0xb4>)
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	4a0a      	ldr	r2, [pc, #40]	@ (80090c8 <prvHeapInit+0xb8>)
 800909e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	4a09      	ldr	r2, [pc, #36]	@ (80090cc <prvHeapInit+0xbc>)
 80090a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80090a8:	4b09      	ldr	r3, [pc, #36]	@ (80090d0 <prvHeapInit+0xc0>)
 80090aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80090ae:	601a      	str	r2, [r3, #0]
}
 80090b0:	bf00      	nop
 80090b2:	3714      	adds	r7, #20
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr
 80090bc:	24001490 	.word	0x24001490
 80090c0:	24005090 	.word	0x24005090
 80090c4:	24005098 	.word	0x24005098
 80090c8:	240050a0 	.word	0x240050a0
 80090cc:	2400509c 	.word	0x2400509c
 80090d0:	240050ac 	.word	0x240050ac

080090d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80090dc:	4b28      	ldr	r3, [pc, #160]	@ (8009180 <prvInsertBlockIntoFreeList+0xac>)
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	e002      	b.n	80090e8 <prvInsertBlockIntoFreeList+0x14>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	60fb      	str	r3, [r7, #12]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d8f7      	bhi.n	80090e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	68ba      	ldr	r2, [r7, #8]
 80090fc:	4413      	add	r3, r2
 80090fe:	687a      	ldr	r2, [r7, #4]
 8009100:	429a      	cmp	r2, r3
 8009102:	d108      	bne.n	8009116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	685a      	ldr	r2, [r3, #4]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	441a      	add	r2, r3
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	68ba      	ldr	r2, [r7, #8]
 8009120:	441a      	add	r2, r3
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	429a      	cmp	r2, r3
 8009128:	d118      	bne.n	800915c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681a      	ldr	r2, [r3, #0]
 800912e:	4b15      	ldr	r3, [pc, #84]	@ (8009184 <prvInsertBlockIntoFreeList+0xb0>)
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	429a      	cmp	r2, r3
 8009134:	d00d      	beq.n	8009152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685a      	ldr	r2, [r3, #4]
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	685b      	ldr	r3, [r3, #4]
 8009140:	441a      	add	r2, r3
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	681a      	ldr	r2, [r3, #0]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	601a      	str	r2, [r3, #0]
 8009150:	e008      	b.n	8009164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009152:	4b0c      	ldr	r3, [pc, #48]	@ (8009184 <prvInsertBlockIntoFreeList+0xb0>)
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	601a      	str	r2, [r3, #0]
 800915a:	e003      	b.n	8009164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009164:	68fa      	ldr	r2, [r7, #12]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	429a      	cmp	r2, r3
 800916a:	d002      	beq.n	8009172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	687a      	ldr	r2, [r7, #4]
 8009170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	24005090 	.word	0x24005090
 8009184:	24005098 	.word	0x24005098

08009188 <memset>:
 8009188:	4402      	add	r2, r0
 800918a:	4603      	mov	r3, r0
 800918c:	4293      	cmp	r3, r2
 800918e:	d100      	bne.n	8009192 <memset+0xa>
 8009190:	4770      	bx	lr
 8009192:	f803 1b01 	strb.w	r1, [r3], #1
 8009196:	e7f9      	b.n	800918c <memset+0x4>

08009198 <__libc_init_array>:
 8009198:	b570      	push	{r4, r5, r6, lr}
 800919a:	4d0d      	ldr	r5, [pc, #52]	@ (80091d0 <__libc_init_array+0x38>)
 800919c:	4c0d      	ldr	r4, [pc, #52]	@ (80091d4 <__libc_init_array+0x3c>)
 800919e:	1b64      	subs	r4, r4, r5
 80091a0:	10a4      	asrs	r4, r4, #2
 80091a2:	2600      	movs	r6, #0
 80091a4:	42a6      	cmp	r6, r4
 80091a6:	d109      	bne.n	80091bc <__libc_init_array+0x24>
 80091a8:	4d0b      	ldr	r5, [pc, #44]	@ (80091d8 <__libc_init_array+0x40>)
 80091aa:	4c0c      	ldr	r4, [pc, #48]	@ (80091dc <__libc_init_array+0x44>)
 80091ac:	f000 f826 	bl	80091fc <_init>
 80091b0:	1b64      	subs	r4, r4, r5
 80091b2:	10a4      	asrs	r4, r4, #2
 80091b4:	2600      	movs	r6, #0
 80091b6:	42a6      	cmp	r6, r4
 80091b8:	d105      	bne.n	80091c6 <__libc_init_array+0x2e>
 80091ba:	bd70      	pop	{r4, r5, r6, pc}
 80091bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c0:	4798      	blx	r3
 80091c2:	3601      	adds	r6, #1
 80091c4:	e7ee      	b.n	80091a4 <__libc_init_array+0xc>
 80091c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80091ca:	4798      	blx	r3
 80091cc:	3601      	adds	r6, #1
 80091ce:	e7f2      	b.n	80091b6 <__libc_init_array+0x1e>
 80091d0:	0800929c 	.word	0x0800929c
 80091d4:	0800929c 	.word	0x0800929c
 80091d8:	0800929c 	.word	0x0800929c
 80091dc:	080092a0 	.word	0x080092a0

080091e0 <memcpy>:
 80091e0:	440a      	add	r2, r1
 80091e2:	4291      	cmp	r1, r2
 80091e4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80091e8:	d100      	bne.n	80091ec <memcpy+0xc>
 80091ea:	4770      	bx	lr
 80091ec:	b510      	push	{r4, lr}
 80091ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091f6:	4291      	cmp	r1, r2
 80091f8:	d1f9      	bne.n	80091ee <memcpy+0xe>
 80091fa:	bd10      	pop	{r4, pc}

080091fc <_init>:
 80091fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091fe:	bf00      	nop
 8009200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009202:	bc08      	pop	{r3}
 8009204:	469e      	mov	lr, r3
 8009206:	4770      	bx	lr

08009208 <_fini>:
 8009208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800920a:	bf00      	nop
 800920c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800920e:	bc08      	pop	{r3}
 8009210:	469e      	mov	lr, r3
 8009212:	4770      	bx	lr
