
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063c8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006660  08006660  00007660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006698  08006698  00007698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066a0  080066a0  000076a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080066a4  080066a4  000076a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080066a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080066b8  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006718  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  08006778  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  08006778  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bca  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0001fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00022538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  00023488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00037275  00000000  00000000  0002405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013bcd  00000000  00000000  0005b2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015dfda  00000000  00000000  0006eea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cce7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  001ccec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001d0fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006648 	.word	0x08006648

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006648 	.word	0x08006648

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005cc:	f000 fce8 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d0:	f000 f80a 	bl	80005e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d4:	f000 f952 	bl	800087c <MX_GPIO_Init>
  MX_ETH_Init();
 80005d8:	f000 f886 	bl	80006e8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005dc:	f000 f8d0 	bl	8000780 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e0:	f000 f91a 	bl	8000818 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	bf00      	nop
 80005e6:	e7fd      	b.n	80005e4 <main+0x1c>

080005e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b09c      	sub	sp, #112	@ 0x70
 80005ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80005f2:	224c      	movs	r2, #76	@ 0x4c
 80005f4:	2100      	movs	r1, #0
 80005f6:	4618      	mov	r0, r3
 80005f8:	f005 fff9 	bl	80065ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2220      	movs	r2, #32
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f005 fff3 	bl	80065ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000608:	2002      	movs	r0, #2
 800060a:	f001 fdb1 	bl	8002170 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800060e:	2300      	movs	r3, #0
 8000610:	603b      	str	r3, [r7, #0]
 8000612:	4b33      	ldr	r3, [pc, #204]	@ (80006e0 <SystemClock_Config+0xf8>)
 8000614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000616:	4a32      	ldr	r2, [pc, #200]	@ (80006e0 <SystemClock_Config+0xf8>)
 8000618:	f023 0301 	bic.w	r3, r3, #1
 800061c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800061e:	4b30      	ldr	r3, [pc, #192]	@ (80006e0 <SystemClock_Config+0xf8>)
 8000620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000622:	f003 0301 	and.w	r3, r3, #1
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <SystemClock_Config+0xfc>)
 800062a:	699b      	ldr	r3, [r3, #24]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000630:	4a2c      	ldr	r2, [pc, #176]	@ (80006e4 <SystemClock_Config+0xfc>)
 8000632:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000636:	6193      	str	r3, [r2, #24]
 8000638:	4b2a      	ldr	r3, [pc, #168]	@ (80006e4 <SystemClock_Config+0xfc>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000644:	bf00      	nop
 8000646:	4b27      	ldr	r3, [pc, #156]	@ (80006e4 <SystemClock_Config+0xfc>)
 8000648:	699b      	ldr	r3, [r3, #24]
 800064a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800064e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000652:	d1f8      	bne.n	8000646 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000654:	2303      	movs	r3, #3
 8000656:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000658:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800065c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800065e:	2301      	movs	r3, #1
 8000660:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000662:	2340      	movs	r3, #64	@ 0x40
 8000664:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800066e:	2301      	movs	r3, #1
 8000670:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8000672:	2318      	movs	r3, #24
 8000674:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000676:	2302      	movs	r3, #2
 8000678:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067a:	2304      	movs	r3, #4
 800067c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000682:	230c      	movs	r3, #12
 8000684:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000686:	2300      	movs	r3, #0
 8000688:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800068e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000692:	4618      	mov	r0, r3
 8000694:	f001 fdb6 	bl	8002204 <HAL_RCC_OscConfig>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800069e:	f000 f9c9 	bl	8000a34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a2:	233f      	movs	r3, #63	@ 0x3f
 80006a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ae:	2300      	movs	r3, #0
 80006b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	2101      	movs	r1, #1
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 f9f6 	bl	8002ab8 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006d2:	f000 f9af 	bl	8000a34 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3770      	adds	r7, #112	@ 0x70
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	58000400 	.word	0x58000400
 80006e4:	58024800 	.word	0x58024800

080006e8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000768 <MX_ETH_Init+0x80>)
 80006ee:	4a1f      	ldr	r2, [pc, #124]	@ (800076c <MX_ETH_Init+0x84>)
 80006f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006f2:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <MX_ETH_Init+0x88>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80006f8:	4b1d      	ldr	r3, [pc, #116]	@ (8000770 <MX_ETH_Init+0x88>)
 80006fa:	2280      	movs	r2, #128	@ 0x80
 80006fc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80006fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <MX_ETH_Init+0x88>)
 8000700:	22e1      	movs	r2, #225	@ 0xe1
 8000702:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000704:	4b1a      	ldr	r3, [pc, #104]	@ (8000770 <MX_ETH_Init+0x88>)
 8000706:	2200      	movs	r2, #0
 8000708:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <MX_ETH_Init+0x88>)
 800070c:	2200      	movs	r2, #0
 800070e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000710:	4b17      	ldr	r3, [pc, #92]	@ (8000770 <MX_ETH_Init+0x88>)
 8000712:	2200      	movs	r2, #0
 8000714:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000716:	4b14      	ldr	r3, [pc, #80]	@ (8000768 <MX_ETH_Init+0x80>)
 8000718:	4a15      	ldr	r2, [pc, #84]	@ (8000770 <MX_ETH_Init+0x88>)
 800071a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800071c:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <MX_ETH_Init+0x80>)
 800071e:	2201      	movs	r2, #1
 8000720:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000722:	4b11      	ldr	r3, [pc, #68]	@ (8000768 <MX_ETH_Init+0x80>)
 8000724:	4a13      	ldr	r2, [pc, #76]	@ (8000774 <MX_ETH_Init+0x8c>)
 8000726:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000728:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <MX_ETH_Init+0x80>)
 800072a:	4a13      	ldr	r2, [pc, #76]	@ (8000778 <MX_ETH_Init+0x90>)
 800072c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800072e:	4b0e      	ldr	r3, [pc, #56]	@ (8000768 <MX_ETH_Init+0x80>)
 8000730:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000734:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000736:	480c      	ldr	r0, [pc, #48]	@ (8000768 <MX_ETH_Init+0x80>)
 8000738:	f000 fdec 	bl	8001314 <HAL_ETH_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 f977 	bl	8000a34 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000746:	2238      	movs	r2, #56	@ 0x38
 8000748:	2100      	movs	r1, #0
 800074a:	480c      	ldr	r0, [pc, #48]	@ (800077c <MX_ETH_Init+0x94>)
 800074c:	f005 ff4f 	bl	80065ee <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000750:	4b0a      	ldr	r3, [pc, #40]	@ (800077c <MX_ETH_Init+0x94>)
 8000752:	2221      	movs	r2, #33	@ 0x21
 8000754:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_ETH_Init+0x94>)
 8000758:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800075c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800075e:	4b07      	ldr	r3, [pc, #28]	@ (800077c <MX_ETH_Init+0x94>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000764:	bf00      	nop
 8000766:	bd80      	pop	{r7, pc}
 8000768:	24000124 	.word	0x24000124
 800076c:	40028000 	.word	0x40028000
 8000770:	2400074c 	.word	0x2400074c
 8000774:	24000070 	.word	0x24000070
 8000778:	24000010 	.word	0x24000010
 800077c:	240000ec 	.word	0x240000ec

08000780 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000784:	4b22      	ldr	r3, [pc, #136]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 8000786:	4a23      	ldr	r2, [pc, #140]	@ (8000814 <MX_USART3_UART_Init+0x94>)
 8000788:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800078a:	4b21      	ldr	r3, [pc, #132]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b1f      	ldr	r3, [pc, #124]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b1d      	ldr	r3, [pc, #116]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079e:	4b1c      	ldr	r3, [pc, #112]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007b6:	4b16      	ldr	r3, [pc, #88]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007bc:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007be:	2200      	movs	r2, #0
 80007c0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c2:	4b13      	ldr	r3, [pc, #76]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007c8:	4811      	ldr	r0, [pc, #68]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007ca:	f004 fb2d 	bl	8004e28 <HAL_UART_Init>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007d4:	f000 f92e 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007d8:	2100      	movs	r1, #0
 80007da:	480d      	ldr	r0, [pc, #52]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007dc:	f005 fb35 	bl	8005e4a <HAL_UARTEx_SetTxFifoThreshold>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007e6:	f000 f925 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007ea:	2100      	movs	r1, #0
 80007ec:	4808      	ldr	r0, [pc, #32]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007ee:	f005 fb6a 	bl	8005ec6 <HAL_UARTEx_SetRxFifoThreshold>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80007f8:	f000 f91c 	bl	8000a34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80007fc:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_USART3_UART_Init+0x90>)
 80007fe:	f005 faeb 	bl	8005dd8 <HAL_UARTEx_DisableFifoMode>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000808:	f000 f914 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	240001d4 	.word	0x240001d4
 8000814:	40004800 	.word	0x40004800

08000818 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800081c:	4b15      	ldr	r3, [pc, #84]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800081e:	4a16      	ldr	r2, [pc, #88]	@ (8000878 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000820:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000822:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000824:	2209      	movs	r2, #9
 8000826:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000828:	4b12      	ldr	r3, [pc, #72]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082a:	2202      	movs	r2, #2
 800082c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000834:	4b0f      	ldr	r3, [pc, #60]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000836:	2202      	movs	r2, #2
 8000838:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083c:	2201      	movs	r2, #1
 800083e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000840:	4b0c      	ldr	r3, [pc, #48]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800084c:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084e:	2201      	movs	r2, #1
 8000850:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000854:	2201      	movs	r2, #1
 8000856:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000858:	4b06      	ldr	r3, [pc, #24]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	2200      	movs	r2, #0
 800085c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800085e:	4805      	ldr	r0, [pc, #20]	@ (8000874 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	f001 fb55 	bl	8001f0e <HAL_PCD_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800086a:	f000 f8e3 	bl	8000a34 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	24000268 	.word	0x24000268
 8000878:	40080000 	.word	0x40080000

0800087c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
 800088a:	605a      	str	r2, [r3, #4]
 800088c:	609a      	str	r2, [r3, #8]
 800088e:	60da      	str	r2, [r3, #12]
 8000890:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000892:	4b62      	ldr	r3, [pc, #392]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 8000894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000898:	4a60      	ldr	r2, [pc, #384]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800089a:	f043 0304 	orr.w	r3, r3, #4
 800089e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008a8:	f003 0304 	and.w	r3, r3, #4
 80008ac:	61bb      	str	r3, [r7, #24]
 80008ae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b0:	4b5a      	ldr	r3, [pc, #360]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008b6:	4a59      	ldr	r2, [pc, #356]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008c0:	4b56      	ldr	r3, [pc, #344]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	4b53      	ldr	r3, [pc, #332]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a51      	ldr	r2, [pc, #324]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008d6:	f043 0301 	orr.w	r3, r3, #1
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b4f      	ldr	r3, [pc, #316]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0301 	and.w	r3, r3, #1
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ec:	4b4b      	ldr	r3, [pc, #300]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a4a      	ldr	r2, [pc, #296]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b47      	ldr	r3, [pc, #284]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800090a:	4b44      	ldr	r3, [pc, #272]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a42      	ldr	r2, [pc, #264]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 8000912:	f043 0308 	orr.w	r3, r3, #8
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b40      	ldr	r3, [pc, #256]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0308 	and.w	r3, r3, #8
 8000924:	60bb      	str	r3, [r7, #8]
 8000926:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000928:	4b3c      	ldr	r3, [pc, #240]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a3b      	ldr	r2, [pc, #236]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b38      	ldr	r3, [pc, #224]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000946:	4b35      	ldr	r3, [pc, #212]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a33      	ldr	r2, [pc, #204]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 800094e:	f043 0310 	orr.w	r3, r3, #16
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b31      	ldr	r3, [pc, #196]	@ (8000a1c <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 0310 	and.w	r3, r3, #16
 8000960:	603b      	str	r3, [r7, #0]
 8000962:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f244 0101 	movw	r1, #16385	@ 0x4001
 800096a:	482d      	ldr	r0, [pc, #180]	@ (8000a20 <MX_GPIO_Init+0x1a4>)
 800096c:	f001 fab6 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000976:	482b      	ldr	r0, [pc, #172]	@ (8000a24 <MX_GPIO_Init+0x1a8>)
 8000978:	f001 fab0 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800097c:	2200      	movs	r2, #0
 800097e:	2102      	movs	r1, #2
 8000980:	4829      	ldr	r0, [pc, #164]	@ (8000a28 <MX_GPIO_Init+0x1ac>)
 8000982:	f001 faab 	bl	8001edc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000986:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 031c 	add.w	r3, r7, #28
 8000998:	4619      	mov	r1, r3
 800099a:	4824      	ldr	r0, [pc, #144]	@ (8000a2c <MX_GPIO_Init+0x1b0>)
 800099c:	f001 f8ee 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009a0:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4819      	ldr	r0, [pc, #100]	@ (8000a20 <MX_GPIO_Init+0x1a4>)
 80009ba:	f001 f8df 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c4:	2301      	movs	r3, #1
 80009c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4813      	ldr	r0, [pc, #76]	@ (8000a24 <MX_GPIO_Init+0x1a8>)
 80009d8:	f001 f8d0 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009dc:	2380      	movs	r3, #128	@ 0x80
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	480f      	ldr	r0, [pc, #60]	@ (8000a30 <MX_GPIO_Init+0x1b4>)
 80009f2:	f001 f8c3 	bl	8001b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009f6:	2302      	movs	r3, #2
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4806      	ldr	r0, [pc, #24]	@ (8000a28 <MX_GPIO_Init+0x1ac>)
 8000a0e:	f001 f8b5 	bl	8001b7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a12:	bf00      	nop
 8000a14:	3730      	adds	r7, #48	@ 0x30
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58024400 	.word	0x58024400
 8000a20:	58020400 	.word	0x58020400
 8000a24:	58020c00 	.word	0x58020c00
 8000a28:	58021000 	.word	0x58021000
 8000a2c:	58020800 	.word	0x58020800
 8000a30:	58021800 	.word	0x58021800

08000a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a38:	b672      	cpsid	i
}
 8000a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <Error_Handler+0x8>

08000a40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a48:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a4c:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a4e:	f043 0302 	orr.w	r3, r3, #2
 8000a52:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x30>)
 8000a58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a5c:	f003 0302 	and.w	r3, r3, #2
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a64:	bf00      	nop
 8000a66:	370c      	adds	r7, #12
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	58024400 	.word	0x58024400

08000a74 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a59      	ldr	r2, [pc, #356]	@ (8000bf8 <HAL_ETH_MspInit+0x184>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	f040 80ab 	bne.w	8000bee <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000a98:	4b58      	ldr	r3, [pc, #352]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000a9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000a9e:	4a57      	ldr	r2, [pc, #348]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa4:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000aa8:	4b54      	ldr	r3, [pc, #336]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000aaa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ab2:	623b      	str	r3, [r7, #32]
 8000ab4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000ab6:	4b51      	ldr	r3, [pc, #324]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000ab8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000abc:	4a4f      	ldr	r2, [pc, #316]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000abe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ac2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ac6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000ac8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ad0:	61fb      	str	r3, [r7, #28]
 8000ad2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ad4:	4b49      	ldr	r3, [pc, #292]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ada:	4a48      	ldr	r2, [pc, #288]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae4:	4b45      	ldr	r3, [pc, #276]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000aee:	61bb      	str	r3, [r7, #24]
 8000af0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	4b42      	ldr	r3, [pc, #264]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	4a40      	ldr	r2, [pc, #256]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000afa:	f043 0304 	orr.w	r3, r3, #4
 8000afe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b02:	4b3e      	ldr	r3, [pc, #248]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b08:	f003 0304 	and.w	r3, r3, #4
 8000b0c:	617b      	str	r3, [r7, #20]
 8000b0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b3a      	ldr	r3, [pc, #232]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	4a39      	ldr	r2, [pc, #228]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b20:	4b36      	ldr	r3, [pc, #216]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2e:	4b33      	ldr	r3, [pc, #204]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a31      	ldr	r2, [pc, #196]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b36:	f043 0302 	orr.w	r3, r3, #2
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0302 	and.w	r3, r3, #2
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b4c:	4b2b      	ldr	r3, [pc, #172]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a2a      	ldr	r2, [pc, #168]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b27      	ldr	r3, [pc, #156]	@ (8000bfc <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b6a:	2332      	movs	r3, #50	@ 0x32
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b7a:	230b      	movs	r3, #11
 8000b7c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	481e      	ldr	r0, [pc, #120]	@ (8000c00 <HAL_ETH_MspInit+0x18c>)
 8000b86:	f000 fff9 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b8a:	2386      	movs	r3, #134	@ 0x86
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b9a:	230b      	movs	r3, #11
 8000b9c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4817      	ldr	r0, [pc, #92]	@ (8000c04 <HAL_ETH_MspInit+0x190>)
 8000ba6:	f000 ffe9 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000baa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bbc:	230b      	movs	r3, #11
 8000bbe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4810      	ldr	r0, [pc, #64]	@ (8000c08 <HAL_ETH_MspInit+0x194>)
 8000bc8:	f000 ffd8 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bcc:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bde:	230b      	movs	r3, #11
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000be2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be6:	4619      	mov	r1, r3
 8000be8:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <HAL_ETH_MspInit+0x198>)
 8000bea:	f000 ffc7 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bee:	bf00      	nop
 8000bf0:	3738      	adds	r7, #56	@ 0x38
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40028000 	.word	0x40028000
 8000bfc:	58024400 	.word	0x58024400
 8000c00:	58020800 	.word	0x58020800
 8000c04:	58020000 	.word	0x58020000
 8000c08:	58020400 	.word	0x58020400
 8000c0c:	58021800 	.word	0x58021800

08000c10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b0ba      	sub	sp, #232	@ 0xe8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c28:	f107 0310 	add.w	r3, r7, #16
 8000c2c:	22c0      	movs	r2, #192	@ 0xc0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f005 fcdc 	bl	80065ee <memset>
  if(huart->Instance==USART3)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a27      	ldr	r2, [pc, #156]	@ (8000cd8 <HAL_UART_MspInit+0xc8>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d146      	bne.n	8000cce <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c40:	f04f 0202 	mov.w	r2, #2
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 faba 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c62:	f7ff fee7 	bl	8000a34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_UART_MspInit+0xcc>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ca6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <HAL_UART_MspInit+0xd0>)
 8000cca:	f000 ff57 	bl	8001b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37e8      	adds	r7, #232	@ 0xe8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0ba      	sub	sp, #232	@ 0xe8
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22c0      	movs	r2, #192	@ 0xc0
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 fc72 	bl	80065ee <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a30      	ldr	r2, [pc, #192]	@ (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d159      	bne.n	8000dc8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d14:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d18:	f04f 0300 	mov.w	r3, #0
 8000d1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d20:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d28:	f107 0310 	add.w	r3, r7, #16
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f002 fa4f 	bl	80031d0 <HAL_RCCEx_PeriphCLKConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d38:	f7ff fe7c 	bl	8000a34 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d3c:	f001 fa52 	bl	80021e4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d40:	4b24      	ldr	r3, [pc, #144]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d50:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d5e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4814      	ldr	r0, [pc, #80]	@ (8000dd8 <HAL_PCD_MspInit+0xf4>)
 8000d86:	f000 fef9 	bl	8001b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da2:	4619      	mov	r1, r3
 8000da4:	480c      	ldr	r0, [pc, #48]	@ (8000dd8 <HAL_PCD_MspInit+0xf4>)
 8000da6:	f000 fee9 	bl	8001b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000db0:	4a08      	ldr	r2, [pc, #32]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000db2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000db6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dc8:	bf00      	nop
 8000dca:	37e8      	adds	r7, #232	@ 0xe8
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	40080000 	.word	0x40080000
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58020000 	.word	0x58020000

08000ddc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <NMI_Handler+0x4>

08000de4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <HardFault_Handler+0x4>

08000dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000df0:	bf00      	nop
 8000df2:	e7fd      	b.n	8000df0 <MemManage_Handler+0x4>

08000df4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000df8:	bf00      	nop
 8000dfa:	e7fd      	b.n	8000df8 <BusFault_Handler+0x4>

08000dfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <UsageFault_Handler+0x4>

08000e04 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr

08000e2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e32:	f000 f927 	bl	8001084 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e40:	4b37      	ldr	r3, [pc, #220]	@ (8000f20 <SystemInit+0xe4>)
 8000e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e46:	4a36      	ldr	r2, [pc, #216]	@ (8000f20 <SystemInit+0xe4>)
 8000e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e50:	4b34      	ldr	r3, [pc, #208]	@ (8000f24 <SystemInit+0xe8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f003 030f 	and.w	r3, r3, #15
 8000e58:	2b06      	cmp	r3, #6
 8000e5a:	d807      	bhi.n	8000e6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e5c:	4b31      	ldr	r3, [pc, #196]	@ (8000f24 <SystemInit+0xe8>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	4a2f      	ldr	r2, [pc, #188]	@ (8000f24 <SystemInit+0xe8>)
 8000e66:	f043 0307 	orr.w	r3, r3, #7
 8000e6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000f28 <SystemInit+0xec>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a2d      	ldr	r2, [pc, #180]	@ (8000f28 <SystemInit+0xec>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e78:	4b2b      	ldr	r3, [pc, #172]	@ (8000f28 <SystemInit+0xec>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e7e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f28 <SystemInit+0xec>)
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	4929      	ldr	r1, [pc, #164]	@ (8000f28 <SystemInit+0xec>)
 8000e84:	4b29      	ldr	r3, [pc, #164]	@ (8000f2c <SystemInit+0xf0>)
 8000e86:	4013      	ands	r3, r2
 8000e88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8a:	4b26      	ldr	r3, [pc, #152]	@ (8000f24 <SystemInit+0xe8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f003 0308 	and.w	r3, r3, #8
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d007      	beq.n	8000ea6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e96:	4b23      	ldr	r3, [pc, #140]	@ (8000f24 <SystemInit+0xe8>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f023 030f 	bic.w	r3, r3, #15
 8000e9e:	4a21      	ldr	r2, [pc, #132]	@ (8000f24 <SystemInit+0xe8>)
 8000ea0:	f043 0307 	orr.w	r3, r3, #7
 8000ea4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <SystemInit+0xec>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000eac:	4b1e      	ldr	r3, [pc, #120]	@ (8000f28 <SystemInit+0xec>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <SystemInit+0xec>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f28 <SystemInit+0xec>)
 8000eba:	4a1d      	ldr	r2, [pc, #116]	@ (8000f30 <SystemInit+0xf4>)
 8000ebc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f28 <SystemInit+0xec>)
 8000ec0:	4a1c      	ldr	r2, [pc, #112]	@ (8000f34 <SystemInit+0xf8>)
 8000ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	@ (8000f28 <SystemInit+0xec>)
 8000ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8000f38 <SystemInit+0xfc>)
 8000ec8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eca:	4b17      	ldr	r3, [pc, #92]	@ (8000f28 <SystemInit+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ed0:	4b15      	ldr	r3, [pc, #84]	@ (8000f28 <SystemInit+0xec>)
 8000ed2:	4a19      	ldr	r2, [pc, #100]	@ (8000f38 <SystemInit+0xfc>)
 8000ed4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ed6:	4b14      	ldr	r3, [pc, #80]	@ (8000f28 <SystemInit+0xec>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000edc:	4b12      	ldr	r3, [pc, #72]	@ (8000f28 <SystemInit+0xec>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	@ (8000f38 <SystemInit+0xfc>)
 8000ee0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ee2:	4b11      	ldr	r3, [pc, #68]	@ (8000f28 <SystemInit+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f28 <SystemInit+0xec>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a0e      	ldr	r2, [pc, #56]	@ (8000f28 <SystemInit+0xec>)
 8000eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f28 <SystemInit+0xec>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000efa:	4b10      	ldr	r3, [pc, #64]	@ (8000f3c <SystemInit+0x100>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	4b10      	ldr	r3, [pc, #64]	@ (8000f40 <SystemInit+0x104>)
 8000f00:	4013      	ands	r3, r2
 8000f02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f06:	d202      	bcs.n	8000f0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f08:	4b0e      	ldr	r3, [pc, #56]	@ (8000f44 <SystemInit+0x108>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f48 <SystemInit+0x10c>)
 8000f10:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f16:	bf00      	nop
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	52002000 	.word	0x52002000
 8000f28:	58024400 	.word	0x58024400
 8000f2c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f30:	02020200 	.word	0x02020200
 8000f34:	01ff0000 	.word	0x01ff0000
 8000f38:	01010280 	.word	0x01010280
 8000f3c:	5c001000 	.word	0x5c001000
 8000f40:	ffff0000 	.word	0xffff0000
 8000f44:	51008108 	.word	0x51008108
 8000f48:	52004000 	.word	0x52004000

08000f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f50:	f7ff ff74 	bl	8000e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f56:	490d      	ldr	r1, [pc, #52]	@ (8000f8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f58:	4a0d      	ldr	r2, [pc, #52]	@ (8000f90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f5c:	e002      	b.n	8000f64 <LoopCopyDataInit>

08000f5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f62:	3304      	adds	r3, #4

08000f64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f68:	d3f9      	bcc.n	8000f5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f70:	e001      	b.n	8000f76 <LoopFillZerobss>

08000f72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f74:	3204      	adds	r2, #4

08000f76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f78:	d3fb      	bcc.n	8000f72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f7a:	f005 fb41 	bl	8006600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f7e:	f7ff fb23 	bl	80005c8 <main>
  bx  lr
 8000f82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f8c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f90:	080066a8 	.word	0x080066a8
  ldr r2, =_sbss
 8000f94:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f98:	24000758 	.word	0x24000758

08000f9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f9c:	e7fe      	b.n	8000f9c <ADC3_IRQHandler>
	...

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa6:	2003      	movs	r0, #3
 8000fa8:	f000 f982 	bl	80012b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fac:	f001 ff3a 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	4b15      	ldr	r3, [pc, #84]	@ (8001008 <HAL_Init+0x68>)
 8000fb4:	699b      	ldr	r3, [r3, #24]
 8000fb6:	0a1b      	lsrs	r3, r3, #8
 8000fb8:	f003 030f 	and.w	r3, r3, #15
 8000fbc:	4913      	ldr	r1, [pc, #76]	@ (800100c <HAL_Init+0x6c>)
 8000fbe:	5ccb      	ldrb	r3, [r1, r3]
 8000fc0:	f003 031f 	and.w	r3, r3, #31
 8000fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fca:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_Init+0x68>)
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4a0e      	ldr	r2, [pc, #56]	@ (800100c <HAL_Init+0x6c>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fe0:	4a0b      	ldr	r2, [pc, #44]	@ (8001010 <HAL_Init+0x70>)
 8000fe2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fe4:	4a0b      	ldr	r2, [pc, #44]	@ (8001014 <HAL_Init+0x74>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fea:	2000      	movs	r0, #0
 8000fec:	f000 f814 	bl	8001018 <HAL_InitTick>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e002      	b.n	8001000 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffa:	f7ff fd21 	bl	8000a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	58024400 	.word	0x58024400
 800100c:	08006660 	.word	0x08006660
 8001010:	24000004 	.word	0x24000004
 8001014:	24000000 	.word	0x24000000

08001018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001020:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d101      	bne.n	800102c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e021      	b.n	8001070 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <HAL_InitTick+0x64>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b11      	ldr	r3, [pc, #68]	@ (8001078 <HAL_InitTick+0x60>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	4619      	mov	r1, r3
 8001036:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800103a:	fbb3 f3f1 	udiv	r3, r3, r1
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	4618      	mov	r0, r3
 8001044:	f000 f959 	bl	80012fa <HAL_SYSTICK_Config>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e00e      	b.n	8001070 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b0f      	cmp	r3, #15
 8001056:	d80a      	bhi.n	800106e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001058:	2200      	movs	r2, #0
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001060:	f000 f931 	bl	80012c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <HAL_InitTick+0x68>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800106a:	2300      	movs	r3, #0
 800106c:	e000      	b.n	8001070 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
}
 8001070:	4618      	mov	r0, r3
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400000c 	.word	0x2400000c
 800107c:	24000000 	.word	0x24000000
 8001080:	24000008 	.word	0x24000008

08001084 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <HAL_IncTick+0x20>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	461a      	mov	r2, r3
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_IncTick+0x24>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4413      	add	r3, r2
 8001094:	4a04      	ldr	r2, [pc, #16]	@ (80010a8 <HAL_IncTick+0x24>)
 8001096:	6013      	str	r3, [r2, #0]
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	2400000c 	.word	0x2400000c
 80010a8:	24000754 	.word	0x24000754

080010ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return uwTick;
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetTick+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	24000754 	.word	0x24000754

080010c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010cc:	f7ff ffee 	bl	80010ac <HAL_GetTick>
 80010d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80010dc:	d005      	beq.n	80010ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010de:	4b0a      	ldr	r3, [pc, #40]	@ (8001108 <HAL_Delay+0x44>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4413      	add	r3, r2
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ea:	bf00      	nop
 80010ec:	f7ff ffde 	bl	80010ac <HAL_GetTick>
 80010f0:	4602      	mov	r2, r0
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	68fa      	ldr	r2, [r7, #12]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d8f7      	bhi.n	80010ec <HAL_Delay+0x28>
  {
  }
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3710      	adds	r7, #16
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c

0800110c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetREVID+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	0c1b      	lsrs	r3, r3, #16
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	5c001000 	.word	0x5c001000

08001124 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800112c:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001134:	4904      	ldr	r1, [pc, #16]	@ (8001148 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	58000400 	.word	0x58000400

0800114c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800114c:	b480      	push	{r7}
 800114e:	b085      	sub	sp, #20
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001162:	68ba      	ldr	r2, [r7, #8]
 8001164:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001168:	4013      	ands	r3, r2
 800116a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001174:	4b06      	ldr	r3, [pc, #24]	@ (8001190 <__NVIC_SetPriorityGrouping+0x44>)
 8001176:	4313      	orrs	r3, r2
 8001178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800117a:	4a04      	ldr	r2, [pc, #16]	@ (800118c <__NVIC_SetPriorityGrouping+0x40>)
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	60d3      	str	r3, [r2, #12]
}
 8001180:	bf00      	nop
 8001182:	3714      	adds	r7, #20
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	e000ed00 	.word	0xe000ed00
 8001190:	05fa0000 	.word	0x05fa0000

08001194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001198:	4b04      	ldr	r3, [pc, #16]	@ (80011ac <__NVIC_GetPriorityGrouping+0x18>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	0a1b      	lsrs	r3, r3, #8
 800119e:	f003 0307 	and.w	r3, r3, #7
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	4603      	mov	r3, r0
 80011b8:	6039      	str	r1, [r7, #0]
 80011ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	db0a      	blt.n	80011da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	490c      	ldr	r1, [pc, #48]	@ (80011fc <__NVIC_SetPriority+0x4c>)
 80011ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	b2d2      	uxtb	r2, r2
 80011d2:	440b      	add	r3, r1
 80011d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d8:	e00a      	b.n	80011f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	4908      	ldr	r1, [pc, #32]	@ (8001200 <__NVIC_SetPriority+0x50>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	f003 030f 	and.w	r3, r3, #15
 80011e6:	3b04      	subs	r3, #4
 80011e8:	0112      	lsls	r2, r2, #4
 80011ea:	b2d2      	uxtb	r2, r2
 80011ec:	440b      	add	r3, r1
 80011ee:	761a      	strb	r2, [r3, #24]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000e100 	.word	0xe000e100
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001204:	b480      	push	{r7}
 8001206:	b089      	sub	sp, #36	@ 0x24
 8001208:	af00      	add	r7, sp, #0
 800120a:	60f8      	str	r0, [r7, #12]
 800120c:	60b9      	str	r1, [r7, #8]
 800120e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	f003 0307 	and.w	r3, r3, #7
 8001216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	f1c3 0307 	rsb	r3, r3, #7
 800121e:	2b04      	cmp	r3, #4
 8001220:	bf28      	it	cs
 8001222:	2304      	movcs	r3, #4
 8001224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3304      	adds	r3, #4
 800122a:	2b06      	cmp	r3, #6
 800122c:	d902      	bls.n	8001234 <NVIC_EncodePriority+0x30>
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3b03      	subs	r3, #3
 8001232:	e000      	b.n	8001236 <NVIC_EncodePriority+0x32>
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43da      	mvns	r2, r3
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	401a      	ands	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800124c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa01 f303 	lsl.w	r3, r1, r3
 8001256:	43d9      	mvns	r1, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800125c:	4313      	orrs	r3, r2
         );
}
 800125e:	4618      	mov	r0, r3
 8001260:	3724      	adds	r7, #36	@ 0x24
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
	...

0800126c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3b01      	subs	r3, #1
 8001278:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800127c:	d301      	bcc.n	8001282 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800127e:	2301      	movs	r3, #1
 8001280:	e00f      	b.n	80012a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001282:	4a0a      	ldr	r2, [pc, #40]	@ (80012ac <SysTick_Config+0x40>)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3b01      	subs	r3, #1
 8001288:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800128a:	210f      	movs	r1, #15
 800128c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001290:	f7ff ff8e 	bl	80011b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001294:	4b05      	ldr	r3, [pc, #20]	@ (80012ac <SysTick_Config+0x40>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800129a:	4b04      	ldr	r3, [pc, #16]	@ (80012ac <SysTick_Config+0x40>)
 800129c:	2207      	movs	r2, #7
 800129e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	e000e010 	.word	0xe000e010

080012b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b082      	sub	sp, #8
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b8:	6878      	ldr	r0, [r7, #4]
 80012ba:	f7ff ff47 	bl	800114c <__NVIC_SetPriorityGrouping>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b086      	sub	sp, #24
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012d4:	f7ff ff5e 	bl	8001194 <__NVIC_GetPriorityGrouping>
 80012d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68b9      	ldr	r1, [r7, #8]
 80012de:	6978      	ldr	r0, [r7, #20]
 80012e0:	f7ff ff90 	bl	8001204 <NVIC_EncodePriority>
 80012e4:	4602      	mov	r2, r0
 80012e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff ff5f 	bl	80011b0 <__NVIC_SetPriority>
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}

080012fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012fa:	b580      	push	{r7, lr}
 80012fc:	b082      	sub	sp, #8
 80012fe:	af00      	add	r7, sp, #0
 8001300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff ffb2 	bl	800126c <SysTick_Config>
 8001308:	4603      	mov	r3, r0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b084      	sub	sp, #16
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e0e3      	b.n	80014ee <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800132c:	2b00      	cmp	r3, #0
 800132e:	d106      	bne.n	800133e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2223      	movs	r2, #35	@ 0x23
 8001334:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fb9b 	bl	8000a74 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800133e:	4b6e      	ldr	r3, [pc, #440]	@ (80014f8 <HAL_ETH_Init+0x1e4>)
 8001340:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001344:	4a6c      	ldr	r2, [pc, #432]	@ (80014f8 <HAL_ETH_Init+0x1e4>)
 8001346:	f043 0302 	orr.w	r3, r3, #2
 800134a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800134e:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <HAL_ETH_Init+0x1e4>)
 8001350:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001354:	f003 0302 	and.w	r3, r3, #2
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	7a1b      	ldrb	r3, [r3, #8]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d103      	bne.n	800136c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001364:	2000      	movs	r0, #0
 8001366:	f7ff fedd 	bl	8001124 <HAL_SYSCFG_ETHInterfaceSelect>
 800136a:	e003      	b.n	8001374 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800136c:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8001370:	f7ff fed8 	bl	8001124 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001374:	4b61      	ldr	r3, [pc, #388]	@ (80014fc <HAL_ETH_Init+0x1e8>)
 8001376:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	687a      	ldr	r2, [r7, #4]
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800138e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001390:	f7ff fe8c 	bl	80010ac <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001396:	e011      	b.n	80013bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001398:	f7ff fe88 	bl	80010ac <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013a6:	d909      	bls.n	80013bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2204      	movs	r2, #4
 80013ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	22e0      	movs	r2, #224	@ 0xe0
 80013b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e098      	b.n	80014ee <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0301 	and.w	r3, r3, #1
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1e4      	bne.n	8001398 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f89e 	bl	8001510 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013d4:	f001 fea0 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 80013d8:	4603      	mov	r3, r0
 80013da:	4a49      	ldr	r2, [pc, #292]	@ (8001500 <HAL_ETH_Init+0x1ec>)
 80013dc:	fba2 2303 	umull	r2, r3, r2, r3
 80013e0:	0c9a      	lsrs	r2, r3, #18
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	3a01      	subs	r2, #1
 80013e8:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 fa81 	bl	80018f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80013fe:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800140a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800140e:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	695b      	ldr	r3, [r3, #20]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2201      	movs	r2, #1
 8001422:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	22e0      	movs	r2, #224	@ 0xe0
 800142a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e05d      	b.n	80014ee <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800143a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800143e:	4b31      	ldr	r3, [pc, #196]	@ (8001504 <HAL_ETH_Init+0x1f0>)
 8001440:	4013      	ands	r3, r2
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	6952      	ldr	r2, [r2, #20]
 8001446:	0051      	lsls	r1, r2, #1
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	6812      	ldr	r2, [r2, #0]
 800144c:	430b      	orrs	r3, r1
 800144e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001452:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 fae9 	bl	8001a2e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f000 fb2f 	bl	8001ac0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	3305      	adds	r3, #5
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	021a      	lsls	r2, r3, #8
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	3304      	adds	r3, #4
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	4619      	mov	r1, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	3303      	adds	r3, #3
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	061a      	lsls	r2, r3, #24
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	3302      	adds	r3, #2
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	041b      	lsls	r3, r3, #16
 8001494:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	3301      	adds	r3, #1
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014b0:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_ETH_Init+0x1f4>)
 80014c2:	430b      	orrs	r3, r1
 80014c4:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b0d      	ldr	r3, [pc, #52]	@ (800150c <HAL_ETH_Init+0x1f8>)
 80014d6:	430b      	orrs	r3, r1
 80014d8:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2200      	movs	r2, #0
 80014e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2210      	movs	r2, #16
 80014e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58024400 	.word	0x58024400
 80014fc:	58000400 	.word	0x58000400
 8001500:	431bde83 	.word	0x431bde83
 8001504:	ffff8001 	.word	0xffff8001
 8001508:	0c020060 	.word	0x0c020060
 800150c:	0c20c000 	.word	0x0c20c000

08001510 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001520:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001528:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800152a:	f001 fdf5 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 800152e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8001530:	68bb      	ldr	r3, [r7, #8]
 8001532:	4a1a      	ldr	r2, [pc, #104]	@ (800159c <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d804      	bhi.n	8001542 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e022      	b.n	8001588 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	4a16      	ldr	r2, [pc, #88]	@ (80015a0 <HAL_ETH_SetMDIOClockRange+0x90>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d204      	bcs.n	8001554 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	e019      	b.n	8001588 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d915      	bls.n	8001588 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800155c:	68bb      	ldr	r3, [r7, #8]
 800155e:	4a12      	ldr	r2, [pc, #72]	@ (80015a8 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d804      	bhi.n	800156e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	e00c      	b.n	8001588 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4a0e      	ldr	r2, [pc, #56]	@ (80015ac <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d804      	bhi.n	8001580 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	e003      	b.n	8001588 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8001586:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	02160ebf 	.word	0x02160ebf
 80015a0:	03938700 	.word	0x03938700
 80015a4:	05f5e0ff 	.word	0x05f5e0ff
 80015a8:	08f0d17f 	.word	0x08f0d17f
 80015ac:	0ee6b27f 	.word	0x0ee6b27f

080015b0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80015ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	7b1b      	ldrb	r3, [r3, #12]
 80015d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80015d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	7b5b      	ldrb	r3, [r3, #13]
 80015d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7b9b      	ldrb	r3, [r3, #14]
 80015e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80015e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	7bdb      	ldrb	r3, [r3, #15]
 80015e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80015ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	7c12      	ldrb	r2, [r2, #16]
 80015f0:	2a00      	cmp	r2, #0
 80015f2:	d102      	bne.n	80015fa <ETH_SetMACConfig+0x4a>
 80015f4:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80015f8:	e000      	b.n	80015fc <ETH_SetMACConfig+0x4c>
 80015fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	7c52      	ldrb	r2, [r2, #17]
 8001602:	2a00      	cmp	r2, #0
 8001604:	d102      	bne.n	800160c <ETH_SetMACConfig+0x5c>
 8001606:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800160a:	e000      	b.n	800160e <ETH_SetMACConfig+0x5e>
 800160c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7c9b      	ldrb	r3, [r3, #18]
 8001614:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001616:	431a      	orrs	r2, r3
               macconf->Speed |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800161c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001622:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	7f1b      	ldrb	r3, [r3, #28]
 8001628:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800162a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	7f5b      	ldrb	r3, [r3, #29]
 8001630:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001632:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	7f92      	ldrb	r2, [r2, #30]
 8001638:	2a00      	cmp	r2, #0
 800163a:	d102      	bne.n	8001642 <ETH_SetMACConfig+0x92>
 800163c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001640:	e000      	b.n	8001644 <ETH_SetMACConfig+0x94>
 8001642:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001644:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	7fdb      	ldrb	r3, [r3, #31]
 800164a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800164c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <ETH_SetMACConfig+0xae>
 8001658:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800165c:	e000      	b.n	8001660 <ETH_SetMACConfig+0xb0>
 800165e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001660:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800166e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001670:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001676:	4313      	orrs	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	4b56      	ldr	r3, [pc, #344]	@ (80017dc <ETH_SetMACConfig+0x22c>)
 8001682:	4013      	ands	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	68f9      	ldr	r1, [r7, #12]
 800168a:	430b      	orrs	r3, r1
 800168c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001692:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800169a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800169c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	d102      	bne.n	80016c2 <ETH_SetMACConfig+0x112>
 80016bc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016c0:	e000      	b.n	80016c4 <ETH_SetMACConfig+0x114>
 80016c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016ca:	4313      	orrs	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <ETH_SetMACConfig+0x230>)
 80016d6:	4013      	ands	r3, r2
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	6812      	ldr	r2, [r2, #0]
 80016dc:	68f9      	ldr	r1, [r7, #12]
 80016de:	430b      	orrs	r3, r1
 80016e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80016e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80016ee:	4313      	orrs	r3, r2
 80016f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	68da      	ldr	r2, [r3, #12]
 80016f8:	4b3a      	ldr	r3, [pc, #232]	@ (80017e4 <ETH_SetMACConfig+0x234>)
 80016fa:	4013      	ands	r3, r2
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	68f9      	ldr	r1, [r7, #12]
 8001702:	430b      	orrs	r3, r1
 8001704:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 800170c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001712:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800171a:	2a00      	cmp	r2, #0
 800171c:	d101      	bne.n	8001722 <ETH_SetMACConfig+0x172>
 800171e:	2280      	movs	r2, #128	@ 0x80
 8001720:	e000      	b.n	8001724 <ETH_SetMACConfig+0x174>
 8001722:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001724:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800172c:	4313      	orrs	r3, r2
 800172e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001736:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 800173a:	4013      	ands	r3, r2
 800173c:	687a      	ldr	r2, [r7, #4]
 800173e:	6812      	ldr	r2, [r2, #0]
 8001740:	68f9      	ldr	r1, [r7, #12]
 8001742:	430b      	orrs	r3, r1
 8001744:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 800174c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001754:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001756:	4313      	orrs	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001762:	f023 0103 	bic.w	r1, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	430a      	orrs	r2, r1
 800176e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 800177a:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001796:	2a00      	cmp	r2, #0
 8001798:	d101      	bne.n	800179e <ETH_SetMACConfig+0x1ee>
 800179a:	2240      	movs	r2, #64	@ 0x40
 800179c:	e000      	b.n	80017a0 <ETH_SetMACConfig+0x1f0>
 800179e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017b4:	4313      	orrs	r3, r2
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017c0:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	00048083 	.word	0x00048083
 80017e0:	c0f88000 	.word	0xc0f88000
 80017e4:	fffffef0 	.word	0xfffffef0

080017e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	4b38      	ldr	r3, [pc, #224]	@ (80018e0 <ETH_SetDMAConfig+0xf8>)
 80017fe:	4013      	ands	r3, r2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	6811      	ldr	r1, [r2, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6812      	ldr	r2, [r2, #0]
 8001808:	430b      	orrs	r3, r1
 800180a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800180e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	791b      	ldrb	r3, [r3, #4]
 8001814:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800181a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	7b1b      	ldrb	r3, [r3, #12]
 8001820:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	4b2c      	ldr	r3, [pc, #176]	@ (80018e4 <ETH_SetDMAConfig+0xfc>)
 8001832:	4013      	ands	r3, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6812      	ldr	r2, [r2, #0]
 8001838:	68f9      	ldr	r1, [r7, #12]
 800183a:	430b      	orrs	r3, r1
 800183c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001840:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	7b5b      	ldrb	r3, [r3, #13]
 8001846:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800184c:	4313      	orrs	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001858:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 800185c:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <ETH_SetDMAConfig+0x100>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	6812      	ldr	r2, [r2, #0]
 8001864:	68f9      	ldr	r1, [r7, #12]
 8001866:	430b      	orrs	r3, r1
 8001868:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800186c:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	7d1b      	ldrb	r3, [r3, #20]
 8001878:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800187a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	7f5b      	ldrb	r3, [r3, #29]
 8001880:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001882:	4313      	orrs	r3, r2
 8001884:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800188e:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001892:	4b16      	ldr	r3, [pc, #88]	@ (80018ec <ETH_SetDMAConfig+0x104>)
 8001894:	4013      	ands	r3, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6812      	ldr	r2, [r2, #0]
 800189a:	68f9      	ldr	r1, [r7, #12]
 800189c:	430b      	orrs	r3, r1
 800189e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a2:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	7f1b      	ldrb	r3, [r3, #28]
 80018aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018b0:	4313      	orrs	r3, r2
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018c0:	4b0b      	ldr	r3, [pc, #44]	@ (80018f0 <ETH_SetDMAConfig+0x108>)
 80018c2:	4013      	ands	r3, r2
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6812      	ldr	r2, [r2, #0]
 80018c8:	68f9      	ldr	r1, [r7, #12]
 80018ca:	430b      	orrs	r3, r1
 80018cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018d0:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	ffff87fd 	.word	0xffff87fd
 80018e4:	ffff2ffe 	.word	0xffff2ffe
 80018e8:	fffec000 	.word	0xfffec000
 80018ec:	ffc0efef 	.word	0xffc0efef
 80018f0:	7fc0ffff 	.word	0x7fc0ffff

080018f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b0a4      	sub	sp, #144	@ 0x90
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018fc:	2301      	movs	r3, #1
 80018fe:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001902:	2300      	movs	r3, #0
 8001904:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800190c:	2300      	movs	r3, #0
 800190e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001912:	2301      	movs	r3, #1
 8001914:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001918:	2301      	movs	r3, #1
 800191a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800191e:	2301      	movs	r3, #1
 8001920:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001924:	2300      	movs	r3, #0
 8001926:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800192a:	2301      	movs	r3, #1
 800192c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001930:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001934:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001936:	2300      	movs	r3, #0
 8001938:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 800193c:	2300      	movs	r3, #0
 800193e:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 800194c:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001950:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001958:	2300      	movs	r3, #0
 800195a:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 800195c:	2301      	movs	r3, #1
 800195e:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001962:	2300      	movs	r3, #0
 8001964:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800196e:	2300      	movs	r3, #0
 8001970:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001972:	2300      	movs	r3, #0
 8001974:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001976:	2300      	movs	r3, #0
 8001978:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800197a:	2300      	movs	r3, #0
 800197c:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001986:	2301      	movs	r3, #1
 8001988:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800198c:	2320      	movs	r3, #32
 800198e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001992:	2301      	movs	r3, #1
 8001994:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001998:	2300      	movs	r3, #0
 800199a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800199e:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019a8:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019b0:	2302      	movs	r3, #2
 80019b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80019c8:	2301      	movs	r3, #1
 80019ca:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80019ce:	2300      	movs	r3, #0
 80019d0:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80019d2:	2301      	movs	r3, #1
 80019d4:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80019d8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fde6 	bl	80015b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80019e4:	2301      	movs	r3, #1
 80019e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80019e8:	2301      	movs	r3, #1
 80019ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80019ec:	2300      	movs	r3, #0
 80019ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019f6:	2300      	movs	r3, #0
 80019f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019fe:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a02:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a08:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a0c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a14:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a1a:	f107 0308 	add.w	r3, r7, #8
 8001a1e:	4619      	mov	r1, r3
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f7ff fee1 	bl	80017e8 <ETH_SetDMAConfig>
}
 8001a26:	bf00      	nop
 8001a28:	3790      	adds	r7, #144	@ 0x90
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b085      	sub	sp, #20
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	e01d      	b.n	8001a78 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68d9      	ldr	r1, [r3, #12]
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	4613      	mov	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	2200      	movs	r2, #0
 8001a52:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	2200      	movs	r2, #0
 8001a58:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2200      	movs	r2, #0
 8001a64:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a66:	68b9      	ldr	r1, [r7, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68fa      	ldr	r2, [r7, #12]
 8001a6c:	3206      	adds	r2, #6
 8001a6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	d9de      	bls.n	8001a3c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2200      	movs	r2, #0
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	2303      	movs	r3, #3
 8001a90:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68da      	ldr	r2, [r3, #12]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aa0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68da      	ldr	r2, [r3, #12]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ab0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	e023      	b.n	8001b16 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6919      	ldr	r1, [r3, #16]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2200      	movs	r2, #0
 8001af0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	2200      	movs	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2200      	movs	r2, #0
 8001b02:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68fa      	ldr	r2, [r7, #12]
 8001b0a:	3212      	adds	r2, #18
 8001b0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	3301      	adds	r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b03      	cmp	r3, #3
 8001b1a:	d9d8      	bls.n	8001ace <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b42:	461a      	mov	r2, r3
 8001b44:	2303      	movs	r3, #3
 8001b46:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691a      	ldr	r2, [r3, #16]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b56:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b6a:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	@ 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b8a:	4b89      	ldr	r3, [pc, #548]	@ (8001db0 <HAL_GPIO_Init+0x234>)
 8001b8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b8e:	e194      	b.n	8001eba <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f000 8186 	beq.w	8001eb4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f003 0303 	and.w	r3, r3, #3
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <HAL_GPIO_Init+0x44>
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d130      	bne.n	8001c22 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	2203      	movs	r2, #3
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	43db      	mvns	r3, r3
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	005b      	lsls	r3, r3, #1
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	69ba      	ldr	r2, [r7, #24]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	69ba      	ldr	r2, [r7, #24]
 8001c02:	4013      	ands	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 0201 	and.w	r2, r3, #1
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d017      	beq.n	8001c5e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	2203      	movs	r2, #3
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	69ba      	ldr	r2, [r7, #24]
 8001c42:	4013      	ands	r3, r2
 8001c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	689a      	ldr	r2, [r3, #8]
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d123      	bne.n	8001cb2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	08da      	lsrs	r2, r3, #3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	3208      	adds	r2, #8
 8001c72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	f003 0307 	and.w	r3, r3, #7
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	220f      	movs	r2, #15
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	691a      	ldr	r2, [r3, #16]
 8001c92:	69fb      	ldr	r3, [r7, #28]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	69b9      	ldr	r1, [r7, #24]
 8001cae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	005b      	lsls	r3, r3, #1
 8001cbc:	2203      	movs	r2, #3
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f003 0203 	and.w	r2, r3, #3
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f000 80e0 	beq.w	8001eb4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8001db4 <HAL_GPIO_Init+0x238>)
 8001cf6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001cfa:	4a2e      	ldr	r2, [pc, #184]	@ (8001db4 <HAL_GPIO_Init+0x238>)
 8001cfc:	f043 0302 	orr.w	r3, r3, #2
 8001d00:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d04:	4b2b      	ldr	r3, [pc, #172]	@ (8001db4 <HAL_GPIO_Init+0x238>)
 8001d06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d12:	4a29      	ldr	r2, [pc, #164]	@ (8001db8 <HAL_GPIO_Init+0x23c>)
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	089b      	lsrs	r3, r3, #2
 8001d18:	3302      	adds	r3, #2
 8001d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	220f      	movs	r2, #15
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a20      	ldr	r2, [pc, #128]	@ (8001dbc <HAL_GPIO_Init+0x240>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d052      	beq.n	8001de4 <HAL_GPIO_Init+0x268>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <HAL_GPIO_Init+0x244>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d031      	beq.n	8001daa <HAL_GPIO_Init+0x22e>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc4 <HAL_GPIO_Init+0x248>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d02b      	beq.n	8001da6 <HAL_GPIO_Init+0x22a>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_GPIO_Init+0x24c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d025      	beq.n	8001da2 <HAL_GPIO_Init+0x226>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a1c      	ldr	r2, [pc, #112]	@ (8001dcc <HAL_GPIO_Init+0x250>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d01f      	beq.n	8001d9e <HAL_GPIO_Init+0x222>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a1b      	ldr	r2, [pc, #108]	@ (8001dd0 <HAL_GPIO_Init+0x254>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d019      	beq.n	8001d9a <HAL_GPIO_Init+0x21e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a1a      	ldr	r2, [pc, #104]	@ (8001dd4 <HAL_GPIO_Init+0x258>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d013      	beq.n	8001d96 <HAL_GPIO_Init+0x21a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a19      	ldr	r2, [pc, #100]	@ (8001dd8 <HAL_GPIO_Init+0x25c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00d      	beq.n	8001d92 <HAL_GPIO_Init+0x216>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a18      	ldr	r2, [pc, #96]	@ (8001ddc <HAL_GPIO_Init+0x260>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <HAL_GPIO_Init+0x212>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a17      	ldr	r2, [pc, #92]	@ (8001de0 <HAL_GPIO_Init+0x264>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d101      	bne.n	8001d8a <HAL_GPIO_Init+0x20e>
 8001d86:	2309      	movs	r3, #9
 8001d88:	e02d      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	e02b      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d8e:	2308      	movs	r3, #8
 8001d90:	e029      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d92:	2307      	movs	r3, #7
 8001d94:	e027      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d96:	2306      	movs	r3, #6
 8001d98:	e025      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d9a:	2305      	movs	r3, #5
 8001d9c:	e023      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001d9e:	2304      	movs	r3, #4
 8001da0:	e021      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001da2:	2303      	movs	r3, #3
 8001da4:	e01f      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001da6:	2302      	movs	r3, #2
 8001da8:	e01d      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001daa:	2301      	movs	r3, #1
 8001dac:	e01b      	b.n	8001de6 <HAL_GPIO_Init+0x26a>
 8001dae:	bf00      	nop
 8001db0:	58000080 	.word	0x58000080
 8001db4:	58024400 	.word	0x58024400
 8001db8:	58000400 	.word	0x58000400
 8001dbc:	58020000 	.word	0x58020000
 8001dc0:	58020400 	.word	0x58020400
 8001dc4:	58020800 	.word	0x58020800
 8001dc8:	58020c00 	.word	0x58020c00
 8001dcc:	58021000 	.word	0x58021000
 8001dd0:	58021400 	.word	0x58021400
 8001dd4:	58021800 	.word	0x58021800
 8001dd8:	58021c00 	.word	0x58021c00
 8001ddc:	58022000 	.word	0x58022000
 8001de0:	58022400 	.word	0x58022400
 8001de4:	2300      	movs	r3, #0
 8001de6:	69fa      	ldr	r2, [r7, #28]
 8001de8:	f002 0203 	and.w	r2, r2, #3
 8001dec:	0092      	lsls	r2, r2, #2
 8001dee:	4093      	lsls	r3, r2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df6:	4938      	ldr	r1, [pc, #224]	@ (8001ed8 <HAL_GPIO_Init+0x35c>)
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	3302      	adds	r3, #2
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e04:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e2a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e32:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	4013      	ands	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e58:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4013      	ands	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f47f ae63 	bne.w	8001b90 <HAL_GPIO_Init+0x14>
  }
}
 8001eca:	bf00      	nop
 8001ecc:	bf00      	nop
 8001ece:	3724      	adds	r7, #36	@ 0x24
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	58000400 	.word	0x58000400

08001edc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eec:	787b      	ldrb	r3, [r7, #1]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d003      	beq.n	8001efa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001ef8:	e003      	b.n	8001f02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001efa:	887b      	ldrh	r3, [r7, #2]
 8001efc:	041a      	lsls	r2, r3, #16
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	619a      	str	r2, [r3, #24]
}
 8001f02:	bf00      	nop
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b086      	sub	sp, #24
 8001f12:	af02      	add	r7, sp, #8
 8001f14:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d101      	bne.n	8001f20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e0fe      	b.n	800211e <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d106      	bne.n	8001f3a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7fe fed5 	bl	8000ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f004 f8bc 	bl	80060c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	7c1a      	ldrb	r2, [r3, #16]
 8001f54:	f88d 2000 	strb.w	r2, [sp]
 8001f58:	3304      	adds	r3, #4
 8001f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f5c:	f004 f840 	bl	8005fe0 <USB_CoreInit>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2202      	movs	r2, #2
 8001f6a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e0d5      	b.n	800211e <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2100      	movs	r1, #0
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f004 f8b4 	bl	80060e6 <USB_SetCurrentMode>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d005      	beq.n	8001f90 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2202      	movs	r2, #2
 8001f88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0c6      	b.n	800211e <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
 8001f94:	e04a      	b.n	800202c <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f96:	7bfa      	ldrb	r2, [r7, #15]
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	440b      	add	r3, r1
 8001fa4:	3315      	adds	r3, #21
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001faa:	7bfa      	ldrb	r2, [r7, #15]
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	3314      	adds	r3, #20
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	7bfb      	ldrb	r3, [r7, #15]
 8001fc2:	b298      	uxth	r0, r3
 8001fc4:	6879      	ldr	r1, [r7, #4]
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4413      	add	r3, r2
 8001fcc:	009b      	lsls	r3, r3, #2
 8001fce:	440b      	add	r3, r1
 8001fd0:	332e      	adds	r3, #46	@ 0x2e
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fd6:	7bfa      	ldrb	r2, [r7, #15]
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	4613      	mov	r3, r2
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4413      	add	r3, r2
 8001fe0:	009b      	lsls	r3, r3, #2
 8001fe2:	440b      	add	r3, r1
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fea:	7bfa      	ldrb	r2, [r7, #15]
 8001fec:	6879      	ldr	r1, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	00db      	lsls	r3, r3, #3
 8001ff2:	4413      	add	r3, r2
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	440b      	add	r3, r1
 8001ff8:	331c      	adds	r3, #28
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3320      	adds	r3, #32
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3324      	adds	r3, #36	@ 0x24
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	3301      	adds	r3, #1
 800202a:	73fb      	strb	r3, [r7, #15]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	791b      	ldrb	r3, [r3, #4]
 8002030:	7bfa      	ldrb	r2, [r7, #15]
 8002032:	429a      	cmp	r2, r3
 8002034:	d3af      	bcc.n	8001f96 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e044      	b.n	80020c6 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800204e:	2200      	movs	r2, #0
 8002050:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002090:	2200      	movs	r2, #0
 8002092:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	4413      	add	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
 80020c2:	3301      	adds	r3, #1
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d3b5      	bcc.n	800203c <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	f88d 2000 	strb.w	r2, [sp]
 80020dc:	3304      	adds	r3, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	f004 f84e 	bl	8006180 <USB_DevInit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e013      	b.n	800211e <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d102      	bne.n	8002112 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f000 f80b 	bl	8002128 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fa09 	bl	800652e <USB_DevDisconnect>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002156:	4b05      	ldr	r3, [pc, #20]	@ (800216c <HAL_PCDEx_ActivateLPM+0x44>)
 8002158:	4313      	orrs	r3, r2
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr
 800216c:	10000003 	.word	0x10000003

08002170 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002178:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_PWREx_ConfigSupply+0x70>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b04      	cmp	r3, #4
 8002182:	d00a      	beq.n	800219a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002184:	4b16      	ldr	r3, [pc, #88]	@ (80021e0 <HAL_PWREx_ConfigSupply+0x70>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	429a      	cmp	r2, r3
 8002190:	d001      	beq.n	8002196 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e01f      	b.n	80021d6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002196:	2300      	movs	r3, #0
 8002198:	e01d      	b.n	80021d6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <HAL_PWREx_ConfigSupply+0x70>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f023 0207 	bic.w	r2, r3, #7
 80021a2:	490f      	ldr	r1, [pc, #60]	@ (80021e0 <HAL_PWREx_ConfigSupply+0x70>)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021aa:	f7fe ff7f 	bl	80010ac <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b0:	e009      	b.n	80021c6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021b2:	f7fe ff7b 	bl	80010ac <HAL_GetTick>
 80021b6:	4602      	mov	r2, r0
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021c0:	d901      	bls.n	80021c6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e007      	b.n	80021d6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021c6:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <HAL_PWREx_ConfigSupply+0x70>)
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80021d2:	d1ee      	bne.n	80021b2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	58024800 	.word	0x58024800

080021e4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021e8:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	4a04      	ldr	r2, [pc, #16]	@ (8002200 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	58024800 	.word	0x58024800

08002204 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	@ 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	f000 bc48 	b.w	8002aa8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0301 	and.w	r3, r3, #1
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 8088 	beq.w	8002336 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b99      	ldr	r3, [pc, #612]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002230:	4b96      	ldr	r3, [pc, #600]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002234:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002238:	2b10      	cmp	r3, #16
 800223a:	d007      	beq.n	800224c <HAL_RCC_OscConfig+0x48>
 800223c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223e:	2b18      	cmp	r3, #24
 8002240:	d111      	bne.n	8002266 <HAL_RCC_OscConfig+0x62>
 8002242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002244:	f003 0303 	and.w	r3, r3, #3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	4b8f      	ldr	r3, [pc, #572]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d06d      	beq.n	8002334 <HAL_RCC_OscConfig+0x130>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d169      	bne.n	8002334 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f000 bc21 	b.w	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226e:	d106      	bne.n	800227e <HAL_RCC_OscConfig+0x7a>
 8002270:	4b86      	ldr	r3, [pc, #536]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a85      	ldr	r2, [pc, #532]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002276:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	e02e      	b.n	80022dc <HAL_RCC_OscConfig+0xd8>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d10c      	bne.n	80022a0 <HAL_RCC_OscConfig+0x9c>
 8002286:	4b81      	ldr	r3, [pc, #516]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a80      	ldr	r2, [pc, #512]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b7e      	ldr	r3, [pc, #504]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a7d      	ldr	r2, [pc, #500]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002298:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	e01d      	b.n	80022dc <HAL_RCC_OscConfig+0xd8>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022a8:	d10c      	bne.n	80022c4 <HAL_RCC_OscConfig+0xc0>
 80022aa:	4b78      	ldr	r3, [pc, #480]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a77      	ldr	r2, [pc, #476]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	4b75      	ldr	r3, [pc, #468]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a74      	ldr	r2, [pc, #464]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e00b      	b.n	80022dc <HAL_RCC_OscConfig+0xd8>
 80022c4:	4b71      	ldr	r3, [pc, #452]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a70      	ldr	r2, [pc, #448]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b6e      	ldr	r3, [pc, #440]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a6d      	ldr	r2, [pc, #436]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7fe fee2 	bl	80010ac <HAL_GetTick>
 80022e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7fe fede 	bl	80010ac <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e3d4      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022fe:	4b63      	ldr	r3, [pc, #396]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0xe8>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe fece 	bl	80010ac <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7fe feca 	bl	80010ac <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e3c0      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002326:	4b59      	ldr	r3, [pc, #356]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x110>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 80ca 	beq.w	80024d8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002344:	4b51      	ldr	r3, [pc, #324]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002346:	691b      	ldr	r3, [r3, #16]
 8002348:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800234c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800234e:	4b4f      	ldr	r3, [pc, #316]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002352:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d007      	beq.n	800236a <HAL_RCC_OscConfig+0x166>
 800235a:	6a3b      	ldr	r3, [r7, #32]
 800235c:	2b18      	cmp	r3, #24
 800235e:	d156      	bne.n	800240e <HAL_RCC_OscConfig+0x20a>
 8002360:	69fb      	ldr	r3, [r7, #28]
 8002362:	f003 0303 	and.w	r3, r3, #3
 8002366:	2b00      	cmp	r3, #0
 8002368:	d151      	bne.n	800240e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800236a:	4b48      	ldr	r3, [pc, #288]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	2b00      	cmp	r3, #0
 8002374:	d005      	beq.n	8002382 <HAL_RCC_OscConfig+0x17e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	68db      	ldr	r3, [r3, #12]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d101      	bne.n	8002382 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800237e:	2301      	movs	r3, #1
 8002380:	e392      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002382:	4b42      	ldr	r3, [pc, #264]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f023 0219 	bic.w	r2, r3, #25
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	493f      	ldr	r1, [pc, #252]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002390:	4313      	orrs	r3, r2
 8002392:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fe8a 	bl	80010ac <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fe86 	bl	80010ac <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e37c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ae:	4b37      	ldr	r3, [pc, #220]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	f7fe fea7 	bl	800110c <HAL_GetREVID>
 80023be:	4603      	mov	r3, r0
 80023c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d817      	bhi.n	80023f8 <HAL_RCC_OscConfig+0x1f4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b40      	cmp	r3, #64	@ 0x40
 80023ce:	d108      	bne.n	80023e2 <HAL_RCC_OscConfig+0x1de>
 80023d0:	4b2e      	ldr	r3, [pc, #184]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80023d8:	4a2c      	ldr	r2, [pc, #176]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023de:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023e0:	e07a      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023e2:	4b2a      	ldr	r3, [pc, #168]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	031b      	lsls	r3, r3, #12
 80023f0:	4926      	ldr	r1, [pc, #152]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f6:	e06f      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f8:	4b24      	ldr	r3, [pc, #144]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	4921      	ldr	r1, [pc, #132]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002408:	4313      	orrs	r3, r2
 800240a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240c:	e064      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d047      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002416:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 0219 	bic.w	r2, r3, #25
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	491a      	ldr	r1, [pc, #104]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002428:	f7fe fe40 	bl	80010ac <HAL_GetTick>
 800242c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002430:	f7fe fe3c 	bl	80010ac <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e332      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800244e:	f7fe fe5d 	bl	800110c <HAL_GetREVID>
 8002452:	4603      	mov	r3, r0
 8002454:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002458:	4293      	cmp	r3, r2
 800245a:	d819      	bhi.n	8002490 <HAL_RCC_OscConfig+0x28c>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
 8002460:	2b40      	cmp	r3, #64	@ 0x40
 8002462:	d108      	bne.n	8002476 <HAL_RCC_OscConfig+0x272>
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800246c:	4a07      	ldr	r2, [pc, #28]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 800246e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002472:	6053      	str	r3, [r2, #4]
 8002474:	e030      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	031b      	lsls	r3, r3, #12
 8002484:	4901      	ldr	r1, [pc, #4]	@ (800248c <HAL_RCC_OscConfig+0x288>)
 8002486:	4313      	orrs	r3, r2
 8002488:	604b      	str	r3, [r1, #4]
 800248a:	e025      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
 800248c:	58024400 	.word	0x58024400
 8002490:	4b9a      	ldr	r3, [pc, #616]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4997      	ldr	r1, [pc, #604]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b95      	ldr	r3, [pc, #596]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a94      	ldr	r2, [pc, #592]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fdfb 	bl	80010ac <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ba:	f7fe fdf7 	bl	80010ac <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e2ed      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024cc:	4b8b      	ldr	r3, [pc, #556]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0310 	and.w	r3, r3, #16
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	f000 80a9 	beq.w	8002638 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e6:	4b85      	ldr	r3, [pc, #532]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024ee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f0:	4b82      	ldr	r3, [pc, #520]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d007      	beq.n	800250c <HAL_RCC_OscConfig+0x308>
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	2b18      	cmp	r3, #24
 8002500:	d13a      	bne.n	8002578 <HAL_RCC_OscConfig+0x374>
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f003 0303 	and.w	r3, r3, #3
 8002508:	2b01      	cmp	r3, #1
 800250a:	d135      	bne.n	8002578 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800250c:	4b7b      	ldr	r3, [pc, #492]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x320>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b80      	cmp	r3, #128	@ 0x80
 800251e:	d001      	beq.n	8002524 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e2c1      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002524:	f7fe fdf2 	bl	800110c <HAL_GetREVID>
 8002528:	4603      	mov	r3, r0
 800252a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800252e:	4293      	cmp	r3, r2
 8002530:	d817      	bhi.n	8002562 <HAL_RCC_OscConfig+0x35e>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a1b      	ldr	r3, [r3, #32]
 8002536:	2b20      	cmp	r3, #32
 8002538:	d108      	bne.n	800254c <HAL_RCC_OscConfig+0x348>
 800253a:	4b70      	ldr	r3, [pc, #448]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002542:	4a6e      	ldr	r2, [pc, #440]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002544:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002548:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800254a:	e075      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800254c:	4b6b      	ldr	r3, [pc, #428]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	069b      	lsls	r3, r3, #26
 800255a:	4968      	ldr	r1, [pc, #416]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002560:	e06a      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002562:	4b66      	ldr	r3, [pc, #408]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	061b      	lsls	r3, r3, #24
 8002570:	4962      	ldr	r1, [pc, #392]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002576:	e05f      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	69db      	ldr	r3, [r3, #28]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d042      	beq.n	8002606 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002580:	4b5e      	ldr	r3, [pc, #376]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5d      	ldr	r2, [pc, #372]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002586:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800258a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd8e 	bl	80010ac <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002594:	f7fe fd8a 	bl	80010ac <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e280      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025a6:	4b55      	ldr	r3, [pc, #340]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025b2:	f7fe fdab 	bl	800110c <HAL_GetREVID>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025bc:	4293      	cmp	r3, r2
 80025be:	d817      	bhi.n	80025f0 <HAL_RCC_OscConfig+0x3ec>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d108      	bne.n	80025da <HAL_RCC_OscConfig+0x3d6>
 80025c8:	4b4c      	ldr	r3, [pc, #304]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80025d0:	4a4a      	ldr	r2, [pc, #296]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80025d6:	6053      	str	r3, [r2, #4]
 80025d8:	e02e      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
 80025da:	4b48      	ldr	r3, [pc, #288]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a1b      	ldr	r3, [r3, #32]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	4944      	ldr	r1, [pc, #272]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e023      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
 80025f0:	4b42      	ldr	r3, [pc, #264]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a1b      	ldr	r3, [r3, #32]
 80025fc:	061b      	lsls	r3, r3, #24
 80025fe:	493f      	ldr	r1, [pc, #252]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002600:	4313      	orrs	r3, r2
 8002602:	60cb      	str	r3, [r1, #12]
 8002604:	e018      	b.n	8002638 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002606:	4b3d      	ldr	r3, [pc, #244]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a3c      	ldr	r2, [pc, #240]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800260c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002610:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002612:	f7fe fd4b 	bl	80010ac <HAL_GetTick>
 8002616:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002618:	e008      	b.n	800262c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800261a:	f7fe fd47 	bl	80010ac <HAL_GetTick>
 800261e:	4602      	mov	r2, r0
 8002620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002622:	1ad3      	subs	r3, r2, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e23d      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800262c:	4b33      	ldr	r3, [pc, #204]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f0      	bne.n	800261a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0308 	and.w	r3, r3, #8
 8002640:	2b00      	cmp	r3, #0
 8002642:	d036      	beq.n	80026b2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d019      	beq.n	8002680 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264c:	4b2b      	ldr	r3, [pc, #172]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 800264e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002650:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002652:	f043 0301 	orr.w	r3, r3, #1
 8002656:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002658:	f7fe fd28 	bl	80010ac <HAL_GetTick>
 800265c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002660:	f7fe fd24 	bl	80010ac <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e21a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002672:	4b22      	ldr	r3, [pc, #136]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d0f0      	beq.n	8002660 <HAL_RCC_OscConfig+0x45c>
 800267e:	e018      	b.n	80026b2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002680:	4b1e      	ldr	r3, [pc, #120]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002684:	4a1d      	ldr	r2, [pc, #116]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 8002686:	f023 0301 	bic.w	r3, r3, #1
 800268a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fd0e 	bl	80010ac <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002694:	f7fe fd0a 	bl	80010ac <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e200      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026a6:	4b15      	ldr	r3, [pc, #84]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026aa:	f003 0302 	and.w	r3, r3, #2
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0320 	and.w	r3, r3, #32
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d039      	beq.n	8002732 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01c      	beq.n	8002700 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a0c      	ldr	r2, [pc, #48]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80026cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80026d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fceb 	bl	80010ac <HAL_GetTick>
 80026d6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026da:	f7fe fce7 	bl	80010ac <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1dd      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026ec:	4b03      	ldr	r3, [pc, #12]	@ (80026fc <HAL_RCC_OscConfig+0x4f8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x4d6>
 80026f8:	e01b      	b.n	8002732 <HAL_RCC_OscConfig+0x52e>
 80026fa:	bf00      	nop
 80026fc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002700:	4b9b      	ldr	r3, [pc, #620]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a9a      	ldr	r2, [pc, #616]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002706:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800270a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800270c:	f7fe fcce 	bl	80010ac <HAL_GetTick>
 8002710:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002714:	f7fe fcca 	bl	80010ac <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1c0      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002726:	4b92      	ldr	r3, [pc, #584]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0304 	and.w	r3, r3, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8081 	beq.w	8002842 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002740:	4b8c      	ldr	r3, [pc, #560]	@ (8002974 <HAL_RCC_OscConfig+0x770>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a8b      	ldr	r2, [pc, #556]	@ (8002974 <HAL_RCC_OscConfig+0x770>)
 8002746:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800274c:	f7fe fcae 	bl	80010ac <HAL_GetTick>
 8002750:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002754:	f7fe fcaa 	bl	80010ac <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	@ 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1a0      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002766:	4b83      	ldr	r3, [pc, #524]	@ (8002974 <HAL_RCC_OscConfig+0x770>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d106      	bne.n	8002788 <HAL_RCC_OscConfig+0x584>
 800277a:	4b7d      	ldr	r3, [pc, #500]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800277c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800277e:	4a7c      	ldr	r2, [pc, #496]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6713      	str	r3, [r2, #112]	@ 0x70
 8002786:	e02d      	b.n	80027e4 <HAL_RCC_OscConfig+0x5e0>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10c      	bne.n	80027aa <HAL_RCC_OscConfig+0x5a6>
 8002790:	4b77      	ldr	r3, [pc, #476]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002794:	4a76      	ldr	r2, [pc, #472]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	6713      	str	r3, [r2, #112]	@ 0x70
 800279c:	4b74      	ldr	r3, [pc, #464]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800279e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a0:	4a73      	ldr	r2, [pc, #460]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027a2:	f023 0304 	bic.w	r3, r3, #4
 80027a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027a8:	e01c      	b.n	80027e4 <HAL_RCC_OscConfig+0x5e0>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b05      	cmp	r3, #5
 80027b0:	d10c      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c8>
 80027b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b6:	4a6e      	ldr	r2, [pc, #440]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027b8:	f043 0304 	orr.w	r3, r3, #4
 80027bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80027be:	4b6c      	ldr	r3, [pc, #432]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	f043 0301 	orr.w	r3, r3, #1
 80027c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027ca:	e00b      	b.n	80027e4 <HAL_RCC_OscConfig+0x5e0>
 80027cc:	4b68      	ldr	r3, [pc, #416]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a67      	ldr	r2, [pc, #412]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	4b65      	ldr	r3, [pc, #404]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4a64      	ldr	r2, [pc, #400]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d015      	beq.n	8002818 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ec:	f7fe fc5e 	bl	80010ac <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027f2:	e00a      	b.n	800280a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027f4:	f7fe fc5a 	bl	80010ac <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002802:	4293      	cmp	r3, r2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e14e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280a:	4b59      	ldr	r3, [pc, #356]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800280c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d0ee      	beq.n	80027f4 <HAL_RCC_OscConfig+0x5f0>
 8002816:	e014      	b.n	8002842 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7fe fc48 	bl	80010ac <HAL_GetTick>
 800281c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800281e:	e00a      	b.n	8002836 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002820:	f7fe fc44 	bl	80010ac <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e138      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002836:	4b4e      	ldr	r3, [pc, #312]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800283a:	f003 0302 	and.w	r3, r3, #2
 800283e:	2b00      	cmp	r3, #0
 8002840:	d1ee      	bne.n	8002820 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 812d 	beq.w	8002aa6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800284c:	4b48      	ldr	r3, [pc, #288]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002854:	2b18      	cmp	r3, #24
 8002856:	f000 80bd 	beq.w	80029d4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800285e:	2b02      	cmp	r3, #2
 8002860:	f040 809e 	bne.w	80029a0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002864:	4b42      	ldr	r3, [pc, #264]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a41      	ldr	r2, [pc, #260]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800286a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800286e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fc1c 	bl	80010ac <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002878:	f7fe fc18 	bl	80010ac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e10e      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800288a:	4b39      	ldr	r3, [pc, #228]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002896:	4b36      	ldr	r3, [pc, #216]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800289a:	4b37      	ldr	r3, [pc, #220]	@ (8002978 <HAL_RCC_OscConfig+0x774>)
 800289c:	4013      	ands	r3, r2
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028a6:	0112      	lsls	r2, r2, #4
 80028a8:	430a      	orrs	r2, r1
 80028aa:	4931      	ldr	r1, [pc, #196]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b4:	3b01      	subs	r3, #1
 80028b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028be:	3b01      	subs	r3, #1
 80028c0:	025b      	lsls	r3, r3, #9
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ca:	3b01      	subs	r3, #1
 80028cc:	041b      	lsls	r3, r3, #16
 80028ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80028d2:	431a      	orrs	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	3b01      	subs	r3, #1
 80028da:	061b      	lsls	r3, r3, #24
 80028dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80028e0:	4923      	ldr	r1, [pc, #140]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028e6:	4b22      	ldr	r3, [pc, #136]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80028e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ea:	4a21      	ldr	r2, [pc, #132]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 80028f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80028f6:	4b21      	ldr	r3, [pc, #132]	@ (800297c <HAL_RCC_OscConfig+0x778>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80028fe:	00d2      	lsls	r2, r2, #3
 8002900:	491b      	ldr	r1, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002902:	4313      	orrs	r3, r2
 8002904:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	f023 020c 	bic.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	4917      	ldr	r1, [pc, #92]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002914:	4313      	orrs	r3, r2
 8002916:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800291a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291c:	f023 0202 	bic.w	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002924:	4912      	ldr	r1, [pc, #72]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002926:	4313      	orrs	r3, r2
 8002928:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	4a10      	ldr	r2, [pc, #64]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002934:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002936:	4b0e      	ldr	r3, [pc, #56]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	4a0d      	ldr	r2, [pc, #52]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800293c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002942:	4b0b      	ldr	r3, [pc, #44]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800294c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800294e:	4b08      	ldr	r3, [pc, #32]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002952:	4a07      	ldr	r2, [pc, #28]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295a:	4b05      	ldr	r3, [pc, #20]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a04      	ldr	r2, [pc, #16]	@ (8002970 <HAL_RCC_OscConfig+0x76c>)
 8002960:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fba1 	bl	80010ac <HAL_GetTick>
 800296a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800296c:	e011      	b.n	8002992 <HAL_RCC_OscConfig+0x78e>
 800296e:	bf00      	nop
 8002970:	58024400 	.word	0x58024400
 8002974:	58024800 	.word	0x58024800
 8002978:	fffffc0c 	.word	0xfffffc0c
 800297c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002980:	f7fe fb94 	bl	80010ac <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	2b02      	cmp	r3, #2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e08a      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002992:	4b47      	ldr	r3, [pc, #284]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0f0      	beq.n	8002980 <HAL_RCC_OscConfig+0x77c>
 800299e:	e082      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a0:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a42      	ldr	r2, [pc, #264]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 80029a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fb7e 	bl	80010ac <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029b4:	f7fe fb7a 	bl	80010ac <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b02      	cmp	r3, #2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e070      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029c6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x7b0>
 80029d2:	e068      	b.n	8002aa6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029d4:	4b36      	ldr	r3, [pc, #216]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 80029d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029da:	4b35      	ldr	r3, [pc, #212]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029e4:	2b01      	cmp	r3, #1
 80029e6:	d031      	beq.n	8002a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f003 0203 	and.w	r2, r3, #3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d12a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	091b      	lsrs	r3, r3, #4
 80029fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d122      	bne.n	8002a4c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d11a      	bne.n	8002a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	0a5b      	lsrs	r3, r3, #9
 8002a1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d111      	bne.n	8002a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	0c1b      	lsrs	r3, r3, #16
 8002a2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d108      	bne.n	8002a4c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	0e1b      	lsrs	r3, r3, #24
 8002a3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e02b      	b.n	8002aa8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a50:	4b17      	ldr	r3, [pc, #92]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a54:	08db      	lsrs	r3, r3, #3
 8002a56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d01f      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a66:	4b12      	ldr	r3, [pc, #72]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6a:	4a11      	ldr	r2, [pc, #68]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a72:	f7fe fb1b 	bl	80010ac <HAL_GetTick>
 8002a76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a78:	bf00      	nop
 8002a7a:	f7fe fb17 	bl	80010ac <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d0f9      	beq.n	8002a7a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a86:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8002ab4 <HAL_RCC_OscConfig+0x8b0>)
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a92:	00d2      	lsls	r2, r2, #3
 8002a94:	4906      	ldr	r1, [pc, #24]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002a9a:	4b05      	ldr	r3, [pc, #20]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	4a04      	ldr	r2, [pc, #16]	@ (8002ab0 <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	f043 0301 	orr.w	r3, r3, #1
 8002aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3730      	adds	r7, #48	@ 0x30
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	58024400 	.word	0x58024400
 8002ab4:	ffff0007 	.word	0xffff0007

08002ab8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e19c      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002acc:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 030f 	and.w	r3, r3, #15
 8002ad4:	683a      	ldr	r2, [r7, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d910      	bls.n	8002afc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4b87      	ldr	r3, [pc, #540]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 020f 	bic.w	r2, r3, #15
 8002ae2:	4985      	ldr	r1, [pc, #532]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b83      	ldr	r3, [pc, #524]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e184      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d010      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	4b7b      	ldr	r3, [pc, #492]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d908      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b18:	4b78      	ldr	r3, [pc, #480]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	4975      	ldr	r1, [pc, #468]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0308 	and.w	r3, r3, #8
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d010      	beq.n	8002b58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	4b70      	ldr	r3, [pc, #448]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b3c:	69db      	ldr	r3, [r3, #28]
 8002b3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d908      	bls.n	8002b58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b46:	4b6d      	ldr	r3, [pc, #436]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	496a      	ldr	r1, [pc, #424]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d010      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699a      	ldr	r2, [r3, #24]
 8002b68:	4b64      	ldr	r3, [pc, #400]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d908      	bls.n	8002b86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b74:	4b61      	ldr	r3, [pc, #388]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	495e      	ldr	r1, [pc, #376]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d010      	beq.n	8002bb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69da      	ldr	r2, [r3, #28]
 8002b96:	4b59      	ldr	r3, [pc, #356]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d908      	bls.n	8002bb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ba2:	4b56      	ldr	r3, [pc, #344]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	4953      	ldr	r1, [pc, #332]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d010      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	4b4d      	ldr	r3, [pc, #308]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bc6:	699b      	ldr	r3, [r3, #24]
 8002bc8:	f003 030f 	and.w	r3, r3, #15
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d908      	bls.n	8002be2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	f023 020f 	bic.w	r2, r3, #15
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4947      	ldr	r1, [pc, #284]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d055      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002bee:	4b43      	ldr	r3, [pc, #268]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	4940      	ldr	r1, [pc, #256]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d107      	bne.n	8002c18 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c08:	4b3c      	ldr	r3, [pc, #240]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d121      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0f6      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b03      	cmp	r3, #3
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c20:	4b36      	ldr	r3, [pc, #216]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d115      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0ea      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c38:	4b30      	ldr	r3, [pc, #192]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0de      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c48:	4b2c      	ldr	r3, [pc, #176]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0d6      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c58:	4b28      	ldr	r3, [pc, #160]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f023 0207 	bic.w	r2, r3, #7
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	4925      	ldr	r1, [pc, #148]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c6a:	f7fe fa1f 	bl	80010ac <HAL_GetTick>
 8002c6e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c70:	e00a      	b.n	8002c88 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c72:	f7fe fa1b 	bl	80010ac <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e0be      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c88:	4b1c      	ldr	r3, [pc, #112]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d1eb      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d010      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	4b14      	ldr	r3, [pc, #80]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d208      	bcs.n	8002cc8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cb6:	4b11      	ldr	r3, [pc, #68]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	f023 020f 	bic.w	r2, r3, #15
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	490e      	ldr	r1, [pc, #56]	@ (8002cfc <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 030f 	and.w	r3, r3, #15
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d214      	bcs.n	8002d00 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f023 020f 	bic.w	r2, r3, #15
 8002cde:	4906      	ldr	r1, [pc, #24]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce6:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_RCC_ClockConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d005      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e086      	b.n	8002e06 <HAL_RCC_ClockConfig+0x34e>
 8002cf8:	52002000 	.word	0x52002000
 8002cfc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0304 	and.w	r3, r3, #4
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d010      	beq.n	8002d2e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691a      	ldr	r2, [r3, #16]
 8002d10:	4b3f      	ldr	r3, [pc, #252]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d12:	699b      	ldr	r3, [r3, #24]
 8002d14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d208      	bcs.n	8002d2e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d1c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	4939      	ldr	r1, [pc, #228]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0308 	and.w	r3, r3, #8
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	4b34      	ldr	r3, [pc, #208]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d208      	bcs.n	8002d5c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d4a:	4b31      	ldr	r3, [pc, #196]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	492e      	ldr	r1, [pc, #184]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 0310 	and.w	r3, r3, #16
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d010      	beq.n	8002d8a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699a      	ldr	r2, [r3, #24]
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d208      	bcs.n	8002d8a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d78:	4b25      	ldr	r3, [pc, #148]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d7a:	69db      	ldr	r3, [r3, #28]
 8002d7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	4922      	ldr	r1, [pc, #136]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0320 	and.w	r3, r3, #32
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d010      	beq.n	8002db8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	69da      	ldr	r2, [r3, #28]
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
 8002d9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d208      	bcs.n	8002db8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002da6:	4b1a      	ldr	r3, [pc, #104]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69db      	ldr	r3, [r3, #28]
 8002db2:	4917      	ldr	r1, [pc, #92]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002db8:	f000 f834 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b14      	ldr	r3, [pc, #80]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	0a1b      	lsrs	r3, r3, #8
 8002dc4:	f003 030f 	and.w	r3, r3, #15
 8002dc8:	4912      	ldr	r1, [pc, #72]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	f003 031f 	and.w	r3, r3, #31
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8002e10 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 030f 	and.w	r3, r3, #15
 8002dde:	4a0d      	ldr	r2, [pc, #52]	@ (8002e14 <HAL_RCC_ClockConfig+0x35c>)
 8002de0:	5cd3      	ldrb	r3, [r2, r3]
 8002de2:	f003 031f 	and.w	r3, r3, #31
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	4a0a      	ldr	r2, [pc, #40]	@ (8002e18 <HAL_RCC_ClockConfig+0x360>)
 8002dee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002df0:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <HAL_RCC_ClockConfig+0x364>)
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x368>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f7fe f90c 	bl	8001018 <HAL_InitTick>
 8002e00:	4603      	mov	r3, r0
 8002e02:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	58024400 	.word	0x58024400
 8002e14:	08006660 	.word	0x08006660
 8002e18:	24000004 	.word	0x24000004
 8002e1c:	24000000 	.word	0x24000000
 8002e20:	24000008 	.word	0x24000008

08002e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b089      	sub	sp, #36	@ 0x24
 8002e28:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e2a:	4bb3      	ldr	r3, [pc, #716]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e32:	2b18      	cmp	r3, #24
 8002e34:	f200 8155 	bhi.w	80030e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8002e38:	a201      	add	r2, pc, #4	@ (adr r2, 8002e40 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002ea5 	.word	0x08002ea5
 8002e44:	080030e3 	.word	0x080030e3
 8002e48:	080030e3 	.word	0x080030e3
 8002e4c:	080030e3 	.word	0x080030e3
 8002e50:	080030e3 	.word	0x080030e3
 8002e54:	080030e3 	.word	0x080030e3
 8002e58:	080030e3 	.word	0x080030e3
 8002e5c:	080030e3 	.word	0x080030e3
 8002e60:	08002ecb 	.word	0x08002ecb
 8002e64:	080030e3 	.word	0x080030e3
 8002e68:	080030e3 	.word	0x080030e3
 8002e6c:	080030e3 	.word	0x080030e3
 8002e70:	080030e3 	.word	0x080030e3
 8002e74:	080030e3 	.word	0x080030e3
 8002e78:	080030e3 	.word	0x080030e3
 8002e7c:	080030e3 	.word	0x080030e3
 8002e80:	08002ed1 	.word	0x08002ed1
 8002e84:	080030e3 	.word	0x080030e3
 8002e88:	080030e3 	.word	0x080030e3
 8002e8c:	080030e3 	.word	0x080030e3
 8002e90:	080030e3 	.word	0x080030e3
 8002e94:	080030e3 	.word	0x080030e3
 8002e98:	080030e3 	.word	0x080030e3
 8002e9c:	080030e3 	.word	0x080030e3
 8002ea0:	08002ed7 	.word	0x08002ed7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ea4:	4b94      	ldr	r3, [pc, #592]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0320 	and.w	r3, r3, #32
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d009      	beq.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eb0:	4b91      	ldr	r3, [pc, #580]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	08db      	lsrs	r3, r3, #3
 8002eb6:	f003 0303 	and.w	r3, r3, #3
 8002eba:	4a90      	ldr	r2, [pc, #576]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002ec2:	e111      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ec6:	61bb      	str	r3, [r7, #24]
      break;
 8002ec8:	e10e      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002eca:	4b8d      	ldr	r3, [pc, #564]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ecc:	61bb      	str	r3, [r7, #24]
      break;
 8002ece:	e10b      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8003104 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002ed2:	61bb      	str	r3, [r7, #24]
      break;
 8002ed4:	e108      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ed6:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ed8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ee0:	4b85      	ldr	r3, [pc, #532]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ee4:	091b      	lsrs	r3, r3, #4
 8002ee6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002eea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002eec:	4b82      	ldr	r3, [pc, #520]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002ef6:	4b80      	ldr	r3, [pc, #512]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002efa:	08db      	lsrs	r3, r3, #3
 8002efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	fb02 f303 	mul.w	r3, r2, r3
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80e1 	beq.w	80030dc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	f000 8083 	beq.w	8003028 <HAL_RCC_GetSysClockFreq+0x204>
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	f200 80a1 	bhi.w	800306c <HAL_RCC_GetSysClockFreq+0x248>
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_RCC_GetSysClockFreq+0x114>
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d056      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f36:	e099      	b.n	800306c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f38:	4b6f      	ldr	r3, [pc, #444]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0320 	and.w	r3, r3, #32
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d02d      	beq.n	8002fa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f44:	4b6c      	ldr	r3, [pc, #432]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	08db      	lsrs	r3, r3, #3
 8002f4a:	f003 0303 	and.w	r3, r3, #3
 8002f4e:	4a6b      	ldr	r2, [pc, #428]	@ (80030fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f50:	fa22 f303 	lsr.w	r3, r2, r3
 8002f54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	ee07 3a90 	vmov	s15, r3
 8002f5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	ee07 3a90 	vmov	s15, r3
 8002f66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f6e:	4b62      	ldr	r3, [pc, #392]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f82:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002f9e:	e087      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002faa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800310c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fb2:	4b51      	ldr	r3, [pc, #324]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fc6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fe2:	e065      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	ee07 3a90 	vmov	s15, r3
 8002fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003110 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff6:	4b40      	ldr	r3, [pc, #256]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003006:	ed97 6a02 	vldr	s12, [r7, #8]
 800300a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2e4>
 800300e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800301a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003022:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003026:	e043      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003114 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303a:	4b2f      	ldr	r3, [pc, #188]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800303e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304a:	ed97 6a02 	vldr	s12, [r7, #8]
 800304e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800305e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800306a:	e021      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003110 <HAL_RCC_GetSysClockFreq+0x2ec>
 800307a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307e:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003092:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003108 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030b0:	4b11      	ldr	r3, [pc, #68]	@ (80030f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030b4:	0a5b      	lsrs	r3, r3, #9
 80030b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030ba:	3301      	adds	r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	ee07 3a90 	vmov	s15, r3
 80030c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80030cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030d4:	ee17 3a90 	vmov	r3, s15
 80030d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030da:	e005      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
      break;
 80030e0:	e002      	b.n	80030e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030e2:	4b07      	ldr	r3, [pc, #28]	@ (8003100 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030e4:	61bb      	str	r3, [r7, #24]
      break;
 80030e6:	bf00      	nop
  }

  return sysclockfreq;
 80030e8:	69bb      	ldr	r3, [r7, #24]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3724      	adds	r7, #36	@ 0x24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	58024400 	.word	0x58024400
 80030fc:	03d09000 	.word	0x03d09000
 8003100:	003d0900 	.word	0x003d0900
 8003104:	007a1200 	.word	0x007a1200
 8003108:	46000000 	.word	0x46000000
 800310c:	4c742400 	.word	0x4c742400
 8003110:	4a742400 	.word	0x4a742400
 8003114:	4af42400 	.word	0x4af42400

08003118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800311e:	f7ff fe81 	bl	8002e24 <HAL_RCC_GetSysClockFreq>
 8003122:	4602      	mov	r2, r0
 8003124:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_RCC_GetHCLKFreq+0x50>)
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	0a1b      	lsrs	r3, r3, #8
 800312a:	f003 030f 	and.w	r3, r3, #15
 800312e:	490f      	ldr	r1, [pc, #60]	@ (800316c <HAL_RCC_GetHCLKFreq+0x54>)
 8003130:	5ccb      	ldrb	r3, [r1, r3]
 8003132:	f003 031f 	and.w	r3, r3, #31
 8003136:	fa22 f303 	lsr.w	r3, r2, r3
 800313a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800313c:	4b0a      	ldr	r3, [pc, #40]	@ (8003168 <HAL_RCC_GetHCLKFreq+0x50>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	4a09      	ldr	r2, [pc, #36]	@ (800316c <HAL_RCC_GetHCLKFreq+0x54>)
 8003146:	5cd3      	ldrb	r3, [r2, r3]
 8003148:	f003 031f 	and.w	r3, r3, #31
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	4a07      	ldr	r2, [pc, #28]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x58>)
 8003154:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003156:	4a07      	ldr	r2, [pc, #28]	@ (8003174 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800315c:	4b04      	ldr	r3, [pc, #16]	@ (8003170 <HAL_RCC_GetHCLKFreq+0x58>)
 800315e:	681b      	ldr	r3, [r3, #0]
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	58024400 	.word	0x58024400
 800316c:	08006660 	.word	0x08006660
 8003170:	24000004 	.word	0x24000004
 8003174:	24000000 	.word	0x24000000

08003178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800317c:	f7ff ffcc 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 8003180:	4602      	mov	r2, r0
 8003182:	4b06      	ldr	r3, [pc, #24]	@ (800319c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	091b      	lsrs	r3, r3, #4
 8003188:	f003 0307 	and.w	r3, r3, #7
 800318c:	4904      	ldr	r1, [pc, #16]	@ (80031a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800318e:	5ccb      	ldrb	r3, [r1, r3]
 8003190:	f003 031f 	and.w	r3, r3, #31
 8003194:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003198:	4618      	mov	r0, r3
 800319a:	bd80      	pop	{r7, pc}
 800319c:	58024400 	.word	0x58024400
 80031a0:	08006660 	.word	0x08006660

080031a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031a8:	f7ff ffb6 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 80031ac:	4602      	mov	r2, r0
 80031ae:	4b06      	ldr	r3, [pc, #24]	@ (80031c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	4904      	ldr	r1, [pc, #16]	@ (80031cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80031ba:	5ccb      	ldrb	r3, [r1, r3]
 80031bc:	f003 031f 	and.w	r3, r3, #31
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	58024400 	.word	0x58024400
 80031cc:	08006660 	.word	0x08006660

080031d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031d4:	b0ca      	sub	sp, #296	@ 0x128
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031e2:	2300      	movs	r3, #0
 80031e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80031f4:	2500      	movs	r5, #0
 80031f6:	ea54 0305 	orrs.w	r3, r4, r5
 80031fa:	d049      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80031fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003200:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003202:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003206:	d02f      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003208:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800320c:	d828      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800320e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003212:	d01a      	beq.n	800324a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003214:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003218:	d822      	bhi.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800321e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003222:	d007      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003224:	e01c      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003226:	4bb8      	ldr	r3, [pc, #736]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800322a:	4ab7      	ldr	r2, [pc, #732]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800322c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003230:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003232:	e01a      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003238:	3308      	adds	r3, #8
 800323a:	2102      	movs	r1, #2
 800323c:	4618      	mov	r0, r3
 800323e:	f001 fc8f 	bl	8004b60 <RCCEx_PLL2_Config>
 8003242:	4603      	mov	r3, r0
 8003244:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003248:	e00f      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800324a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800324e:	3328      	adds	r3, #40	@ 0x28
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f001 fd36 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800325e:	e004      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003266:	e000      	b.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003268:	bf00      	nop
    }

    if (ret == HAL_OK)
 800326a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003272:	4ba5      	ldr	r3, [pc, #660]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003276:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800327a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800327e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003280:	4aa1      	ldr	r2, [pc, #644]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003282:	430b      	orrs	r3, r1
 8003284:	6513      	str	r3, [r2, #80]	@ 0x50
 8003286:	e003      	b.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800328c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003298:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800329c:	f04f 0900 	mov.w	r9, #0
 80032a0:	ea58 0309 	orrs.w	r3, r8, r9
 80032a4:	d047      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ac:	2b04      	cmp	r3, #4
 80032ae:	d82a      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032b0:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b6:	bf00      	nop
 80032b8:	080032cd 	.word	0x080032cd
 80032bc:	080032db 	.word	0x080032db
 80032c0:	080032f1 	.word	0x080032f1
 80032c4:	0800330f 	.word	0x0800330f
 80032c8:	0800330f 	.word	0x0800330f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032cc:	4b8e      	ldr	r3, [pc, #568]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	4a8d      	ldr	r2, [pc, #564]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032d8:	e01a      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032de:	3308      	adds	r3, #8
 80032e0:	2100      	movs	r1, #0
 80032e2:	4618      	mov	r0, r3
 80032e4:	f001 fc3c 	bl	8004b60 <RCCEx_PLL2_Config>
 80032e8:	4603      	mov	r3, r0
 80032ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ee:	e00f      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f4:	3328      	adds	r3, #40	@ 0x28
 80032f6:	2100      	movs	r1, #0
 80032f8:	4618      	mov	r0, r3
 80032fa:	f001 fce3 	bl	8004cc4 <RCCEx_PLL3_Config>
 80032fe:	4603      	mov	r3, r0
 8003300:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003304:	e004      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800330c:	e000      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800330e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003318:	4b7b      	ldr	r3, [pc, #492]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800331a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331c:	f023 0107 	bic.w	r1, r3, #7
 8003320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003324:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003326:	4a78      	ldr	r2, [pc, #480]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003328:	430b      	orrs	r3, r1
 800332a:	6513      	str	r3, [r2, #80]	@ 0x50
 800332c:	e003      	b.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003332:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8003342:	f04f 0b00 	mov.w	fp, #0
 8003346:	ea5a 030b 	orrs.w	r3, sl, fp
 800334a:	d04c      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003352:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003356:	d030      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003358:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800335c:	d829      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800335e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003360:	d02d      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003362:	2bc0      	cmp	r3, #192	@ 0xc0
 8003364:	d825      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d018      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800336a:	2b80      	cmp	r3, #128	@ 0x80
 800336c:	d821      	bhi.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	d007      	beq.n	8003386 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003376:	e01c      	b.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003378:	4b63      	ldr	r3, [pc, #396]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800337c:	4a62      	ldr	r2, [pc, #392]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800337e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003382:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003384:	e01c      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338a:	3308      	adds	r3, #8
 800338c:	2100      	movs	r1, #0
 800338e:	4618      	mov	r0, r3
 8003390:	f001 fbe6 	bl	8004b60 <RCCEx_PLL2_Config>
 8003394:	4603      	mov	r3, r0
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800339a:	e011      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800339c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033a0:	3328      	adds	r3, #40	@ 0x28
 80033a2:	2100      	movs	r1, #0
 80033a4:	4618      	mov	r0, r3
 80033a6:	f001 fc8d 	bl	8004cc4 <RCCEx_PLL3_Config>
 80033aa:	4603      	mov	r3, r0
 80033ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033b0:	e006      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033b8:	e002      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033ba:	bf00      	nop
 80033bc:	e000      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10a      	bne.n	80033de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033c8:	4b4f      	ldr	r3, [pc, #316]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033d6:	4a4c      	ldr	r2, [pc, #304]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d8:	430b      	orrs	r3, r1
 80033da:	6513      	str	r3, [r2, #80]	@ 0x50
 80033dc:	e003      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80033f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80033f6:	2300      	movs	r3, #0
 80033f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80033fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003400:	460b      	mov	r3, r1
 8003402:	4313      	orrs	r3, r2
 8003404:	d053      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800340e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003412:	d035      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003414:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003418:	d82e      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800341a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800341e:	d031      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003420:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003424:	d828      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003426:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800342a:	d01a      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800342c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003430:	d822      	bhi.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003436:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800343a:	d007      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800343c:	e01c      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800343e:	4b32      	ldr	r3, [pc, #200]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	4a31      	ldr	r2, [pc, #196]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800344a:	e01c      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800344c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003450:	3308      	adds	r3, #8
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f001 fb83 	bl	8004b60 <RCCEx_PLL2_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003460:	e011      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	3328      	adds	r3, #40	@ 0x28
 8003468:	2100      	movs	r1, #0
 800346a:	4618      	mov	r0, r3
 800346c:	f001 fc2a 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003470:	4603      	mov	r3, r0
 8003472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003476:	e006      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800347e:	e002      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003480:	bf00      	nop
 8003482:	e000      	b.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003484:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003486:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10b      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800348e:	4b1e      	ldr	r3, [pc, #120]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003490:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003492:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800349e:	4a1a      	ldr	r2, [pc, #104]	@ (8003508 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a0:	430b      	orrs	r3, r1
 80034a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80034a4:	e003      	b.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034be:	2300      	movs	r3, #0
 80034c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80034c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80034c8:	460b      	mov	r3, r1
 80034ca:	4313      	orrs	r3, r2
 80034cc:	d056      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80034d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034da:	d038      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034e0:	d831      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034e6:	d034      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80034e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80034ec:	d82b      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034f2:	d01d      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80034f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80034f8:	d825      	bhi.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d006      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80034fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003502:	d00a      	beq.n	800351a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003504:	e01f      	b.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003506:	bf00      	nop
 8003508:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800350c:	4ba2      	ldr	r3, [pc, #648]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003510:	4aa1      	ldr	r2, [pc, #644]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003512:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003516:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003518:	e01c      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800351a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351e:	3308      	adds	r3, #8
 8003520:	2100      	movs	r1, #0
 8003522:	4618      	mov	r0, r3
 8003524:	f001 fb1c 	bl	8004b60 <RCCEx_PLL2_Config>
 8003528:	4603      	mov	r3, r0
 800352a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800352e:	e011      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003534:	3328      	adds	r3, #40	@ 0x28
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f001 fbc3 	bl	8004cc4 <RCCEx_PLL3_Config>
 800353e:	4603      	mov	r3, r0
 8003540:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003544:	e006      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800354c:	e002      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800354e:	bf00      	nop
 8003550:	e000      	b.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003552:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003554:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003558:	2b00      	cmp	r3, #0
 800355a:	d10b      	bne.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800355c:	4b8e      	ldr	r3, [pc, #568]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003560:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003568:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800356c:	4a8a      	ldr	r2, [pc, #552]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800356e:	430b      	orrs	r3, r1
 8003570:	6593      	str	r3, [r2, #88]	@ 0x58
 8003572:	e003      	b.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003574:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003578:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003584:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003588:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800358c:	2300      	movs	r3, #0
 800358e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003592:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003596:	460b      	mov	r3, r1
 8003598:	4313      	orrs	r3, r2
 800359a:	d03a      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800359c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035a2:	2b30      	cmp	r3, #48	@ 0x30
 80035a4:	d01f      	beq.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035a6:	2b30      	cmp	r3, #48	@ 0x30
 80035a8:	d819      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d00c      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035ae:	2b20      	cmp	r3, #32
 80035b0:	d815      	bhi.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d019      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d111      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ba:	4b77      	ldr	r3, [pc, #476]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035be:	4a76      	ldr	r2, [pc, #472]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035c6:	e011      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035cc:	3308      	adds	r3, #8
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f001 fac5 	bl	8004b60 <RCCEx_PLL2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035dc:	e006      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e4:	e002      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035e6:	bf00      	nop
 80035e8:	e000      	b.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10a      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80035f4:	4b68      	ldr	r3, [pc, #416]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80035fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	4a65      	ldr	r2, [pc, #404]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003604:	430b      	orrs	r3, r1
 8003606:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003608:	e003      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800361e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003628:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d051      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003638:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800363c:	d035      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800363e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003642:	d82e      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003644:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003648:	d031      	beq.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800364a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800364e:	d828      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003650:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003654:	d01a      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003656:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800365a:	d822      	bhi.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003664:	d007      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003666:	e01c      	b.n	80036a2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003668:	4b4b      	ldr	r3, [pc, #300]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	4a4a      	ldr	r2, [pc, #296]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800366e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003672:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003674:	e01c      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367a:	3308      	adds	r3, #8
 800367c:	2100      	movs	r1, #0
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fa6e 	bl	8004b60 <RCCEx_PLL2_Config>
 8003684:	4603      	mov	r3, r0
 8003686:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800368a:	e011      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800368c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003690:	3328      	adds	r3, #40	@ 0x28
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 fb15 	bl	8004cc4 <RCCEx_PLL3_Config>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a0:	e006      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036a8:	e002      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036aa:	bf00      	nop
 80036ac:	e000      	b.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d10a      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036b8:	4b37      	ldr	r3, [pc, #220]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036bc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036c6:	4a34      	ldr	r2, [pc, #208]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c8:	430b      	orrs	r3, r1
 80036ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80036cc:	e003      	b.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036de:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80036e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80036e6:	2300      	movs	r3, #0
 80036e8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80036ec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80036f0:	460b      	mov	r3, r1
 80036f2:	4313      	orrs	r3, r2
 80036f4:	d056      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003700:	d033      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003702:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003706:	d82c      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003708:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800370c:	d02f      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800370e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003712:	d826      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003714:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003718:	d02b      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800371a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800371e:	d820      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003720:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003724:	d012      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003726:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800372a:	d81a      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800372c:	2b00      	cmp	r3, #0
 800372e:	d022      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	d115      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800373a:	3308      	adds	r3, #8
 800373c:	2101      	movs	r1, #1
 800373e:	4618      	mov	r0, r3
 8003740:	f001 fa0e 	bl	8004b60 <RCCEx_PLL2_Config>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800374a:	e015      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003750:	3328      	adds	r3, #40	@ 0x28
 8003752:	2101      	movs	r1, #1
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fab5 	bl	8004cc4 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003760:	e00a      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800376a:	bf00      	nop
 800376c:	e004      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800376e:	bf00      	nop
 8003770:	e002      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003772:	bf00      	nop
 8003774:	e000      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003776:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003778:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10d      	bne.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003780:	4b05      	ldr	r3, [pc, #20]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003784:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800378e:	4a02      	ldr	r2, [pc, #8]	@ (8003798 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003790:	430b      	orrs	r3, r1
 8003792:	6513      	str	r3, [r2, #80]	@ 0x50
 8003794:	e006      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003796:	bf00      	nop
 8003798:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800379c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037b4:	2300      	movs	r3, #0
 80037b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037ba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d055      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80037cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d0:	d033      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80037d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80037d6:	d82c      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037dc:	d02f      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80037de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e2:	d826      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037e4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037e8:	d02b      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80037ea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80037ee:	d820      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037f4:	d012      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80037f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037fa:	d81a      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d022      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003800:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003804:	d115      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800380a:	3308      	adds	r3, #8
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f001 f9a6 	bl	8004b60 <RCCEx_PLL2_Config>
 8003814:	4603      	mov	r3, r0
 8003816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800381a:	e015      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800381c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003820:	3328      	adds	r3, #40	@ 0x28
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fa4d 	bl	8004cc4 <RCCEx_PLL3_Config>
 800382a:	4603      	mov	r3, r0
 800382c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003830:	e00a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003838:	e006      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800383a:	bf00      	nop
 800383c:	e004      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800383e:	bf00      	nop
 8003840:	e002      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003842:	bf00      	nop
 8003844:	e000      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003848:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10b      	bne.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003850:	4ba3      	ldr	r3, [pc, #652]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003852:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003854:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003860:	4a9f      	ldr	r2, [pc, #636]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003862:	430b      	orrs	r3, r1
 8003864:	6593      	str	r3, [r2, #88]	@ 0x58
 8003866:	e003      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003868:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800386c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800387c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003880:	2300      	movs	r3, #0
 8003882:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800388a:	460b      	mov	r3, r1
 800388c:	4313      	orrs	r3, r2
 800388e:	d037      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800389a:	d00e      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800389c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038a0:	d816      	bhi.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d018      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038aa:	d111      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ac:	4b8c      	ldr	r3, [pc, #560]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b0:	4a8b      	ldr	r2, [pc, #556]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038b8:	e00f      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038be:	3308      	adds	r3, #8
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f001 f94c 	bl	8004b60 <RCCEx_PLL2_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038ce:	e004      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d6:	e000      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80038d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10a      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038e2:	4b7f      	ldr	r3, [pc, #508]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80038ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038f0:	4a7b      	ldr	r2, [pc, #492]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f2:	430b      	orrs	r3, r1
 80038f4:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f6:	e003      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003908:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800390c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003910:	2300      	movs	r3, #0
 8003912:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003916:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800391a:	460b      	mov	r3, r1
 800391c:	4313      	orrs	r3, r2
 800391e:	d039      	beq.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003926:	2b03      	cmp	r3, #3
 8003928:	d81c      	bhi.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800392a:	a201      	add	r2, pc, #4	@ (adr r2, 8003930 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	0800396d 	.word	0x0800396d
 8003934:	08003941 	.word	0x08003941
 8003938:	0800394f 	.word	0x0800394f
 800393c:	0800396d 	.word	0x0800396d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003940:	4b67      	ldr	r3, [pc, #412]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003942:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003944:	4a66      	ldr	r2, [pc, #408]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003946:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800394c:	e00f      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	3308      	adds	r3, #8
 8003954:	2102      	movs	r1, #2
 8003956:	4618      	mov	r0, r3
 8003958:	f001 f902 	bl	8004b60 <RCCEx_PLL2_Config>
 800395c:	4603      	mov	r3, r0
 800395e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003962:	e004      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396a:	e000      	b.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800396c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10a      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003976:	4b5a      	ldr	r3, [pc, #360]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800397a:	f023 0103 	bic.w	r1, r3, #3
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	4a56      	ldr	r2, [pc, #344]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003986:	430b      	orrs	r3, r1
 8003988:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800398a:	e003      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f000 809f 	beq.w	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b6:	4b4b      	ldr	r3, [pc, #300]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c2:	f7fd fb73 	bl	80010ac <HAL_GetTick>
 80039c6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039ca:	e00b      	b.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039cc:	f7fd fb6e 	bl	80010ac <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b64      	cmp	r3, #100	@ 0x64
 80039da:	d903      	bls.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e2:	e005      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e4:	4b3f      	ldr	r3, [pc, #252]	@ (8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0ed      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d179      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80039f8:	4b39      	ldr	r3, [pc, #228]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039fa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a04:	4053      	eors	r3, r2
 8003a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d015      	beq.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a0e:	4b34      	ldr	r3, [pc, #208]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a1a:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a1e:	4a30      	ldr	r2, [pc, #192]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a26:	4b2e      	ldr	r3, [pc, #184]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a2a:	4a2d      	ldr	r2, [pc, #180]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a32:	4a2b      	ldr	r2, [pc, #172]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a46:	d118      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fd fb30 	bl	80010ac <HAL_GetTick>
 8003a4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a50:	e00d      	b.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fd fb2b 	bl	80010ac <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a5c:	1ad2      	subs	r2, r2, r3
 8003a5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d903      	bls.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003a6c:	e005      	b.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d0eb      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d129      	bne.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a92:	d10e      	bne.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aa4:	091a      	lsrs	r2, r3, #4
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aac:	430b      	orrs	r3, r1
 8003aae:	6113      	str	r3, [r2, #16]
 8003ab0:	e005      	b.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ab8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003abc:	6113      	str	r3, [r2, #16]
 8003abe:	4b08      	ldr	r3, [pc, #32]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003aca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ace:	4a04      	ldr	r2, [pc, #16]	@ (8003ae0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad0:	430b      	orrs	r3, r1
 8003ad2:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ad4:	e00e      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003ade:	e009      	b.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ae0:	58024400 	.word	0x58024400
 8003ae4:	58024800 	.word	0x58024800
 8003ae8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003afc:	f002 0301 	and.w	r3, r2, #1
 8003b00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b04:	2300      	movs	r3, #0
 8003b06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b0a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b0e:	460b      	mov	r3, r1
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f000 8089 	beq.w	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b1c:	2b28      	cmp	r3, #40	@ 0x28
 8003b1e:	d86b      	bhi.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b20:	a201      	add	r2, pc, #4	@ (adr r2, 8003b28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b26:	bf00      	nop
 8003b28:	08003c01 	.word	0x08003c01
 8003b2c:	08003bf9 	.word	0x08003bf9
 8003b30:	08003bf9 	.word	0x08003bf9
 8003b34:	08003bf9 	.word	0x08003bf9
 8003b38:	08003bf9 	.word	0x08003bf9
 8003b3c:	08003bf9 	.word	0x08003bf9
 8003b40:	08003bf9 	.word	0x08003bf9
 8003b44:	08003bf9 	.word	0x08003bf9
 8003b48:	08003bcd 	.word	0x08003bcd
 8003b4c:	08003bf9 	.word	0x08003bf9
 8003b50:	08003bf9 	.word	0x08003bf9
 8003b54:	08003bf9 	.word	0x08003bf9
 8003b58:	08003bf9 	.word	0x08003bf9
 8003b5c:	08003bf9 	.word	0x08003bf9
 8003b60:	08003bf9 	.word	0x08003bf9
 8003b64:	08003bf9 	.word	0x08003bf9
 8003b68:	08003be3 	.word	0x08003be3
 8003b6c:	08003bf9 	.word	0x08003bf9
 8003b70:	08003bf9 	.word	0x08003bf9
 8003b74:	08003bf9 	.word	0x08003bf9
 8003b78:	08003bf9 	.word	0x08003bf9
 8003b7c:	08003bf9 	.word	0x08003bf9
 8003b80:	08003bf9 	.word	0x08003bf9
 8003b84:	08003bf9 	.word	0x08003bf9
 8003b88:	08003c01 	.word	0x08003c01
 8003b8c:	08003bf9 	.word	0x08003bf9
 8003b90:	08003bf9 	.word	0x08003bf9
 8003b94:	08003bf9 	.word	0x08003bf9
 8003b98:	08003bf9 	.word	0x08003bf9
 8003b9c:	08003bf9 	.word	0x08003bf9
 8003ba0:	08003bf9 	.word	0x08003bf9
 8003ba4:	08003bf9 	.word	0x08003bf9
 8003ba8:	08003c01 	.word	0x08003c01
 8003bac:	08003bf9 	.word	0x08003bf9
 8003bb0:	08003bf9 	.word	0x08003bf9
 8003bb4:	08003bf9 	.word	0x08003bf9
 8003bb8:	08003bf9 	.word	0x08003bf9
 8003bbc:	08003bf9 	.word	0x08003bf9
 8003bc0:	08003bf9 	.word	0x08003bf9
 8003bc4:	08003bf9 	.word	0x08003bf9
 8003bc8:	08003c01 	.word	0x08003c01
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2101      	movs	r1, #1
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f000 ffc3 	bl	8004b60 <RCCEx_PLL2_Config>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003be0:	e00f      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be6:	3328      	adds	r3, #40	@ 0x28
 8003be8:	2101      	movs	r1, #1
 8003bea:	4618      	mov	r0, r3
 8003bec:	f001 f86a 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bf6:	e004      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bfe:	e000      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10a      	bne.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c0a:	4bbf      	ldr	r3, [pc, #764]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c18:	4abb      	ldr	r2, [pc, #748]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c1a:	430b      	orrs	r3, r1
 8003c1c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c1e:	e003      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c30:	f002 0302 	and.w	r3, r2, #2
 8003c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c3e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c42:	460b      	mov	r3, r1
 8003c44:	4313      	orrs	r3, r2
 8003c46:	d041      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d824      	bhi.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c52:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c58:	08003ca5 	.word	0x08003ca5
 8003c5c:	08003c71 	.word	0x08003c71
 8003c60:	08003c87 	.word	0x08003c87
 8003c64:	08003ca5 	.word	0x08003ca5
 8003c68:	08003ca5 	.word	0x08003ca5
 8003c6c:	08003ca5 	.word	0x08003ca5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c74:	3308      	adds	r3, #8
 8003c76:	2101      	movs	r1, #1
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 ff71 	bl	8004b60 <RCCEx_PLL2_Config>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c84:	e00f      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8a:	3328      	adds	r3, #40	@ 0x28
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 f818 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c9a:	e004      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ca2:	e000      	b.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d10a      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cae:	4b96      	ldr	r3, [pc, #600]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb2:	f023 0107 	bic.w	r1, r3, #7
 8003cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cbc:	4a92      	ldr	r2, [pc, #584]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cc2:	e003      	b.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ccc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd4:	f002 0304 	and.w	r3, r2, #4
 8003cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ce2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	d044      	beq.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cf4:	2b05      	cmp	r3, #5
 8003cf6:	d825      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8003d00 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfe:	bf00      	nop
 8003d00:	08003d4d 	.word	0x08003d4d
 8003d04:	08003d19 	.word	0x08003d19
 8003d08:	08003d2f 	.word	0x08003d2f
 8003d0c:	08003d4d 	.word	0x08003d4d
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d4d 	.word	0x08003d4d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1c:	3308      	adds	r3, #8
 8003d1e:	2101      	movs	r1, #1
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff1d 	bl	8004b60 <RCCEx_PLL2_Config>
 8003d26:	4603      	mov	r3, r0
 8003d28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d32:	3328      	adds	r3, #40	@ 0x28
 8003d34:	2101      	movs	r1, #1
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 ffc4 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d56:	4b6c      	ldr	r3, [pc, #432]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d5a:	f023 0107 	bic.w	r1, r3, #7
 8003d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d66:	4a68      	ldr	r2, [pc, #416]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d68:	430b      	orrs	r3, r1
 8003d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d6c:	e003      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7e:	f002 0320 	and.w	r3, r2, #32
 8003d82:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003d86:	2300      	movs	r3, #0
 8003d88:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003d90:	460b      	mov	r3, r1
 8003d92:	4313      	orrs	r3, r2
 8003d94:	d055      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da2:	d033      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003da4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003da8:	d82c      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dae:	d02f      	beq.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003db4:	d826      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003db6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dba:	d02b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003dbc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dc0:	d820      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dc2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dc6:	d012      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003dc8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003dcc:	d81a      	bhi.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d022      	beq.n	8003e18 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003dd2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003dd6:	d115      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ddc:	3308      	adds	r3, #8
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 febd 	bl	8004b60 <RCCEx_PLL2_Config>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003dec:	e015      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003df2:	3328      	adds	r3, #40	@ 0x28
 8003df4:	2102      	movs	r1, #2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f000 ff64 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e02:	e00a      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e0a:	e006      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e0c:	bf00      	nop
 8003e0e:	e004      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e10:	bf00      	nop
 8003e12:	e002      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e14:	bf00      	nop
 8003e16:	e000      	b.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10b      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e22:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e26:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e32:	4a35      	ldr	r2, [pc, #212]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e38:	e003      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e52:	2300      	movs	r3, #0
 8003e54:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e58:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	d058      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e6a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e6e:	d033      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e70:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003e74:	d82c      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e7a:	d02f      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003e7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e80:	d826      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e82:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e86:	d02b      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003e88:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003e8c:	d820      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e92:	d012      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003e94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e98:	d81a      	bhi.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d022      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003e9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea2:	d115      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	2100      	movs	r1, #0
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe57 	bl	8004b60 <RCCEx_PLL2_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e015      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ebe:	3328      	adds	r3, #40	@ 0x28
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fefe 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ece:	e00a      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ed6:	e006      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ed8:	bf00      	nop
 8003eda:	e004      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003edc:	bf00      	nop
 8003ede:	e002      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ee4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ee6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10e      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003efe:	4a02      	ldr	r2, [pc, #8]	@ (8003f08 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f04:	e006      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f06:	bf00      	nop
 8003f08:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f24:	2300      	movs	r3, #0
 8003f26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f2a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f2e:	460b      	mov	r3, r1
 8003f30:	4313      	orrs	r3, r2
 8003f32:	d055      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f3c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f40:	d033      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f42:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f46:	d82c      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f4c:	d02f      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f52:	d826      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f54:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f58:	d02b      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f5a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f5e:	d820      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f64:	d012      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f6a:	d81a      	bhi.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d022      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f74:	d115      	bne.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	3308      	adds	r3, #8
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fdee 	bl	8004b60 <RCCEx_PLL2_Config>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003f8a:	e015      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f90:	3328      	adds	r3, #40	@ 0x28
 8003f92:	2102      	movs	r1, #2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f000 fe95 	bl	8004cc4 <RCCEx_PLL3_Config>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fa0:	e00a      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fc0:	4ba1      	ldr	r3, [pc, #644]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003fd0:	4a9d      	ldr	r2, [pc, #628]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fd2:	430b      	orrs	r3, r1
 8003fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd6:	e003      	b.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fdc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe8:	f002 0308 	and.w	r3, r2, #8
 8003fec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003ff6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	d01e      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004004:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400c:	d10c      	bne.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	3328      	adds	r3, #40	@ 0x28
 8004014:	2102      	movs	r1, #2
 8004016:	4618      	mov	r0, r3
 8004018:	f000 fe54 	bl	8004cc4 <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d002      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004028:	4b87      	ldr	r3, [pc, #540]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004038:	4a83      	ldr	r2, [pc, #524]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403a:	430b      	orrs	r3, r1
 800403c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004046:	f002 0310 	and.w	r3, r2, #16
 800404a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800404e:	2300      	movs	r3, #0
 8004050:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004054:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004058:	460b      	mov	r3, r1
 800405a:	4313      	orrs	r3, r2
 800405c:	d01e      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800405e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004062:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004066:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800406a:	d10c      	bne.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	3328      	adds	r3, #40	@ 0x28
 8004072:	2102      	movs	r1, #2
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe25 	bl	8004cc4 <RCCEx_PLL3_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004086:	4b70      	ldr	r3, [pc, #448]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004092:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004096:	4a6c      	ldr	r2, [pc, #432]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800409c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040b6:	460b      	mov	r3, r1
 80040b8:	4313      	orrs	r3, r2
 80040ba:	d03e      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80040c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040c8:	d022      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80040ce:	d81b      	bhi.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d003      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80040d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040d8:	d00b      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80040da:	e015      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e0:	3308      	adds	r3, #8
 80040e2:	2100      	movs	r1, #0
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fd3b 	bl	8004b60 <RCCEx_PLL2_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80040f0:	e00f      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f6:	3328      	adds	r3, #40	@ 0x28
 80040f8:	2102      	movs	r1, #2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fde2 	bl	8004cc4 <RCCEx_PLL3_Config>
 8004100:	4603      	mov	r3, r0
 8004102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004106:	e004      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410e:	e000      	b.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004110:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10b      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800411a:	4b4b      	ldr	r3, [pc, #300]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800411e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800412a:	4a47      	ldr	r2, [pc, #284]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800412c:	430b      	orrs	r3, r1
 800412e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004130:	e003      	b.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004132:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004136:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800413e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004142:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004146:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004148:	2300      	movs	r3, #0
 800414a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800414c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004150:	460b      	mov	r3, r1
 8004152:	4313      	orrs	r3, r2
 8004154:	d03b      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800415a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800415e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004162:	d01f      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004164:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004168:	d818      	bhi.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800416a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800416e:	d003      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004170:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004174:	d007      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004176:	e011      	b.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004178:	4b33      	ldr	r3, [pc, #204]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417c:	4a32      	ldr	r2, [pc, #200]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800417e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004182:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004184:	e00f      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418a:	3328      	adds	r3, #40	@ 0x28
 800418c:	2101      	movs	r1, #1
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fd98 	bl	8004cc4 <RCCEx_PLL3_Config>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800419a:	e004      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041a2:	e000      	b.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ae:	4b26      	ldr	r3, [pc, #152]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041be:	4a22      	ldr	r2, [pc, #136]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80041c4:	e003      	b.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80041da:	673b      	str	r3, [r7, #112]	@ 0x70
 80041dc:	2300      	movs	r3, #0
 80041de:	677b      	str	r3, [r7, #116]	@ 0x74
 80041e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d034      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80041f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041f8:	d007      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80041fa:	e011      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041fc:	4b12      	ldr	r3, [pc, #72]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004200:	4a11      	ldr	r2, [pc, #68]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004208:	e00e      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	3308      	adds	r3, #8
 8004210:	2102      	movs	r1, #2
 8004212:	4618      	mov	r0, r3
 8004214:	f000 fca4 	bl	8004b60 <RCCEx_PLL2_Config>
 8004218:	4603      	mov	r3, r0
 800421a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800421e:	e003      	b.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10d      	bne.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004234:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423e:	4a02      	ldr	r2, [pc, #8]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004240:	430b      	orrs	r3, r1
 8004242:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004244:	e006      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004246:	bf00      	nop
 8004248:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800424c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004250:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004260:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004262:	2300      	movs	r3, #0
 8004264:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004266:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800426a:	460b      	mov	r3, r1
 800426c:	4313      	orrs	r3, r2
 800426e:	d00c      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004274:	3328      	adds	r3, #40	@ 0x28
 8004276:	2102      	movs	r1, #2
 8004278:	4618      	mov	r0, r3
 800427a:	f000 fd23 	bl	8004cc4 <RCCEx_PLL3_Config>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d002      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004292:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004296:	663b      	str	r3, [r7, #96]	@ 0x60
 8004298:	2300      	movs	r3, #0
 800429a:	667b      	str	r3, [r7, #100]	@ 0x64
 800429c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042a0:	460b      	mov	r3, r1
 80042a2:	4313      	orrs	r3, r2
 80042a4:	d038      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b2:	d018      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042b8:	d811      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042be:	d014      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c4:	d80b      	bhi.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d011      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042ce:	d106      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042d0:	4bc3      	ldr	r3, [pc, #780]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d4:	4ac2      	ldr	r2, [pc, #776]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042dc:	e008      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042e4:	e004      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042e6:	bf00      	nop
 80042e8:	e002      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042ea:	bf00      	nop
 80042ec:	e000      	b.n	80042f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042f8:	4bb9      	ldr	r3, [pc, #740]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004304:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004308:	4ab5      	ldr	r2, [pc, #724]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430a:	430b      	orrs	r3, r1
 800430c:	6553      	str	r3, [r2, #84]	@ 0x54
 800430e:	e003      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004310:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004314:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004324:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004326:	2300      	movs	r3, #0
 8004328:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800432a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004334:	4baa      	ldr	r3, [pc, #680]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004338:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004342:	4aa7      	ldr	r2, [pc, #668]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004344:	430b      	orrs	r3, r1
 8004346:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004348:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004350:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004354:	653b      	str	r3, [r7, #80]	@ 0x50
 8004356:	2300      	movs	r3, #0
 8004358:	657b      	str	r3, [r7, #84]	@ 0x54
 800435a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800435e:	460b      	mov	r3, r1
 8004360:	4313      	orrs	r3, r2
 8004362:	d00a      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004364:	4b9e      	ldr	r3, [pc, #632]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800436c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004370:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004374:	4a9a      	ldr	r2, [pc, #616]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004376:	430b      	orrs	r3, r1
 8004378:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004386:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004388:	2300      	movs	r3, #0
 800438a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800438c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004396:	4b92      	ldr	r3, [pc, #584]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004398:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800439a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043a4:	4a8e      	ldr	r2, [pc, #568]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b8:	2300      	movs	r3, #0
 80043ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80043bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043c0:	460b      	mov	r3, r1
 80043c2:	4313      	orrs	r3, r2
 80043c4:	d00e      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043c6:	4b86      	ldr	r3, [pc, #536]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	4a85      	ldr	r2, [pc, #532]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043d0:	6113      	str	r3, [r2, #16]
 80043d2:	4b83      	ldr	r3, [pc, #524]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80043de:	4a80      	ldr	r2, [pc, #512]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e0:	430b      	orrs	r3, r1
 80043e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80043f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f2:	2300      	movs	r3, #0
 80043f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80043fa:	460b      	mov	r3, r1
 80043fc:	4313      	orrs	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004400:	4b77      	ldr	r3, [pc, #476]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004404:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440e:	4a74      	ldr	r2, [pc, #464]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	430b      	orrs	r3, r1
 8004412:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800441c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004420:	633b      	str	r3, [r7, #48]	@ 0x30
 8004422:	2300      	movs	r3, #0
 8004424:	637b      	str	r3, [r7, #52]	@ 0x34
 8004426:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800442a:	460b      	mov	r3, r1
 800442c:	4313      	orrs	r3, r2
 800442e:	d00a      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004430:	4b6b      	ldr	r3, [pc, #428]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004434:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004440:	4a67      	ldr	r2, [pc, #412]	@ (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004442:	430b      	orrs	r3, r1
 8004444:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	2100      	movs	r1, #0
 8004450:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004452:	f003 0301 	and.w	r3, r3, #1
 8004456:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004458:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d011      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3308      	adds	r3, #8
 8004468:	2100      	movs	r1, #0
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fb78 	bl	8004b60 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004476:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800447e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004482:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004486:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800448a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448e:	2100      	movs	r1, #0
 8004490:	6239      	str	r1, [r7, #32]
 8004492:	f003 0302 	and.w	r3, r3, #2
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
 8004498:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800449c:	460b      	mov	r3, r1
 800449e:	4313      	orrs	r3, r2
 80044a0:	d011      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a6:	3308      	adds	r3, #8
 80044a8:	2101      	movs	r1, #1
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb58 	bl	8004b60 <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d003      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	2100      	movs	r1, #0
 80044d0:	61b9      	str	r1, [r7, #24]
 80044d2:	f003 0304 	and.w	r3, r3, #4
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d011      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	3308      	adds	r3, #8
 80044e8:	2102      	movs	r1, #2
 80044ea:	4618      	mov	r0, r3
 80044ec:	f000 fb38 	bl	8004b60 <RCCEx_PLL2_Config>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d003      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004502:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004506:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450e:	2100      	movs	r1, #0
 8004510:	6139      	str	r1, [r7, #16]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800451c:	460b      	mov	r3, r1
 800451e:	4313      	orrs	r3, r2
 8004520:	d011      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004526:	3328      	adds	r3, #40	@ 0x28
 8004528:	2100      	movs	r1, #0
 800452a:	4618      	mov	r0, r3
 800452c:	f000 fbca 	bl	8004cc4 <RCCEx_PLL3_Config>
 8004530:	4603      	mov	r3, r0
 8004532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004536:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004542:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	2100      	movs	r1, #0
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	f003 0310 	and.w	r3, r3, #16
 8004556:	60fb      	str	r3, [r7, #12]
 8004558:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800455c:	460b      	mov	r3, r1
 800455e:	4313      	orrs	r3, r2
 8004560:	d011      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004562:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004566:	3328      	adds	r3, #40	@ 0x28
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fbaa 	bl	8004cc4 <RCCEx_PLL3_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800458a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458e:	2100      	movs	r1, #0
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	e9d7 1200 	ldrd	r1, r2, [r7]
 800459c:	460b      	mov	r3, r1
 800459e:	4313      	orrs	r3, r2
 80045a0:	d011      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a6:	3328      	adds	r3, #40	@ 0x28
 80045a8:	2102      	movs	r1, #2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb8a 	bl	8004cc4 <RCCEx_PLL3_Config>
 80045b0:	4603      	mov	r3, r0
 80045b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80045c6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d101      	bne.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	e000      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80045da:	46bd      	mov	sp, r7
 80045dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045e0:	58024400 	.word	0x58024400

080045e4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80045e8:	f7fe fd96 	bl	8003118 <HAL_RCC_GetHCLKFreq>
 80045ec:	4602      	mov	r2, r0
 80045ee:	4b06      	ldr	r3, [pc, #24]	@ (8004608 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	091b      	lsrs	r3, r3, #4
 80045f4:	f003 0307 	and.w	r3, r3, #7
 80045f8:	4904      	ldr	r1, [pc, #16]	@ (800460c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80045fa:	5ccb      	ldrb	r3, [r1, r3]
 80045fc:	f003 031f 	and.w	r3, r3, #31
 8004600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004604:	4618      	mov	r0, r3
 8004606:	bd80      	pop	{r7, pc}
 8004608:	58024400 	.word	0x58024400
 800460c:	08006660 	.word	0x08006660

08004610 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	@ 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004618:	4ba1      	ldr	r3, [pc, #644]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800461a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004622:	4b9f      	ldr	r3, [pc, #636]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004626:	0b1b      	lsrs	r3, r3, #12
 8004628:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800462c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800462e:	4b9c      	ldr	r3, [pc, #624]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	091b      	lsrs	r3, r3, #4
 8004634:	f003 0301 	and.w	r3, r3, #1
 8004638:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800463a:	4b99      	ldr	r3, [pc, #612]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800463e:	08db      	lsrs	r3, r3, #3
 8004640:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	fb02 f303 	mul.w	r3, r2, r3
 800464a:	ee07 3a90 	vmov	s15, r3
 800464e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004652:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8111 	beq.w	8004880 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	2b02      	cmp	r3, #2
 8004662:	f000 8083 	beq.w	800476c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b02      	cmp	r3, #2
 800466a:	f200 80a1 	bhi.w	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d003      	beq.n	800467c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d056      	beq.n	8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800467a:	e099      	b.n	80047b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800467c:	4b88      	ldr	r3, [pc, #544]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d02d      	beq.n	80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004688:	4b85      	ldr	r3, [pc, #532]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	08db      	lsrs	r3, r3, #3
 800468e:	f003 0303 	and.w	r3, r3, #3
 8004692:	4a84      	ldr	r2, [pc, #528]	@ (80048a4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004694:	fa22 f303 	lsr.w	r3, r2, r3
 8004698:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	ee07 3a90 	vmov	s15, r3
 80046a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046b2:	4b7b      	ldr	r3, [pc, #492]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ba:	ee07 3a90 	vmov	s15, r3
 80046be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80046c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046e2:	e087      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	ee07 3a90 	vmov	s15, r3
 80046ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048ac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80046f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046f6:	4b6a      	ldr	r3, [pc, #424]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004706:	ed97 6a03 	vldr	s12, [r7, #12]
 800470a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800470e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004712:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004716:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800471a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800471e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004722:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004726:	e065      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	ee07 3a90 	vmov	s15, r3
 800472e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004732:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004736:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800473a:	4b59      	ldr	r3, [pc, #356]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800474a:	ed97 6a03 	vldr	s12, [r7, #12]
 800474e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004752:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004756:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800475a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800475e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004762:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004766:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800476a:	e043      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800477a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800477e:	4b48      	ldr	r3, [pc, #288]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004782:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800478e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004792:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004796:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800479a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800479e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ae:	e021      	b.n	80047f4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048b0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047c2:	4b37      	ldr	r3, [pc, #220]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048a8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047f2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80047f4:	4b2a      	ldr	r3, [pc, #168]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047f8:	0a5b      	lsrs	r3, r3, #9
 80047fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047fe:	ee07 3a90 	vmov	s15, r3
 8004802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800480a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800480e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800481a:	ee17 2a90 	vmov	r2, s15
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004822:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004824:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004826:	0c1b      	lsrs	r3, r3, #16
 8004828:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004834:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004838:	ee37 7a87 	vadd.f32	s14, s15, s14
 800483c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004840:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004844:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004848:	ee17 2a90 	vmov	r2, s15
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004850:	4b13      	ldr	r3, [pc, #76]	@ (80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004854:	0e1b      	lsrs	r3, r3, #24
 8004856:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800485a:	ee07 3a90 	vmov	s15, r3
 800485e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004862:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800486a:	edd7 6a07 	vldr	s13, [r7, #28]
 800486e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004876:	ee17 2a90 	vmov	r2, s15
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800487e:	e008      	b.n	8004892 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	609a      	str	r2, [r3, #8]
}
 8004892:	bf00      	nop
 8004894:	3724      	adds	r7, #36	@ 0x24
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	58024400 	.word	0x58024400
 80048a4:	03d09000 	.word	0x03d09000
 80048a8:	46000000 	.word	0x46000000
 80048ac:	4c742400 	.word	0x4c742400
 80048b0:	4a742400 	.word	0x4a742400
 80048b4:	4af42400 	.word	0x4af42400

080048b8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b089      	sub	sp, #36	@ 0x24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048c0:	4ba1      	ldr	r3, [pc, #644]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048ca:	4b9f      	ldr	r3, [pc, #636]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048ce:	0d1b      	lsrs	r3, r3, #20
 80048d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048d4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048d6:	4b9c      	ldr	r3, [pc, #624]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048e2:	4b99      	ldr	r3, [pc, #612]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	08db      	lsrs	r3, r3, #3
 80048e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 8111 	beq.w	8004b28 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	2b02      	cmp	r3, #2
 800490a:	f000 8083 	beq.w	8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b02      	cmp	r3, #2
 8004912:	f200 80a1 	bhi.w	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d003      	beq.n	8004924 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800491c:	69bb      	ldr	r3, [r7, #24]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d056      	beq.n	80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004922:	e099      	b.n	8004a58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004924:	4b88      	ldr	r3, [pc, #544]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d02d      	beq.n	800498c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004930:	4b85      	ldr	r3, [pc, #532]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	08db      	lsrs	r3, r3, #3
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	4a84      	ldr	r2, [pc, #528]	@ (8004b4c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800493c:	fa22 f303 	lsr.w	r3, r2, r3
 8004940:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	ee07 3a90 	vmov	s15, r3
 8004948:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	ee07 3a90 	vmov	s15, r3
 8004952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004956:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800495a:	4b7b      	ldr	r3, [pc, #492]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800496a:	ed97 6a03 	vldr	s12, [r7, #12]
 800496e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004972:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004976:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800497a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800497e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004982:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004986:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800498a:	e087      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b54 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800499a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800499e:	4b6a      	ldr	r3, [pc, #424]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80049b2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049ce:	e065      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049e2:	4b59      	ldr	r3, [pc, #356]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049f6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a12:	e043      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	ee07 3a90 	vmov	s15, r3
 8004a1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a26:	4b48      	ldr	r3, [pc, #288]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a56:	e021      	b.n	8004a9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b58 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a6a:	4b37      	ldr	r3, [pc, #220]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b50 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004a9c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	0a5b      	lsrs	r3, r3, #9
 8004aa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004aa6:	ee07 3a90 	vmov	s15, r3
 8004aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ab2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ab6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004aba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004abe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ac2:	ee17 2a90 	vmov	r2, s15
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004aca:	4b1f      	ldr	r3, [pc, #124]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	0c1b      	lsrs	r3, r3, #16
 8004ad0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004adc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ae0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ae4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ae8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004af0:	ee17 2a90 	vmov	r2, s15
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004af8:	4b13      	ldr	r3, [pc, #76]	@ (8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afc:	0e1b      	lsrs	r3, r3, #24
 8004afe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b02:	ee07 3a90 	vmov	s15, r3
 8004b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1e:	ee17 2a90 	vmov	r2, s15
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b26:	e008      	b.n	8004b3a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	609a      	str	r2, [r3, #8]
}
 8004b3a:	bf00      	nop
 8004b3c:	3724      	adds	r7, #36	@ 0x24
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	58024400 	.word	0x58024400
 8004b4c:	03d09000 	.word	0x03d09000
 8004b50:	46000000 	.word	0x46000000
 8004b54:	4c742400 	.word	0x4c742400
 8004b58:	4a742400 	.word	0x4a742400
 8004b5c:	4af42400 	.word	0x4af42400

08004b60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b6e:	4b53      	ldr	r3, [pc, #332]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b72:	f003 0303 	and.w	r3, r3, #3
 8004b76:	2b03      	cmp	r3, #3
 8004b78:	d101      	bne.n	8004b7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e099      	b.n	8004cb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b7e:	4b4f      	ldr	r3, [pc, #316]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	4a4e      	ldr	r2, [pc, #312]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004b84:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004b88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8a:	f7fc fa8f 	bl	80010ac <HAL_GetTick>
 8004b8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004b90:	e008      	b.n	8004ba4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b92:	f7fc fa8b 	bl	80010ac <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e086      	b.n	8004cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ba4:	4b45      	ldr	r3, [pc, #276]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1f0      	bne.n	8004b92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bb0:	4b42      	ldr	r3, [pc, #264]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	031b      	lsls	r3, r3, #12
 8004bbe:	493f      	ldr	r1, [pc, #252]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	025b      	lsls	r3, r3, #9
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	431a      	orrs	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	3b01      	subs	r3, #1
 8004be0:	041b      	lsls	r3, r3, #16
 8004be2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004be6:	431a      	orrs	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	691b      	ldr	r3, [r3, #16]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	061b      	lsls	r3, r3, #24
 8004bf0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bf4:	4931      	ldr	r1, [pc, #196]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004bfa:	4b30      	ldr	r3, [pc, #192]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bfe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	492d      	ldr	r1, [pc, #180]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c0c:	4b2b      	ldr	r3, [pc, #172]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c10:	f023 0220 	bic.w	r2, r3, #32
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699b      	ldr	r3, [r3, #24]
 8004c18:	4928      	ldr	r1, [pc, #160]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c1e:	4b27      	ldr	r3, [pc, #156]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a26      	ldr	r2, [pc, #152]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c24:	f023 0310 	bic.w	r3, r3, #16
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c2e:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <RCCEx_PLL2_Config+0x160>)
 8004c30:	4013      	ands	r3, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	69d2      	ldr	r2, [r2, #28]
 8004c36:	00d2      	lsls	r2, r2, #3
 8004c38:	4920      	ldr	r1, [pc, #128]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c42:	4a1e      	ldr	r2, [pc, #120]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c44:	f043 0310 	orr.w	r3, r3, #16
 8004c48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c50:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c54:	4a19      	ldr	r2, [pc, #100]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c56:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c5a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c5c:	e00f      	b.n	8004c7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b01      	cmp	r3, #1
 8004c62:	d106      	bne.n	8004c72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c64:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c68:	4a14      	ldr	r2, [pc, #80]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c6a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c6e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c70:	e005      	b.n	8004c7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c72:	4b12      	ldr	r3, [pc, #72]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c76:	4a11      	ldr	r2, [pc, #68]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a0e      	ldr	r2, [pc, #56]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004c84:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004c88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8a:	f7fc fa0f 	bl	80010ac <HAL_GetTick>
 8004c8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004c90:	e008      	b.n	8004ca4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c92:	f7fc fa0b 	bl	80010ac <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e006      	b.n	8004cb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ca4:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	58024400 	.word	0x58024400
 8004cc0:	ffff0007 	.word	0xffff0007

08004cc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d101      	bne.n	8004ce2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e099      	b.n	8004e16 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004ce8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cee:	f7fc f9dd 	bl	80010ac <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004cf6:	f7fc f9d9 	bl	80010ac <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e086      	b.n	8004e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d14:	4b42      	ldr	r3, [pc, #264]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	051b      	lsls	r3, r3, #20
 8004d22:	493f      	ldr	r1, [pc, #252]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d58:	4931      	ldr	r1, [pc, #196]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d5e:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	492d      	ldr	r1, [pc, #180]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d70:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4928      	ldr	r1, [pc, #160]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d82:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <RCCEx_PLL3_Config+0x160>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	69d2      	ldr	r2, [r2, #28]
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	4920      	ldr	r1, [pc, #128]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004da2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004dba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dc0:	e00f      	b.n	8004de2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004dce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd4:	e005      	b.n	8004de2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a11      	ldr	r2, [pc, #68]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004de2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fc f95d 	bl	80010ac <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004df6:	f7fc f959 	bl	80010ac <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	58024400 	.word	0x58024400
 8004e24:	ffff0007 	.word	0xffff0007

08004e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d101      	bne.n	8004e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e042      	b.n	8004ec0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fb fedf 	bl	8000c10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2224      	movs	r2, #36	@ 0x24
 8004e56:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0201 	bic.w	r2, r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d002      	beq.n	8004e78 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f000 fd90 	bl	8005998 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 f825 	bl	8004ec8 <UART_SetConfig>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d101      	bne.n	8004e88 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e01b      	b.n	8004ec0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689a      	ldr	r2, [r3, #8]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ea6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0201 	orr.w	r2, r2, #1
 8004eb6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 fe0f 	bl	8005adc <UART_CheckIdleState>
 8004ebe:	4603      	mov	r3, r0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b092      	sub	sp, #72	@ 0x48
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ed8:	697b      	ldr	r3, [r7, #20]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4bbe      	ldr	r3, [pc, #760]	@ (80051f0 <UART_SetConfig+0x328>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f00:	430b      	orrs	r3, r1
 8004f02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	68da      	ldr	r2, [r3, #12]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	699b      	ldr	r3, [r3, #24]
 8004f1e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4ab3      	ldr	r2, [pc, #716]	@ (80051f4 <UART_SetConfig+0x32c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f30:	4313      	orrs	r3, r2
 8004f32:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	689a      	ldr	r2, [r3, #8]
 8004f3a:	4baf      	ldr	r3, [pc, #700]	@ (80051f8 <UART_SetConfig+0x330>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	6812      	ldr	r2, [r2, #0]
 8004f42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f44:	430b      	orrs	r3, r1
 8004f46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	f023 010f 	bic.w	r1, r3, #15
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4aa6      	ldr	r2, [pc, #664]	@ (80051fc <UART_SetConfig+0x334>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d177      	bne.n	8005058 <UART_SetConfig+0x190>
 8004f68:	4ba5      	ldr	r3, [pc, #660]	@ (8005200 <UART_SetConfig+0x338>)
 8004f6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f70:	2b28      	cmp	r3, #40	@ 0x28
 8004f72:	d86d      	bhi.n	8005050 <UART_SetConfig+0x188>
 8004f74:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <UART_SetConfig+0xb4>)
 8004f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7a:	bf00      	nop
 8004f7c:	08005021 	.word	0x08005021
 8004f80:	08005051 	.word	0x08005051
 8004f84:	08005051 	.word	0x08005051
 8004f88:	08005051 	.word	0x08005051
 8004f8c:	08005051 	.word	0x08005051
 8004f90:	08005051 	.word	0x08005051
 8004f94:	08005051 	.word	0x08005051
 8004f98:	08005051 	.word	0x08005051
 8004f9c:	08005029 	.word	0x08005029
 8004fa0:	08005051 	.word	0x08005051
 8004fa4:	08005051 	.word	0x08005051
 8004fa8:	08005051 	.word	0x08005051
 8004fac:	08005051 	.word	0x08005051
 8004fb0:	08005051 	.word	0x08005051
 8004fb4:	08005051 	.word	0x08005051
 8004fb8:	08005051 	.word	0x08005051
 8004fbc:	08005031 	.word	0x08005031
 8004fc0:	08005051 	.word	0x08005051
 8004fc4:	08005051 	.word	0x08005051
 8004fc8:	08005051 	.word	0x08005051
 8004fcc:	08005051 	.word	0x08005051
 8004fd0:	08005051 	.word	0x08005051
 8004fd4:	08005051 	.word	0x08005051
 8004fd8:	08005051 	.word	0x08005051
 8004fdc:	08005039 	.word	0x08005039
 8004fe0:	08005051 	.word	0x08005051
 8004fe4:	08005051 	.word	0x08005051
 8004fe8:	08005051 	.word	0x08005051
 8004fec:	08005051 	.word	0x08005051
 8004ff0:	08005051 	.word	0x08005051
 8004ff4:	08005051 	.word	0x08005051
 8004ff8:	08005051 	.word	0x08005051
 8004ffc:	08005041 	.word	0x08005041
 8005000:	08005051 	.word	0x08005051
 8005004:	08005051 	.word	0x08005051
 8005008:	08005051 	.word	0x08005051
 800500c:	08005051 	.word	0x08005051
 8005010:	08005051 	.word	0x08005051
 8005014:	08005051 	.word	0x08005051
 8005018:	08005051 	.word	0x08005051
 800501c:	08005049 	.word	0x08005049
 8005020:	2301      	movs	r3, #1
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e222      	b.n	800546e <UART_SetConfig+0x5a6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e21e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e21a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800503e:	e216      	b.n	800546e <UART_SetConfig+0x5a6>
 8005040:	2320      	movs	r3, #32
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005046:	e212      	b.n	800546e <UART_SetConfig+0x5a6>
 8005048:	2340      	movs	r3, #64	@ 0x40
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800504e:	e20e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005050:	2380      	movs	r3, #128	@ 0x80
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005056:	e20a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a69      	ldr	r2, [pc, #420]	@ (8005204 <UART_SetConfig+0x33c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d130      	bne.n	80050c4 <UART_SetConfig+0x1fc>
 8005062:	4b67      	ldr	r3, [pc, #412]	@ (8005200 <UART_SetConfig+0x338>)
 8005064:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005066:	f003 0307 	and.w	r3, r3, #7
 800506a:	2b05      	cmp	r3, #5
 800506c:	d826      	bhi.n	80050bc <UART_SetConfig+0x1f4>
 800506e:	a201      	add	r2, pc, #4	@ (adr r2, 8005074 <UART_SetConfig+0x1ac>)
 8005070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005074:	0800508d 	.word	0x0800508d
 8005078:	08005095 	.word	0x08005095
 800507c:	0800509d 	.word	0x0800509d
 8005080:	080050a5 	.word	0x080050a5
 8005084:	080050ad 	.word	0x080050ad
 8005088:	080050b5 	.word	0x080050b5
 800508c:	2300      	movs	r3, #0
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e1ec      	b.n	800546e <UART_SetConfig+0x5a6>
 8005094:	2304      	movs	r3, #4
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e1e8      	b.n	800546e <UART_SetConfig+0x5a6>
 800509c:	2308      	movs	r3, #8
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e1e4      	b.n	800546e <UART_SetConfig+0x5a6>
 80050a4:	2310      	movs	r3, #16
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050aa:	e1e0      	b.n	800546e <UART_SetConfig+0x5a6>
 80050ac:	2320      	movs	r3, #32
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050b2:	e1dc      	b.n	800546e <UART_SetConfig+0x5a6>
 80050b4:	2340      	movs	r3, #64	@ 0x40
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ba:	e1d8      	b.n	800546e <UART_SetConfig+0x5a6>
 80050bc:	2380      	movs	r3, #128	@ 0x80
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050c2:	e1d4      	b.n	800546e <UART_SetConfig+0x5a6>
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a4f      	ldr	r2, [pc, #316]	@ (8005208 <UART_SetConfig+0x340>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d130      	bne.n	8005130 <UART_SetConfig+0x268>
 80050ce:	4b4c      	ldr	r3, [pc, #304]	@ (8005200 <UART_SetConfig+0x338>)
 80050d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	2b05      	cmp	r3, #5
 80050d8:	d826      	bhi.n	8005128 <UART_SetConfig+0x260>
 80050da:	a201      	add	r2, pc, #4	@ (adr r2, 80050e0 <UART_SetConfig+0x218>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	080050f9 	.word	0x080050f9
 80050e4:	08005101 	.word	0x08005101
 80050e8:	08005109 	.word	0x08005109
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005119 	.word	0x08005119
 80050f4:	08005121 	.word	0x08005121
 80050f8:	2300      	movs	r3, #0
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e1b6      	b.n	800546e <UART_SetConfig+0x5a6>
 8005100:	2304      	movs	r3, #4
 8005102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005106:	e1b2      	b.n	800546e <UART_SetConfig+0x5a6>
 8005108:	2308      	movs	r3, #8
 800510a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800510e:	e1ae      	b.n	800546e <UART_SetConfig+0x5a6>
 8005110:	2310      	movs	r3, #16
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005116:	e1aa      	b.n	800546e <UART_SetConfig+0x5a6>
 8005118:	2320      	movs	r3, #32
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800511e:	e1a6      	b.n	800546e <UART_SetConfig+0x5a6>
 8005120:	2340      	movs	r3, #64	@ 0x40
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005126:	e1a2      	b.n	800546e <UART_SetConfig+0x5a6>
 8005128:	2380      	movs	r3, #128	@ 0x80
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800512e:	e19e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a35      	ldr	r2, [pc, #212]	@ (800520c <UART_SetConfig+0x344>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d130      	bne.n	800519c <UART_SetConfig+0x2d4>
 800513a:	4b31      	ldr	r3, [pc, #196]	@ (8005200 <UART_SetConfig+0x338>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	2b05      	cmp	r3, #5
 8005144:	d826      	bhi.n	8005194 <UART_SetConfig+0x2cc>
 8005146:	a201      	add	r2, pc, #4	@ (adr r2, 800514c <UART_SetConfig+0x284>)
 8005148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514c:	08005165 	.word	0x08005165
 8005150:	0800516d 	.word	0x0800516d
 8005154:	08005175 	.word	0x08005175
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	2300      	movs	r3, #0
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e180      	b.n	800546e <UART_SetConfig+0x5a6>
 800516c:	2304      	movs	r3, #4
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005172:	e17c      	b.n	800546e <UART_SetConfig+0x5a6>
 8005174:	2308      	movs	r3, #8
 8005176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517a:	e178      	b.n	800546e <UART_SetConfig+0x5a6>
 800517c:	2310      	movs	r3, #16
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005182:	e174      	b.n	800546e <UART_SetConfig+0x5a6>
 8005184:	2320      	movs	r3, #32
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518a:	e170      	b.n	800546e <UART_SetConfig+0x5a6>
 800518c:	2340      	movs	r3, #64	@ 0x40
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005192:	e16c      	b.n	800546e <UART_SetConfig+0x5a6>
 8005194:	2380      	movs	r3, #128	@ 0x80
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519a:	e168      	b.n	800546e <UART_SetConfig+0x5a6>
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1b      	ldr	r2, [pc, #108]	@ (8005210 <UART_SetConfig+0x348>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d142      	bne.n	800522c <UART_SetConfig+0x364>
 80051a6:	4b16      	ldr	r3, [pc, #88]	@ (8005200 <UART_SetConfig+0x338>)
 80051a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051aa:	f003 0307 	and.w	r3, r3, #7
 80051ae:	2b05      	cmp	r3, #5
 80051b0:	d838      	bhi.n	8005224 <UART_SetConfig+0x35c>
 80051b2:	a201      	add	r2, pc, #4	@ (adr r2, 80051b8 <UART_SetConfig+0x2f0>)
 80051b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051b8:	080051d1 	.word	0x080051d1
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	080051e1 	.word	0x080051e1
 80051c4:	080051e9 	.word	0x080051e9
 80051c8:	08005215 	.word	0x08005215
 80051cc:	0800521d 	.word	0x0800521d
 80051d0:	2300      	movs	r3, #0
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e14a      	b.n	800546e <UART_SetConfig+0x5a6>
 80051d8:	2304      	movs	r3, #4
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051de:	e146      	b.n	800546e <UART_SetConfig+0x5a6>
 80051e0:	2308      	movs	r3, #8
 80051e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e6:	e142      	b.n	800546e <UART_SetConfig+0x5a6>
 80051e8:	2310      	movs	r3, #16
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ee:	e13e      	b.n	800546e <UART_SetConfig+0x5a6>
 80051f0:	cfff69f3 	.word	0xcfff69f3
 80051f4:	58000c00 	.word	0x58000c00
 80051f8:	11fff4ff 	.word	0x11fff4ff
 80051fc:	40011000 	.word	0x40011000
 8005200:	58024400 	.word	0x58024400
 8005204:	40004400 	.word	0x40004400
 8005208:	40004800 	.word	0x40004800
 800520c:	40004c00 	.word	0x40004c00
 8005210:	40005000 	.word	0x40005000
 8005214:	2320      	movs	r3, #32
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e128      	b.n	800546e <UART_SetConfig+0x5a6>
 800521c:	2340      	movs	r3, #64	@ 0x40
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e124      	b.n	800546e <UART_SetConfig+0x5a6>
 8005224:	2380      	movs	r3, #128	@ 0x80
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e120      	b.n	800546e <UART_SetConfig+0x5a6>
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4acb      	ldr	r2, [pc, #812]	@ (8005560 <UART_SetConfig+0x698>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d176      	bne.n	8005324 <UART_SetConfig+0x45c>
 8005236:	4bcb      	ldr	r3, [pc, #812]	@ (8005564 <UART_SetConfig+0x69c>)
 8005238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800523a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800523e:	2b28      	cmp	r3, #40	@ 0x28
 8005240:	d86c      	bhi.n	800531c <UART_SetConfig+0x454>
 8005242:	a201      	add	r2, pc, #4	@ (adr r2, 8005248 <UART_SetConfig+0x380>)
 8005244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005248:	080052ed 	.word	0x080052ed
 800524c:	0800531d 	.word	0x0800531d
 8005250:	0800531d 	.word	0x0800531d
 8005254:	0800531d 	.word	0x0800531d
 8005258:	0800531d 	.word	0x0800531d
 800525c:	0800531d 	.word	0x0800531d
 8005260:	0800531d 	.word	0x0800531d
 8005264:	0800531d 	.word	0x0800531d
 8005268:	080052f5 	.word	0x080052f5
 800526c:	0800531d 	.word	0x0800531d
 8005270:	0800531d 	.word	0x0800531d
 8005274:	0800531d 	.word	0x0800531d
 8005278:	0800531d 	.word	0x0800531d
 800527c:	0800531d 	.word	0x0800531d
 8005280:	0800531d 	.word	0x0800531d
 8005284:	0800531d 	.word	0x0800531d
 8005288:	080052fd 	.word	0x080052fd
 800528c:	0800531d 	.word	0x0800531d
 8005290:	0800531d 	.word	0x0800531d
 8005294:	0800531d 	.word	0x0800531d
 8005298:	0800531d 	.word	0x0800531d
 800529c:	0800531d 	.word	0x0800531d
 80052a0:	0800531d 	.word	0x0800531d
 80052a4:	0800531d 	.word	0x0800531d
 80052a8:	08005305 	.word	0x08005305
 80052ac:	0800531d 	.word	0x0800531d
 80052b0:	0800531d 	.word	0x0800531d
 80052b4:	0800531d 	.word	0x0800531d
 80052b8:	0800531d 	.word	0x0800531d
 80052bc:	0800531d 	.word	0x0800531d
 80052c0:	0800531d 	.word	0x0800531d
 80052c4:	0800531d 	.word	0x0800531d
 80052c8:	0800530d 	.word	0x0800530d
 80052cc:	0800531d 	.word	0x0800531d
 80052d0:	0800531d 	.word	0x0800531d
 80052d4:	0800531d 	.word	0x0800531d
 80052d8:	0800531d 	.word	0x0800531d
 80052dc:	0800531d 	.word	0x0800531d
 80052e0:	0800531d 	.word	0x0800531d
 80052e4:	0800531d 	.word	0x0800531d
 80052e8:	08005315 	.word	0x08005315
 80052ec:	2301      	movs	r3, #1
 80052ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052f2:	e0bc      	b.n	800546e <UART_SetConfig+0x5a6>
 80052f4:	2304      	movs	r3, #4
 80052f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052fa:	e0b8      	b.n	800546e <UART_SetConfig+0x5a6>
 80052fc:	2308      	movs	r3, #8
 80052fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005302:	e0b4      	b.n	800546e <UART_SetConfig+0x5a6>
 8005304:	2310      	movs	r3, #16
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800530a:	e0b0      	b.n	800546e <UART_SetConfig+0x5a6>
 800530c:	2320      	movs	r3, #32
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005312:	e0ac      	b.n	800546e <UART_SetConfig+0x5a6>
 8005314:	2340      	movs	r3, #64	@ 0x40
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800531a:	e0a8      	b.n	800546e <UART_SetConfig+0x5a6>
 800531c:	2380      	movs	r3, #128	@ 0x80
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005322:	e0a4      	b.n	800546e <UART_SetConfig+0x5a6>
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a8f      	ldr	r2, [pc, #572]	@ (8005568 <UART_SetConfig+0x6a0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d130      	bne.n	8005390 <UART_SetConfig+0x4c8>
 800532e:	4b8d      	ldr	r3, [pc, #564]	@ (8005564 <UART_SetConfig+0x69c>)
 8005330:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b05      	cmp	r3, #5
 8005338:	d826      	bhi.n	8005388 <UART_SetConfig+0x4c0>
 800533a:	a201      	add	r2, pc, #4	@ (adr r2, 8005340 <UART_SetConfig+0x478>)
 800533c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005340:	08005359 	.word	0x08005359
 8005344:	08005361 	.word	0x08005361
 8005348:	08005369 	.word	0x08005369
 800534c:	08005371 	.word	0x08005371
 8005350:	08005379 	.word	0x08005379
 8005354:	08005381 	.word	0x08005381
 8005358:	2300      	movs	r3, #0
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e086      	b.n	800546e <UART_SetConfig+0x5a6>
 8005360:	2304      	movs	r3, #4
 8005362:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005366:	e082      	b.n	800546e <UART_SetConfig+0x5a6>
 8005368:	2308      	movs	r3, #8
 800536a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536e:	e07e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005370:	2310      	movs	r3, #16
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005376:	e07a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005378:	2320      	movs	r3, #32
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537e:	e076      	b.n	800546e <UART_SetConfig+0x5a6>
 8005380:	2340      	movs	r3, #64	@ 0x40
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005386:	e072      	b.n	800546e <UART_SetConfig+0x5a6>
 8005388:	2380      	movs	r3, #128	@ 0x80
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538e:	e06e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a75      	ldr	r2, [pc, #468]	@ (800556c <UART_SetConfig+0x6a4>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d130      	bne.n	80053fc <UART_SetConfig+0x534>
 800539a:	4b72      	ldr	r3, [pc, #456]	@ (8005564 <UART_SetConfig+0x69c>)
 800539c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	2b05      	cmp	r3, #5
 80053a4:	d826      	bhi.n	80053f4 <UART_SetConfig+0x52c>
 80053a6:	a201      	add	r2, pc, #4	@ (adr r2, 80053ac <UART_SetConfig+0x4e4>)
 80053a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ac:	080053c5 	.word	0x080053c5
 80053b0:	080053cd 	.word	0x080053cd
 80053b4:	080053d5 	.word	0x080053d5
 80053b8:	080053dd 	.word	0x080053dd
 80053bc:	080053e5 	.word	0x080053e5
 80053c0:	080053ed 	.word	0x080053ed
 80053c4:	2300      	movs	r3, #0
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e050      	b.n	800546e <UART_SetConfig+0x5a6>
 80053cc:	2304      	movs	r3, #4
 80053ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d2:	e04c      	b.n	800546e <UART_SetConfig+0x5a6>
 80053d4:	2308      	movs	r3, #8
 80053d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053da:	e048      	b.n	800546e <UART_SetConfig+0x5a6>
 80053dc:	2310      	movs	r3, #16
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e2:	e044      	b.n	800546e <UART_SetConfig+0x5a6>
 80053e4:	2320      	movs	r3, #32
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ea:	e040      	b.n	800546e <UART_SetConfig+0x5a6>
 80053ec:	2340      	movs	r3, #64	@ 0x40
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f2:	e03c      	b.n	800546e <UART_SetConfig+0x5a6>
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fa:	e038      	b.n	800546e <UART_SetConfig+0x5a6>
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a5b      	ldr	r2, [pc, #364]	@ (8005570 <UART_SetConfig+0x6a8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d130      	bne.n	8005468 <UART_SetConfig+0x5a0>
 8005406:	4b57      	ldr	r3, [pc, #348]	@ (8005564 <UART_SetConfig+0x69c>)
 8005408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800540a:	f003 0307 	and.w	r3, r3, #7
 800540e:	2b05      	cmp	r3, #5
 8005410:	d826      	bhi.n	8005460 <UART_SetConfig+0x598>
 8005412:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <UART_SetConfig+0x550>)
 8005414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005418:	08005431 	.word	0x08005431
 800541c:	08005439 	.word	0x08005439
 8005420:	08005441 	.word	0x08005441
 8005424:	08005449 	.word	0x08005449
 8005428:	08005451 	.word	0x08005451
 800542c:	08005459 	.word	0x08005459
 8005430:	2302      	movs	r3, #2
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e01a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800543e:	e016      	b.n	800546e <UART_SetConfig+0x5a6>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005446:	e012      	b.n	800546e <UART_SetConfig+0x5a6>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544e:	e00e      	b.n	800546e <UART_SetConfig+0x5a6>
 8005450:	2320      	movs	r3, #32
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005456:	e00a      	b.n	800546e <UART_SetConfig+0x5a6>
 8005458:	2340      	movs	r3, #64	@ 0x40
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545e:	e006      	b.n	800546e <UART_SetConfig+0x5a6>
 8005460:	2380      	movs	r3, #128	@ 0x80
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005466:	e002      	b.n	800546e <UART_SetConfig+0x5a6>
 8005468:	2380      	movs	r3, #128	@ 0x80
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a3f      	ldr	r2, [pc, #252]	@ (8005570 <UART_SetConfig+0x6a8>)
 8005474:	4293      	cmp	r3, r2
 8005476:	f040 80f8 	bne.w	800566a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800547a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800547e:	2b20      	cmp	r3, #32
 8005480:	dc46      	bgt.n	8005510 <UART_SetConfig+0x648>
 8005482:	2b02      	cmp	r3, #2
 8005484:	f2c0 8082 	blt.w	800558c <UART_SetConfig+0x6c4>
 8005488:	3b02      	subs	r3, #2
 800548a:	2b1e      	cmp	r3, #30
 800548c:	d87e      	bhi.n	800558c <UART_SetConfig+0x6c4>
 800548e:	a201      	add	r2, pc, #4	@ (adr r2, 8005494 <UART_SetConfig+0x5cc>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	08005517 	.word	0x08005517
 8005498:	0800558d 	.word	0x0800558d
 800549c:	0800551f 	.word	0x0800551f
 80054a0:	0800558d 	.word	0x0800558d
 80054a4:	0800558d 	.word	0x0800558d
 80054a8:	0800558d 	.word	0x0800558d
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	0800558d 	.word	0x0800558d
 80054b4:	0800558d 	.word	0x0800558d
 80054b8:	0800558d 	.word	0x0800558d
 80054bc:	0800558d 	.word	0x0800558d
 80054c0:	0800558d 	.word	0x0800558d
 80054c4:	0800558d 	.word	0x0800558d
 80054c8:	0800558d 	.word	0x0800558d
 80054cc:	0800553f 	.word	0x0800553f
 80054d0:	0800558d 	.word	0x0800558d
 80054d4:	0800558d 	.word	0x0800558d
 80054d8:	0800558d 	.word	0x0800558d
 80054dc:	0800558d 	.word	0x0800558d
 80054e0:	0800558d 	.word	0x0800558d
 80054e4:	0800558d 	.word	0x0800558d
 80054e8:	0800558d 	.word	0x0800558d
 80054ec:	0800558d 	.word	0x0800558d
 80054f0:	0800558d 	.word	0x0800558d
 80054f4:	0800558d 	.word	0x0800558d
 80054f8:	0800558d 	.word	0x0800558d
 80054fc:	0800558d 	.word	0x0800558d
 8005500:	0800558d 	.word	0x0800558d
 8005504:	0800558d 	.word	0x0800558d
 8005508:	0800558d 	.word	0x0800558d
 800550c:	0800557f 	.word	0x0800557f
 8005510:	2b40      	cmp	r3, #64	@ 0x40
 8005512:	d037      	beq.n	8005584 <UART_SetConfig+0x6bc>
 8005514:	e03a      	b.n	800558c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005516:	f7ff f865 	bl	80045e4 <HAL_RCCEx_GetD3PCLK1Freq>
 800551a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800551c:	e03c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800551e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005522:	4618      	mov	r0, r3
 8005524:	f7ff f874 	bl	8004610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800552c:	e034      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800552e:	f107 0318 	add.w	r3, r7, #24
 8005532:	4618      	mov	r0, r3
 8005534:	f7ff f9c0 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800553c:	e02c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800553e:	4b09      	ldr	r3, [pc, #36]	@ (8005564 <UART_SetConfig+0x69c>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 0320 	and.w	r3, r3, #32
 8005546:	2b00      	cmp	r3, #0
 8005548:	d016      	beq.n	8005578 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800554a:	4b06      	ldr	r3, [pc, #24]	@ (8005564 <UART_SetConfig+0x69c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	08db      	lsrs	r3, r3, #3
 8005550:	f003 0303 	and.w	r3, r3, #3
 8005554:	4a07      	ldr	r2, [pc, #28]	@ (8005574 <UART_SetConfig+0x6ac>)
 8005556:	fa22 f303 	lsr.w	r3, r2, r3
 800555a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800555c:	e01c      	b.n	8005598 <UART_SetConfig+0x6d0>
 800555e:	bf00      	nop
 8005560:	40011400 	.word	0x40011400
 8005564:	58024400 	.word	0x58024400
 8005568:	40007800 	.word	0x40007800
 800556c:	40007c00 	.word	0x40007c00
 8005570:	58000c00 	.word	0x58000c00
 8005574:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005578:	4b9d      	ldr	r3, [pc, #628]	@ (80057f0 <UART_SetConfig+0x928>)
 800557a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800557c:	e00c      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800557e:	4b9d      	ldr	r3, [pc, #628]	@ (80057f4 <UART_SetConfig+0x92c>)
 8005580:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005582:	e009      	b.n	8005598 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005584:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800558a:	e005      	b.n	8005598 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005596:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 81de 	beq.w	800595c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	4a94      	ldr	r2, [pc, #592]	@ (80057f8 <UART_SetConfig+0x930>)
 80055a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055aa:	461a      	mov	r2, r3
 80055ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80055b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	685a      	ldr	r2, [r3, #4]
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c0:	429a      	cmp	r2, r3
 80055c2:	d305      	bcc.n	80055d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d903      	bls.n	80055d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80055d6:	e1c1      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055da:	2200      	movs	r2, #0
 80055dc:	60bb      	str	r3, [r7, #8]
 80055de:	60fa      	str	r2, [r7, #12]
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e4:	4a84      	ldr	r2, [pc, #528]	@ (80057f8 <UART_SetConfig+0x930>)
 80055e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055ea:	b29b      	uxth	r3, r3
 80055ec:	2200      	movs	r2, #0
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055fa:	f7fa fe6d 	bl	80002d8 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4610      	mov	r0, r2
 8005604:	4619      	mov	r1, r3
 8005606:	f04f 0200 	mov.w	r2, #0
 800560a:	f04f 0300 	mov.w	r3, #0
 800560e:	020b      	lsls	r3, r1, #8
 8005610:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005614:	0202      	lsls	r2, r0, #8
 8005616:	6979      	ldr	r1, [r7, #20]
 8005618:	6849      	ldr	r1, [r1, #4]
 800561a:	0849      	lsrs	r1, r1, #1
 800561c:	2000      	movs	r0, #0
 800561e:	460c      	mov	r4, r1
 8005620:	4605      	mov	r5, r0
 8005622:	eb12 0804 	adds.w	r8, r2, r4
 8005626:	eb43 0905 	adc.w	r9, r3, r5
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	469a      	mov	sl, r3
 8005632:	4693      	mov	fp, r2
 8005634:	4652      	mov	r2, sl
 8005636:	465b      	mov	r3, fp
 8005638:	4640      	mov	r0, r8
 800563a:	4649      	mov	r1, r9
 800563c:	f7fa fe4c 	bl	80002d8 <__aeabi_uldivmod>
 8005640:	4602      	mov	r2, r0
 8005642:	460b      	mov	r3, r1
 8005644:	4613      	mov	r3, r2
 8005646:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800564e:	d308      	bcc.n	8005662 <UART_SetConfig+0x79a>
 8005650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005652:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005656:	d204      	bcs.n	8005662 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800565e:	60da      	str	r2, [r3, #12]
 8005660:	e17c      	b.n	800595c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005662:	2301      	movs	r3, #1
 8005664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005668:	e178      	b.n	800595c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005672:	f040 80c5 	bne.w	8005800 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005676:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800567a:	2b20      	cmp	r3, #32
 800567c:	dc48      	bgt.n	8005710 <UART_SetConfig+0x848>
 800567e:	2b00      	cmp	r3, #0
 8005680:	db7b      	blt.n	800577a <UART_SetConfig+0x8b2>
 8005682:	2b20      	cmp	r3, #32
 8005684:	d879      	bhi.n	800577a <UART_SetConfig+0x8b2>
 8005686:	a201      	add	r2, pc, #4	@ (adr r2, 800568c <UART_SetConfig+0x7c4>)
 8005688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568c:	08005717 	.word	0x08005717
 8005690:	0800571f 	.word	0x0800571f
 8005694:	0800577b 	.word	0x0800577b
 8005698:	0800577b 	.word	0x0800577b
 800569c:	08005727 	.word	0x08005727
 80056a0:	0800577b 	.word	0x0800577b
 80056a4:	0800577b 	.word	0x0800577b
 80056a8:	0800577b 	.word	0x0800577b
 80056ac:	08005737 	.word	0x08005737
 80056b0:	0800577b 	.word	0x0800577b
 80056b4:	0800577b 	.word	0x0800577b
 80056b8:	0800577b 	.word	0x0800577b
 80056bc:	0800577b 	.word	0x0800577b
 80056c0:	0800577b 	.word	0x0800577b
 80056c4:	0800577b 	.word	0x0800577b
 80056c8:	0800577b 	.word	0x0800577b
 80056cc:	08005747 	.word	0x08005747
 80056d0:	0800577b 	.word	0x0800577b
 80056d4:	0800577b 	.word	0x0800577b
 80056d8:	0800577b 	.word	0x0800577b
 80056dc:	0800577b 	.word	0x0800577b
 80056e0:	0800577b 	.word	0x0800577b
 80056e4:	0800577b 	.word	0x0800577b
 80056e8:	0800577b 	.word	0x0800577b
 80056ec:	0800577b 	.word	0x0800577b
 80056f0:	0800577b 	.word	0x0800577b
 80056f4:	0800577b 	.word	0x0800577b
 80056f8:	0800577b 	.word	0x0800577b
 80056fc:	0800577b 	.word	0x0800577b
 8005700:	0800577b 	.word	0x0800577b
 8005704:	0800577b 	.word	0x0800577b
 8005708:	0800577b 	.word	0x0800577b
 800570c:	0800576d 	.word	0x0800576d
 8005710:	2b40      	cmp	r3, #64	@ 0x40
 8005712:	d02e      	beq.n	8005772 <UART_SetConfig+0x8aa>
 8005714:	e031      	b.n	800577a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005716:	f7fd fd2f 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 800571a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800571c:	e033      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800571e:	f7fd fd41 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 8005722:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005724:	e02f      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800572a:	4618      	mov	r0, r3
 800572c:	f7fe ff70 	bl	8004610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005734:	e027      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005736:	f107 0318 	add.w	r3, r7, #24
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff f8bc 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005744:	e01f      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005746:	4b2d      	ldr	r3, [pc, #180]	@ (80057fc <UART_SetConfig+0x934>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f003 0320 	and.w	r3, r3, #32
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005752:	4b2a      	ldr	r3, [pc, #168]	@ (80057fc <UART_SetConfig+0x934>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	08db      	lsrs	r3, r3, #3
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	4a24      	ldr	r2, [pc, #144]	@ (80057f0 <UART_SetConfig+0x928>)
 800575e:	fa22 f303 	lsr.w	r3, r2, r3
 8005762:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005764:	e00f      	b.n	8005786 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005766:	4b22      	ldr	r3, [pc, #136]	@ (80057f0 <UART_SetConfig+0x928>)
 8005768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800576a:	e00c      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800576c:	4b21      	ldr	r3, [pc, #132]	@ (80057f4 <UART_SetConfig+0x92c>)
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005770:	e009      	b.n	8005786 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005778:	e005      	b.n	8005786 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800577a:	2300      	movs	r3, #0
 800577c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005784:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80e7 	beq.w	800595c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005792:	4a19      	ldr	r2, [pc, #100]	@ (80057f8 <UART_SetConfig+0x930>)
 8005794:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005798:	461a      	mov	r2, r3
 800579a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579c:	fbb3 f3f2 	udiv	r3, r3, r2
 80057a0:	005a      	lsls	r2, r3, #1
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	085b      	lsrs	r3, r3, #1
 80057a8:	441a      	add	r2, r3
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d916      	bls.n	80057e8 <UART_SetConfig+0x920>
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c0:	d212      	bcs.n	80057e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	f023 030f 	bic.w	r3, r3, #15
 80057ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	f003 0307 	and.w	r3, r3, #7
 80057d6:	b29a      	uxth	r2, r3
 80057d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80057da:	4313      	orrs	r3, r2
 80057dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80057e4:	60da      	str	r2, [r3, #12]
 80057e6:	e0b9      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80057ee:	e0b5      	b.n	800595c <UART_SetConfig+0xa94>
 80057f0:	03d09000 	.word	0x03d09000
 80057f4:	003d0900 	.word	0x003d0900
 80057f8:	08006670 	.word	0x08006670
 80057fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005800:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005804:	2b20      	cmp	r3, #32
 8005806:	dc49      	bgt.n	800589c <UART_SetConfig+0x9d4>
 8005808:	2b00      	cmp	r3, #0
 800580a:	db7c      	blt.n	8005906 <UART_SetConfig+0xa3e>
 800580c:	2b20      	cmp	r3, #32
 800580e:	d87a      	bhi.n	8005906 <UART_SetConfig+0xa3e>
 8005810:	a201      	add	r2, pc, #4	@ (adr r2, 8005818 <UART_SetConfig+0x950>)
 8005812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005816:	bf00      	nop
 8005818:	080058a3 	.word	0x080058a3
 800581c:	080058ab 	.word	0x080058ab
 8005820:	08005907 	.word	0x08005907
 8005824:	08005907 	.word	0x08005907
 8005828:	080058b3 	.word	0x080058b3
 800582c:	08005907 	.word	0x08005907
 8005830:	08005907 	.word	0x08005907
 8005834:	08005907 	.word	0x08005907
 8005838:	080058c3 	.word	0x080058c3
 800583c:	08005907 	.word	0x08005907
 8005840:	08005907 	.word	0x08005907
 8005844:	08005907 	.word	0x08005907
 8005848:	08005907 	.word	0x08005907
 800584c:	08005907 	.word	0x08005907
 8005850:	08005907 	.word	0x08005907
 8005854:	08005907 	.word	0x08005907
 8005858:	080058d3 	.word	0x080058d3
 800585c:	08005907 	.word	0x08005907
 8005860:	08005907 	.word	0x08005907
 8005864:	08005907 	.word	0x08005907
 8005868:	08005907 	.word	0x08005907
 800586c:	08005907 	.word	0x08005907
 8005870:	08005907 	.word	0x08005907
 8005874:	08005907 	.word	0x08005907
 8005878:	08005907 	.word	0x08005907
 800587c:	08005907 	.word	0x08005907
 8005880:	08005907 	.word	0x08005907
 8005884:	08005907 	.word	0x08005907
 8005888:	08005907 	.word	0x08005907
 800588c:	08005907 	.word	0x08005907
 8005890:	08005907 	.word	0x08005907
 8005894:	08005907 	.word	0x08005907
 8005898:	080058f9 	.word	0x080058f9
 800589c:	2b40      	cmp	r3, #64	@ 0x40
 800589e:	d02e      	beq.n	80058fe <UART_SetConfig+0xa36>
 80058a0:	e031      	b.n	8005906 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058a2:	f7fd fc69 	bl	8003178 <HAL_RCC_GetPCLK1Freq>
 80058a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058a8:	e033      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058aa:	f7fd fc7b 	bl	80031a4 <HAL_RCC_GetPCLK2Freq>
 80058ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058b0:	e02f      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe feaa 	bl	8004610 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c0:	e027      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058c2:	f107 0318 	add.w	r3, r7, #24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fff6 	bl	80048b8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058cc:	69fb      	ldr	r3, [r7, #28]
 80058ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058d0:	e01f      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005988 <UART_SetConfig+0xac0>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 0320 	and.w	r3, r3, #32
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d009      	beq.n	80058f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058de:	4b2a      	ldr	r3, [pc, #168]	@ (8005988 <UART_SetConfig+0xac0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	08db      	lsrs	r3, r3, #3
 80058e4:	f003 0303 	and.w	r3, r3, #3
 80058e8:	4a28      	ldr	r2, [pc, #160]	@ (800598c <UART_SetConfig+0xac4>)
 80058ea:	fa22 f303 	lsr.w	r3, r2, r3
 80058ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058f0:	e00f      	b.n	8005912 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80058f2:	4b26      	ldr	r3, [pc, #152]	@ (800598c <UART_SetConfig+0xac4>)
 80058f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058f6:	e00c      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058f8:	4b25      	ldr	r3, [pc, #148]	@ (8005990 <UART_SetConfig+0xac8>)
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058fc:	e009      	b.n	8005912 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005902:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005904:	e005      	b.n	8005912 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005910:	bf00      	nop
    }

    if (pclk != 0U)
 8005912:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005914:	2b00      	cmp	r3, #0
 8005916:	d021      	beq.n	800595c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <UART_SetConfig+0xacc>)
 800591e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005922:	461a      	mov	r2, r3
 8005924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005926:	fbb3 f2f2 	udiv	r2, r3, r2
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	085b      	lsrs	r3, r3, #1
 8005930:	441a      	add	r2, r3
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	fbb2 f3f3 	udiv	r3, r2, r3
 800593a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	2b0f      	cmp	r3, #15
 8005940:	d909      	bls.n	8005956 <UART_SetConfig+0xa8e>
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005948:	d205      	bcs.n	8005956 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	b29a      	uxth	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e002      	b.n	800595c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2201      	movs	r2, #1
 8005960:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	2201      	movs	r2, #1
 8005968:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	2200      	movs	r2, #0
 8005970:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	2200      	movs	r2, #0
 8005976:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005978:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800597c:	4618      	mov	r0, r3
 800597e:	3748      	adds	r7, #72	@ 0x48
 8005980:	46bd      	mov	sp, r7
 8005982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005986:	bf00      	nop
 8005988:	58024400 	.word	0x58024400
 800598c:	03d09000 	.word	0x03d09000
 8005990:	003d0900 	.word	0x003d0900
 8005994:	08006670 	.word	0x08006670

08005998 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00a      	beq.n	80059c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00a      	beq.n	80059e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e8:	f003 0302 	and.w	r3, r3, #2
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00a      	beq.n	8005a06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	430a      	orrs	r2, r1
 8005a48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	430a      	orrs	r2, r1
 8005a6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01a      	beq.n	8005aae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a96:	d10a      	bne.n	8005aae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	605a      	str	r2, [r3, #4]
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b098      	sub	sp, #96	@ 0x60
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aec:	f7fb fade 	bl	80010ac <HAL_GetTick>
 8005af0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0308 	and.w	r3, r3, #8
 8005afc:	2b08      	cmp	r3, #8
 8005afe:	d12f      	bne.n	8005b60 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b00:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b04:	9300      	str	r3, [sp, #0]
 8005b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f88e 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d022      	beq.n	8005b60 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b2e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b3a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b3e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	e063      	b.n	8005c28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	2b04      	cmp	r3, #4
 8005b6c:	d149      	bne.n	8005c02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b6e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b76:	2200      	movs	r2, #0
 8005b78:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f857 	bl	8005c30 <UART_WaitOnFlagUntilTimeout>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d03c      	beq.n	8005c02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	623b      	str	r3, [r7, #32]
   return(result);
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ba6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e6      	bne.n	8005b88 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	3308      	adds	r3, #8
 8005bc0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	e853 3f00 	ldrex	r3, [r3]
 8005bc8:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f023 0301 	bic.w	r3, r3, #1
 8005bd0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bda:	61fa      	str	r2, [r7, #28]
 8005bdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	69fa      	ldr	r2, [r7, #28]
 8005be2:	e841 2300 	strex	r3, r2, [r1]
 8005be6:	617b      	str	r3, [r7, #20]
   return(result);
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d1e5      	bne.n	8005bba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2220      	movs	r2, #32
 8005bf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e012      	b.n	8005c28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2220      	movs	r2, #32
 8005c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c26:	2300      	movs	r3, #0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3758      	adds	r7, #88	@ 0x58
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}

08005c30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	603b      	str	r3, [r7, #0]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c40:	e04f      	b.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c48:	d04b      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c4a:	f7fb fa2f 	bl	80010ac <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	69ba      	ldr	r2, [r7, #24]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d302      	bcc.n	8005c60 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e04e      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d037      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b80      	cmp	r3, #128	@ 0x80
 8005c76:	d034      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b40      	cmp	r3, #64	@ 0x40
 8005c7c:	d031      	beq.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	69db      	ldr	r3, [r3, #28]
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d110      	bne.n	8005cae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2208      	movs	r2, #8
 8005c92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f000 f839 	bl	8005d0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2208      	movs	r2, #8
 8005c9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e029      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69db      	ldr	r3, [r3, #28]
 8005cb4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cb8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cbc:	d111      	bne.n	8005ce2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cc6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f81f 	bl	8005d0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cde:	2303      	movs	r3, #3
 8005ce0:	e00f      	b.n	8005d02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69da      	ldr	r2, [r3, #28]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	4013      	ands	r3, r2
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	429a      	cmp	r2, r3
 8005cf0:	bf0c      	ite	eq
 8005cf2:	2301      	moveq	r3, #1
 8005cf4:	2300      	movne	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	79fb      	ldrb	r3, [r7, #7]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d0a0      	beq.n	8005c42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
	...

08005d0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b095      	sub	sp, #84	@ 0x54
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	461a      	mov	r2, r3
 8005d30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d32:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d3a:	e841 2300 	strex	r3, r2, [r1]
 8005d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d1e6      	bne.n	8005d14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	3308      	adds	r3, #8
 8005d4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	e853 3f00 	ldrex	r3, [r3]
 8005d54:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d56:	69fa      	ldr	r2, [r7, #28]
 8005d58:	4b1e      	ldr	r3, [pc, #120]	@ (8005dd4 <UART_EndRxTransfer+0xc8>)
 8005d5a:	4013      	ands	r3, r2
 8005d5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d6e:	e841 2300 	strex	r3, r2, [r1]
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d1e5      	bne.n	8005d46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d118      	bne.n	8005db4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	e853 3f00 	ldrex	r3, [r3]
 8005d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f023 0310 	bic.w	r3, r3, #16
 8005d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	461a      	mov	r2, r3
 8005d9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	e841 2300 	strex	r3, r2, [r1]
 8005dac:	613b      	str	r3, [r7, #16]
   return(result);
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e6      	bne.n	8005d82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2200      	movs	r2, #0
 8005dc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dc8:	bf00      	nop
 8005dca:	3754      	adds	r7, #84	@ 0x54
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	effffffe 	.word	0xeffffffe

08005dd8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d101      	bne.n	8005dee <HAL_UARTEx_DisableFifoMode+0x16>
 8005dea:	2302      	movs	r3, #2
 8005dec:	e027      	b.n	8005e3e <HAL_UARTEx_DisableFifoMode+0x66>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2224      	movs	r2, #36	@ 0x24
 8005dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0201 	bic.w	r2, r2, #1
 8005e14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2220      	movs	r2, #32
 8005e30:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d101      	bne.n	8005e62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	e02d      	b.n	8005ebe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2224      	movs	r2, #36	@ 0x24
 8005e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 f850 	bl	8005f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2220      	movs	r2, #32
 8005eb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d101      	bne.n	8005ede <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005eda:	2302      	movs	r3, #2
 8005edc:	e02d      	b.n	8005f3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2224      	movs	r2, #36	@ 0x24
 8005eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0201 	bic.w	r2, r2, #1
 8005f04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	430a      	orrs	r2, r1
 8005f18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f812 	bl	8005f44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2220      	movs	r2, #32
 8005f2c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
	...

08005f44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d108      	bne.n	8005f66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f64:	e031      	b.n	8005fca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f66:	2310      	movs	r3, #16
 8005f68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f6a:	2310      	movs	r3, #16
 8005f6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	0e5b      	lsrs	r3, r3, #25
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	f003 0307 	and.w	r3, r3, #7
 8005f7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	0f5b      	lsrs	r3, r3, #29
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f003 0307 	and.w	r3, r3, #7
 8005f8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005f8e:	7bbb      	ldrb	r3, [r7, #14]
 8005f90:	7b3a      	ldrb	r2, [r7, #12]
 8005f92:	4911      	ldr	r1, [pc, #68]	@ (8005fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005f94:	5c8a      	ldrb	r2, [r1, r2]
 8005f96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005f9a:	7b3a      	ldrb	r2, [r7, #12]
 8005f9c:	490f      	ldr	r1, [pc, #60]	@ (8005fdc <UARTEx_SetNbDataToProcess+0x98>)
 8005f9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa0:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fa4:	b29a      	uxth	r2, r3
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fac:	7bfb      	ldrb	r3, [r7, #15]
 8005fae:	7b7a      	ldrb	r2, [r7, #13]
 8005fb0:	4909      	ldr	r1, [pc, #36]	@ (8005fd8 <UARTEx_SetNbDataToProcess+0x94>)
 8005fb2:	5c8a      	ldrb	r2, [r1, r2]
 8005fb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fb8:	7b7a      	ldrb	r2, [r7, #13]
 8005fba:	4908      	ldr	r1, [pc, #32]	@ (8005fdc <UARTEx_SetNbDataToProcess+0x98>)
 8005fbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005fca:	bf00      	nop
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	08006688 	.word	0x08006688
 8005fdc:	08006690 	.word	0x08006690

08005fe0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe0:	b084      	sub	sp, #16
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
 8005fea:	f107 001c 	add.w	r0, r7, #28
 8005fee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ff2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d121      	bne.n	800603e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68da      	ldr	r2, [r3, #12]
 800600a:	4b2c      	ldr	r3, [pc, #176]	@ (80060bc <USB_CoreInit+0xdc>)
 800600c:	4013      	ands	r3, r2
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800601e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006022:	2b01      	cmp	r3, #1
 8006024:	d105      	bne.n	8006032 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 faaa 	bl	800658c <USB_CoreReset>
 8006038:	4603      	mov	r3, r0
 800603a:	73fb      	strb	r3, [r7, #15]
 800603c:	e01b      	b.n	8006076 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 fa9e 	bl	800658c <USB_CoreReset>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006054:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006058:	2b00      	cmp	r3, #0
 800605a:	d106      	bne.n	800606a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006060:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	639a      	str	r2, [r3, #56]	@ 0x38
 8006068:	e005      	b.n	8006076 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006076:	7fbb      	ldrb	r3, [r7, #30]
 8006078:	2b01      	cmp	r3, #1
 800607a:	d116      	bne.n	80060aa <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006080:	b29a      	uxth	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800608a:	4b0d      	ldr	r3, [pc, #52]	@ (80060c0 <USB_CoreInit+0xe0>)
 800608c:	4313      	orrs	r3, r2
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f043 0206 	orr.w	r2, r3, #6
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	689b      	ldr	r3, [r3, #8]
 80060a2:	f043 0220 	orr.w	r2, r3, #32
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060b6:	b004      	add	sp, #16
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	ffbdffbf 	.word	0xffbdffbf
 80060c0:	03ee0000 	.word	0x03ee0000

080060c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f023 0201 	bic.w	r2, r3, #1
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060e6:	b580      	push	{r7, lr}
 80060e8:	b084      	sub	sp, #16
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
 80060ee:	460b      	mov	r3, r1
 80060f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	2b01      	cmp	r3, #1
 8006106:	d115      	bne.n	8006134 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006114:	200a      	movs	r0, #10
 8006116:	f7fa ffd5 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	330a      	adds	r3, #10
 800611e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 fa25 	bl	8006570 <USB_GetMode>
 8006126:	4603      	mov	r3, r0
 8006128:	2b01      	cmp	r3, #1
 800612a:	d01e      	beq.n	800616a <USB_SetCurrentMode+0x84>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006130:	d9f0      	bls.n	8006114 <USB_SetCurrentMode+0x2e>
 8006132:	e01a      	b.n	800616a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d115      	bne.n	8006166 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006146:	200a      	movs	r0, #10
 8006148:	f7fa ffbc 	bl	80010c4 <HAL_Delay>
      ms += 10U;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	330a      	adds	r3, #10
 8006150:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fa0c 	bl	8006570 <USB_GetMode>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d005      	beq.n	800616a <USB_SetCurrentMode+0x84>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2bc7      	cmp	r3, #199	@ 0xc7
 8006162:	d9f0      	bls.n	8006146 <USB_SetCurrentMode+0x60>
 8006164:	e001      	b.n	800616a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006166:	2301      	movs	r3, #1
 8006168:	e005      	b.n	8006176 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	2bc8      	cmp	r3, #200	@ 0xc8
 800616e:	d101      	bne.n	8006174 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e000      	b.n	8006176 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
	...

08006180 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006180:	b084      	sub	sp, #16
 8006182:	b580      	push	{r7, lr}
 8006184:	b086      	sub	sp, #24
 8006186:	af00      	add	r7, sp, #0
 8006188:	6078      	str	r0, [r7, #4]
 800618a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800618e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800619a:	2300      	movs	r3, #0
 800619c:	613b      	str	r3, [r7, #16]
 800619e:	e009      	b.n	80061b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	3340      	adds	r3, #64	@ 0x40
 80061a6:	009b      	lsls	r3, r3, #2
 80061a8:	4413      	add	r3, r2
 80061aa:	2200      	movs	r2, #0
 80061ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	3301      	adds	r3, #1
 80061b2:	613b      	str	r3, [r7, #16]
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b0e      	cmp	r3, #14
 80061b8:	d9f2      	bls.n	80061a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061ba:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d11c      	bne.n	80061fc <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	68fa      	ldr	r2, [r7, #12]
 80061cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061d0:	f043 0302 	orr.w	r3, r3, #2
 80061d4:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061da:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	601a      	str	r2, [r3, #0]
 80061fa:	e005      	b.n	8006208 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006200:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800620e:	461a      	mov	r2, r3
 8006210:	2300      	movs	r3, #0
 8006212:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006214:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006218:	2b01      	cmp	r3, #1
 800621a:	d10d      	bne.n	8006238 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800621c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006220:	2b00      	cmp	r3, #0
 8006222:	d104      	bne.n	800622e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006224:	2100      	movs	r1, #0
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f968 	bl	80064fc <USB_SetDevSpeed>
 800622c:	e008      	b.n	8006240 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800622e:	2101      	movs	r1, #1
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f000 f963 	bl	80064fc <USB_SetDevSpeed>
 8006236:	e003      	b.n	8006240 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006238:	2103      	movs	r1, #3
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 f95e 	bl	80064fc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006240:	2110      	movs	r1, #16
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f000 f8fa 	bl	800643c <USB_FlushTxFifo>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f924 	bl	80064a0 <USB_FlushRxFifo>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006268:	461a      	mov	r2, r3
 800626a:	2300      	movs	r3, #0
 800626c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006274:	461a      	mov	r2, r3
 8006276:	2300      	movs	r3, #0
 8006278:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006286:	2300      	movs	r3, #0
 8006288:	613b      	str	r3, [r7, #16]
 800628a:	e043      	b.n	8006314 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800629e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062a2:	d118      	bne.n	80062d6 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d10a      	bne.n	80062c0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062b6:	461a      	mov	r2, r3
 80062b8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062bc:	6013      	str	r3, [r2, #0]
 80062be:	e013      	b.n	80062e8 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	015a      	lsls	r2, r3, #5
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	4413      	add	r3, r2
 80062c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062cc:	461a      	mov	r2, r3
 80062ce:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062d2:	6013      	str	r3, [r2, #0]
 80062d4:	e008      	b.n	80062e8 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	015a      	lsls	r2, r3, #5
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	4413      	add	r3, r2
 80062de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062e2:	461a      	mov	r2, r3
 80062e4:	2300      	movs	r3, #0
 80062e6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f4:	461a      	mov	r2, r3
 80062f6:	2300      	movs	r3, #0
 80062f8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006306:	461a      	mov	r2, r3
 8006308:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800630c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	3301      	adds	r3, #1
 8006312:	613b      	str	r3, [r7, #16]
 8006314:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006318:	461a      	mov	r2, r3
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	4293      	cmp	r3, r2
 800631e:	d3b5      	bcc.n	800628c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006320:	2300      	movs	r3, #0
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	e043      	b.n	80063ae <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006338:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800633c:	d118      	bne.n	8006370 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10a      	bne.n	800635a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	015a      	lsls	r2, r3, #5
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	4413      	add	r3, r2
 800634c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006350:	461a      	mov	r2, r3
 8006352:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	e013      	b.n	8006382 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	015a      	lsls	r2, r3, #5
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	4413      	add	r3, r2
 8006362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006366:	461a      	mov	r2, r3
 8006368:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800636c:	6013      	str	r3, [r2, #0]
 800636e:	e008      	b.n	8006382 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	015a      	lsls	r2, r3, #5
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800637c:	461a      	mov	r2, r3
 800637e:	2300      	movs	r3, #0
 8006380:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	461a      	mov	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063a6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	3301      	adds	r3, #1
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063b2:	461a      	mov	r2, r3
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d3b5      	bcc.n	8006326 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063c0:	691b      	ldr	r3, [r3, #16]
 80063c2:	68fa      	ldr	r2, [r7, #12]
 80063c4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063cc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2200      	movs	r2, #0
 80063d2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063da:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f043 0210 	orr.w	r2, r3, #16
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006434 <USB_DevInit+0x2b4>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80063fc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006400:	2b00      	cmp	r3, #0
 8006402:	d005      	beq.n	8006410 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f043 0208 	orr.w	r2, r3, #8
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006410:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006414:	2b01      	cmp	r3, #1
 8006416:	d105      	bne.n	8006424 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <USB_DevInit+0x2b8>)
 800641e:	4313      	orrs	r3, r2
 8006420:	687a      	ldr	r2, [r7, #4]
 8006422:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006424:	7dfb      	ldrb	r3, [r7, #23]
}
 8006426:	4618      	mov	r0, r3
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006430:	b004      	add	sp, #16
 8006432:	4770      	bx	lr
 8006434:	803c3800 	.word	0x803c3800
 8006438:	40000004 	.word	0x40000004

0800643c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800643c:	b480      	push	{r7}
 800643e:	b085      	sub	sp, #20
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006446:	2300      	movs	r3, #0
 8006448:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	3301      	adds	r3, #1
 800644e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006456:	d901      	bls.n	800645c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e01b      	b.n	8006494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	2b00      	cmp	r3, #0
 8006462:	daf2      	bge.n	800644a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006464:	2300      	movs	r3, #0
 8006466:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	019b      	lsls	r3, r3, #6
 800646c:	f043 0220 	orr.w	r2, r3, #32
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	3301      	adds	r3, #1
 8006478:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006480:	d901      	bls.n	8006486 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e006      	b.n	8006494 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b20      	cmp	r3, #32
 8006490:	d0f0      	beq.n	8006474 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006492:	2300      	movs	r3, #0
}
 8006494:	4618      	mov	r0, r3
 8006496:	3714      	adds	r7, #20
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr

080064a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b085      	sub	sp, #20
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064a8:	2300      	movs	r3, #0
 80064aa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	3301      	adds	r3, #1
 80064b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064b8:	d901      	bls.n	80064be <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e018      	b.n	80064f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	daf2      	bge.n	80064ac <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2210      	movs	r2, #16
 80064ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3301      	adds	r3, #1
 80064d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064dc:	d901      	bls.n	80064e2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064de:	2303      	movs	r3, #3
 80064e0:	e006      	b.n	80064f0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	f003 0310 	and.w	r3, r3, #16
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d0f0      	beq.n	80064d0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3714      	adds	r7, #20
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	460b      	mov	r3, r1
 8006506:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	68f9      	ldr	r1, [r7, #12]
 8006518:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800651c:	4313      	orrs	r3, r2
 800651e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3714      	adds	r7, #20
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800652e:	b480      	push	{r7}
 8006530:	b085      	sub	sp, #20
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006548:	f023 0303 	bic.w	r3, r3, #3
 800654c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	68fa      	ldr	r2, [r7, #12]
 8006558:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800655c:	f043 0302 	orr.w	r3, r3, #2
 8006560:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	695b      	ldr	r3, [r3, #20]
 800657c:	f003 0301 	and.w	r3, r3, #1
}
 8006580:	4618      	mov	r0, r3
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	3301      	adds	r3, #1
 800659c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065a4:	d901      	bls.n	80065aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065a6:	2303      	movs	r3, #3
 80065a8:	e01b      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	daf2      	bge.n	8006598 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065b2:	2300      	movs	r3, #0
 80065b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f043 0201 	orr.w	r2, r3, #1
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	3301      	adds	r3, #1
 80065c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065ce:	d901      	bls.n	80065d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e006      	b.n	80065e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f003 0301 	and.w	r3, r3, #1
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d0f0      	beq.n	80065c2 <USB_CoreReset+0x36>

  return HAL_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3714      	adds	r7, #20
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <memset>:
 80065ee:	4402      	add	r2, r0
 80065f0:	4603      	mov	r3, r0
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d100      	bne.n	80065f8 <memset+0xa>
 80065f6:	4770      	bx	lr
 80065f8:	f803 1b01 	strb.w	r1, [r3], #1
 80065fc:	e7f9      	b.n	80065f2 <memset+0x4>
	...

08006600 <__libc_init_array>:
 8006600:	b570      	push	{r4, r5, r6, lr}
 8006602:	4d0d      	ldr	r5, [pc, #52]	@ (8006638 <__libc_init_array+0x38>)
 8006604:	4c0d      	ldr	r4, [pc, #52]	@ (800663c <__libc_init_array+0x3c>)
 8006606:	1b64      	subs	r4, r4, r5
 8006608:	10a4      	asrs	r4, r4, #2
 800660a:	2600      	movs	r6, #0
 800660c:	42a6      	cmp	r6, r4
 800660e:	d109      	bne.n	8006624 <__libc_init_array+0x24>
 8006610:	4d0b      	ldr	r5, [pc, #44]	@ (8006640 <__libc_init_array+0x40>)
 8006612:	4c0c      	ldr	r4, [pc, #48]	@ (8006644 <__libc_init_array+0x44>)
 8006614:	f000 f818 	bl	8006648 <_init>
 8006618:	1b64      	subs	r4, r4, r5
 800661a:	10a4      	asrs	r4, r4, #2
 800661c:	2600      	movs	r6, #0
 800661e:	42a6      	cmp	r6, r4
 8006620:	d105      	bne.n	800662e <__libc_init_array+0x2e>
 8006622:	bd70      	pop	{r4, r5, r6, pc}
 8006624:	f855 3b04 	ldr.w	r3, [r5], #4
 8006628:	4798      	blx	r3
 800662a:	3601      	adds	r6, #1
 800662c:	e7ee      	b.n	800660c <__libc_init_array+0xc>
 800662e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006632:	4798      	blx	r3
 8006634:	3601      	adds	r6, #1
 8006636:	e7f2      	b.n	800661e <__libc_init_array+0x1e>
 8006638:	080066a0 	.word	0x080066a0
 800663c:	080066a0 	.word	0x080066a0
 8006640:	080066a0 	.word	0x080066a0
 8006644:	080066a4 	.word	0x080066a4

08006648 <_init>:
 8006648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664a:	bf00      	nop
 800664c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664e:	bc08      	pop	{r3}
 8006650:	469e      	mov	lr, r3
 8006652:	4770      	bx	lr

08006654 <_fini>:
 8006654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006656:	bf00      	nop
 8006658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665a:	bc08      	pop	{r3}
 800665c:	469e      	mov	lr, r3
 800665e:	4770      	bx	lr
