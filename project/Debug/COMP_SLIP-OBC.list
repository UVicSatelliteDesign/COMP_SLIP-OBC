
COMP_SLIP-OBC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006404  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800669c  0800669c  0000769c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  080066f4  00008010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08006754  00008070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000688  240000d0  080067b4  000080d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000758  080067b4  00008758  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000080d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017bca  00000000  00000000  000080fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002869  00000000  00000000  0001fcc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f50  00000000  00000000  00022538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bd7  00000000  00000000  00023488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000372c3  00000000  00000000  0002405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f1a  00000000  00000000  0005b322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015e13e  00000000  00000000  0006f23c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001cd37a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000411c  00000000  00000000  001cd3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001d14dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006684 	.word	0x08006684

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006684 	.word	0x08006684

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000608:	f000 fce8 	bl	8000fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800060c:	f000 f80a 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000610:	f000 f952 	bl	80008b8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000614:	f000 f886 	bl	8000724 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000618:	f000 f8d0 	bl	80007bc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800061c:	f000 f91a 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <main+0x1c>

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b09c      	sub	sp, #112	@ 0x70
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800062e:	224c      	movs	r2, #76	@ 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f005 fff9 	bl	800662a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2220      	movs	r2, #32
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f005 fff3 	bl	800662a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000644:	2002      	movs	r0, #2
 8000646:	f001 fdb1 	bl	80021ac <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800064a:	2300      	movs	r3, #0
 800064c:	603b      	str	r3, [r7, #0]
 800064e:	4b33      	ldr	r3, [pc, #204]	@ (800071c <SystemClock_Config+0xf8>)
 8000650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000652:	4a32      	ldr	r2, [pc, #200]	@ (800071c <SystemClock_Config+0xf8>)
 8000654:	f023 0301 	bic.w	r3, r3, #1
 8000658:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800065a:	4b30      	ldr	r3, [pc, #192]	@ (800071c <SystemClock_Config+0xf8>)
 800065c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b2e      	ldr	r3, [pc, #184]	@ (8000720 <SystemClock_Config+0xfc>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800066c:	4a2c      	ldr	r2, [pc, #176]	@ (8000720 <SystemClock_Config+0xfc>)
 800066e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000672:	6193      	str	r3, [r2, #24]
 8000674:	4b2a      	ldr	r3, [pc, #168]	@ (8000720 <SystemClock_Config+0xfc>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800067c:	603b      	str	r3, [r7, #0]
 800067e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000680:	bf00      	nop
 8000682:	4b27      	ldr	r3, [pc, #156]	@ (8000720 <SystemClock_Config+0xfc>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800068a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800068e:	d1f8      	bne.n	8000682 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000690:	2303      	movs	r3, #3
 8000692:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000694:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000698:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800069a:	2301      	movs	r3, #1
 800069c:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069e:	2340      	movs	r3, #64	@ 0x40
 80006a0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 80006ae:	2318      	movs	r3, #24
 80006b0:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006b2:	2302      	movs	r3, #2
 80006b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006b6:	2304      	movs	r3, #4
 80006b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80006be:	230c      	movs	r3, #12
 80006c0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fdb6 	bl	8002240 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006da:	f000 f9c9 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006de:	233f      	movs	r3, #63	@ 0x3f
 80006e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	2101      	movs	r1, #1
 8000702:	4618      	mov	r0, r3
 8000704:	f002 f9f6 	bl	8002af4 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xee>
  {
    Error_Handler();
 800070e:	f000 f9af 	bl	8000a70 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3770      	adds	r7, #112	@ 0x70
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	58000400 	.word	0x58000400
 8000720:	58024800 	.word	0x58024800

08000724 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <MX_ETH_Init+0x80>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	@ (80007a8 <MX_ETH_Init+0x84>)
 800072c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800072e:	4b1f      	ldr	r3, [pc, #124]	@ (80007ac <MX_ETH_Init+0x88>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000734:	4b1d      	ldr	r3, [pc, #116]	@ (80007ac <MX_ETH_Init+0x88>)
 8000736:	2280      	movs	r2, #128	@ 0x80
 8000738:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800073a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ac <MX_ETH_Init+0x88>)
 800073c:	22e1      	movs	r2, #225	@ 0xe1
 800073e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000740:	4b1a      	ldr	r3, [pc, #104]	@ (80007ac <MX_ETH_Init+0x88>)
 8000742:	2200      	movs	r2, #0
 8000744:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000746:	4b19      	ldr	r3, [pc, #100]	@ (80007ac <MX_ETH_Init+0x88>)
 8000748:	2200      	movs	r2, #0
 800074a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800074c:	4b17      	ldr	r3, [pc, #92]	@ (80007ac <MX_ETH_Init+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000752:	4b14      	ldr	r3, [pc, #80]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000754:	4a15      	ldr	r2, [pc, #84]	@ (80007ac <MX_ETH_Init+0x88>)
 8000756:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000758:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <MX_ETH_Init+0x80>)
 800075a:	2201      	movs	r2, #1
 800075c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800075e:	4b11      	ldr	r3, [pc, #68]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000760:	4a13      	ldr	r2, [pc, #76]	@ (80007b0 <MX_ETH_Init+0x8c>)
 8000762:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000766:	4a13      	ldr	r2, [pc, #76]	@ (80007b4 <MX_ETH_Init+0x90>)
 8000768:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800076a:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <MX_ETH_Init+0x80>)
 800076c:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000770:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000772:	480c      	ldr	r0, [pc, #48]	@ (80007a4 <MX_ETH_Init+0x80>)
 8000774:	f000 fdec 	bl	8001350 <HAL_ETH_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800077e:	f000 f977 	bl	8000a70 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000782:	2238      	movs	r2, #56	@ 0x38
 8000784:	2100      	movs	r1, #0
 8000786:	480c      	ldr	r0, [pc, #48]	@ (80007b8 <MX_ETH_Init+0x94>)
 8000788:	f005 ff4f 	bl	800662a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800078c:	4b0a      	ldr	r3, [pc, #40]	@ (80007b8 <MX_ETH_Init+0x94>)
 800078e:	2221      	movs	r2, #33	@ 0x21
 8000790:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <MX_ETH_Init+0x94>)
 8000794:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000798:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <MX_ETH_Init+0x94>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	24000124 	.word	0x24000124
 80007a8:	40028000 	.word	0x40028000
 80007ac:	2400074c 	.word	0x2400074c
 80007b0:	24000070 	.word	0x24000070
 80007b4:	24000010 	.word	0x24000010
 80007b8:	240000ec 	.word	0x240000ec

080007bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007c0:	4b22      	ldr	r3, [pc, #136]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	@ (8000850 <MX_USART3_UART_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007c6:	4b21      	ldr	r3, [pc, #132]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007d4:	4b1d      	ldr	r3, [pc, #116]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007da:	4b1c      	ldr	r3, [pc, #112]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007e0:	4b1a      	ldr	r3, [pc, #104]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007e2:	220c      	movs	r2, #12
 80007e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007e6:	4b19      	ldr	r3, [pc, #100]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007f2:	4b16      	ldr	r3, [pc, #88]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART3_UART_Init+0x90>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000804:	4811      	ldr	r0, [pc, #68]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000806:	f004 fb2d 	bl	8004e64 <HAL_UART_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000810:	f000 f92e 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000814:	2100      	movs	r1, #0
 8000816:	480d      	ldr	r0, [pc, #52]	@ (800084c <MX_USART3_UART_Init+0x90>)
 8000818:	f005 fb35 	bl	8005e86 <HAL_UARTEx_SetTxFifoThreshold>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000822:	f000 f925 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000826:	2100      	movs	r1, #0
 8000828:	4808      	ldr	r0, [pc, #32]	@ (800084c <MX_USART3_UART_Init+0x90>)
 800082a:	f005 fb6a 	bl	8005f02 <HAL_UARTEx_SetRxFifoThreshold>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000834:	f000 f91c 	bl	8000a70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_USART3_UART_Init+0x90>)
 800083a:	f005 faeb 	bl	8005e14 <HAL_UARTEx_DisableFifoMode>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000844:	f000 f914 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	240001d4 	.word	0x240001d4
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085a:	4a16      	ldr	r2, [pc, #88]	@ (80008b4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800085c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000860:	2209      	movs	r2, #9
 8000862:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000866:	2202      	movs	r2, #2
 8000868:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800086c:	2200      	movs	r2, #0
 800086e:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000872:	2202      	movs	r2, #2
 8000874:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000878:	2201      	movs	r2, #1
 800087a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800087c:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800087e:	2200      	movs	r2, #0
 8000880:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000884:	2200      	movs	r2, #0
 8000886:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800088a:	2201      	movs	r2, #1
 800088c:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000890:	2201      	movs	r2, #1
 8000892:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000894:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000896:	2200      	movs	r2, #0
 8000898:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800089c:	f001 fb55 	bl	8001f4a <HAL_PCD_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80008a6:	f000 f8e3 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	24000268 	.word	0x24000268
 80008b4:	40080000 	.word	0x40080000

080008b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08c      	sub	sp, #48	@ 0x30
 80008bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b62      	ldr	r3, [pc, #392]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008d4:	4a60      	ldr	r2, [pc, #384]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008d6:	f043 0304 	orr.w	r3, r3, #4
 80008da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008de:	4b5e      	ldr	r3, [pc, #376]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	61bb      	str	r3, [r7, #24]
 80008ea:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f2:	4a59      	ldr	r2, [pc, #356]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008fc:	4b56      	ldr	r3, [pc, #344]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000902:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	4b53      	ldr	r3, [pc, #332]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800090c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000910:	4a51      	ldr	r2, [pc, #324]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000912:	f043 0301 	orr.w	r3, r3, #1
 8000916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800091a:	4b4f      	ldr	r3, [pc, #316]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000920:	f003 0301 	and.w	r3, r3, #1
 8000924:	613b      	str	r3, [r7, #16]
 8000926:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000928:	4b4b      	ldr	r3, [pc, #300]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800092a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800092e:	4a4a      	ldr	r2, [pc, #296]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000938:	4b47      	ldr	r3, [pc, #284]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	4b44      	ldr	r3, [pc, #272]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800094c:	4a42      	ldr	r2, [pc, #264]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800094e:	f043 0308 	orr.w	r3, r3, #8
 8000952:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000956:	4b40      	ldr	r3, [pc, #256]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000958:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000964:	4b3c      	ldr	r3, [pc, #240]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800096a:	4a3b      	ldr	r2, [pc, #236]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000974:	4b38      	ldr	r3, [pc, #224]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800097a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000982:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000984:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000988:	4a33      	ldr	r2, [pc, #204]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 800098a:	f043 0310 	orr.w	r3, r3, #16
 800098e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000992:	4b31      	ldr	r3, [pc, #196]	@ (8000a58 <MX_GPIO_Init+0x1a0>)
 8000994:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	603b      	str	r3, [r7, #0]
 800099e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f244 0101 	movw	r1, #16385	@ 0x4001
 80009a6:	482d      	ldr	r0, [pc, #180]	@ (8000a5c <MX_GPIO_Init+0x1a4>)
 80009a8:	f001 fab6 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009b2:	482b      	ldr	r0, [pc, #172]	@ (8000a60 <MX_GPIO_Init+0x1a8>)
 80009b4:	f001 fab0 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2102      	movs	r1, #2
 80009bc:	4829      	ldr	r0, [pc, #164]	@ (8000a64 <MX_GPIO_Init+0x1ac>)
 80009be:	f001 faab 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d0:	f107 031c 	add.w	r3, r7, #28
 80009d4:	4619      	mov	r1, r3
 80009d6:	4824      	ldr	r0, [pc, #144]	@ (8000a68 <MX_GPIO_Init+0x1b0>)
 80009d8:	f001 f8ee 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009dc:	f244 0301 	movw	r3, #16385	@ 0x4001
 80009e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e2:	2301      	movs	r3, #1
 80009e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e6:	2300      	movs	r3, #0
 80009e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	4819      	ldr	r0, [pc, #100]	@ (8000a5c <MX_GPIO_Init+0x1a4>)
 80009f6:	f001 f8df 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4813      	ldr	r0, [pc, #76]	@ (8000a60 <MX_GPIO_Init+0x1a8>)
 8000a14:	f001 f8d0 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000a18:	2380      	movs	r3, #128	@ 0x80
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a1c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <MX_GPIO_Init+0x1b4>)
 8000a2e:	f001 f8c3 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a32:	2302      	movs	r3, #2
 8000a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a36:	2301      	movs	r3, #1
 8000a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a42:	f107 031c 	add.w	r3, r7, #28
 8000a46:	4619      	mov	r1, r3
 8000a48:	4806      	ldr	r0, [pc, #24]	@ (8000a64 <MX_GPIO_Init+0x1ac>)
 8000a4a:	f001 f8b5 	bl	8001bb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a4e:	bf00      	nop
 8000a50:	3730      	adds	r7, #48	@ 0x30
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	58024400 	.word	0x58024400
 8000a5c:	58020400 	.word	0x58020400
 8000a60:	58020c00 	.word	0x58020c00
 8000a64:	58021000 	.word	0x58021000
 8000a68:	58020800 	.word	0x58020800
 8000a6c:	58021800 	.word	0x58021800

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_MspInit+0x30>)
 8000a84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a88:	4a08      	ldr	r2, [pc, #32]	@ (8000aac <HAL_MspInit+0x30>)
 8000a8a:	f043 0302 	orr.w	r3, r3, #2
 8000a8e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <HAL_MspInit+0x30>)
 8000a94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a98:	f003 0302 	and.w	r3, r3, #2
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	370c      	adds	r7, #12
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	58024400 	.word	0x58024400

08000ab0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b08e      	sub	sp, #56	@ 0x38
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	2200      	movs	r2, #0
 8000abe:	601a      	str	r2, [r3, #0]
 8000ac0:	605a      	str	r2, [r3, #4]
 8000ac2:	609a      	str	r2, [r3, #8]
 8000ac4:	60da      	str	r2, [r3, #12]
 8000ac6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	4a59      	ldr	r2, [pc, #356]	@ (8000c34 <HAL_ETH_MspInit+0x184>)
 8000ace:	4293      	cmp	r3, r2
 8000ad0:	f040 80ab 	bne.w	8000c2a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ad4:	4b58      	ldr	r3, [pc, #352]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000ad6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ada:	4a57      	ldr	r2, [pc, #348]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000adc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ae0:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000ae4:	4b54      	ldr	r3, [pc, #336]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000ae6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000aea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000aee:	623b      	str	r3, [r7, #32]
 8000af0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000af2:	4b51      	ldr	r3, [pc, #324]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000af4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000af8:	4a4f      	ldr	r2, [pc, #316]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000afe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b02:	4b4d      	ldr	r3, [pc, #308]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000b10:	4b49      	ldr	r3, [pc, #292]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b16:	4a48      	ldr	r2, [pc, #288]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b1c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000b20:	4b45      	ldr	r3, [pc, #276]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b22:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000b26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b2a:	61bb      	str	r3, [r7, #24]
 8000b2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	4b42      	ldr	r3, [pc, #264]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	4a40      	ldr	r2, [pc, #256]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b44:	f003 0304 	and.w	r3, r3, #4
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b52:	4a39      	ldr	r2, [pc, #228]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b5c:	4b36      	ldr	r3, [pc, #216]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	4b33      	ldr	r3, [pc, #204]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b70:	4a31      	ldr	r2, [pc, #196]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b80:	f003 0302 	and.w	r3, r3, #2
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b88:	4b2b      	ldr	r3, [pc, #172]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b98:	4b27      	ldr	r3, [pc, #156]	@ (8000c38 <HAL_ETH_MspInit+0x188>)
 8000b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ba6:	2332      	movs	r3, #50	@ 0x32
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bb6:	230b      	movs	r3, #11
 8000bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481e      	ldr	r0, [pc, #120]	@ (8000c3c <HAL_ETH_MspInit+0x18c>)
 8000bc2:	f000 fff9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000bc6:	2386      	movs	r3, #134	@ 0x86
 8000bc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd6:	230b      	movs	r3, #11
 8000bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4817      	ldr	r0, [pc, #92]	@ (8000c40 <HAL_ETH_MspInit+0x190>)
 8000be2:	f000 ffe9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000be6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	2302      	movs	r3, #2
 8000bee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bf8:	230b      	movs	r3, #11
 8000bfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4810      	ldr	r0, [pc, #64]	@ (8000c44 <HAL_ETH_MspInit+0x194>)
 8000c04:	f000 ffd8 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c08:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c16:	2300      	movs	r3, #0
 8000c18:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c1a:	230b      	movs	r3, #11
 8000c1c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c22:	4619      	mov	r1, r3
 8000c24:	4808      	ldr	r0, [pc, #32]	@ (8000c48 <HAL_ETH_MspInit+0x198>)
 8000c26:	f000 ffc7 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3738      	adds	r7, #56	@ 0x38
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40028000 	.word	0x40028000
 8000c38:	58024400 	.word	0x58024400
 8000c3c:	58020800 	.word	0x58020800
 8000c40:	58020000 	.word	0x58020000
 8000c44:	58020400 	.word	0x58020400
 8000c48:	58021800 	.word	0x58021800

08000c4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	22c0      	movs	r2, #192	@ 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f005 fcdc 	bl	800662a <memset>
  if(huart->Instance==USART3)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d146      	bne.n	8000d0a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c7c:	f04f 0202 	mov.w	r2, #2
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 faba 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9e:	f7ff fee7 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000ca4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000caa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cb8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc8:	f043 0308 	orr.w	r3, r3, #8
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0308 	and.w	r3, r3, #8
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000cde:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_UART_MspInit+0xd0>)
 8000d06:	f000 ff57 	bl	8001bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d0a:	bf00      	nop
 8000d0c:	37e8      	adds	r7, #232	@ 0xe8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40004800 	.word	0x40004800
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020c00 	.word	0x58020c00

08000d20 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b0ba      	sub	sp, #232	@ 0xe8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	22c0      	movs	r2, #192	@ 0xc0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f005 fc72 	bl	800662a <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a30      	ldr	r2, [pc, #192]	@ (8000e0c <HAL_PCD_MspInit+0xec>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d159      	bne.n	8000e04 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d50:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000d54:	f04f 0300 	mov.w	r3, #0
 8000d58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d5c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f002 fa4f 	bl	800320c <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000d74:	f7ff fe7c 	bl	8000a70 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d78:	f001 fa52 	bl	8002220 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b24      	ldr	r3, [pc, #144]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d82:	4a23      	ldr	r2, [pc, #140]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d8c:	4b20      	ldr	r3, [pc, #128]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d92:	f003 0301 	and.w	r3, r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d9a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000db4:	230a      	movs	r3, #10
 8000db6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4814      	ldr	r0, [pc, #80]	@ (8000e14 <HAL_PCD_MspInit+0xf4>)
 8000dc2:	f000 fef9 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dc6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000dde:	4619      	mov	r1, r3
 8000de0:	480c      	ldr	r0, [pc, #48]	@ (8000e14 <HAL_PCD_MspInit+0xf4>)
 8000de2:	f000 fee9 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000de8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000dee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000df2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_PCD_MspInit+0xf0>)
 8000df8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000dfc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e04:	bf00      	nop
 8000e06:	37e8      	adds	r7, #232	@ 0xe8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40080000 	.word	0x40080000
 8000e10:	58024400 	.word	0x58024400
 8000e14:	58020000 	.word	0x58020000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	bf00      	nop
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <MemManage_Handler+0x4>

08000e30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <BusFault_Handler+0x4>

08000e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <UsageFault_Handler+0x4>

08000e40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6e:	f000 f927 	bl	80010c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e7c:	4b37      	ldr	r3, [pc, #220]	@ (8000f5c <SystemInit+0xe4>)
 8000e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e82:	4a36      	ldr	r2, [pc, #216]	@ (8000f5c <SystemInit+0xe4>)
 8000e84:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e88:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e8c:	4b34      	ldr	r3, [pc, #208]	@ (8000f60 <SystemInit+0xe8>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f003 030f 	and.w	r3, r3, #15
 8000e94:	2b06      	cmp	r3, #6
 8000e96:	d807      	bhi.n	8000ea8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e98:	4b31      	ldr	r3, [pc, #196]	@ (8000f60 <SystemInit+0xe8>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f023 030f 	bic.w	r3, r3, #15
 8000ea0:	4a2f      	ldr	r2, [pc, #188]	@ (8000f60 <SystemInit+0xe8>)
 8000ea2:	f043 0307 	orr.w	r3, r3, #7
 8000ea6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f64 <SystemInit+0xec>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a2d      	ldr	r2, [pc, #180]	@ (8000f64 <SystemInit+0xec>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000eb4:	4b2b      	ldr	r3, [pc, #172]	@ (8000f64 <SystemInit+0xec>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000eba:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <SystemInit+0xec>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	4929      	ldr	r1, [pc, #164]	@ (8000f64 <SystemInit+0xec>)
 8000ec0:	4b29      	ldr	r3, [pc, #164]	@ (8000f68 <SystemInit+0xf0>)
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ec6:	4b26      	ldr	r3, [pc, #152]	@ (8000f60 <SystemInit+0xe8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0308 	and.w	r3, r3, #8
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d007      	beq.n	8000ee2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ed2:	4b23      	ldr	r3, [pc, #140]	@ (8000f60 <SystemInit+0xe8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f023 030f 	bic.w	r3, r3, #15
 8000eda:	4a21      	ldr	r2, [pc, #132]	@ (8000f60 <SystemInit+0xe8>)
 8000edc:	f043 0307 	orr.w	r3, r3, #7
 8000ee0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <SystemInit+0xec>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f64 <SystemInit+0xec>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <SystemInit+0xec>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f64 <SystemInit+0xec>)
 8000ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f6c <SystemInit+0xf4>)
 8000ef8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	@ (8000f64 <SystemInit+0xec>)
 8000efc:	4a1c      	ldr	r2, [pc, #112]	@ (8000f70 <SystemInit+0xf8>)
 8000efe:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000f00:	4b18      	ldr	r3, [pc, #96]	@ (8000f64 <SystemInit+0xec>)
 8000f02:	4a1c      	ldr	r2, [pc, #112]	@ (8000f74 <SystemInit+0xfc>)
 8000f04:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000f06:	4b17      	ldr	r3, [pc, #92]	@ (8000f64 <SystemInit+0xec>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000f0c:	4b15      	ldr	r3, [pc, #84]	@ (8000f64 <SystemInit+0xec>)
 8000f0e:	4a19      	ldr	r2, [pc, #100]	@ (8000f74 <SystemInit+0xfc>)
 8000f10:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000f12:	4b14      	ldr	r3, [pc, #80]	@ (8000f64 <SystemInit+0xec>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000f18:	4b12      	ldr	r3, [pc, #72]	@ (8000f64 <SystemInit+0xec>)
 8000f1a:	4a16      	ldr	r2, [pc, #88]	@ (8000f74 <SystemInit+0xfc>)
 8000f1c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000f1e:	4b11      	ldr	r3, [pc, #68]	@ (8000f64 <SystemInit+0xec>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f24:	4b0f      	ldr	r3, [pc, #60]	@ (8000f64 <SystemInit+0xec>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <SystemInit+0xec>)
 8000f2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f2e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000f30:	4b0c      	ldr	r3, [pc, #48]	@ (8000f64 <SystemInit+0xec>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000f36:	4b10      	ldr	r3, [pc, #64]	@ (8000f78 <SystemInit+0x100>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b10      	ldr	r3, [pc, #64]	@ (8000f7c <SystemInit+0x104>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f42:	d202      	bcs.n	8000f4a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000f44:	4b0e      	ldr	r3, [pc, #56]	@ (8000f80 <SystemInit+0x108>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f84 <SystemInit+0x10c>)
 8000f4c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f50:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f52:	bf00      	nop
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00
 8000f60:	52002000 	.word	0x52002000
 8000f64:	58024400 	.word	0x58024400
 8000f68:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f6c:	02020200 	.word	0x02020200
 8000f70:	01ff0000 	.word	0x01ff0000
 8000f74:	01010280 	.word	0x01010280
 8000f78:	5c001000 	.word	0x5c001000
 8000f7c:	ffff0000 	.word	0xffff0000
 8000f80:	51008108 	.word	0x51008108
 8000f84:	52004000 	.word	0x52004000

08000f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000fc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f8c:	f7ff ff74 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f90:	480c      	ldr	r0, [pc, #48]	@ (8000fc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f92:	490d      	ldr	r1, [pc, #52]	@ (8000fc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f94:	4a0d      	ldr	r2, [pc, #52]	@ (8000fcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f98:	e002      	b.n	8000fa0 <LoopCopyDataInit>

08000f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f9e:	3304      	adds	r3, #4

08000fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fa4:	d3f9      	bcc.n	8000f9a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fa8:	4c0a      	ldr	r4, [pc, #40]	@ (8000fd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fac:	e001      	b.n	8000fb2 <LoopFillZerobss>

08000fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fb0:	3204      	adds	r2, #4

08000fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fb4:	d3fb      	bcc.n	8000fae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fb6:	f005 fb41 	bl	800663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fba:	f7ff fb23 	bl	8000604 <main>
  bx  lr
 8000fbe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fc0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fc4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000fc8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000fcc:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8000fd0:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000fd4:	24000758 	.word	0x24000758

08000fd8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fd8:	e7fe      	b.n	8000fd8 <ADC3_IRQHandler>
	...

08000fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe2:	2003      	movs	r0, #3
 8000fe4:	f000 f982 	bl	80012ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fe8:	f001 ff3a 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8000fec:	4602      	mov	r2, r0
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_Init+0x68>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	f003 030f 	and.w	r3, r3, #15
 8000ff8:	4913      	ldr	r1, [pc, #76]	@ (8001048 <HAL_Init+0x6c>)
 8000ffa:	5ccb      	ldrb	r3, [r1, r3]
 8000ffc:	f003 031f 	and.w	r3, r3, #31
 8001000:	fa22 f303 	lsr.w	r3, r2, r3
 8001004:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_Init+0x68>)
 8001008:	699b      	ldr	r3, [r3, #24]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	4a0e      	ldr	r2, [pc, #56]	@ (8001048 <HAL_Init+0x6c>)
 8001010:	5cd3      	ldrb	r3, [r2, r3]
 8001012:	f003 031f 	and.w	r3, r3, #31
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	4a0b      	ldr	r2, [pc, #44]	@ (800104c <HAL_Init+0x70>)
 800101e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001020:	4a0b      	ldr	r2, [pc, #44]	@ (8001050 <HAL_Init+0x74>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f814 	bl	8001054 <HAL_InitTick>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e002      	b.n	800103c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001036:	f7ff fd21 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103a:	2300      	movs	r3, #0
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58024400 	.word	0x58024400
 8001048:	0800669c 	.word	0x0800669c
 800104c:	24000004 	.word	0x24000004
 8001050:	24000000 	.word	0x24000000

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800105c:	4b15      	ldr	r3, [pc, #84]	@ (80010b4 <HAL_InitTick+0x60>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e021      	b.n	80010ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001068:	4b13      	ldr	r3, [pc, #76]	@ (80010b8 <HAL_InitTick+0x64>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <HAL_InitTick+0x60>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	fbb3 f3f1 	udiv	r3, r3, r1
 800107a:	fbb2 f3f3 	udiv	r3, r2, r3
 800107e:	4618      	mov	r0, r3
 8001080:	f000 f959 	bl	8001336 <HAL_SYSTICK_Config>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e00e      	b.n	80010ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d80a      	bhi.n	80010aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	f04f 30ff 	mov.w	r0, #4294967295
 800109c:	f000 f931 	bl	8001302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a0:	4a06      	ldr	r2, [pc, #24]	@ (80010bc <HAL_InitTick+0x68>)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010a6:	2300      	movs	r3, #0
 80010a8:	e000      	b.n	80010ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	3708      	adds	r7, #8
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	2400000c 	.word	0x2400000c
 80010b8:	24000000 	.word	0x24000000
 80010bc:	24000008 	.word	0x24000008

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2400000c 	.word	0x2400000c
 80010e4:	24000754 	.word	0x24000754

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	@ (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	24000754 	.word	0x24000754

08001100 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b084      	sub	sp, #16
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001108:	f7ff ffee 	bl	80010e8 <HAL_GetTick>
 800110c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001118:	d005      	beq.n	8001126 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_Delay+0x44>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001126:	bf00      	nop
 8001128:	f7ff ffde 	bl	80010e8 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	429a      	cmp	r2, r3
 8001136:	d8f7      	bhi.n	8001128 <HAL_Delay+0x28>
  {
  }
}
 8001138:	bf00      	nop
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2400000c 	.word	0x2400000c

08001148 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800114c:	4b03      	ldr	r3, [pc, #12]	@ (800115c <HAL_GetREVID+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0c1b      	lsrs	r3, r3, #16
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	5c001000 	.word	0x5c001000

08001160 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8001170:	4904      	ldr	r1, [pc, #16]	@ (8001184 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
}
 8001178:	bf00      	nop
 800117a:	370c      	adds	r7, #12
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	58000400 	.word	0x58000400

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0b      	ldr	r3, [pc, #44]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80011b0:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SetPriorityGrouping+0x40>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00
 80011cc:	05fa0000 	.word	0x05fa0000

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	@ (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	@ (800123c <__NVIC_SetPriority+0x50>)
 800121c:	88fb      	ldrh	r3, [r7, #6]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	@ 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	@ 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
	...

080012a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012b8:	d301      	bcc.n	80012be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ba:	2301      	movs	r3, #1
 80012bc:	e00f      	b.n	80012de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012be:	4a0a      	ldr	r2, [pc, #40]	@ (80012e8 <SysTick_Config+0x40>)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c6:	210f      	movs	r1, #15
 80012c8:	f04f 30ff 	mov.w	r0, #4294967295
 80012cc:	f7ff ff8e 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <SysTick_Config+0x40>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d6:	4b04      	ldr	r3, [pc, #16]	@ (80012e8 <SysTick_Config+0x40>)
 80012d8:	2207      	movs	r2, #7
 80012da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	e000e010 	.word	0xe000e010

080012ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff ff47 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012fa:	bf00      	nop
 80012fc:	3708      	adds	r7, #8
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b086      	sub	sp, #24
 8001306:	af00      	add	r7, sp, #0
 8001308:	4603      	mov	r3, r0
 800130a:	60b9      	str	r1, [r7, #8]
 800130c:	607a      	str	r2, [r7, #4]
 800130e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb2 	bl	80012a8 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d101      	bne.n	8001362 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	e0e3      	b.n	800152a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001368:	2b00      	cmp	r3, #0
 800136a:	d106      	bne.n	800137a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2223      	movs	r2, #35	@ 0x23
 8001370:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff fb9b 	bl	8000ab0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137a:	4b6e      	ldr	r3, [pc, #440]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 800137c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001380:	4a6c      	ldr	r2, [pc, #432]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 8001382:	f043 0302 	orr.w	r3, r3, #2
 8001386:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800138a:	4b6a      	ldr	r3, [pc, #424]	@ (8001534 <HAL_ETH_Init+0x1e4>)
 800138c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001390:	f003 0302 	and.w	r3, r3, #2
 8001394:	60bb      	str	r3, [r7, #8]
 8001396:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	7a1b      	ldrb	r3, [r3, #8]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d103      	bne.n	80013a8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80013a0:	2000      	movs	r0, #0
 80013a2:	f7ff fedd 	bl	8001160 <HAL_SYSCFG_ETHInterfaceSelect>
 80013a6:	e003      	b.n	80013b0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80013a8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80013ac:	f7ff fed8 	bl	8001160 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80013b0:	4b61      	ldr	r3, [pc, #388]	@ (8001538 <HAL_ETH_Init+0x1e8>)
 80013b2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	6812      	ldr	r2, [r2, #0]
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80013ca:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013cc:	f7ff fe8c 	bl	80010e8 <HAL_GetTick>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013d2:	e011      	b.n	80013f8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80013d4:	f7ff fe88 	bl	80010e8 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80013e2:	d909      	bls.n	80013f8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2204      	movs	r2, #4
 80013e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	22e0      	movs	r2, #224	@ 0xe0
 80013f0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e098      	b.n	800152a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d1e4      	bne.n	80013d4 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f89e 	bl	800154c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001410:	f001 fea0 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8001414:	4603      	mov	r3, r0
 8001416:	4a49      	ldr	r2, [pc, #292]	@ (800153c <HAL_ETH_Init+0x1ec>)
 8001418:	fba2 2303 	umull	r2, r3, r2, r3
 800141c:	0c9a      	lsrs	r2, r3, #18
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	3a01      	subs	r2, #1
 8001424:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f000 fa81 	bl	8001930 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001436:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800143a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	6812      	ldr	r2, [r2, #0]
 8001442:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001446:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800144a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	f003 0303 	and.w	r3, r3, #3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	22e0      	movs	r2, #224	@ 0xe0
 8001466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e05d      	b.n	800152a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001476:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800147a:	4b31      	ldr	r3, [pc, #196]	@ (8001540 <HAL_ETH_Init+0x1f0>)
 800147c:	4013      	ands	r3, r2
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	6952      	ldr	r2, [r2, #20]
 8001482:	0051      	lsls	r1, r2, #1
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	430b      	orrs	r3, r1
 800148a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800148e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 fae9 	bl	8001a6a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 fb2f 	bl	8001afc <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	685b      	ldr	r3, [r3, #4]
 80014a2:	3305      	adds	r3, #5
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	021a      	lsls	r2, r3, #8
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	3304      	adds	r3, #4
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	4619      	mov	r1, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	3303      	adds	r3, #3
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	061a      	lsls	r2, r3, #24
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	3302      	adds	r3, #2
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	041b      	lsls	r3, r3, #16
 80014d0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	3301      	adds	r3, #1
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014dc:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80014ea:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80014ec:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_ETH_Init+0x1f4>)
 80014fe:	430b      	orrs	r3, r1
 8001500:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b0d      	ldr	r3, [pc, #52]	@ (8001548 <HAL_ETH_Init+0x1f8>)
 8001512:	430b      	orrs	r3, r1
 8001514:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2200      	movs	r2, #0
 800151c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2210      	movs	r2, #16
 8001524:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3710      	adds	r7, #16
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	58024400 	.word	0x58024400
 8001538:	58000400 	.word	0x58000400
 800153c:	431bde83 	.word	0x431bde83
 8001540:	ffff8001 	.word	0xffff8001
 8001544:	0c020060 	.word	0x0c020060
 8001548:	0c20c000 	.word	0x0c20c000

0800154c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800155c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001564:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001566:	f001 fdf5 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 800156a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	4a1a      	ldr	r2, [pc, #104]	@ (80015d8 <HAL_ETH_SetMDIOClockRange+0x8c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d804      	bhi.n	800157e <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	e022      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	4a16      	ldr	r2, [pc, #88]	@ (80015dc <HAL_ETH_SetMDIOClockRange+0x90>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d204      	bcs.n	8001590 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	e019      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	4a13      	ldr	r2, [pc, #76]	@ (80015e0 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d915      	bls.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	4a12      	ldr	r2, [pc, #72]	@ (80015e4 <HAL_ETH_SetMDIOClockRange+0x98>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d804      	bhi.n	80015aa <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e00c      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	4a0e      	ldr	r2, [pc, #56]	@ (80015e8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d804      	bhi.n	80015bc <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	e003      	b.n	80015c4 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 80015c2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80015ce:	bf00      	nop
 80015d0:	3710      	adds	r7, #16
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	02160ebf 	.word	0x02160ebf
 80015dc:	03938700 	.word	0x03938700
 80015e0:	05f5e0ff 	.word	0x05f5e0ff
 80015e4:	08f0d17f 	.word	0x08f0d17f
 80015e8:	0ee6b27f 	.word	0x0ee6b27f

080015ec <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80015fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001606:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	7b1b      	ldrb	r3, [r3, #12]
 800160c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800160e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	7b5b      	ldrb	r3, [r3, #13]
 8001614:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	7b9b      	ldrb	r3, [r3, #14]
 800161c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800161e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	7bdb      	ldrb	r3, [r3, #15]
 8001624:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001626:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001628:	683a      	ldr	r2, [r7, #0]
 800162a:	7c12      	ldrb	r2, [r2, #16]
 800162c:	2a00      	cmp	r2, #0
 800162e:	d102      	bne.n	8001636 <ETH_SetMACConfig+0x4a>
 8001630:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001634:	e000      	b.n	8001638 <ETH_SetMACConfig+0x4c>
 8001636:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001638:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	7c52      	ldrb	r2, [r2, #17]
 800163e:	2a00      	cmp	r2, #0
 8001640:	d102      	bne.n	8001648 <ETH_SetMACConfig+0x5c>
 8001642:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001646:	e000      	b.n	800164a <ETH_SetMACConfig+0x5e>
 8001648:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800164a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	7c9b      	ldrb	r3, [r3, #18]
 8001650:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001652:	431a      	orrs	r2, r3
               macconf->Speed |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001658:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800165e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	7f1b      	ldrb	r3, [r3, #28]
 8001664:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001666:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	7f5b      	ldrb	r3, [r3, #29]
 800166c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800166e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	7f92      	ldrb	r2, [r2, #30]
 8001674:	2a00      	cmp	r2, #0
 8001676:	d102      	bne.n	800167e <ETH_SetMACConfig+0x92>
 8001678:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0x94>
 800167e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001680:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	7fdb      	ldrb	r3, [r3, #31]
 8001686:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001688:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001690:	2a00      	cmp	r2, #0
 8001692:	d102      	bne.n	800169a <ETH_SetMACConfig+0xae>
 8001694:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001698:	e000      	b.n	800169c <ETH_SetMACConfig+0xb0>
 800169a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800169c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80016a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80016aa:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80016ac:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80016b2:	4313      	orrs	r3, r2
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b56      	ldr	r3, [pc, #344]	@ (8001818 <ETH_SetMACConfig+0x22c>)
 80016be:	4013      	ands	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	6812      	ldr	r2, [r2, #0]
 80016c4:	68f9      	ldr	r1, [r7, #12]
 80016c6:	430b      	orrs	r3, r1
 80016c8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016ce:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80016d6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80016d8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80016e0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80016e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80016ea:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80016ec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80016f4:	2a00      	cmp	r2, #0
 80016f6:	d102      	bne.n	80016fe <ETH_SetMACConfig+0x112>
 80016f8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80016fc:	e000      	b.n	8001700 <ETH_SetMACConfig+0x114>
 80016fe:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001700:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <ETH_SetMACConfig+0x230>)
 8001712:	4013      	ands	r3, r2
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	430b      	orrs	r3, r1
 800171c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001724:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800172a:	4313      	orrs	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	4b3a      	ldr	r3, [pc, #232]	@ (8001820 <ETH_SetMACConfig+0x234>)
 8001736:	4013      	ands	r3, r2
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	68f9      	ldr	r1, [r7, #12]
 800173e:	430b      	orrs	r3, r1
 8001740:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001748:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800174e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001756:	2a00      	cmp	r2, #0
 8001758:	d101      	bne.n	800175e <ETH_SetMACConfig+0x172>
 800175a:	2280      	movs	r2, #128	@ 0x80
 800175c:	e000      	b.n	8001760 <ETH_SetMACConfig+0x174>
 800175e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001760:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001766:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001772:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001776:	4013      	ands	r3, r2
 8001778:	687a      	ldr	r2, [r7, #4]
 800177a:	6812      	ldr	r2, [r2, #0]
 800177c:	68f9      	ldr	r1, [r7, #12]
 800177e:	430b      	orrs	r3, r1
 8001780:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001788:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001790:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800179e:	f023 0103 	bic.w	r1, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	68fa      	ldr	r2, [r7, #12]
 80017a8:	430a      	orrs	r2, r1
 80017aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80017b6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	430a      	orrs	r2, r1
 80017c4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017cc:	683a      	ldr	r2, [r7, #0]
 80017ce:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 80017d2:	2a00      	cmp	r2, #0
 80017d4:	d101      	bne.n	80017da <ETH_SetMACConfig+0x1ee>
 80017d6:	2240      	movs	r2, #64	@ 0x40
 80017d8:	e000      	b.n	80017dc <ETH_SetMACConfig+0x1f0>
 80017da:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80017dc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80017e4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80017e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80017ee:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80017f0:	4313      	orrs	r3, r2
 80017f2:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80017fc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	430a      	orrs	r2, r1
 8001808:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800180c:	bf00      	nop
 800180e:	3714      	adds	r7, #20
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	00048083 	.word	0x00048083
 800181c:	c0f88000 	.word	0xc0f88000
 8001820:	fffffef0 	.word	0xfffffef0

08001824 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b38      	ldr	r3, [pc, #224]	@ (800191c <ETH_SetDMAConfig+0xf8>)
 800183a:	4013      	ands	r3, r2
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	6811      	ldr	r1, [r2, #0]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6812      	ldr	r2, [r2, #0]
 8001844:	430b      	orrs	r3, r1
 8001846:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800184a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	791b      	ldrb	r3, [r3, #4]
 8001850:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001856:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	7b1b      	ldrb	r3, [r3, #12]
 800185c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800185e:	4313      	orrs	r3, r2
 8001860:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800186a:	685a      	ldr	r2, [r3, #4]
 800186c:	4b2c      	ldr	r3, [pc, #176]	@ (8001920 <ETH_SetDMAConfig+0xfc>)
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6812      	ldr	r2, [r2, #0]
 8001874:	68f9      	ldr	r1, [r7, #12]
 8001876:	430b      	orrs	r3, r1
 8001878:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800187c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	7b5b      	ldrb	r3, [r3, #13]
 8001882:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001888:	4313      	orrs	r3, r2
 800188a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001894:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001898:	4b22      	ldr	r3, [pc, #136]	@ (8001924 <ETH_SetDMAConfig+0x100>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	68f9      	ldr	r1, [r7, #12]
 80018a2:	430b      	orrs	r3, r1
 80018a4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018a8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	7d1b      	ldrb	r3, [r3, #20]
 80018b4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80018b6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	7f5b      	ldrb	r3, [r3, #29]
 80018bc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80018be:	4313      	orrs	r3, r2
 80018c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018ca:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 80018ce:	4b16      	ldr	r3, [pc, #88]	@ (8001928 <ETH_SetDMAConfig+0x104>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6812      	ldr	r2, [r2, #0]
 80018d6:	68f9      	ldr	r1, [r7, #12]
 80018d8:	430b      	orrs	r3, r1
 80018da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80018de:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	7f1b      	ldrb	r3, [r3, #28]
 80018e6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80018ec:	4313      	orrs	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80018f8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <ETH_SetDMAConfig+0x108>)
 80018fe:	4013      	ands	r3, r2
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	6812      	ldr	r2, [r2, #0]
 8001904:	68f9      	ldr	r1, [r7, #12]
 8001906:	430b      	orrs	r3, r1
 8001908:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800190c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	ffff87fd 	.word	0xffff87fd
 8001920:	ffff2ffe 	.word	0xffff2ffe
 8001924:	fffec000 	.word	0xfffec000
 8001928:	ffc0efef 	.word	0xffc0efef
 800192c:	7fc0ffff 	.word	0x7fc0ffff

08001930 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b0a4      	sub	sp, #144	@ 0x90
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001938:	2301      	movs	r3, #1
 800193a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800193e:	2300      	movs	r3, #0
 8001940:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800194e:	2301      	movs	r3, #1
 8001950:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001954:	2301      	movs	r3, #1
 8001956:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800195a:	2301      	movs	r3, #1
 800195c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001960:	2300      	movs	r3, #0
 8001962:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001966:	2301      	movs	r3, #1
 8001968:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800196c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001970:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 8001978:	2300      	movs	r3, #0
 800197a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 8001988:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 800198c:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001998:	2301      	movs	r3, #1
 800199a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80019aa:	2300      	movs	r3, #0
 80019ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 80019ae:	2300      	movs	r3, #0
 80019b0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80019b2:	2300      	movs	r3, #0
 80019b4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80019c2:	2301      	movs	r3, #1
 80019c4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80019c8:	2320      	movs	r3, #32
 80019ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80019ce:	2301      	movs	r3, #1
 80019d0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80019da:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80019e0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019e4:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80019e6:	2300      	movs	r3, #0
 80019e8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80019ec:	2302      	movs	r3, #2
 80019ee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80019f2:	2300      	movs	r3, #0
 80019f4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001a04:	2301      	movs	r3, #1
 8001a06:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001a14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a18:	4619      	mov	r1, r3
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff fde6 	bl	80015ec <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001a20:	2301      	movs	r3, #1
 8001a22:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001a24:	2301      	movs	r3, #1
 8001a26:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001a32:	2300      	movs	r3, #0
 8001a34:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001a3a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a3e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001a44:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a48:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001a50:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f7ff fee1 	bl	8001824 <ETH_SetDMAConfig>
}
 8001a62:	bf00      	nop
 8001a64:	3790      	adds	r7, #144	@ 0x90
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	e01d      	b.n	8001ab4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	68fa      	ldr	r2, [r7, #12]
 8001a7e:	4613      	mov	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	00db      	lsls	r3, r3, #3
 8001a86:	440b      	add	r3, r1
 8001a88:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001aa2:	68b9      	ldr	r1, [r7, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	3206      	adds	r2, #6
 8001aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	2b03      	cmp	r3, #3
 8001ab8:	d9de      	bls.n	8001a78 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2303      	movs	r3, #3
 8001acc:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68da      	ldr	r2, [r3, #12]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001adc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68da      	ldr	r2, [r3, #12]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001aec:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e023      	b.n	8001b52 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6919      	ldr	r1, [r3, #16]
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	4613      	mov	r3, r2
 8001b12:	005b      	lsls	r3, r3, #1
 8001b14:	4413      	add	r3, r2
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	440b      	add	r3, r1
 8001b1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	2200      	movs	r2, #0
 8001b26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	2200      	movs	r2, #0
 8001b38:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001b40:	68b9      	ldr	r1, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	3212      	adds	r2, #18
 8001b48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2b03      	cmp	r3, #3
 8001b56:	d9d8      	bls.n	8001b0a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2200      	movs	r2, #0
 8001b68:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2303      	movs	r3, #3
 8001b82:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691a      	ldr	r2, [r3, #16]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b92:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ba6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001baa:	bf00      	nop
 8001bac:	3714      	adds	r7, #20
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
	...

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001bc6:	4b89      	ldr	r3, [pc, #548]	@ (8001dec <HAL_GPIO_Init+0x234>)
 8001bc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bca:	e194      	b.n	8001ef6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	2101      	movs	r1, #1
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	f000 8186 	beq.w	8001ef0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d005      	beq.n	8001bfc <HAL_GPIO_Init+0x44>
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f003 0303 	and.w	r3, r3, #3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d130      	bne.n	8001c5e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	2203      	movs	r2, #3
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	69ba      	ldr	r2, [r7, #24]
 8001c10:	4013      	ands	r3, r2
 8001c12:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	69ba      	ldr	r2, [r7, #24]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c32:	2201      	movs	r2, #1
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3a:	43db      	mvns	r3, r3
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	4013      	ands	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	091b      	lsrs	r3, r3, #4
 8001c48:	f003 0201 	and.w	r2, r3, #1
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d017      	beq.n	8001c9a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	2203      	movs	r2, #3
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d123      	bne.n	8001cee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	08da      	lsrs	r2, r3, #3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3208      	adds	r2, #8
 8001cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	220f      	movs	r2, #15
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43db      	mvns	r3, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	691a      	ldr	r2, [r3, #16]
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	f003 0307 	and.w	r3, r3, #7
 8001cd4:	009b      	lsls	r3, r3, #2
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	69b9      	ldr	r1, [r7, #24]
 8001cea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0203 	and.w	r2, r3, #3
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80e0 	beq.w	8001ef0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d30:	4b2f      	ldr	r3, [pc, #188]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d32:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d36:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001d40:	4b2b      	ldr	r3, [pc, #172]	@ (8001df0 <HAL_GPIO_Init+0x238>)
 8001d42:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4e:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <HAL_GPIO_Init+0x23c>)
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	089b      	lsrs	r3, r3, #2
 8001d54:	3302      	adds	r3, #2
 8001d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0303 	and.w	r3, r3, #3
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	220f      	movs	r2, #15
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a20      	ldr	r2, [pc, #128]	@ (8001df8 <HAL_GPIO_Init+0x240>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d052      	beq.n	8001e20 <HAL_GPIO_Init+0x268>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dfc <HAL_GPIO_Init+0x244>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d031      	beq.n	8001de6 <HAL_GPIO_Init+0x22e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a1e      	ldr	r2, [pc, #120]	@ (8001e00 <HAL_GPIO_Init+0x248>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d02b      	beq.n	8001de2 <HAL_GPIO_Init+0x22a>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e04 <HAL_GPIO_Init+0x24c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d025      	beq.n	8001dde <HAL_GPIO_Init+0x226>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a1c      	ldr	r2, [pc, #112]	@ (8001e08 <HAL_GPIO_Init+0x250>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d01f      	beq.n	8001dda <HAL_GPIO_Init+0x222>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	@ (8001e0c <HAL_GPIO_Init+0x254>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x21e>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e10 <HAL_GPIO_Init+0x258>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a19      	ldr	r2, [pc, #100]	@ (8001e14 <HAL_GPIO_Init+0x25c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x216>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a18      	ldr	r2, [pc, #96]	@ (8001e18 <HAL_GPIO_Init+0x260>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x212>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a17      	ldr	r2, [pc, #92]	@ (8001e1c <HAL_GPIO_Init+0x264>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x20e>
 8001dc2:	2309      	movs	r3, #9
 8001dc4:	e02d      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	e02b      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dca:	2308      	movs	r3, #8
 8001dcc:	e029      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dce:	2307      	movs	r3, #7
 8001dd0:	e027      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dd2:	2306      	movs	r3, #6
 8001dd4:	e025      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dd6:	2305      	movs	r3, #5
 8001dd8:	e023      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e021      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dde:	2303      	movs	r3, #3
 8001de0:	e01f      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001de2:	2302      	movs	r3, #2
 8001de4:	e01d      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001de6:	2301      	movs	r3, #1
 8001de8:	e01b      	b.n	8001e22 <HAL_GPIO_Init+0x26a>
 8001dea:	bf00      	nop
 8001dec:	58000080 	.word	0x58000080
 8001df0:	58024400 	.word	0x58024400
 8001df4:	58000400 	.word	0x58000400
 8001df8:	58020000 	.word	0x58020000
 8001dfc:	58020400 	.word	0x58020400
 8001e00:	58020800 	.word	0x58020800
 8001e04:	58020c00 	.word	0x58020c00
 8001e08:	58021000 	.word	0x58021000
 8001e0c:	58021400 	.word	0x58021400
 8001e10:	58021800 	.word	0x58021800
 8001e14:	58021c00 	.word	0x58021c00
 8001e18:	58022000 	.word	0x58022000
 8001e1c:	58022400 	.word	0x58022400
 8001e20:	2300      	movs	r3, #0
 8001e22:	69fa      	ldr	r2, [r7, #28]
 8001e24:	f002 0203 	and.w	r2, r2, #3
 8001e28:	0092      	lsls	r2, r2, #2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e32:	4938      	ldr	r1, [pc, #224]	@ (8001f14 <HAL_GPIO_Init+0x35c>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d003      	beq.n	8001e66 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e6e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d003      	beq.n	8001eea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	fa22 f303 	lsr.w	r3, r2, r3
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f47f ae63 	bne.w	8001bcc <HAL_GPIO_Init+0x14>
  }
}
 8001f06:	bf00      	nop
 8001f08:	bf00      	nop
 8001f0a:	3724      	adds	r7, #36	@ 0x24
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	58000400 	.word	0x58000400

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f34:	e003      	b.n	8001f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	041a      	lsls	r2, r3, #16
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	619a      	str	r2, [r3, #24]
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr

08001f4a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b086      	sub	sp, #24
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d101      	bne.n	8001f5c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e0fe      	b.n	800215a <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d106      	bne.n	8001f76 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7fe fed5 	bl	8000d20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2203      	movs	r2, #3
 8001f7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f004 f8bc 	bl	8006100 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7c1a      	ldrb	r2, [r3, #16]
 8001f90:	f88d 2000 	strb.w	r2, [sp]
 8001f94:	3304      	adds	r3, #4
 8001f96:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f98:	f004 f840 	bl	800601c <USB_CoreInit>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2202      	movs	r2, #2
 8001fa6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e0d5      	b.n	800215a <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f004 f8b4 	bl	8006122 <USB_SetCurrentMode>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d005      	beq.n	8001fcc <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e0c6      	b.n	800215a <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	73fb      	strb	r3, [r7, #15]
 8001fd0:	e04a      	b.n	8002068 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	3315      	adds	r3, #21
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3314      	adds	r3, #20
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b298      	uxth	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	00db      	lsls	r3, r3, #3
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	332e      	adds	r3, #46	@ 0x2e
 800200e:	4602      	mov	r2, r0
 8002010:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	3318      	adds	r3, #24
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002026:	7bfa      	ldrb	r2, [r7, #15]
 8002028:	6879      	ldr	r1, [r7, #4]
 800202a:	4613      	mov	r3, r2
 800202c:	00db      	lsls	r3, r3, #3
 800202e:	4413      	add	r3, r2
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	440b      	add	r3, r1
 8002034:	331c      	adds	r3, #28
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	3320      	adds	r3, #32
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800204e:	7bfa      	ldrb	r2, [r7, #15]
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	00db      	lsls	r3, r3, #3
 8002056:	4413      	add	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	440b      	add	r3, r1
 800205c:	3324      	adds	r3, #36	@ 0x24
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	3301      	adds	r3, #1
 8002066:	73fb      	strb	r3, [r7, #15]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	791b      	ldrb	r3, [r3, #4]
 800206c:	7bfa      	ldrb	r2, [r7, #15]
 800206e:	429a      	cmp	r2, r3
 8002070:	d3af      	bcc.n	8001fd2 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]
 8002076:	e044      	b.n	8002102 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	3301      	adds	r3, #1
 8002100:	73fb      	strb	r3, [r7, #15]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	429a      	cmp	r2, r3
 800210a:	d3b5      	bcc.n	8002078 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6818      	ldr	r0, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	7c1a      	ldrb	r2, [r3, #16]
 8002114:	f88d 2000 	strb.w	r2, [sp]
 8002118:	3304      	adds	r3, #4
 800211a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800211c:	f004 f84e 	bl	80061bc <USB_DevInit>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d005      	beq.n	8002132 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2202      	movs	r2, #2
 800212a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e013      	b.n	800215a <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	7b1b      	ldrb	r3, [r3, #12]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f80b 	bl	8002164 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4618      	mov	r0, r3
 8002154:	f004 fa09 	bl	800656a <USB_DevDisconnect>

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
	...

08002164 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002164:	b480      	push	{r7}
 8002166:	b085      	sub	sp, #20
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002192:	4b05      	ldr	r3, [pc, #20]	@ (80021a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8002194:	4313      	orrs	r3, r2
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	10000003 	.word	0x10000003

080021ac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80021b4:	4b19      	ldr	r3, [pc, #100]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b04      	cmp	r3, #4
 80021be:	d00a      	beq.n	80021d6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80021c0:	4b16      	ldr	r3, [pc, #88]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d001      	beq.n	80021d2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e01f      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80021d2:	2300      	movs	r3, #0
 80021d4:	e01d      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80021d6:	4b11      	ldr	r3, [pc, #68]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	f023 0207 	bic.w	r2, r3, #7
 80021de:	490f      	ldr	r1, [pc, #60]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80021e6:	f7fe ff7f 	bl	80010e8 <HAL_GetTick>
 80021ea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021ec:	e009      	b.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021ee:	f7fe ff7b 	bl	80010e8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021fc:	d901      	bls.n	8002202 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e007      	b.n	8002212 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002202:	4b06      	ldr	r3, [pc, #24]	@ (800221c <HAL_PWREx_ConfigSupply+0x70>)
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800220a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800220e:	d1ee      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	58024800 	.word	0x58024800

08002220 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002224:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800222a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	58024800 	.word	0x58024800

08002240 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08c      	sub	sp, #48	@ 0x30
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d102      	bne.n	8002254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	f000 bc48 	b.w	8002ae4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	f000 8088 	beq.w	8002372 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002262:	4b99      	ldr	r3, [pc, #612]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800226a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800226c:	4b96      	ldr	r3, [pc, #600]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800226e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002270:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002274:	2b10      	cmp	r3, #16
 8002276:	d007      	beq.n	8002288 <HAL_RCC_OscConfig+0x48>
 8002278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800227a:	2b18      	cmp	r3, #24
 800227c:	d111      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
 800227e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d10c      	bne.n	80022a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002288:	4b8f      	ldr	r3, [pc, #572]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d06d      	beq.n	8002370 <HAL_RCC_OscConfig+0x130>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d169      	bne.n	8002370 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	f000 bc21 	b.w	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022aa:	d106      	bne.n	80022ba <HAL_RCC_OscConfig+0x7a>
 80022ac:	4b86      	ldr	r3, [pc, #536]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a85      	ldr	r2, [pc, #532]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	e02e      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0x9c>
 80022c2:	4b81      	ldr	r3, [pc, #516]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a80      	ldr	r2, [pc, #512]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b7e      	ldr	r3, [pc, #504]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7d      	ldr	r2, [pc, #500]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e01d      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0xc0>
 80022e6:	4b78      	ldr	r3, [pc, #480]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a77      	ldr	r2, [pc, #476]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b75      	ldr	r3, [pc, #468]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a74      	ldr	r2, [pc, #464]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80022f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_RCC_OscConfig+0xd8>
 8002300:	4b71      	ldr	r3, [pc, #452]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a70      	ldr	r2, [pc, #448]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002306:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	4b6e      	ldr	r3, [pc, #440]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6d      	ldr	r2, [pc, #436]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002312:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002316:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d013      	beq.n	8002348 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7fe fee2 	bl	80010e8 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002328:	f7fe fede 	bl	80010e8 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	@ 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e3d4      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800233a:	4b63      	ldr	r3, [pc, #396]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0xe8>
 8002346:	e014      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7fe fece 	bl	80010e8 <HAL_GetTick>
 800234c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002350:	f7fe feca 	bl	80010e8 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b64      	cmp	r3, #100	@ 0x64
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e3c0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002362:	4b59      	ldr	r3, [pc, #356]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x110>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 80ca 	beq.w	8002514 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002380:	4b51      	ldr	r3, [pc, #324]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002388:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800238a:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800238c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800238e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002390:	6a3b      	ldr	r3, [r7, #32]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d007      	beq.n	80023a6 <HAL_RCC_OscConfig+0x166>
 8002396:	6a3b      	ldr	r3, [r7, #32]
 8002398:	2b18      	cmp	r3, #24
 800239a:	d156      	bne.n	800244a <HAL_RCC_OscConfig+0x20a>
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d151      	bne.n	800244a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a6:	4b48      	ldr	r3, [pc, #288]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0304 	and.w	r3, r3, #4
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_RCC_OscConfig+0x17e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	68db      	ldr	r3, [r3, #12]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e392      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023be:	4b42      	ldr	r3, [pc, #264]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f023 0219 	bic.w	r2, r3, #25
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	493f      	ldr	r1, [pc, #252]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d0:	f7fe fe8a 	bl	80010e8 <HAL_GetTick>
 80023d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe fe86 	bl	80010e8 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e37c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ea:	4b37      	ldr	r3, [pc, #220]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f6:	f7fe fea7 	bl	8001148 <HAL_GetREVID>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002400:	4293      	cmp	r3, r2
 8002402:	d817      	bhi.n	8002434 <HAL_RCC_OscConfig+0x1f4>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	691b      	ldr	r3, [r3, #16]
 8002408:	2b40      	cmp	r3, #64	@ 0x40
 800240a:	d108      	bne.n	800241e <HAL_RCC_OscConfig+0x1de>
 800240c:	4b2e      	ldr	r3, [pc, #184]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002414:	4a2c      	ldr	r2, [pc, #176]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002416:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800241a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800241c:	e07a      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800241e:	4b2a      	ldr	r3, [pc, #168]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	031b      	lsls	r3, r3, #12
 800242c:	4926      	ldr	r1, [pc, #152]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 800242e:	4313      	orrs	r3, r2
 8002430:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002432:	e06f      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002434:	4b24      	ldr	r3, [pc, #144]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	061b      	lsls	r3, r3, #24
 8002442:	4921      	ldr	r1, [pc, #132]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002444:	4313      	orrs	r3, r2
 8002446:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002448:	e064      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d047      	beq.n	80024e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002452:	4b1d      	ldr	r3, [pc, #116]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 0219 	bic.w	r2, r3, #25
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	491a      	ldr	r1, [pc, #104]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002460:	4313      	orrs	r3, r2
 8002462:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002464:	f7fe fe40 	bl	80010e8 <HAL_GetTick>
 8002468:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800246a:	e008      	b.n	800247e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800246c:	f7fe fe3c 	bl	80010e8 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d901      	bls.n	800247e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e332      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800247e:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	2b00      	cmp	r3, #0
 8002488:	d0f0      	beq.n	800246c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800248a:	f7fe fe5d 	bl	8001148 <HAL_GetREVID>
 800248e:	4603      	mov	r3, r0
 8002490:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002494:	4293      	cmp	r3, r2
 8002496:	d819      	bhi.n	80024cc <HAL_RCC_OscConfig+0x28c>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	2b40      	cmp	r3, #64	@ 0x40
 800249e:	d108      	bne.n	80024b2 <HAL_RCC_OscConfig+0x272>
 80024a0:	4b09      	ldr	r3, [pc, #36]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ae:	6053      	str	r3, [r2, #4]
 80024b0:	e030      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 80024b2:	4b05      	ldr	r3, [pc, #20]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	691b      	ldr	r3, [r3, #16]
 80024be:	031b      	lsls	r3, r3, #12
 80024c0:	4901      	ldr	r1, [pc, #4]	@ (80024c8 <HAL_RCC_OscConfig+0x288>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	604b      	str	r3, [r1, #4]
 80024c6:	e025      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
 80024c8:	58024400 	.word	0x58024400
 80024cc:	4b9a      	ldr	r3, [pc, #616]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691b      	ldr	r3, [r3, #16]
 80024d8:	061b      	lsls	r3, r3, #24
 80024da:	4997      	ldr	r1, [pc, #604]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
 80024e0:	e018      	b.n	8002514 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024e2:	4b95      	ldr	r3, [pc, #596]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a94      	ldr	r2, [pc, #592]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ee:	f7fe fdfb 	bl	80010e8 <HAL_GetTick>
 80024f2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024f6:	f7fe fdf7 	bl	80010e8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e2ed      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002508:	4b8b      	ldr	r3, [pc, #556]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0310 	and.w	r3, r3, #16
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80a9 	beq.w	8002674 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002522:	4b85      	ldr	r3, [pc, #532]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800252a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800252c:	4b82      	ldr	r3, [pc, #520]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	2b08      	cmp	r3, #8
 8002536:	d007      	beq.n	8002548 <HAL_RCC_OscConfig+0x308>
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	2b18      	cmp	r3, #24
 800253c:	d13a      	bne.n	80025b4 <HAL_RCC_OscConfig+0x374>
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f003 0303 	and.w	r3, r3, #3
 8002544:	2b01      	cmp	r3, #1
 8002546:	d135      	bne.n	80025b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002548:	4b7b      	ldr	r3, [pc, #492]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_RCC_OscConfig+0x320>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	69db      	ldr	r3, [r3, #28]
 8002558:	2b80      	cmp	r3, #128	@ 0x80
 800255a:	d001      	beq.n	8002560 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e2c1      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002560:	f7fe fdf2 	bl	8001148 <HAL_GetREVID>
 8002564:	4603      	mov	r3, r0
 8002566:	f241 0203 	movw	r2, #4099	@ 0x1003
 800256a:	4293      	cmp	r3, r2
 800256c:	d817      	bhi.n	800259e <HAL_RCC_OscConfig+0x35e>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a1b      	ldr	r3, [r3, #32]
 8002572:	2b20      	cmp	r3, #32
 8002574:	d108      	bne.n	8002588 <HAL_RCC_OscConfig+0x348>
 8002576:	4b70      	ldr	r3, [pc, #448]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800257e:	4a6e      	ldr	r2, [pc, #440]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002580:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002584:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002586:	e075      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002588:	4b6b      	ldr	r3, [pc, #428]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a1b      	ldr	r3, [r3, #32]
 8002594:	069b      	lsls	r3, r3, #26
 8002596:	4968      	ldr	r1, [pc, #416]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800259c:	e06a      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800259e:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	061b      	lsls	r3, r3, #24
 80025ac:	4962      	ldr	r1, [pc, #392]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80025b2:	e05f      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	69db      	ldr	r3, [r3, #28]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d042      	beq.n	8002642 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80025bc:	4b5e      	ldr	r3, [pc, #376]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a5d      	ldr	r2, [pc, #372]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c8:	f7fe fd8e 	bl	80010e8 <HAL_GetTick>
 80025cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025d0:	f7fe fd8a 	bl	80010e8 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e280      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025e2:	4b55      	ldr	r3, [pc, #340]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d0f0      	beq.n	80025d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ee:	f7fe fdab 	bl	8001148 <HAL_GetREVID>
 80025f2:	4603      	mov	r3, r0
 80025f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d817      	bhi.n	800262c <HAL_RCC_OscConfig+0x3ec>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a1b      	ldr	r3, [r3, #32]
 8002600:	2b20      	cmp	r3, #32
 8002602:	d108      	bne.n	8002616 <HAL_RCC_OscConfig+0x3d6>
 8002604:	4b4c      	ldr	r3, [pc, #304]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800260c:	4a4a      	ldr	r2, [pc, #296]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800260e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002612:	6053      	str	r3, [r2, #4]
 8002614:	e02e      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
 8002616:	4b48      	ldr	r3, [pc, #288]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	069b      	lsls	r3, r3, #26
 8002624:	4944      	ldr	r1, [pc, #272]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
 800262a:	e023      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
 800262c:	4b42      	ldr	r3, [pc, #264]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	493f      	ldr	r1, [pc, #252]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800263c:	4313      	orrs	r3, r2
 800263e:	60cb      	str	r3, [r1, #12]
 8002640:	e018      	b.n	8002674 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002642:	4b3d      	ldr	r3, [pc, #244]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a3c      	ldr	r2, [pc, #240]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002648:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800264c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800264e:	f7fe fd4b 	bl	80010e8 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002656:	f7fe fd47 	bl	80010e8 <HAL_GetTick>
 800265a:	4602      	mov	r2, r0
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e23d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002668:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002670:	2b00      	cmp	r3, #0
 8002672:	d1f0      	bne.n	8002656 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	d036      	beq.n	80026ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	695b      	ldr	r3, [r3, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d019      	beq.n	80026bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002688:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800268a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800268c:	4a2a      	ldr	r2, [pc, #168]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800268e:	f043 0301 	orr.w	r3, r3, #1
 8002692:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002694:	f7fe fd28 	bl	80010e8 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800269c:	f7fe fd24 	bl	80010e8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e21a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80026ae:	4b22      	ldr	r3, [pc, #136]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d0f0      	beq.n	800269c <HAL_RCC_OscConfig+0x45c>
 80026ba:	e018      	b.n	80026ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026c2:	f023 0301 	bic.w	r3, r3, #1
 80026c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c8:	f7fe fd0e 	bl	80010e8 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026d0:	f7fe fd0a 	bl	80010e8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e200      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026e2:	4b15      	ldr	r3, [pc, #84]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0320 	and.w	r3, r3, #32
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d039      	beq.n	800276e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d01c      	beq.n	800273c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002702:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a0c      	ldr	r2, [pc, #48]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 8002708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800270c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800270e:	f7fe fceb 	bl	80010e8 <HAL_GetTick>
 8002712:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002716:	f7fe fce7 	bl	80010e8 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1dd      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <HAL_RCC_OscConfig+0x4f8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x4d6>
 8002734:	e01b      	b.n	800276e <HAL_RCC_OscConfig+0x52e>
 8002736:	bf00      	nop
 8002738:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800273c:	4b9b      	ldr	r3, [pc, #620]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a9a      	ldr	r2, [pc, #616]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002742:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002746:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002748:	f7fe fcce 	bl	80010e8 <HAL_GetTick>
 800274c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800274e:	e008      	b.n	8002762 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002750:	f7fe fcca 	bl	80010e8 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	2b02      	cmp	r3, #2
 800275c:	d901      	bls.n	8002762 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800275e:	2303      	movs	r3, #3
 8002760:	e1c0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002762:	4b92      	ldr	r3, [pc, #584]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d1f0      	bne.n	8002750 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8081 	beq.w	800287e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800277c:	4b8c      	ldr	r3, [pc, #560]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a8b      	ldr	r2, [pc, #556]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 8002782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002786:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002788:	f7fe fcae 	bl	80010e8 <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002790:	f7fe fcaa 	bl	80010e8 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b64      	cmp	r3, #100	@ 0x64
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e1a0      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027a2:	4b83      	ldr	r3, [pc, #524]	@ (80029b0 <HAL_RCC_OscConfig+0x770>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d106      	bne.n	80027c4 <HAL_RCC_OscConfig+0x584>
 80027b6:	4b7d      	ldr	r3, [pc, #500]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ba:	4a7c      	ldr	r2, [pc, #496]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c2:	e02d      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10c      	bne.n	80027e6 <HAL_RCC_OscConfig+0x5a6>
 80027cc:	4b77      	ldr	r3, [pc, #476]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	4a76      	ldr	r2, [pc, #472]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027d2:	f023 0301 	bic.w	r3, r3, #1
 80027d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027d8:	4b74      	ldr	r3, [pc, #464]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027dc:	4a73      	ldr	r2, [pc, #460]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027de:	f023 0304 	bic.w	r3, r3, #4
 80027e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e4:	e01c      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x5c8>
 80027ee:	4b6f      	ldr	r3, [pc, #444]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f2:	4a6e      	ldr	r2, [pc, #440]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027f4:	f043 0304 	orr.w	r3, r3, #4
 80027f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027fa:	4b6c      	ldr	r3, [pc, #432]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80027fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027fe:	4a6b      	ldr	r2, [pc, #428]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002800:	f043 0301 	orr.w	r3, r3, #1
 8002804:	6713      	str	r3, [r2, #112]	@ 0x70
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0x5e0>
 8002808:	4b68      	ldr	r3, [pc, #416]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800280c:	4a67      	ldr	r2, [pc, #412]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800280e:	f023 0301 	bic.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	@ 0x70
 8002814:	4b65      	ldr	r3, [pc, #404]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002818:	4a64      	ldr	r2, [pc, #400]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800281a:	f023 0304 	bic.w	r3, r3, #4
 800281e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe fc5e 	bl	80010e8 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800282e:	e00a      	b.n	8002846 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002830:	f7fe fc5a 	bl	80010e8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800283e:	4293      	cmp	r3, r2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e14e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002846:	4b59      	ldr	r3, [pc, #356]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0ee      	beq.n	8002830 <HAL_RCC_OscConfig+0x5f0>
 8002852:	e014      	b.n	800287e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe fc48 	bl	80010e8 <HAL_GetTick>
 8002858:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe fc44 	bl	80010e8 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e138      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002872:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1ee      	bne.n	800285c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 812d 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002888:	4b48      	ldr	r3, [pc, #288]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002890:	2b18      	cmp	r3, #24
 8002892:	f000 80bd 	beq.w	8002a10 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800289a:	2b02      	cmp	r3, #2
 800289c:	f040 809e 	bne.w	80029dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028a0:	4b42      	ldr	r3, [pc, #264]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a41      	ldr	r2, [pc, #260]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ac:	f7fe fc1c 	bl	80010e8 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028b4:	f7fe fc18 	bl	80010e8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e10e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028c6:	4b39      	ldr	r3, [pc, #228]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d1f0      	bne.n	80028b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d2:	4b36      	ldr	r3, [pc, #216]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028d4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80028d6:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_RCC_OscConfig+0x774>)
 80028d8:	4013      	ands	r3, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028e2:	0112      	lsls	r2, r2, #4
 80028e4:	430a      	orrs	r2, r1
 80028e6:	4931      	ldr	r1, [pc, #196]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	628b      	str	r3, [r1, #40]	@ 0x28
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	3b01      	subs	r3, #1
 80028f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028fa:	3b01      	subs	r3, #1
 80028fc:	025b      	lsls	r3, r3, #9
 80028fe:	b29b      	uxth	r3, r3
 8002900:	431a      	orrs	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	3b01      	subs	r3, #1
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800291c:	4923      	ldr	r1, [pc, #140]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800291e:	4313      	orrs	r3, r2
 8002920:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002922:	4b22      	ldr	r3, [pc, #136]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002924:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002926:	4a21      	ldr	r2, [pc, #132]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800292e:	4b1f      	ldr	r3, [pc, #124]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002930:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002932:	4b21      	ldr	r3, [pc, #132]	@ (80029b8 <HAL_RCC_OscConfig+0x778>)
 8002934:	4013      	ands	r3, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800293a:	00d2      	lsls	r2, r2, #3
 800293c:	491b      	ldr	r1, [pc, #108]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002942:	4b1a      	ldr	r3, [pc, #104]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002946:	f023 020c 	bic.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	4917      	ldr	r1, [pc, #92]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002950:	4313      	orrs	r3, r2
 8002952:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002954:	4b15      	ldr	r3, [pc, #84]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002958:	f023 0202 	bic.w	r2, r3, #2
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	4912      	ldr	r1, [pc, #72]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002962:	4313      	orrs	r3, r2
 8002964:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002966:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002970:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	4a0d      	ldr	r2, [pc, #52]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002978:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800298c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800298e:	4a07      	ldr	r2, [pc, #28]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002996:	4b05      	ldr	r3, [pc, #20]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a04      	ldr	r2, [pc, #16]	@ (80029ac <HAL_RCC_OscConfig+0x76c>)
 800299c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7fe fba1 	bl	80010e8 <HAL_GetTick>
 80029a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029a8:	e011      	b.n	80029ce <HAL_RCC_OscConfig+0x78e>
 80029aa:	bf00      	nop
 80029ac:	58024400 	.word	0x58024400
 80029b0:	58024800 	.word	0x58024800
 80029b4:	fffffc0c 	.word	0xfffffc0c
 80029b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029bc:	f7fe fb94 	bl	80010e8 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e08a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029ce:	4b47      	ldr	r3, [pc, #284]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0f0      	beq.n	80029bc <HAL_RCC_OscConfig+0x77c>
 80029da:	e082      	b.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029dc:	4b43      	ldr	r3, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a42      	ldr	r2, [pc, #264]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 80029e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fb7e 	bl	80010e8 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7fe fb7a 	bl	80010e8 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e070      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a02:	4b3a      	ldr	r3, [pc, #232]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x7b0>
 8002a0e:	e068      	b.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a10:	4b36      	ldr	r3, [pc, #216]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a16:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d031      	beq.n	8002a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f003 0203 	and.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d12a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d122      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d11a      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0a5b      	lsrs	r3, r3, #9
 8002a56:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d111      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	0c1b      	lsrs	r3, r3, #16
 8002a68:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d108      	bne.n	8002a88 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	0e1b      	lsrs	r3, r3, #24
 8002a7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a82:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e02b      	b.n	8002ae4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a8c:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002a8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a90:	08db      	lsrs	r3, r3, #3
 8002a92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a96:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d01f      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aa6:	4a11      	ldr	r2, [pc, #68]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002aa8:	f023 0301 	bic.w	r3, r3, #1
 8002aac:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aae:	f7fe fb1b 	bl	80010e8 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002ab4:	bf00      	nop
 8002ab6:	f7fe fb17 	bl	80010e8 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d0f9      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ac2:	4b0a      	ldr	r3, [pc, #40]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ac4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8002af0 <HAL_RCC_OscConfig+0x8b0>)
 8002ac8:	4013      	ands	r3, r2
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ace:	00d2      	lsls	r2, r2, #3
 8002ad0:	4906      	ldr	r1, [pc, #24]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ada:	4a04      	ldr	r2, [pc, #16]	@ (8002aec <HAL_RCC_OscConfig+0x8ac>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3730      	adds	r7, #48	@ 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	58024400 	.word	0x58024400
 8002af0:	ffff0007 	.word	0xffff0007

08002af4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d101      	bne.n	8002b08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e19c      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b08:	4b8a      	ldr	r3, [pc, #552]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 030f 	and.w	r3, r3, #15
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d910      	bls.n	8002b38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b16:	4b87      	ldr	r3, [pc, #540]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f023 020f 	bic.w	r2, r3, #15
 8002b1e:	4985      	ldr	r1, [pc, #532]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b26:	4b83      	ldr	r3, [pc, #524]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e184      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0304 	and.w	r3, r3, #4
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d010      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	4b7b      	ldr	r3, [pc, #492]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b4a:	699b      	ldr	r3, [r3, #24]
 8002b4c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d908      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b54:	4b78      	ldr	r3, [pc, #480]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	4975      	ldr	r1, [pc, #468]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0308 	and.w	r3, r3, #8
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d010      	beq.n	8002b94 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	4b70      	ldr	r3, [pc, #448]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b78:	69db      	ldr	r3, [r3, #28]
 8002b7a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d908      	bls.n	8002b94 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b82:	4b6d      	ldr	r3, [pc, #436]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	695b      	ldr	r3, [r3, #20]
 8002b8e:	496a      	ldr	r1, [pc, #424]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d010      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	4b64      	ldr	r3, [pc, #400]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ba6:	69db      	ldr	r3, [r3, #28]
 8002ba8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d908      	bls.n	8002bc2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb0:	4b61      	ldr	r3, [pc, #388]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	69db      	ldr	r3, [r3, #28]
 8002bb4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	495e      	ldr	r1, [pc, #376]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d010      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	69da      	ldr	r2, [r3, #28]
 8002bd2:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d908      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bde:	4b56      	ldr	r3, [pc, #344]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	69db      	ldr	r3, [r3, #28]
 8002bea:	4953      	ldr	r1, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0302 	and.w	r3, r3, #2
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d010      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68da      	ldr	r2, [r3, #12]
 8002c00:	4b4d      	ldr	r3, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d908      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	f023 020f 	bic.w	r2, r3, #15
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4947      	ldr	r1, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c1a:	4313      	orrs	r3, r2
 8002c1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d055      	beq.n	8002cd6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c2a:	4b43      	ldr	r3, [pc, #268]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	4940      	ldr	r1, [pc, #256]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c44:	4b3c      	ldr	r3, [pc, #240]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e0f6      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	2b03      	cmp	r3, #3
 8002c5a:	d107      	bne.n	8002c6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c5c:	4b36      	ldr	r3, [pc, #216]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d115      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e0ea      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d107      	bne.n	8002c84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c74:	4b30      	ldr	r3, [pc, #192]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d109      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e0de      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c84:	4b2c      	ldr	r3, [pc, #176]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d101      	bne.n	8002c94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0d6      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c94:	4b28      	ldr	r3, [pc, #160]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f023 0207 	bic.w	r2, r3, #7
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	4925      	ldr	r1, [pc, #148]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ca6:	f7fe fa1f 	bl	80010e8 <HAL_GetTick>
 8002caa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cac:	e00a      	b.n	8002cc4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cae:	f7fe fa1b 	bl	80010e8 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d901      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002cc0:	2303      	movs	r3, #3
 8002cc2:	e0be      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d1eb      	bne.n	8002cae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0302 	and.w	r3, r3, #2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d010      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	4b14      	ldr	r3, [pc, #80]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d208      	bcs.n	8002d04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cf2:	4b11      	ldr	r3, [pc, #68]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f023 020f 	bic.w	r2, r3, #15
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d04:	4b0b      	ldr	r3, [pc, #44]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 030f 	and.w	r3, r3, #15
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d214      	bcs.n	8002d3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d12:	4b08      	ldr	r3, [pc, #32]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f023 020f 	bic.w	r2, r3, #15
 8002d1a:	4906      	ldr	r1, [pc, #24]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d22:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <HAL_RCC_ClockConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d005      	beq.n	8002d3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e086      	b.n	8002e42 <HAL_RCC_ClockConfig+0x34e>
 8002d34:	52002000 	.word	0x52002000
 8002d38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d010      	beq.n	8002d6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	691a      	ldr	r2, [r3, #16]
 8002d4c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d208      	bcs.n	8002d6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d58:	4b3c      	ldr	r3, [pc, #240]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	4939      	ldr	r1, [pc, #228]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0308 	and.w	r3, r3, #8
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d010      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	695a      	ldr	r2, [r3, #20]
 8002d7a:	4b34      	ldr	r3, [pc, #208]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d208      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d86:	4b31      	ldr	r3, [pc, #196]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	492e      	ldr	r1, [pc, #184]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d010      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	699a      	ldr	r2, [r3, #24]
 8002da8:	4b28      	ldr	r3, [pc, #160]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002daa:	69db      	ldr	r3, [r3, #28]
 8002dac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d208      	bcs.n	8002dc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002db4:	4b25      	ldr	r3, [pc, #148]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	4922      	ldr	r1, [pc, #136]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d010      	beq.n	8002df4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69da      	ldr	r2, [r3, #28]
 8002dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	6a1b      	ldr	r3, [r3, #32]
 8002dda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d208      	bcs.n	8002df4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002de2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	4917      	ldr	r1, [pc, #92]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df4:	f000 f834 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	4b14      	ldr	r3, [pc, #80]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002dfc:	699b      	ldr	r3, [r3, #24]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 030f 	and.w	r3, r3, #15
 8002e04:	4912      	ldr	r1, [pc, #72]	@ (8002e50 <HAL_RCC_ClockConfig+0x35c>)
 8002e06:	5ccb      	ldrb	r3, [r1, r3]
 8002e08:	f003 031f 	and.w	r3, r3, #31
 8002e0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e12:	4b0e      	ldr	r3, [pc, #56]	@ (8002e4c <HAL_RCC_ClockConfig+0x358>)
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002e50 <HAL_RCC_ClockConfig+0x35c>)
 8002e1c:	5cd3      	ldrb	r3, [r2, r3]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	693a      	ldr	r2, [r7, #16]
 8002e24:	fa22 f303 	lsr.w	r3, r2, r3
 8002e28:	4a0a      	ldr	r2, [pc, #40]	@ (8002e54 <HAL_RCC_ClockConfig+0x360>)
 8002e2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e2c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e58 <HAL_RCC_ClockConfig+0x364>)
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e32:	4b0a      	ldr	r3, [pc, #40]	@ (8002e5c <HAL_RCC_ClockConfig+0x368>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f90c 	bl	8001054 <HAL_InitTick>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	58024400 	.word	0x58024400
 8002e50:	0800669c 	.word	0x0800669c
 8002e54:	24000004 	.word	0x24000004
 8002e58:	24000000 	.word	0x24000000
 8002e5c:	24000008 	.word	0x24000008

08002e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b089      	sub	sp, #36	@ 0x24
 8002e64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e66:	4bb3      	ldr	r3, [pc, #716]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002e6e:	2b18      	cmp	r3, #24
 8002e70:	f200 8155 	bhi.w	800311e <HAL_RCC_GetSysClockFreq+0x2be>
 8002e74:	a201      	add	r2, pc, #4	@ (adr r2, 8002e7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7a:	bf00      	nop
 8002e7c:	08002ee1 	.word	0x08002ee1
 8002e80:	0800311f 	.word	0x0800311f
 8002e84:	0800311f 	.word	0x0800311f
 8002e88:	0800311f 	.word	0x0800311f
 8002e8c:	0800311f 	.word	0x0800311f
 8002e90:	0800311f 	.word	0x0800311f
 8002e94:	0800311f 	.word	0x0800311f
 8002e98:	0800311f 	.word	0x0800311f
 8002e9c:	08002f07 	.word	0x08002f07
 8002ea0:	0800311f 	.word	0x0800311f
 8002ea4:	0800311f 	.word	0x0800311f
 8002ea8:	0800311f 	.word	0x0800311f
 8002eac:	0800311f 	.word	0x0800311f
 8002eb0:	0800311f 	.word	0x0800311f
 8002eb4:	0800311f 	.word	0x0800311f
 8002eb8:	0800311f 	.word	0x0800311f
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	0800311f 	.word	0x0800311f
 8002ec4:	0800311f 	.word	0x0800311f
 8002ec8:	0800311f 	.word	0x0800311f
 8002ecc:	0800311f 	.word	0x0800311f
 8002ed0:	0800311f 	.word	0x0800311f
 8002ed4:	0800311f 	.word	0x0800311f
 8002ed8:	0800311f 	.word	0x0800311f
 8002edc:	08002f13 	.word	0x08002f13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ee0:	4b94      	ldr	r3, [pc, #592]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d009      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002eec:	4b91      	ldr	r3, [pc, #580]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	4a90      	ldr	r2, [pc, #576]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8002efc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002efe:	e111      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f00:	4b8d      	ldr	r3, [pc, #564]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f02:	61bb      	str	r3, [r7, #24]
      break;
 8002f04:	e10e      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002f06:	4b8d      	ldr	r3, [pc, #564]	@ (800313c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f08:	61bb      	str	r3, [r7, #24]
      break;
 8002f0a:	e10b      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002f0c:	4b8c      	ldr	r3, [pc, #560]	@ (8003140 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002f0e:	61bb      	str	r3, [r7, #24]
      break;
 8002f10:	e108      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f12:	4b88      	ldr	r3, [pc, #544]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002f1c:	4b85      	ldr	r3, [pc, #532]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	091b      	lsrs	r3, r3, #4
 8002f22:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f28:	4b82      	ldr	r3, [pc, #520]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f32:	4b80      	ldr	r3, [pc, #512]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f36:	08db      	lsrs	r3, r3, #3
 8002f38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80e1 	beq.w	8003118 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	f000 8083 	beq.w	8003064 <HAL_RCC_GetSysClockFreq+0x204>
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	f200 80a1 	bhi.w	80030a8 <HAL_RCC_GetSysClockFreq+0x248>
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x114>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d056      	beq.n	8003020 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f72:	e099      	b.n	80030a8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f74:	4b6f      	ldr	r3, [pc, #444]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0320 	and.w	r3, r3, #32
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02d      	beq.n	8002fdc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f80:	4b6c      	ldr	r3, [pc, #432]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	08db      	lsrs	r3, r3, #3
 8002f86:	f003 0303 	and.w	r3, r3, #3
 8002f8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003138 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	ee07 3a90 	vmov	s15, r3
 8002f98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002faa:	4b62      	ldr	r3, [pc, #392]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fb2:	ee07 3a90 	vmov	s15, r3
 8002fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fbe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fda:	e087      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003148 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fee:	4b51      	ldr	r3, [pc, #324]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ff6:	ee07 3a90 	vmov	s15, r3
 8002ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003002:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800300a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800300e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800301e:	e065      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800302a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800314c <HAL_RCC_GetSysClockFreq+0x2ec>
 800302e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003032:	4b40      	ldr	r3, [pc, #256]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800303a:	ee07 3a90 	vmov	s15, r3
 800303e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003042:	ed97 6a02 	vldr	s12, [r7, #8]
 8003046:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800304a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800304e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800305a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800305e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003062:	e043      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	ee07 3a90 	vmov	s15, r3
 800306a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003150 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003076:	4b2f      	ldr	r3, [pc, #188]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800307e:	ee07 3a90 	vmov	s15, r3
 8003082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003086:	ed97 6a02 	vldr	s12, [r7, #8]
 800308a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 800308e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800309a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800309e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030a6:	e021      	b.n	80030ec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	ee07 3a90 	vmov	s15, r3
 80030ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030b2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800314c <HAL_RCC_GetSysClockFreq+0x2ec>
 80030b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030ba:	4b1e      	ldr	r3, [pc, #120]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030c2:	ee07 3a90 	vmov	s15, r3
 80030c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80030ce:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003144 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030ea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030ec:	4b11      	ldr	r3, [pc, #68]	@ (8003134 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030f0:	0a5b      	lsrs	r3, r3, #9
 80030f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030f6:	3301      	adds	r3, #1
 80030f8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003104:	edd7 6a07 	vldr	s13, [r7, #28]
 8003108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800310c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003110:	ee17 3a90 	vmov	r3, s15
 8003114:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003116:	e005      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003118:	2300      	movs	r3, #0
 800311a:	61bb      	str	r3, [r7, #24]
      break;
 800311c:	e002      	b.n	8003124 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800311e:	4b07      	ldr	r3, [pc, #28]	@ (800313c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003120:	61bb      	str	r3, [r7, #24]
      break;
 8003122:	bf00      	nop
  }

  return sysclockfreq;
 8003124:	69bb      	ldr	r3, [r7, #24]
}
 8003126:	4618      	mov	r0, r3
 8003128:	3724      	adds	r7, #36	@ 0x24
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	58024400 	.word	0x58024400
 8003138:	03d09000 	.word	0x03d09000
 800313c:	003d0900 	.word	0x003d0900
 8003140:	007a1200 	.word	0x007a1200
 8003144:	46000000 	.word	0x46000000
 8003148:	4c742400 	.word	0x4c742400
 800314c:	4a742400 	.word	0x4a742400
 8003150:	4af42400 	.word	0x4af42400

08003154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800315a:	f7ff fe81 	bl	8002e60 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x50>)
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	0a1b      	lsrs	r3, r3, #8
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490f      	ldr	r1, [pc, #60]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x54>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	f003 031f 	and.w	r3, r3, #31
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003178:	4b0a      	ldr	r3, [pc, #40]	@ (80031a4 <HAL_RCC_GetHCLKFreq+0x50>)
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 030f 	and.w	r3, r3, #15
 8003180:	4a09      	ldr	r2, [pc, #36]	@ (80031a8 <HAL_RCC_GetHCLKFreq+0x54>)
 8003182:	5cd3      	ldrb	r3, [r2, r3]
 8003184:	f003 031f 	and.w	r3, r3, #31
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	fa22 f303 	lsr.w	r3, r2, r3
 800318e:	4a07      	ldr	r2, [pc, #28]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x58>)
 8003190:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003192:	4a07      	ldr	r2, [pc, #28]	@ (80031b0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003198:	4b04      	ldr	r3, [pc, #16]	@ (80031ac <HAL_RCC_GetHCLKFreq+0x58>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3708      	adds	r7, #8
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	58024400 	.word	0x58024400
 80031a8:	0800669c 	.word	0x0800669c
 80031ac:	24000004 	.word	0x24000004
 80031b0:	24000000 	.word	0x24000000

080031b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80031b8:	f7ff ffcc 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031bc:	4602      	mov	r2, r0
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c0:	69db      	ldr	r3, [r3, #28]
 80031c2:	091b      	lsrs	r3, r3, #4
 80031c4:	f003 0307 	and.w	r3, r3, #7
 80031c8:	4904      	ldr	r1, [pc, #16]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80031ca:	5ccb      	ldrb	r3, [r1, r3]
 80031cc:	f003 031f 	and.w	r3, r3, #31
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	58024400 	.word	0x58024400
 80031dc:	0800669c 	.word	0x0800669c

080031e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031e4:	f7ff ffb6 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 80031e8:	4602      	mov	r2, r0
 80031ea:	4b06      	ldr	r3, [pc, #24]	@ (8003204 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ec:	69db      	ldr	r3, [r3, #28]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	4904      	ldr	r1, [pc, #16]	@ (8003208 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031f6:	5ccb      	ldrb	r3, [r1, r3]
 80031f8:	f003 031f 	and.w	r3, r3, #31
 80031fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	58024400 	.word	0x58024400
 8003208:	0800669c 	.word	0x0800669c

0800320c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800320c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003210:	b0ca      	sub	sp, #296	@ 0x128
 8003212:	af00      	add	r7, sp, #0
 8003214:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003218:	2300      	movs	r3, #0
 800321a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800321e:	2300      	movs	r3, #0
 8003220:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003230:	2500      	movs	r5, #0
 8003232:	ea54 0305 	orrs.w	r3, r4, r5
 8003236:	d049      	beq.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800323e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003242:	d02f      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003244:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003248:	d828      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800324a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800324e:	d01a      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003250:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003254:	d822      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800325a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800325e:	d007      	beq.n	8003270 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003260:	e01c      	b.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003262:	4bb8      	ldr	r3, [pc, #736]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003266:	4ab7      	ldr	r2, [pc, #732]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800326c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800326e:	e01a      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	3308      	adds	r3, #8
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f001 fc8f 	bl	8004b9c <RCCEx_PLL2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003284:	e00f      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	3328      	adds	r3, #40	@ 0x28
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f001 fd36 	bl	8004d00 <RCCEx_PLL3_Config>
 8003294:	4603      	mov	r3, r0
 8003296:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80032ae:	4ba5      	ldr	r3, [pc, #660]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032bc:	4aa1      	ldr	r2, [pc, #644]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032be:	430b      	orrs	r3, r1
 80032c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80032c2:	e003      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80032d8:	f04f 0900 	mov.w	r9, #0
 80032dc:	ea58 0309 	orrs.w	r3, r8, r9
 80032e0:	d047      	beq.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d82a      	bhi.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003309 	.word	0x08003309
 80032f8:	08003317 	.word	0x08003317
 80032fc:	0800332d 	.word	0x0800332d
 8003300:	0800334b 	.word	0x0800334b
 8003304:	0800334b 	.word	0x0800334b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003308:	4b8e      	ldr	r3, [pc, #568]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	4a8d      	ldr	r2, [pc, #564]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800330e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003312:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003314:	e01a      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331a:	3308      	adds	r3, #8
 800331c:	2100      	movs	r1, #0
 800331e:	4618      	mov	r0, r3
 8003320:	f001 fc3c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003324:	4603      	mov	r3, r0
 8003326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800332a:	e00f      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003330:	3328      	adds	r3, #40	@ 0x28
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 fce3 	bl	8004d00 <RCCEx_PLL3_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003340:	e004      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003348:	e000      	b.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800334a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800334c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003350:	2b00      	cmp	r3, #0
 8003352:	d10a      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003354:	4b7b      	ldr	r3, [pc, #492]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003358:	f023 0107 	bic.w	r1, r3, #7
 800335c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003360:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003362:	4a78      	ldr	r2, [pc, #480]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003364:	430b      	orrs	r3, r1
 8003366:	6513      	str	r3, [r2, #80]	@ 0x50
 8003368:	e003      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800336a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003372:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800337e:	f04f 0b00 	mov.w	fp, #0
 8003382:	ea5a 030b 	orrs.w	r3, sl, fp
 8003386:	d04c      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800338c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800338e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003392:	d030      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003398:	d829      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800339a:	2bc0      	cmp	r3, #192	@ 0xc0
 800339c:	d02d      	beq.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800339e:	2bc0      	cmp	r3, #192	@ 0xc0
 80033a0:	d825      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033a2:	2b80      	cmp	r3, #128	@ 0x80
 80033a4:	d018      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80033a6:	2b80      	cmp	r3, #128	@ 0x80
 80033a8:	d821      	bhi.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d002      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033ae:	2b40      	cmp	r3, #64	@ 0x40
 80033b0:	d007      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80033b2:	e01c      	b.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033b4:	4b63      	ldr	r3, [pc, #396]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b8:	4a62      	ldr	r2, [pc, #392]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033c0:	e01c      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033c6:	3308      	adds	r3, #8
 80033c8:	2100      	movs	r1, #0
 80033ca:	4618      	mov	r0, r3
 80033cc:	f001 fbe6 	bl	8004b9c <RCCEx_PLL2_Config>
 80033d0:	4603      	mov	r3, r0
 80033d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033d6:	e011      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033dc:	3328      	adds	r3, #40	@ 0x28
 80033de:	2100      	movs	r1, #0
 80033e0:	4618      	mov	r0, r3
 80033e2:	f001 fc8d 	bl	8004d00 <RCCEx_PLL3_Config>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033ec:	e006      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f4:	e002      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033f6:	bf00      	nop
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10a      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003404:	4b4f      	ldr	r3, [pc, #316]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003408:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800340c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003410:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003412:	4a4c      	ldr	r2, [pc, #304]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003414:	430b      	orrs	r3, r1
 8003416:	6513      	str	r3, [r2, #80]	@ 0x50
 8003418:	e003      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800341a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800342e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003432:	2300      	movs	r3, #0
 8003434:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003438:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800343c:	460b      	mov	r3, r1
 800343e:	4313      	orrs	r3, r2
 8003440:	d053      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003446:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800344a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800344e:	d035      	beq.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003450:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003454:	d82e      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003456:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800345a:	d031      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800345c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003460:	d828      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003462:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003466:	d01a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800346c:	d822      	bhi.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800346e:	2b00      	cmp	r3, #0
 8003470:	d003      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003476:	d007      	beq.n	8003488 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003478:	e01c      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347a:	4b32      	ldr	r3, [pc, #200]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	4a31      	ldr	r2, [pc, #196]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003486:	e01c      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800348c:	3308      	adds	r3, #8
 800348e:	2100      	movs	r1, #0
 8003490:	4618      	mov	r0, r3
 8003492:	f001 fb83 	bl	8004b9c <RCCEx_PLL2_Config>
 8003496:	4603      	mov	r3, r0
 8003498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800349c:	e011      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	3328      	adds	r3, #40	@ 0x28
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fc2a 	bl	8004d00 <RCCEx_PLL3_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e006      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ba:	e002      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034bc:	bf00      	nop
 80034be:	e000      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80034c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10b      	bne.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80034da:	4a1a      	ldr	r2, [pc, #104]	@ (8003544 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034dc:	430b      	orrs	r3, r1
 80034de:	6593      	str	r3, [r2, #88]	@ 0x58
 80034e0:	e003      	b.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80034f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80034fa:	2300      	movs	r3, #0
 80034fc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003500:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003504:	460b      	mov	r3, r1
 8003506:	4313      	orrs	r3, r2
 8003508:	d056      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800350e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003512:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003516:	d038      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003518:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800351c:	d831      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800351e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003522:	d034      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003524:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003528:	d82b      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800352a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800352e:	d01d      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003534:	d825      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800353a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800353e:	d00a      	beq.n	8003556 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003540:	e01f      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003542:	bf00      	nop
 8003544:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4ba2      	ldr	r3, [pc, #648]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	4aa1      	ldr	r2, [pc, #644]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003554:	e01c      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355a:	3308      	adds	r3, #8
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 fb1c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800356a:	e011      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003570:	3328      	adds	r3, #40	@ 0x28
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fbc3 	bl	8004d00 <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e006      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003588:	e002      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800358e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003590:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10b      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003598:	4b8e      	ldr	r3, [pc, #568]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800359a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800359c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80035a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80035a8:	4a8a      	ldr	r2, [pc, #552]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035aa:	430b      	orrs	r3, r1
 80035ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80035ae:	e003      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80035c4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	d03a      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035de:	2b30      	cmp	r3, #48	@ 0x30
 80035e0:	d01f      	beq.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035e2:	2b30      	cmp	r3, #48	@ 0x30
 80035e4:	d819      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035e6:	2b20      	cmp	r3, #32
 80035e8:	d00c      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d815      	bhi.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d019      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035f2:	2b10      	cmp	r3, #16
 80035f4:	d111      	bne.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f6:	4b77      	ldr	r3, [pc, #476]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035fa:	4a76      	ldr	r2, [pc, #472]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003600:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003602:	e011      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003608:	3308      	adds	r3, #8
 800360a:	2102      	movs	r1, #2
 800360c:	4618      	mov	r0, r3
 800360e:	f001 fac5 	bl	8004b9c <RCCEx_PLL2_Config>
 8003612:	4603      	mov	r3, r0
 8003614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003618:	e006      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003620:	e002      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003626:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003628:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003630:	4b68      	ldr	r3, [pc, #416]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003632:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003634:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800363e:	4a65      	ldr	r2, [pc, #404]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003640:	430b      	orrs	r3, r1
 8003642:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003644:	e003      	b.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003646:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800364a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003656:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800365a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800365e:	2300      	movs	r3, #0
 8003660:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003664:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003668:	460b      	mov	r3, r1
 800366a:	4313      	orrs	r3, r2
 800366c:	d051      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800366e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003672:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003674:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003678:	d035      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800367e:	d82e      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003680:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003684:	d031      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003686:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800368a:	d828      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800368c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003690:	d01a      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003696:	d822      	bhi.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800369c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036a0:	d007      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80036a2:	e01c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a4:	4b4b      	ldr	r3, [pc, #300]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	4a4a      	ldr	r2, [pc, #296]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b0:	e01c      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036b6:	3308      	adds	r3, #8
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f001 fa6e 	bl	8004b9c <RCCEx_PLL2_Config>
 80036c0:	4603      	mov	r3, r0
 80036c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036c6:	e011      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	3328      	adds	r3, #40	@ 0x28
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 fb15 	bl	8004d00 <RCCEx_PLL3_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036dc:	e006      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036e4:	e002      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d10a      	bne.n	800370a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80036fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003700:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003702:	4a34      	ldr	r2, [pc, #208]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003704:	430b      	orrs	r3, r1
 8003706:	6513      	str	r3, [r2, #80]	@ 0x50
 8003708:	e003      	b.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800371e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003722:	2300      	movs	r3, #0
 8003724:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003728:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800372c:	460b      	mov	r3, r1
 800372e:	4313      	orrs	r3, r2
 8003730:	d056      	beq.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373c:	d033      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800373e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003742:	d82c      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003744:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003748:	d02f      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800374a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800374e:	d826      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003750:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003754:	d02b      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800375a:	d820      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800375c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003760:	d012      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003762:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003766:	d81a      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003768:	2b00      	cmp	r3, #0
 800376a:	d022      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d115      	bne.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	3308      	adds	r3, #8
 8003778:	2101      	movs	r1, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fa0e 	bl	8004b9c <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003786:	e015      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	3328      	adds	r3, #40	@ 0x28
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fab5 	bl	8004d00 <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800379c:	e00a      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037a6:	bf00      	nop
 80037a8:	e004      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037aa:	bf00      	nop
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80037bc:	4b05      	ldr	r3, [pc, #20]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80037ca:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80037d0:	e006      	b.n	80037e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80037ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80037f0:	2300      	movs	r3, #0
 80037f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80037f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80037fa:	460b      	mov	r3, r1
 80037fc:	4313      	orrs	r3, r2
 80037fe:	d055      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003804:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003808:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800380c:	d033      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800380e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003812:	d82c      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003814:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003818:	d02f      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800381a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800381e:	d826      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003820:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003824:	d02b      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003826:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800382a:	d820      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800382c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003830:	d012      	beq.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003836:	d81a      	bhi.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d022      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800383c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003840:	d115      	bne.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003846:	3308      	adds	r3, #8
 8003848:	2101      	movs	r1, #1
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f9a6 	bl	8004b9c <RCCEx_PLL2_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003856:	e015      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003858:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385c:	3328      	adds	r3, #40	@ 0x28
 800385e:	2101      	movs	r1, #1
 8003860:	4618      	mov	r0, r3
 8003862:	f001 fa4d 	bl	8004d00 <RCCEx_PLL3_Config>
 8003866:	4603      	mov	r3, r0
 8003868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003874:	e006      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003876:	bf00      	nop
 8003878:	e004      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003882:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10b      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800388c:	4ba3      	ldr	r3, [pc, #652]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800388e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003890:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003894:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003898:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800389c:	4a9f      	ldr	r2, [pc, #636]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80038b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	d037      	beq.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d6:	d00e      	beq.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038dc:	d816      	bhi.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d018      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038e6:	d111      	bne.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e8:	4b8c      	ldr	r3, [pc, #560]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	4a8b      	ldr	r2, [pc, #556]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038f4:	e00f      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fa:	3308      	adds	r3, #8
 80038fc:	2101      	movs	r1, #1
 80038fe:	4618      	mov	r0, r3
 8003900:	f001 f94c 	bl	8004b9c <RCCEx_PLL2_Config>
 8003904:	4603      	mov	r3, r0
 8003906:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800390a:	e004      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003912:	e000      	b.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003914:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10a      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800391e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003922:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392c:	4a7b      	ldr	r2, [pc, #492]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	430b      	orrs	r3, r1
 8003930:	6513      	str	r3, [r2, #80]	@ 0x50
 8003932:	e003      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003934:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003938:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003944:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003948:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800394c:	2300      	movs	r3, #0
 800394e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003952:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003956:	460b      	mov	r3, r1
 8003958:	4313      	orrs	r3, r2
 800395a:	d039      	beq.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003962:	2b03      	cmp	r3, #3
 8003964:	d81c      	bhi.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003966:	a201      	add	r2, pc, #4	@ (adr r2, 800396c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396c:	080039a9 	.word	0x080039a9
 8003970:	0800397d 	.word	0x0800397d
 8003974:	0800398b 	.word	0x0800398b
 8003978:	080039a9 	.word	0x080039a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800397c:	4b67      	ldr	r3, [pc, #412]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800397e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003980:	4a66      	ldr	r2, [pc, #408]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003982:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003986:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003988:	e00f      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800398a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800398e:	3308      	adds	r3, #8
 8003990:	2102      	movs	r1, #2
 8003992:	4618      	mov	r0, r3
 8003994:	f001 f902 	bl	8004b9c <RCCEx_PLL2_Config>
 8003998:	4603      	mov	r3, r0
 800399a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039a6:	e000      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80039a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80039b2:	4b5a      	ldr	r3, [pc, #360]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039b6:	f023 0103 	bic.w	r1, r3, #3
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039c0:	4a56      	ldr	r2, [pc, #344]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c2:	430b      	orrs	r3, r1
 80039c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039c6:	e003      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80039dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80039e0:	2300      	movs	r3, #0
 80039e2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80039e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80039ea:	460b      	mov	r3, r1
 80039ec:	4313      	orrs	r3, r2
 80039ee:	f000 809f 	beq.w	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039f2:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039fe:	f7fd fb73 	bl	80010e8 <HAL_GetTick>
 8003a02:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a06:	e00b      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a08:	f7fd fb6e 	bl	80010e8 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b64      	cmp	r3, #100	@ 0x64
 8003a16:	d903      	bls.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a1e:	e005      	b.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003a20:	4b3f      	ldr	r3, [pc, #252]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ed      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d179      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a34:	4b39      	ldr	r3, [pc, #228]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a40:	4053      	eors	r3, r2
 8003a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d015      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a4a:	4b34      	ldr	r3, [pc, #208]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a52:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a56:	4b31      	ldr	r3, [pc, #196]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a5a:	4a30      	ldr	r2, [pc, #192]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a62:	4b2e      	ldr	r3, [pc, #184]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a66:	4a2d      	ldr	r2, [pc, #180]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a6e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a7a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003a7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a82:	d118      	bne.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a84:	f7fd fb30 	bl	80010e8 <HAL_GetTick>
 8003a88:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a8c:	e00d      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a8e:	f7fd fb2b 	bl	80010e8 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003a98:	1ad2      	subs	r2, r2, r3
 8003a9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d903      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003aa8:	e005      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003aaa:	4b1c      	ldr	r3, [pc, #112]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0eb      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d129      	bne.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003ace:	d10e      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003ad0:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003adc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ae0:	091a      	lsrs	r2, r3, #4
 8003ae2:	4b10      	ldr	r3, [pc, #64]	@ (8003b24 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	4a0d      	ldr	r2, [pc, #52]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6113      	str	r3, [r2, #16]
 8003aec:	e005      	b.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003aee:	4b0b      	ldr	r3, [pc, #44]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4a0a      	ldr	r2, [pc, #40]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003af4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003af8:	6113      	str	r3, [r2, #16]
 8003afa:	4b08      	ldr	r3, [pc, #32]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003afc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0a:	4a04      	ldr	r2, [pc, #16]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b10:	e00e      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003b1a:	e009      	b.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003b1c:	58024400 	.word	0x58024400
 8003b20:	58024800 	.word	0x58024800
 8003b24:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b38:	f002 0301 	and.w	r3, r2, #1
 8003b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b40:	2300      	movs	r3, #0
 8003b42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b4a:	460b      	mov	r3, r1
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	f000 8089 	beq.w	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b58:	2b28      	cmp	r3, #40	@ 0x28
 8003b5a:	d86b      	bhi.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003b64 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b62:	bf00      	nop
 8003b64:	08003c3d 	.word	0x08003c3d
 8003b68:	08003c35 	.word	0x08003c35
 8003b6c:	08003c35 	.word	0x08003c35
 8003b70:	08003c35 	.word	0x08003c35
 8003b74:	08003c35 	.word	0x08003c35
 8003b78:	08003c35 	.word	0x08003c35
 8003b7c:	08003c35 	.word	0x08003c35
 8003b80:	08003c35 	.word	0x08003c35
 8003b84:	08003c09 	.word	0x08003c09
 8003b88:	08003c35 	.word	0x08003c35
 8003b8c:	08003c35 	.word	0x08003c35
 8003b90:	08003c35 	.word	0x08003c35
 8003b94:	08003c35 	.word	0x08003c35
 8003b98:	08003c35 	.word	0x08003c35
 8003b9c:	08003c35 	.word	0x08003c35
 8003ba0:	08003c35 	.word	0x08003c35
 8003ba4:	08003c1f 	.word	0x08003c1f
 8003ba8:	08003c35 	.word	0x08003c35
 8003bac:	08003c35 	.word	0x08003c35
 8003bb0:	08003c35 	.word	0x08003c35
 8003bb4:	08003c35 	.word	0x08003c35
 8003bb8:	08003c35 	.word	0x08003c35
 8003bbc:	08003c35 	.word	0x08003c35
 8003bc0:	08003c35 	.word	0x08003c35
 8003bc4:	08003c3d 	.word	0x08003c3d
 8003bc8:	08003c35 	.word	0x08003c35
 8003bcc:	08003c35 	.word	0x08003c35
 8003bd0:	08003c35 	.word	0x08003c35
 8003bd4:	08003c35 	.word	0x08003c35
 8003bd8:	08003c35 	.word	0x08003c35
 8003bdc:	08003c35 	.word	0x08003c35
 8003be0:	08003c35 	.word	0x08003c35
 8003be4:	08003c3d 	.word	0x08003c3d
 8003be8:	08003c35 	.word	0x08003c35
 8003bec:	08003c35 	.word	0x08003c35
 8003bf0:	08003c35 	.word	0x08003c35
 8003bf4:	08003c35 	.word	0x08003c35
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c35 	.word	0x08003c35
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c3d 	.word	0x08003c3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c0c:	3308      	adds	r3, #8
 8003c0e:	2101      	movs	r1, #1
 8003c10:	4618      	mov	r0, r3
 8003c12:	f000 ffc3 	bl	8004b9c <RCCEx_PLL2_Config>
 8003c16:	4603      	mov	r3, r0
 8003c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c1c:	e00f      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c22:	3328      	adds	r3, #40	@ 0x28
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f001 f86a 	bl	8004d00 <RCCEx_PLL3_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c32:	e004      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3a:	e000      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c46:	4bbf      	ldr	r3, [pc, #764]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c52:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c54:	4abb      	ldr	r2, [pc, #748]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c56:	430b      	orrs	r3, r1
 8003c58:	6553      	str	r3, [r2, #84]	@ 0x54
 8003c5a:	e003      	b.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c6c:	f002 0302 	and.w	r3, r2, #2
 8003c70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4313      	orrs	r3, r2
 8003c82:	d041      	beq.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c8a:	2b05      	cmp	r3, #5
 8003c8c:	d824      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003c94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c94:	08003ce1 	.word	0x08003ce1
 8003c98:	08003cad 	.word	0x08003cad
 8003c9c:	08003cc3 	.word	0x08003cc3
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003ce1 	.word	0x08003ce1
 8003ca8:	08003ce1 	.word	0x08003ce1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	2101      	movs	r1, #1
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 ff71 	bl	8004b9c <RCCEx_PLL2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e00f      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cc6:	3328      	adds	r3, #40	@ 0x28
 8003cc8:	2101      	movs	r1, #1
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f001 f818 	bl	8004d00 <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e004      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cde:	e000      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ce0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d10a      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cea:	4b96      	ldr	r3, [pc, #600]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cee:	f023 0107 	bic.w	r1, r3, #7
 8003cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cf8:	4a92      	ldr	r2, [pc, #584]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cfe:	e003      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d10:	f002 0304 	and.w	r3, r2, #4
 8003d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d22:	460b      	mov	r3, r1
 8003d24:	4313      	orrs	r3, r2
 8003d26:	d044      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003d30:	2b05      	cmp	r3, #5
 8003d32:	d825      	bhi.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d34:	a201      	add	r2, pc, #4	@ (adr r2, 8003d3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d3a:	bf00      	nop
 8003d3c:	08003d89 	.word	0x08003d89
 8003d40:	08003d55 	.word	0x08003d55
 8003d44:	08003d6b 	.word	0x08003d6b
 8003d48:	08003d89 	.word	0x08003d89
 8003d4c:	08003d89 	.word	0x08003d89
 8003d50:	08003d89 	.word	0x08003d89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d58:	3308      	adds	r3, #8
 8003d5a:	2101      	movs	r1, #1
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 ff1d 	bl	8004b9c <RCCEx_PLL2_Config>
 8003d62:	4603      	mov	r3, r0
 8003d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d68:	e00f      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d6e:	3328      	adds	r3, #40	@ 0x28
 8003d70:	2101      	movs	r1, #1
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffc4 	bl	8004d00 <RCCEx_PLL3_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d7e:	e004      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d86:	e000      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d92:	4b6c      	ldr	r3, [pc, #432]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d96:	f023 0107 	bic.w	r1, r3, #7
 8003d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003da2:	4a68      	ldr	r2, [pc, #416]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da4:	430b      	orrs	r3, r1
 8003da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da8:	e003      	b.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003dae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	f002 0320 	and.w	r3, r2, #32
 8003dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003dc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003dcc:	460b      	mov	r3, r1
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	d055      	beq.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003dde:	d033      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003de4:	d82c      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dea:	d02f      	beq.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003dec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003df0:	d826      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003df2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003df6:	d02b      	beq.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003df8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003dfc:	d820      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e02:	d012      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003e08:	d81a      	bhi.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d022      	beq.n	8003e54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003e0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003e12:	d115      	bne.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e18:	3308      	adds	r3, #8
 8003e1a:	2100      	movs	r1, #0
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 febd 	bl	8004b9c <RCCEx_PLL2_Config>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e28:	e015      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e2e:	3328      	adds	r3, #40	@ 0x28
 8003e30:	2102      	movs	r1, #2
 8003e32:	4618      	mov	r0, r3
 8003e34:	f000 ff64 	bl	8004d00 <RCCEx_PLL3_Config>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e3e:	e00a      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e46:	e006      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e48:	bf00      	nop
 8003e4a:	e004      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e4c:	bf00      	nop
 8003e4e:	e002      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e5e:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6e:	4a35      	ldr	r2, [pc, #212]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e70:	430b      	orrs	r3, r1
 8003e72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e74:	e003      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003e94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003e98:	460b      	mov	r3, r1
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	d058      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003ea6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eaa:	d033      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003eac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003eb0:	d82c      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb6:	d02f      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ebc:	d826      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec2:	d02b      	beq.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ec4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ec8:	d820      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ece:	d012      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ed0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ed4:	d81a      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003eda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ede:	d115      	bne.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2100      	movs	r1, #0
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 fe57 	bl	8004b9c <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e015      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2102      	movs	r1, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fefe 	bl	8004d00 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f12:	e006      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f14:	bf00      	nop
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f18:	bf00      	nop
 8003f1a:	e002      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f1c:	bf00      	nop
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10e      	bne.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f2a:	4b06      	ldr	r3, [pc, #24]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f3a:	4a02      	ldr	r2, [pc, #8]	@ (8003f44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3c:	430b      	orrs	r3, r1
 8003f3e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f40:	e006      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f42:	bf00      	nop
 8003f44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003f5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f60:	2300      	movs	r3, #0
 8003f62:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f6a:	460b      	mov	r3, r1
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	d055      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003f78:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f7c:	d033      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f7e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003f82:	d82c      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f88:	d02f      	beq.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f8a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f8e:	d826      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f90:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f94:	d02b      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f96:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003f9a:	d820      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa0:	d012      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003fa2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003fa6:	d81a      	bhi.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d022      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb0:	d115      	bne.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	3308      	adds	r3, #8
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f000 fdee 	bl	8004b9c <RCCEx_PLL2_Config>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fc6:	e015      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fcc:	3328      	adds	r3, #40	@ 0x28
 8003fce:	2102      	movs	r1, #2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe95 	bl	8004d00 <RCCEx_PLL3_Config>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fdc:	e00a      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fe4:	e006      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fe6:	bf00      	nop
 8003fe8:	e004      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fea:	bf00      	nop
 8003fec:	e002      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fee:	bf00      	nop
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ff2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ff4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ffc:	4ba1      	ldr	r3, [pc, #644]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004000:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004008:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800400c:	4a9d      	ldr	r2, [pc, #628]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800400e:	430b      	orrs	r3, r1
 8004010:	6593      	str	r3, [r2, #88]	@ 0x58
 8004012:	e003      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004014:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004018:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f002 0308 	and.w	r3, r2, #8
 8004028:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800402c:	2300      	movs	r3, #0
 800402e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004032:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004036:	460b      	mov	r3, r1
 8004038:	4313      	orrs	r3, r2
 800403a:	d01e      	beq.n	800407a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800403c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d10c      	bne.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404e:	3328      	adds	r3, #40	@ 0x28
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f000 fe54 	bl	8004d00 <RCCEx_PLL3_Config>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d002      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004064:	4b87      	ldr	r3, [pc, #540]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800406c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004074:	4a83      	ldr	r2, [pc, #524]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004076:	430b      	orrs	r3, r1
 8004078:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800407a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004082:	f002 0310 	and.w	r3, r2, #16
 8004086:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800408a:	2300      	movs	r3, #0
 800408c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004090:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004094:	460b      	mov	r3, r1
 8004096:	4313      	orrs	r3, r2
 8004098:	d01e      	beq.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040a6:	d10c      	bne.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ac:	3328      	adds	r3, #40	@ 0x28
 80040ae:	2102      	movs	r1, #2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fe25 	bl	8004d00 <RCCEx_PLL3_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040c2:	4b70      	ldr	r3, [pc, #448]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d4:	430b      	orrs	r3, r1
 80040d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80040e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040e8:	2300      	movs	r3, #0
 80040ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040ee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80040f2:	460b      	mov	r3, r1
 80040f4:	4313      	orrs	r3, r2
 80040f6:	d03e      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040fc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004100:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004104:	d022      	beq.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004106:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800410a:	d81b      	bhi.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004114:	d00b      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004116:	e015      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800411c:	3308      	adds	r3, #8
 800411e:	2100      	movs	r1, #0
 8004120:	4618      	mov	r0, r3
 8004122:	f000 fd3b 	bl	8004b9c <RCCEx_PLL2_Config>
 8004126:	4603      	mov	r3, r0
 8004128:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800412c:	e00f      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800412e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004132:	3328      	adds	r3, #40	@ 0x28
 8004134:	2102      	movs	r1, #2
 8004136:	4618      	mov	r0, r3
 8004138:	f000 fde2 	bl	8004d00 <RCCEx_PLL3_Config>
 800413c:	4603      	mov	r3, r0
 800413e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004142:	e004      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800414a:	e000      	b.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800414c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10b      	bne.n	800416e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800415e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004162:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004166:	4a47      	ldr	r2, [pc, #284]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004168:	430b      	orrs	r3, r1
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
 800416c:	e003      	b.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8004182:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004184:	2300      	movs	r3, #0
 8004186:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004188:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800418c:	460b      	mov	r3, r1
 800418e:	4313      	orrs	r3, r2
 8004190:	d03b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800419a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800419e:	d01f      	beq.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80041a0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80041a4:	d818      	bhi.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80041a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041aa:	d003      	beq.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d007      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80041b2:	e011      	b.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b4:	4b33      	ldr	r3, [pc, #204]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b8:	4a32      	ldr	r2, [pc, #200]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80041c0:	e00f      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	3328      	adds	r3, #40	@ 0x28
 80041c8:	2101      	movs	r1, #1
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 fd98 	bl	8004d00 <RCCEx_PLL3_Config>
 80041d0:	4603      	mov	r3, r0
 80041d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041d6:	e004      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041de:	e000      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10b      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041ea:	4b26      	ldr	r3, [pc, #152]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ee:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041fa:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004206:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004216:	673b      	str	r3, [r7, #112]	@ 0x70
 8004218:	2300      	movs	r3, #0
 800421a:	677b      	str	r3, [r7, #116]	@ 0x74
 800421c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d034      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800422a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004230:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004234:	d007      	beq.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004236:	e011      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800423e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004242:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004244:	e00e      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424a:	3308      	adds	r3, #8
 800424c:	2102      	movs	r1, #2
 800424e:	4618      	mov	r0, r3
 8004250:	f000 fca4 	bl	8004b9c <RCCEx_PLL2_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800425a:	e003      	b.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800426c:	4b05      	ldr	r3, [pc, #20]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800426e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004270:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800427a:	4a02      	ldr	r2, [pc, #8]	@ (8004284 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800427c:	430b      	orrs	r3, r1
 800427e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004280:	e006      	b.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004282:	bf00      	nop
 8004284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800428c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004298:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800429c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800429e:	2300      	movs	r3, #0
 80042a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80042a6:	460b      	mov	r3, r1
 80042a8:	4313      	orrs	r3, r2
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b0:	3328      	adds	r3, #40	@ 0x28
 80042b2:	2102      	movs	r1, #2
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd23 	bl	8004d00 <RCCEx_PLL3_Config>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d002      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80042d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d4:	2300      	movs	r3, #0
 80042d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80042dc:	460b      	mov	r3, r1
 80042de:	4313      	orrs	r3, r2
 80042e0:	d038      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042ee:	d018      	beq.n	8004322 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80042f4:	d811      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042fa:	d014      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004300:	d80b      	bhi.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d011      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800430a:	d106      	bne.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4bc3      	ldr	r3, [pc, #780]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800430e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004310:	4ac2      	ldr	r2, [pc, #776]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004318:	e008      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004320:	e004      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004322:	bf00      	nop
 8004324:	e002      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004326:	bf00      	nop
 8004328:	e000      	b.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800432a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800432c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004334:	4bb9      	ldr	r3, [pc, #740]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800433c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004344:	4ab5      	ldr	r2, [pc, #724]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004346:	430b      	orrs	r3, r1
 8004348:	6553      	str	r3, [r2, #84]	@ 0x54
 800434a:	e003      	b.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800434c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800435c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004360:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004362:	2300      	movs	r3, #0
 8004364:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004366:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800436a:	460b      	mov	r3, r1
 800436c:	4313      	orrs	r3, r2
 800436e:	d009      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004370:	4baa      	ldr	r3, [pc, #680]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004372:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004374:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800437e:	4aa7      	ldr	r2, [pc, #668]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004380:	430b      	orrs	r3, r1
 8004382:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8004390:	653b      	str	r3, [r7, #80]	@ 0x50
 8004392:	2300      	movs	r3, #0
 8004394:	657b      	str	r3, [r7, #84]	@ 0x54
 8004396:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800439a:	460b      	mov	r3, r1
 800439c:	4313      	orrs	r3, r2
 800439e:	d00a      	beq.n	80043b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043a0:	4b9e      	ldr	r3, [pc, #632]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80043a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80043b0:	4a9a      	ldr	r2, [pc, #616]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043be:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80043c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043c4:	2300      	movs	r3, #0
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80043cc:	460b      	mov	r3, r1
 80043ce:	4313      	orrs	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d2:	4b92      	ldr	r3, [pc, #584]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80043da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043e0:	4a8e      	ldr	r2, [pc, #568]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e2:	430b      	orrs	r3, r1
 80043e4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80043f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80043f4:	2300      	movs	r3, #0
 80043f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d00e      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004402:	4b86      	ldr	r3, [pc, #536]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	4a85      	ldr	r2, [pc, #532]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004408:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800440c:	6113      	str	r3, [r2, #16]
 800440e:	4b83      	ldr	r3, [pc, #524]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004410:	6919      	ldr	r1, [r3, #16]
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800441a:	4a80      	ldr	r2, [pc, #512]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441c:	430b      	orrs	r3, r1
 800441e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004428:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800442c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800442e:	2300      	movs	r3, #0
 8004430:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004432:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004436:	460b      	mov	r3, r1
 8004438:	4313      	orrs	r3, r2
 800443a:	d009      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800443c:	4b77      	ldr	r3, [pc, #476]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004440:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	4a74      	ldr	r2, [pc, #464]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444c:	430b      	orrs	r3, r1
 800444e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004458:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800445c:	633b      	str	r3, [r7, #48]	@ 0x30
 800445e:	2300      	movs	r3, #0
 8004460:	637b      	str	r3, [r7, #52]	@ 0x34
 8004462:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004466:	460b      	mov	r3, r1
 8004468:	4313      	orrs	r3, r2
 800446a:	d00a      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800446c:	4b6b      	ldr	r3, [pc, #428]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004470:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004474:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004478:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800447c:	4a67      	ldr	r2, [pc, #412]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800447e:	430b      	orrs	r3, r1
 8004480:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004482:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800448a:	2100      	movs	r1, #0
 800448c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800448e:	f003 0301 	and.w	r3, r3, #1
 8004492:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004494:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004498:	460b      	mov	r3, r1
 800449a:	4313      	orrs	r3, r2
 800449c:	d011      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	3308      	adds	r3, #8
 80044a4:	2100      	movs	r1, #0
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fb78 	bl	8004b9c <RCCEx_PLL2_Config>
 80044ac:	4603      	mov	r3, r0
 80044ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	2100      	movs	r1, #0
 80044cc:	6239      	str	r1, [r7, #32]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d011      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	3308      	adds	r3, #8
 80044e4:	2101      	movs	r1, #1
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fb58 	bl	8004b9c <RCCEx_PLL2_Config>
 80044ec:	4603      	mov	r3, r0
 80044ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	2100      	movs	r1, #0
 800450c:	61b9      	str	r1, [r7, #24]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	61fb      	str	r3, [r7, #28]
 8004514:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004518:	460b      	mov	r3, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	d011      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004522:	3308      	adds	r3, #8
 8004524:	2102      	movs	r1, #2
 8004526:	4618      	mov	r0, r3
 8004528:	f000 fb38 	bl	8004b9c <RCCEx_PLL2_Config>
 800452c:	4603      	mov	r3, r0
 800452e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800453e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004542:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454a:	2100      	movs	r1, #0
 800454c:	6139      	str	r1, [r7, #16]
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	617b      	str	r3, [r7, #20]
 8004554:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004558:	460b      	mov	r3, r1
 800455a:	4313      	orrs	r3, r2
 800455c:	d011      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004562:	3328      	adds	r3, #40	@ 0x28
 8004564:	2100      	movs	r1, #0
 8004566:	4618      	mov	r0, r3
 8004568:	f000 fbca 	bl	8004d00 <RCCEx_PLL3_Config>
 800456c:	4603      	mov	r3, r0
 800456e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004572:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004576:	2b00      	cmp	r3, #0
 8004578:	d003      	beq.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800457a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800457e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004582:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800458a:	2100      	movs	r1, #0
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	f003 0310 	and.w	r3, r3, #16
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004598:	460b      	mov	r3, r1
 800459a:	4313      	orrs	r3, r2
 800459c:	d011      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a2:	3328      	adds	r3, #40	@ 0x28
 80045a4:	2101      	movs	r1, #1
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fbaa 	bl	8004d00 <RCCEx_PLL3_Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80045c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ca:	2100      	movs	r1, #0
 80045cc:	6039      	str	r1, [r7, #0]
 80045ce:	f003 0320 	and.w	r3, r3, #32
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045d8:	460b      	mov	r3, r1
 80045da:	4313      	orrs	r3, r2
 80045dc:	d011      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e2:	3328      	adds	r3, #40	@ 0x28
 80045e4:	2102      	movs	r1, #2
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb8a 	bl	8004d00 <RCCEx_PLL3_Config>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004602:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800460a:	2300      	movs	r3, #0
 800460c:	e000      	b.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
}
 8004610:	4618      	mov	r0, r3
 8004612:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004616:	46bd      	mov	sp, r7
 8004618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461c:	58024400 	.word	0x58024400

08004620 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004624:	f7fe fd96 	bl	8003154 <HAL_RCC_GetHCLKFreq>
 8004628:	4602      	mov	r2, r0
 800462a:	4b06      	ldr	r3, [pc, #24]	@ (8004644 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	091b      	lsrs	r3, r3, #4
 8004630:	f003 0307 	and.w	r3, r3, #7
 8004634:	4904      	ldr	r1, [pc, #16]	@ (8004648 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004636:	5ccb      	ldrb	r3, [r1, r3]
 8004638:	f003 031f 	and.w	r3, r3, #31
 800463c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004640:	4618      	mov	r0, r3
 8004642:	bd80      	pop	{r7, pc}
 8004644:	58024400 	.word	0x58024400
 8004648:	0800669c 	.word	0x0800669c

0800464c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800464c:	b480      	push	{r7}
 800464e:	b089      	sub	sp, #36	@ 0x24
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004654:	4ba1      	ldr	r3, [pc, #644]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800465e:	4b9f      	ldr	r3, [pc, #636]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004662:	0b1b      	lsrs	r3, r3, #12
 8004664:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004668:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800466a:	4b9c      	ldr	r3, [pc, #624]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	091b      	lsrs	r3, r3, #4
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004676:	4b99      	ldr	r3, [pc, #612]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467a:	08db      	lsrs	r3, r3, #3
 800467c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004680:	693a      	ldr	r2, [r7, #16]
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	2b00      	cmp	r3, #0
 8004696:	f000 8111 	beq.w	80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	2b02      	cmp	r3, #2
 800469e:	f000 8083 	beq.w	80047a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	f200 80a1 	bhi.w	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d003      	beq.n	80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80046b0:	69bb      	ldr	r3, [r7, #24]
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d056      	beq.n	8004764 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80046b6:	e099      	b.n	80047ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80046b8:	4b88      	ldr	r3, [pc, #544]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046c4:	4b85      	ldr	r3, [pc, #532]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	08db      	lsrs	r3, r3, #3
 80046ca:	f003 0303 	and.w	r3, r3, #3
 80046ce:	4a84      	ldr	r2, [pc, #528]	@ (80048e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
 80046d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	ee07 3a90 	vmov	s15, r3
 80046dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ee:	4b7b      	ldr	r3, [pc, #492]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004702:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800470a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800470e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800471a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800471e:	e087      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	ee07 3a90 	vmov	s15, r3
 8004726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800472a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80048e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800472e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004732:	4b6a      	ldr	r3, [pc, #424]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004742:	ed97 6a03 	vldr	s12, [r7, #12]
 8004746:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800474a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800474e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800475a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800475e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004762:	e065      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004776:	4b59      	ldr	r3, [pc, #356]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800477a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004786:	ed97 6a03 	vldr	s12, [r7, #12]
 800478a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800478e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800479a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800479e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047a6:	e043      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80048f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80047b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ba:	4b48      	ldr	r3, [pc, #288]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c2:	ee07 3a90 	vmov	s15, r3
 80047c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047ea:	e021      	b.n	8004830 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80048ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fe:	4b37      	ldr	r3, [pc, #220]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004806:	ee07 3a90 	vmov	s15, r3
 800480a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004812:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800481a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800482a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004830:	4b2a      	ldr	r3, [pc, #168]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004834:	0a5b      	lsrs	r3, r3, #9
 8004836:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004842:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004846:	ee37 7a87 	vadd.f32	s14, s15, s14
 800484a:	edd7 6a07 	vldr	s13, [r7, #28]
 800484e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004852:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004856:	ee17 2a90 	vmov	r2, s15
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800485e:	4b1f      	ldr	r3, [pc, #124]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	0c1b      	lsrs	r3, r3, #16
 8004864:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004868:	ee07 3a90 	vmov	s15, r3
 800486c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004870:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004874:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004878:	edd7 6a07 	vldr	s13, [r7, #28]
 800487c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004884:	ee17 2a90 	vmov	r2, s15
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800488c:	4b13      	ldr	r3, [pc, #76]	@ (80048dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800488e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004890:	0e1b      	lsrs	r3, r3, #24
 8004892:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80048aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b2:	ee17 2a90 	vmov	r2, s15
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80048ba:	e008      	b.n	80048ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	609a      	str	r2, [r3, #8]
}
 80048ce:	bf00      	nop
 80048d0:	3724      	adds	r7, #36	@ 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	58024400 	.word	0x58024400
 80048e0:	03d09000 	.word	0x03d09000
 80048e4:	46000000 	.word	0x46000000
 80048e8:	4c742400 	.word	0x4c742400
 80048ec:	4a742400 	.word	0x4a742400
 80048f0:	4af42400 	.word	0x4af42400

080048f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b089      	sub	sp, #36	@ 0x24
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048fc:	4ba1      	ldr	r3, [pc, #644]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004900:	f003 0303 	and.w	r3, r3, #3
 8004904:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004906:	4b9f      	ldr	r3, [pc, #636]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800490a:	0d1b      	lsrs	r3, r3, #20
 800490c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004910:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004912:	4b9c      	ldr	r3, [pc, #624]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004916:	0a1b      	lsrs	r3, r3, #8
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800491e:	4b99      	ldr	r3, [pc, #612]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	08db      	lsrs	r3, r3, #3
 8004924:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	fb02 f303 	mul.w	r3, r2, r3
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 8111 	beq.w	8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	2b02      	cmp	r3, #2
 8004946:	f000 8083 	beq.w	8004a50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800494a:	69bb      	ldr	r3, [r7, #24]
 800494c:	2b02      	cmp	r3, #2
 800494e:	f200 80a1 	bhi.w	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004952:	69bb      	ldr	r3, [r7, #24]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d056      	beq.n	8004a0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800495e:	e099      	b.n	8004a94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004960:	4b88      	ldr	r3, [pc, #544]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d02d      	beq.n	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800496c:	4b85      	ldr	r3, [pc, #532]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	08db      	lsrs	r3, r3, #3
 8004972:	f003 0303 	and.w	r3, r3, #3
 8004976:	4a84      	ldr	r2, [pc, #528]	@ (8004b88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004992:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004996:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049aa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049c6:	e087      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	ee07 3a90 	vmov	s15, r3
 80049ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049da:	4b6a      	ldr	r3, [pc, #424]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a0a:	e065      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	ee07 3a90 	vmov	s15, r3
 8004a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1e:	4b59      	ldr	r3, [pc, #356]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a26:	ee07 3a90 	vmov	s15, r3
 8004a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4e:	e043      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a62:	4b48      	ldr	r3, [pc, #288]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a6a:	ee07 3a90 	vmov	s15, r3
 8004a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a72:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a92:	e021      	b.n	8004ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa6:	4b37      	ldr	r3, [pc, #220]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aae:	ee07 3a90 	vmov	s15, r3
 8004ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ad2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ad8:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004adc:	0a5b      	lsrs	r3, r3, #9
 8004ade:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ae2:	ee07 3a90 	vmov	s15, r3
 8004ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004aee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004af2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004af6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004afa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004afe:	ee17 2a90 	vmov	r2, s15
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	0c1b      	lsrs	r3, r3, #16
 8004b0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b10:	ee07 3a90 	vmov	s15, r3
 8004b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b20:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b2c:	ee17 2a90 	vmov	r2, s15
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b34:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b38:	0e1b      	lsrs	r3, r3, #24
 8004b3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b3e:	ee07 3a90 	vmov	s15, r3
 8004b42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b5a:	ee17 2a90 	vmov	r2, s15
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b62:	e008      	b.n	8004b76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	609a      	str	r2, [r3, #8]
}
 8004b76:	bf00      	nop
 8004b78:	3724      	adds	r7, #36	@ 0x24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	58024400 	.word	0x58024400
 8004b88:	03d09000 	.word	0x03d09000
 8004b8c:	46000000 	.word	0x46000000
 8004b90:	4c742400 	.word	0x4c742400
 8004b94:	4a742400 	.word	0x4a742400
 8004b98:	4af42400 	.word	0x4af42400

08004b9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	b084      	sub	sp, #16
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bae:	f003 0303 	and.w	r3, r3, #3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	d101      	bne.n	8004bba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e099      	b.n	8004cee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004bba:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a4e      	ldr	r2, [pc, #312]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bc6:	f7fc fa8f 	bl	80010e8 <HAL_GetTick>
 8004bca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004bce:	f7fc fa8b 	bl	80010e8 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e086      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004be0:	4b45      	ldr	r3, [pc, #276]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bec:	4b42      	ldr	r3, [pc, #264]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	031b      	lsls	r3, r3, #12
 8004bfa:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	025b      	lsls	r3, r3, #9
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	431a      	orrs	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	041b      	lsls	r3, r3, #16
 8004c1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	061b      	lsls	r3, r3, #24
 8004c2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c30:	4931      	ldr	r1, [pc, #196]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c36:	4b30      	ldr	r3, [pc, #192]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	492d      	ldr	r1, [pc, #180]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c48:	4b2b      	ldr	r3, [pc, #172]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	f023 0220 	bic.w	r2, r3, #32
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	4928      	ldr	r1, [pc, #160]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c5a:	4b27      	ldr	r3, [pc, #156]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5e:	4a26      	ldr	r2, [pc, #152]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c60:	f023 0310 	bic.w	r3, r3, #16
 8004c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c66:	4b24      	ldr	r3, [pc, #144]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004c6a:	4b24      	ldr	r3, [pc, #144]	@ (8004cfc <RCCEx_PLL2_Config+0x160>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	69d2      	ldr	r2, [r2, #28]
 8004c72:	00d2      	lsls	r2, r2, #3
 8004c74:	4920      	ldr	r1, [pc, #128]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c76:	4313      	orrs	r3, r2
 8004c78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c80:	f043 0310 	orr.w	r3, r3, #16
 8004c84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c90:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004c92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004c96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c98:	e00f      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d106      	bne.n	8004cae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ca0:	4b15      	ldr	r3, [pc, #84]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca4:	4a14      	ldr	r2, [pc, #80]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ca6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004caa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cac:	e005      	b.n	8004cba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004cae:	4b12      	ldr	r3, [pc, #72]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb2:	4a11      	ldr	r2, [pc, #68]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cb4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004cb8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004cba:	4b0f      	ldr	r3, [pc, #60]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004cc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cc6:	f7fc fa0f 	bl	80010e8 <HAL_GetTick>
 8004cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cce:	f7fc fa0b 	bl	80010e8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e006      	b.n	8004cee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ce0:	4b05      	ldr	r3, [pc, #20]	@ (8004cf8 <RCCEx_PLL2_Config+0x15c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	58024400 	.word	0x58024400
 8004cfc:	ffff0007 	.word	0xffff0007

08004d00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b084      	sub	sp, #16
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
 8004d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004d0e:	4b53      	ldr	r3, [pc, #332]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d101      	bne.n	8004d1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e099      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a4e      	ldr	r2, [pc, #312]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d2a:	f7fc f9dd 	bl	80010e8 <HAL_GetTick>
 8004d2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d30:	e008      	b.n	8004d44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d32:	f7fc f9d9 	bl	80010e8 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e086      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d44:	4b45      	ldr	r3, [pc, #276]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d50:	4b42      	ldr	r3, [pc, #264]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	051b      	lsls	r3, r3, #20
 8004d5e:	493f      	ldr	r1, [pc, #252]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d60:	4313      	orrs	r3, r2
 8004d62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	3b01      	subs	r3, #1
 8004d74:	025b      	lsls	r3, r3, #9
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	431a      	orrs	r2, r3
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68db      	ldr	r3, [r3, #12]
 8004d7e:	3b01      	subs	r3, #1
 8004d80:	041b      	lsls	r3, r3, #16
 8004d82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d86:	431a      	orrs	r2, r3
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	061b      	lsls	r3, r3, #24
 8004d90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d94:	4931      	ldr	r1, [pc, #196]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d9a:	4b30      	ldr	r3, [pc, #192]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	492d      	ldr	r1, [pc, #180]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004dac:	4b2b      	ldr	r3, [pc, #172]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	4928      	ldr	r1, [pc, #160]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004dbe:	4b27      	ldr	r3, [pc, #156]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc2:	4a26      	ldr	r2, [pc, #152]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004dca:	4b24      	ldr	r3, [pc, #144]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dce:	4b24      	ldr	r3, [pc, #144]	@ (8004e60 <RCCEx_PLL3_Config+0x160>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	69d2      	ldr	r2, [r2, #28]
 8004dd6:	00d2      	lsls	r2, r2, #3
 8004dd8:	4920      	ldr	r1, [pc, #128]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dde:	4b1f      	ldr	r3, [pc, #124]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004de4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d106      	bne.n	8004dfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004df0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df4:	4a19      	ldr	r2, [pc, #100]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004df6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dfc:	e00f      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d106      	bne.n	8004e12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004e04:	4b15      	ldr	r3, [pc, #84]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e10:	e005      	b.n	8004e1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004e12:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e16:	4a11      	ldr	r2, [pc, #68]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004e1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e2a:	f7fc f95d 	bl	80010e8 <HAL_GetTick>
 8004e2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e30:	e008      	b.n	8004e44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e32:	f7fc f959 	bl	80010e8 <HAL_GetTick>
 8004e36:	4602      	mov	r2, r0
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	1ad3      	subs	r3, r2, r3
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d901      	bls.n	8004e44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e40:	2303      	movs	r3, #3
 8004e42:	e006      	b.n	8004e52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e44:	4b05      	ldr	r3, [pc, #20]	@ (8004e5c <RCCEx_PLL3_Config+0x15c>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d0f0      	beq.n	8004e32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	58024400 	.word	0x58024400
 8004e60:	ffff0007 	.word	0xffff0007

08004e64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e042      	b.n	8004efc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d106      	bne.n	8004e8e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7fb fedf 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2224      	movs	r2, #36	@ 0x24
 8004e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f022 0201 	bic.w	r2, r2, #1
 8004ea4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 fd90 	bl	80059d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f825 	bl	8004f04 <UART_SetConfig>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d101      	bne.n	8004ec4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e01b      	b.n	8004efc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	685a      	ldr	r2, [r3, #4]
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ed2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	689a      	ldr	r2, [r3, #8]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ee2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0201 	orr.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 fe0f 	bl	8005b18 <UART_CheckIdleState>
 8004efa:	4603      	mov	r3, r0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3708      	adds	r7, #8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f08:	b092      	sub	sp, #72	@ 0x48
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	689a      	ldr	r2, [r3, #8]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	691b      	ldr	r3, [r3, #16]
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	431a      	orrs	r2, r3
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	69db      	ldr	r3, [r3, #28]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	4bbe      	ldr	r3, [pc, #760]	@ (800522c <UART_SetConfig+0x328>)
 8004f34:	4013      	ands	r3, r2
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4ab3      	ldr	r2, [pc, #716]	@ (8005230 <UART_SetConfig+0x32c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689a      	ldr	r2, [r3, #8]
 8004f76:	4baf      	ldr	r3, [pc, #700]	@ (8005234 <UART_SetConfig+0x330>)
 8004f78:	4013      	ands	r3, r2
 8004f7a:	697a      	ldr	r2, [r7, #20]
 8004f7c:	6812      	ldr	r2, [r2, #0]
 8004f7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004f80:	430b      	orrs	r3, r1
 8004f82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f8a:	f023 010f 	bic.w	r1, r3, #15
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4aa6      	ldr	r2, [pc, #664]	@ (8005238 <UART_SetConfig+0x334>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d177      	bne.n	8005094 <UART_SetConfig+0x190>
 8004fa4:	4ba5      	ldr	r3, [pc, #660]	@ (800523c <UART_SetConfig+0x338>)
 8004fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fac:	2b28      	cmp	r3, #40	@ 0x28
 8004fae:	d86d      	bhi.n	800508c <UART_SetConfig+0x188>
 8004fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fb8 <UART_SetConfig+0xb4>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	0800505d 	.word	0x0800505d
 8004fbc:	0800508d 	.word	0x0800508d
 8004fc0:	0800508d 	.word	0x0800508d
 8004fc4:	0800508d 	.word	0x0800508d
 8004fc8:	0800508d 	.word	0x0800508d
 8004fcc:	0800508d 	.word	0x0800508d
 8004fd0:	0800508d 	.word	0x0800508d
 8004fd4:	0800508d 	.word	0x0800508d
 8004fd8:	08005065 	.word	0x08005065
 8004fdc:	0800508d 	.word	0x0800508d
 8004fe0:	0800508d 	.word	0x0800508d
 8004fe4:	0800508d 	.word	0x0800508d
 8004fe8:	0800508d 	.word	0x0800508d
 8004fec:	0800508d 	.word	0x0800508d
 8004ff0:	0800508d 	.word	0x0800508d
 8004ff4:	0800508d 	.word	0x0800508d
 8004ff8:	0800506d 	.word	0x0800506d
 8004ffc:	0800508d 	.word	0x0800508d
 8005000:	0800508d 	.word	0x0800508d
 8005004:	0800508d 	.word	0x0800508d
 8005008:	0800508d 	.word	0x0800508d
 800500c:	0800508d 	.word	0x0800508d
 8005010:	0800508d 	.word	0x0800508d
 8005014:	0800508d 	.word	0x0800508d
 8005018:	08005075 	.word	0x08005075
 800501c:	0800508d 	.word	0x0800508d
 8005020:	0800508d 	.word	0x0800508d
 8005024:	0800508d 	.word	0x0800508d
 8005028:	0800508d 	.word	0x0800508d
 800502c:	0800508d 	.word	0x0800508d
 8005030:	0800508d 	.word	0x0800508d
 8005034:	0800508d 	.word	0x0800508d
 8005038:	0800507d 	.word	0x0800507d
 800503c:	0800508d 	.word	0x0800508d
 8005040:	0800508d 	.word	0x0800508d
 8005044:	0800508d 	.word	0x0800508d
 8005048:	0800508d 	.word	0x0800508d
 800504c:	0800508d 	.word	0x0800508d
 8005050:	0800508d 	.word	0x0800508d
 8005054:	0800508d 	.word	0x0800508d
 8005058:	08005085 	.word	0x08005085
 800505c:	2301      	movs	r3, #1
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e222      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005064:	2304      	movs	r3, #4
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e21e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800506c:	2308      	movs	r3, #8
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e21a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005074:	2310      	movs	r3, #16
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e216      	b.n	80054aa <UART_SetConfig+0x5a6>
 800507c:	2320      	movs	r3, #32
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e212      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005084:	2340      	movs	r3, #64	@ 0x40
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e20e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800508c:	2380      	movs	r3, #128	@ 0x80
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e20a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a69      	ldr	r2, [pc, #420]	@ (8005240 <UART_SetConfig+0x33c>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d130      	bne.n	8005100 <UART_SetConfig+0x1fc>
 800509e:	4b67      	ldr	r3, [pc, #412]	@ (800523c <UART_SetConfig+0x338>)
 80050a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b05      	cmp	r3, #5
 80050a8:	d826      	bhi.n	80050f8 <UART_SetConfig+0x1f4>
 80050aa:	a201      	add	r2, pc, #4	@ (adr r2, 80050b0 <UART_SetConfig+0x1ac>)
 80050ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050b0:	080050c9 	.word	0x080050c9
 80050b4:	080050d1 	.word	0x080050d1
 80050b8:	080050d9 	.word	0x080050d9
 80050bc:	080050e1 	.word	0x080050e1
 80050c0:	080050e9 	.word	0x080050e9
 80050c4:	080050f1 	.word	0x080050f1
 80050c8:	2300      	movs	r3, #0
 80050ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ce:	e1ec      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050d0:	2304      	movs	r3, #4
 80050d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050d6:	e1e8      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050d8:	2308      	movs	r3, #8
 80050da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050de:	e1e4      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050e0:	2310      	movs	r3, #16
 80050e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050e6:	e1e0      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050e8:	2320      	movs	r3, #32
 80050ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050ee:	e1dc      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050f0:	2340      	movs	r3, #64	@ 0x40
 80050f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050f6:	e1d8      	b.n	80054aa <UART_SetConfig+0x5a6>
 80050f8:	2380      	movs	r3, #128	@ 0x80
 80050fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050fe:	e1d4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4f      	ldr	r2, [pc, #316]	@ (8005244 <UART_SetConfig+0x340>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d130      	bne.n	800516c <UART_SetConfig+0x268>
 800510a:	4b4c      	ldr	r3, [pc, #304]	@ (800523c <UART_SetConfig+0x338>)
 800510c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800510e:	f003 0307 	and.w	r3, r3, #7
 8005112:	2b05      	cmp	r3, #5
 8005114:	d826      	bhi.n	8005164 <UART_SetConfig+0x260>
 8005116:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <UART_SetConfig+0x218>)
 8005118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511c:	08005135 	.word	0x08005135
 8005120:	0800513d 	.word	0x0800513d
 8005124:	08005145 	.word	0x08005145
 8005128:	0800514d 	.word	0x0800514d
 800512c:	08005155 	.word	0x08005155
 8005130:	0800515d 	.word	0x0800515d
 8005134:	2300      	movs	r3, #0
 8005136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800513a:	e1b6      	b.n	80054aa <UART_SetConfig+0x5a6>
 800513c:	2304      	movs	r3, #4
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005142:	e1b2      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005144:	2308      	movs	r3, #8
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800514a:	e1ae      	b.n	80054aa <UART_SetConfig+0x5a6>
 800514c:	2310      	movs	r3, #16
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005152:	e1aa      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005154:	2320      	movs	r3, #32
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800515a:	e1a6      	b.n	80054aa <UART_SetConfig+0x5a6>
 800515c:	2340      	movs	r3, #64	@ 0x40
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005162:	e1a2      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005164:	2380      	movs	r3, #128	@ 0x80
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516a:	e19e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a35      	ldr	r2, [pc, #212]	@ (8005248 <UART_SetConfig+0x344>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d130      	bne.n	80051d8 <UART_SetConfig+0x2d4>
 8005176:	4b31      	ldr	r3, [pc, #196]	@ (800523c <UART_SetConfig+0x338>)
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	2b05      	cmp	r3, #5
 8005180:	d826      	bhi.n	80051d0 <UART_SetConfig+0x2cc>
 8005182:	a201      	add	r2, pc, #4	@ (adr r2, 8005188 <UART_SetConfig+0x284>)
 8005184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005188:	080051a1 	.word	0x080051a1
 800518c:	080051a9 	.word	0x080051a9
 8005190:	080051b1 	.word	0x080051b1
 8005194:	080051b9 	.word	0x080051b9
 8005198:	080051c1 	.word	0x080051c1
 800519c:	080051c9 	.word	0x080051c9
 80051a0:	2300      	movs	r3, #0
 80051a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051a6:	e180      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051a8:	2304      	movs	r3, #4
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ae:	e17c      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051b0:	2308      	movs	r3, #8
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051b6:	e178      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051b8:	2310      	movs	r3, #16
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051be:	e174      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051c0:	2320      	movs	r3, #32
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051c6:	e170      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051c8:	2340      	movs	r3, #64	@ 0x40
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ce:	e16c      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051d0:	2380      	movs	r3, #128	@ 0x80
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051d6:	e168      	b.n	80054aa <UART_SetConfig+0x5a6>
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a1b      	ldr	r2, [pc, #108]	@ (800524c <UART_SetConfig+0x348>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d142      	bne.n	8005268 <UART_SetConfig+0x364>
 80051e2:	4b16      	ldr	r3, [pc, #88]	@ (800523c <UART_SetConfig+0x338>)
 80051e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d838      	bhi.n	8005260 <UART_SetConfig+0x35c>
 80051ee:	a201      	add	r2, pc, #4	@ (adr r2, 80051f4 <UART_SetConfig+0x2f0>)
 80051f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f4:	0800520d 	.word	0x0800520d
 80051f8:	08005215 	.word	0x08005215
 80051fc:	0800521d 	.word	0x0800521d
 8005200:	08005225 	.word	0x08005225
 8005204:	08005251 	.word	0x08005251
 8005208:	08005259 	.word	0x08005259
 800520c:	2300      	movs	r3, #0
 800520e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005212:	e14a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005214:	2304      	movs	r3, #4
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800521a:	e146      	b.n	80054aa <UART_SetConfig+0x5a6>
 800521c:	2308      	movs	r3, #8
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005222:	e142      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005224:	2310      	movs	r3, #16
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800522a:	e13e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800522c:	cfff69f3 	.word	0xcfff69f3
 8005230:	58000c00 	.word	0x58000c00
 8005234:	11fff4ff 	.word	0x11fff4ff
 8005238:	40011000 	.word	0x40011000
 800523c:	58024400 	.word	0x58024400
 8005240:	40004400 	.word	0x40004400
 8005244:	40004800 	.word	0x40004800
 8005248:	40004c00 	.word	0x40004c00
 800524c:	40005000 	.word	0x40005000
 8005250:	2320      	movs	r3, #32
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e128      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005258:	2340      	movs	r3, #64	@ 0x40
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e124      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005260:	2380      	movs	r3, #128	@ 0x80
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e120      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4acb      	ldr	r2, [pc, #812]	@ (800559c <UART_SetConfig+0x698>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d176      	bne.n	8005360 <UART_SetConfig+0x45c>
 8005272:	4bcb      	ldr	r3, [pc, #812]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005276:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800527a:	2b28      	cmp	r3, #40	@ 0x28
 800527c:	d86c      	bhi.n	8005358 <UART_SetConfig+0x454>
 800527e:	a201      	add	r2, pc, #4	@ (adr r2, 8005284 <UART_SetConfig+0x380>)
 8005280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005284:	08005329 	.word	0x08005329
 8005288:	08005359 	.word	0x08005359
 800528c:	08005359 	.word	0x08005359
 8005290:	08005359 	.word	0x08005359
 8005294:	08005359 	.word	0x08005359
 8005298:	08005359 	.word	0x08005359
 800529c:	08005359 	.word	0x08005359
 80052a0:	08005359 	.word	0x08005359
 80052a4:	08005331 	.word	0x08005331
 80052a8:	08005359 	.word	0x08005359
 80052ac:	08005359 	.word	0x08005359
 80052b0:	08005359 	.word	0x08005359
 80052b4:	08005359 	.word	0x08005359
 80052b8:	08005359 	.word	0x08005359
 80052bc:	08005359 	.word	0x08005359
 80052c0:	08005359 	.word	0x08005359
 80052c4:	08005339 	.word	0x08005339
 80052c8:	08005359 	.word	0x08005359
 80052cc:	08005359 	.word	0x08005359
 80052d0:	08005359 	.word	0x08005359
 80052d4:	08005359 	.word	0x08005359
 80052d8:	08005359 	.word	0x08005359
 80052dc:	08005359 	.word	0x08005359
 80052e0:	08005359 	.word	0x08005359
 80052e4:	08005341 	.word	0x08005341
 80052e8:	08005359 	.word	0x08005359
 80052ec:	08005359 	.word	0x08005359
 80052f0:	08005359 	.word	0x08005359
 80052f4:	08005359 	.word	0x08005359
 80052f8:	08005359 	.word	0x08005359
 80052fc:	08005359 	.word	0x08005359
 8005300:	08005359 	.word	0x08005359
 8005304:	08005349 	.word	0x08005349
 8005308:	08005359 	.word	0x08005359
 800530c:	08005359 	.word	0x08005359
 8005310:	08005359 	.word	0x08005359
 8005314:	08005359 	.word	0x08005359
 8005318:	08005359 	.word	0x08005359
 800531c:	08005359 	.word	0x08005359
 8005320:	08005359 	.word	0x08005359
 8005324:	08005351 	.word	0x08005351
 8005328:	2301      	movs	r3, #1
 800532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800532e:	e0bc      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005330:	2304      	movs	r3, #4
 8005332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005336:	e0b8      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005338:	2308      	movs	r3, #8
 800533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800533e:	e0b4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005340:	2310      	movs	r3, #16
 8005342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005346:	e0b0      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005348:	2320      	movs	r3, #32
 800534a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800534e:	e0ac      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005350:	2340      	movs	r3, #64	@ 0x40
 8005352:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005356:	e0a8      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005358:	2380      	movs	r3, #128	@ 0x80
 800535a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800535e:	e0a4      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a8f      	ldr	r2, [pc, #572]	@ (80055a4 <UART_SetConfig+0x6a0>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d130      	bne.n	80053cc <UART_SetConfig+0x4c8>
 800536a:	4b8d      	ldr	r3, [pc, #564]	@ (80055a0 <UART_SetConfig+0x69c>)
 800536c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800536e:	f003 0307 	and.w	r3, r3, #7
 8005372:	2b05      	cmp	r3, #5
 8005374:	d826      	bhi.n	80053c4 <UART_SetConfig+0x4c0>
 8005376:	a201      	add	r2, pc, #4	@ (adr r2, 800537c <UART_SetConfig+0x478>)
 8005378:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800537c:	08005395 	.word	0x08005395
 8005380:	0800539d 	.word	0x0800539d
 8005384:	080053a5 	.word	0x080053a5
 8005388:	080053ad 	.word	0x080053ad
 800538c:	080053b5 	.word	0x080053b5
 8005390:	080053bd 	.word	0x080053bd
 8005394:	2300      	movs	r3, #0
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e086      	b.n	80054aa <UART_SetConfig+0x5a6>
 800539c:	2304      	movs	r3, #4
 800539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053a2:	e082      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053a4:	2308      	movs	r3, #8
 80053a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053aa:	e07e      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053ac:	2310      	movs	r3, #16
 80053ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053b2:	e07a      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053b4:	2320      	movs	r3, #32
 80053b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ba:	e076      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053bc:	2340      	movs	r3, #64	@ 0x40
 80053be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053c2:	e072      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053c4:	2380      	movs	r3, #128	@ 0x80
 80053c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ca:	e06e      	b.n	80054aa <UART_SetConfig+0x5a6>
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a75      	ldr	r2, [pc, #468]	@ (80055a8 <UART_SetConfig+0x6a4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d130      	bne.n	8005438 <UART_SetConfig+0x534>
 80053d6:	4b72      	ldr	r3, [pc, #456]	@ (80055a0 <UART_SetConfig+0x69c>)
 80053d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053da:	f003 0307 	and.w	r3, r3, #7
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d826      	bhi.n	8005430 <UART_SetConfig+0x52c>
 80053e2:	a201      	add	r2, pc, #4	@ (adr r2, 80053e8 <UART_SetConfig+0x4e4>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005401 	.word	0x08005401
 80053ec:	08005409 	.word	0x08005409
 80053f0:	08005411 	.word	0x08005411
 80053f4:	08005419 	.word	0x08005419
 80053f8:	08005421 	.word	0x08005421
 80053fc:	08005429 	.word	0x08005429
 8005400:	2300      	movs	r3, #0
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e050      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005408:	2304      	movs	r3, #4
 800540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800540e:	e04c      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005410:	2308      	movs	r3, #8
 8005412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005416:	e048      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005418:	2310      	movs	r3, #16
 800541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800541e:	e044      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005420:	2320      	movs	r3, #32
 8005422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005426:	e040      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005428:	2340      	movs	r3, #64	@ 0x40
 800542a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800542e:	e03c      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005430:	2380      	movs	r3, #128	@ 0x80
 8005432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005436:	e038      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a5b      	ldr	r2, [pc, #364]	@ (80055ac <UART_SetConfig+0x6a8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d130      	bne.n	80054a4 <UART_SetConfig+0x5a0>
 8005442:	4b57      	ldr	r3, [pc, #348]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005444:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	2b05      	cmp	r3, #5
 800544c:	d826      	bhi.n	800549c <UART_SetConfig+0x598>
 800544e:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0x550>)
 8005450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005454:	0800546d 	.word	0x0800546d
 8005458:	08005475 	.word	0x08005475
 800545c:	0800547d 	.word	0x0800547d
 8005460:	08005485 	.word	0x08005485
 8005464:	0800548d 	.word	0x0800548d
 8005468:	08005495 	.word	0x08005495
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e01a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800547a:	e016      	b.n	80054aa <UART_SetConfig+0x5a6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005482:	e012      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800548a:	e00e      	b.n	80054aa <UART_SetConfig+0x5a6>
 800548c:	2320      	movs	r3, #32
 800548e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005492:	e00a      	b.n	80054aa <UART_SetConfig+0x5a6>
 8005494:	2340      	movs	r3, #64	@ 0x40
 8005496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549a:	e006      	b.n	80054aa <UART_SetConfig+0x5a6>
 800549c:	2380      	movs	r3, #128	@ 0x80
 800549e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a2:	e002      	b.n	80054aa <UART_SetConfig+0x5a6>
 80054a4:	2380      	movs	r3, #128	@ 0x80
 80054a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a3f      	ldr	r2, [pc, #252]	@ (80055ac <UART_SetConfig+0x6a8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	f040 80f8 	bne.w	80056a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054ba:	2b20      	cmp	r3, #32
 80054bc:	dc46      	bgt.n	800554c <UART_SetConfig+0x648>
 80054be:	2b02      	cmp	r3, #2
 80054c0:	f2c0 8082 	blt.w	80055c8 <UART_SetConfig+0x6c4>
 80054c4:	3b02      	subs	r3, #2
 80054c6:	2b1e      	cmp	r3, #30
 80054c8:	d87e      	bhi.n	80055c8 <UART_SetConfig+0x6c4>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <UART_SetConfig+0x5cc>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	08005553 	.word	0x08005553
 80054d4:	080055c9 	.word	0x080055c9
 80054d8:	0800555b 	.word	0x0800555b
 80054dc:	080055c9 	.word	0x080055c9
 80054e0:	080055c9 	.word	0x080055c9
 80054e4:	080055c9 	.word	0x080055c9
 80054e8:	0800556b 	.word	0x0800556b
 80054ec:	080055c9 	.word	0x080055c9
 80054f0:	080055c9 	.word	0x080055c9
 80054f4:	080055c9 	.word	0x080055c9
 80054f8:	080055c9 	.word	0x080055c9
 80054fc:	080055c9 	.word	0x080055c9
 8005500:	080055c9 	.word	0x080055c9
 8005504:	080055c9 	.word	0x080055c9
 8005508:	0800557b 	.word	0x0800557b
 800550c:	080055c9 	.word	0x080055c9
 8005510:	080055c9 	.word	0x080055c9
 8005514:	080055c9 	.word	0x080055c9
 8005518:	080055c9 	.word	0x080055c9
 800551c:	080055c9 	.word	0x080055c9
 8005520:	080055c9 	.word	0x080055c9
 8005524:	080055c9 	.word	0x080055c9
 8005528:	080055c9 	.word	0x080055c9
 800552c:	080055c9 	.word	0x080055c9
 8005530:	080055c9 	.word	0x080055c9
 8005534:	080055c9 	.word	0x080055c9
 8005538:	080055c9 	.word	0x080055c9
 800553c:	080055c9 	.word	0x080055c9
 8005540:	080055c9 	.word	0x080055c9
 8005544:	080055c9 	.word	0x080055c9
 8005548:	080055bb 	.word	0x080055bb
 800554c:	2b40      	cmp	r3, #64	@ 0x40
 800554e:	d037      	beq.n	80055c0 <UART_SetConfig+0x6bc>
 8005550:	e03a      	b.n	80055c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005552:	f7ff f865 	bl	8004620 <HAL_RCCEx_GetD3PCLK1Freq>
 8005556:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005558:	e03c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800555a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800555e:	4618      	mov	r0, r3
 8005560:	f7ff f874 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005566:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005568:	e034      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800556a:	f107 0318 	add.w	r3, r7, #24
 800556e:	4618      	mov	r0, r3
 8005570:	f7ff f9c0 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005578:	e02c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800557a:	4b09      	ldr	r3, [pc, #36]	@ (80055a0 <UART_SetConfig+0x69c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005586:	4b06      	ldr	r3, [pc, #24]	@ (80055a0 <UART_SetConfig+0x69c>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	08db      	lsrs	r3, r3, #3
 800558c:	f003 0303 	and.w	r3, r3, #3
 8005590:	4a07      	ldr	r2, [pc, #28]	@ (80055b0 <UART_SetConfig+0x6ac>)
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005598:	e01c      	b.n	80055d4 <UART_SetConfig+0x6d0>
 800559a:	bf00      	nop
 800559c:	40011400 	.word	0x40011400
 80055a0:	58024400 	.word	0x58024400
 80055a4:	40007800 	.word	0x40007800
 80055a8:	40007c00 	.word	0x40007c00
 80055ac:	58000c00 	.word	0x58000c00
 80055b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80055b4:	4b9d      	ldr	r3, [pc, #628]	@ (800582c <UART_SetConfig+0x928>)
 80055b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b8:	e00c      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055ba:	4b9d      	ldr	r3, [pc, #628]	@ (8005830 <UART_SetConfig+0x92c>)
 80055bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055be:	e009      	b.n	80055d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c6:	e005      	b.n	80055d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055c8:	2300      	movs	r3, #0
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80055d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	f000 81de 	beq.w	8005998 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055e0:	4a94      	ldr	r2, [pc, #592]	@ (8005834 <UART_SetConfig+0x930>)
 80055e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e6:	461a      	mov	r2, r3
 80055e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	005b      	lsls	r3, r3, #1
 80055f8:	4413      	add	r3, r2
 80055fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d305      	bcc.n	800560c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005606:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005608:	429a      	cmp	r2, r3
 800560a:	d903      	bls.n	8005614 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800560c:	2301      	movs	r3, #1
 800560e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005612:	e1c1      	b.n	8005998 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005614:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005616:	2200      	movs	r2, #0
 8005618:	60bb      	str	r3, [r7, #8]
 800561a:	60fa      	str	r2, [r7, #12]
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005620:	4a84      	ldr	r2, [pc, #528]	@ (8005834 <UART_SetConfig+0x930>)
 8005622:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005626:	b29b      	uxth	r3, r3
 8005628:	2200      	movs	r2, #0
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005632:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005636:	f7fa fe4f 	bl	80002d8 <__aeabi_uldivmod>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	020b      	lsls	r3, r1, #8
 800564c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005650:	0202      	lsls	r2, r0, #8
 8005652:	6979      	ldr	r1, [r7, #20]
 8005654:	6849      	ldr	r1, [r1, #4]
 8005656:	0849      	lsrs	r1, r1, #1
 8005658:	2000      	movs	r0, #0
 800565a:	460c      	mov	r4, r1
 800565c:	4605      	mov	r5, r0
 800565e:	eb12 0804 	adds.w	r8, r2, r4
 8005662:	eb43 0905 	adc.w	r9, r3, r5
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	469a      	mov	sl, r3
 800566e:	4693      	mov	fp, r2
 8005670:	4652      	mov	r2, sl
 8005672:	465b      	mov	r3, fp
 8005674:	4640      	mov	r0, r8
 8005676:	4649      	mov	r1, r9
 8005678:	f7fa fe2e 	bl	80002d8 <__aeabi_uldivmod>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	4613      	mov	r3, r2
 8005682:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800568a:	d308      	bcc.n	800569e <UART_SetConfig+0x79a>
 800568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005692:	d204      	bcs.n	800569e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569a:	60da      	str	r2, [r3, #12]
 800569c:	e17c      	b.n	8005998 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80056a4:	e178      	b.n	8005998 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056ae:	f040 80c5 	bne.w	800583c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80056b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80056b6:	2b20      	cmp	r3, #32
 80056b8:	dc48      	bgt.n	800574c <UART_SetConfig+0x848>
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	db7b      	blt.n	80057b6 <UART_SetConfig+0x8b2>
 80056be:	2b20      	cmp	r3, #32
 80056c0:	d879      	bhi.n	80057b6 <UART_SetConfig+0x8b2>
 80056c2:	a201      	add	r2, pc, #4	@ (adr r2, 80056c8 <UART_SetConfig+0x7c4>)
 80056c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c8:	08005753 	.word	0x08005753
 80056cc:	0800575b 	.word	0x0800575b
 80056d0:	080057b7 	.word	0x080057b7
 80056d4:	080057b7 	.word	0x080057b7
 80056d8:	08005763 	.word	0x08005763
 80056dc:	080057b7 	.word	0x080057b7
 80056e0:	080057b7 	.word	0x080057b7
 80056e4:	080057b7 	.word	0x080057b7
 80056e8:	08005773 	.word	0x08005773
 80056ec:	080057b7 	.word	0x080057b7
 80056f0:	080057b7 	.word	0x080057b7
 80056f4:	080057b7 	.word	0x080057b7
 80056f8:	080057b7 	.word	0x080057b7
 80056fc:	080057b7 	.word	0x080057b7
 8005700:	080057b7 	.word	0x080057b7
 8005704:	080057b7 	.word	0x080057b7
 8005708:	08005783 	.word	0x08005783
 800570c:	080057b7 	.word	0x080057b7
 8005710:	080057b7 	.word	0x080057b7
 8005714:	080057b7 	.word	0x080057b7
 8005718:	080057b7 	.word	0x080057b7
 800571c:	080057b7 	.word	0x080057b7
 8005720:	080057b7 	.word	0x080057b7
 8005724:	080057b7 	.word	0x080057b7
 8005728:	080057b7 	.word	0x080057b7
 800572c:	080057b7 	.word	0x080057b7
 8005730:	080057b7 	.word	0x080057b7
 8005734:	080057b7 	.word	0x080057b7
 8005738:	080057b7 	.word	0x080057b7
 800573c:	080057b7 	.word	0x080057b7
 8005740:	080057b7 	.word	0x080057b7
 8005744:	080057b7 	.word	0x080057b7
 8005748:	080057a9 	.word	0x080057a9
 800574c:	2b40      	cmp	r3, #64	@ 0x40
 800574e:	d02e      	beq.n	80057ae <UART_SetConfig+0x8aa>
 8005750:	e031      	b.n	80057b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005752:	f7fd fd2f 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 8005756:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005758:	e033      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800575a:	f7fd fd41 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 800575e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005760:	e02f      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005762:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe ff70 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005770:	e027      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005772:	f107 0318 	add.w	r3, r7, #24
 8005776:	4618      	mov	r0, r3
 8005778:	f7ff f8bc 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005780:	e01f      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005782:	4b2d      	ldr	r3, [pc, #180]	@ (8005838 <UART_SetConfig+0x934>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 0320 	and.w	r3, r3, #32
 800578a:	2b00      	cmp	r3, #0
 800578c:	d009      	beq.n	80057a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <UART_SetConfig+0x934>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	08db      	lsrs	r3, r3, #3
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	4a24      	ldr	r2, [pc, #144]	@ (800582c <UART_SetConfig+0x928>)
 800579a:	fa22 f303 	lsr.w	r3, r2, r3
 800579e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80057a0:	e00f      	b.n	80057c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80057a2:	4b22      	ldr	r3, [pc, #136]	@ (800582c <UART_SetConfig+0x928>)
 80057a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057a6:	e00c      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80057a8:	4b21      	ldr	r3, [pc, #132]	@ (8005830 <UART_SetConfig+0x92c>)
 80057aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80057ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80057b4:	e005      	b.n	80057c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80057c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80057c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 80e7 	beq.w	8005998 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ce:	4a19      	ldr	r2, [pc, #100]	@ (8005834 <UART_SetConfig+0x930>)
 80057d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057d4:	461a      	mov	r2, r3
 80057d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80057dc:	005a      	lsls	r2, r3, #1
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	685b      	ldr	r3, [r3, #4]
 80057e2:	085b      	lsrs	r3, r3, #1
 80057e4:	441a      	add	r2, r3
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f2:	2b0f      	cmp	r3, #15
 80057f4:	d916      	bls.n	8005824 <UART_SetConfig+0x920>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057fc:	d212      	bcs.n	8005824 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	b29b      	uxth	r3, r3
 8005802:	f023 030f 	bic.w	r3, r3, #15
 8005806:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	085b      	lsrs	r3, r3, #1
 800580c:	b29b      	uxth	r3, r3
 800580e:	f003 0307 	and.w	r3, r3, #7
 8005812:	b29a      	uxth	r2, r3
 8005814:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005816:	4313      	orrs	r3, r2
 8005818:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005820:	60da      	str	r2, [r3, #12]
 8005822:	e0b9      	b.n	8005998 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800582a:	e0b5      	b.n	8005998 <UART_SetConfig+0xa94>
 800582c:	03d09000 	.word	0x03d09000
 8005830:	003d0900 	.word	0x003d0900
 8005834:	080066ac 	.word	0x080066ac
 8005838:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800583c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005840:	2b20      	cmp	r3, #32
 8005842:	dc49      	bgt.n	80058d8 <UART_SetConfig+0x9d4>
 8005844:	2b00      	cmp	r3, #0
 8005846:	db7c      	blt.n	8005942 <UART_SetConfig+0xa3e>
 8005848:	2b20      	cmp	r3, #32
 800584a:	d87a      	bhi.n	8005942 <UART_SetConfig+0xa3e>
 800584c:	a201      	add	r2, pc, #4	@ (adr r2, 8005854 <UART_SetConfig+0x950>)
 800584e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005852:	bf00      	nop
 8005854:	080058df 	.word	0x080058df
 8005858:	080058e7 	.word	0x080058e7
 800585c:	08005943 	.word	0x08005943
 8005860:	08005943 	.word	0x08005943
 8005864:	080058ef 	.word	0x080058ef
 8005868:	08005943 	.word	0x08005943
 800586c:	08005943 	.word	0x08005943
 8005870:	08005943 	.word	0x08005943
 8005874:	080058ff 	.word	0x080058ff
 8005878:	08005943 	.word	0x08005943
 800587c:	08005943 	.word	0x08005943
 8005880:	08005943 	.word	0x08005943
 8005884:	08005943 	.word	0x08005943
 8005888:	08005943 	.word	0x08005943
 800588c:	08005943 	.word	0x08005943
 8005890:	08005943 	.word	0x08005943
 8005894:	0800590f 	.word	0x0800590f
 8005898:	08005943 	.word	0x08005943
 800589c:	08005943 	.word	0x08005943
 80058a0:	08005943 	.word	0x08005943
 80058a4:	08005943 	.word	0x08005943
 80058a8:	08005943 	.word	0x08005943
 80058ac:	08005943 	.word	0x08005943
 80058b0:	08005943 	.word	0x08005943
 80058b4:	08005943 	.word	0x08005943
 80058b8:	08005943 	.word	0x08005943
 80058bc:	08005943 	.word	0x08005943
 80058c0:	08005943 	.word	0x08005943
 80058c4:	08005943 	.word	0x08005943
 80058c8:	08005943 	.word	0x08005943
 80058cc:	08005943 	.word	0x08005943
 80058d0:	08005943 	.word	0x08005943
 80058d4:	08005935 	.word	0x08005935
 80058d8:	2b40      	cmp	r3, #64	@ 0x40
 80058da:	d02e      	beq.n	800593a <UART_SetConfig+0xa36>
 80058dc:	e031      	b.n	8005942 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058de:	f7fd fc69 	bl	80031b4 <HAL_RCC_GetPCLK1Freq>
 80058e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058e4:	e033      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058e6:	f7fd fc7b 	bl	80031e0 <HAL_RCC_GetPCLK2Freq>
 80058ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80058ec:	e02f      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7fe feaa 	bl	800464c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058fc:	e027      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058fe:	f107 0318 	add.w	r3, r7, #24
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fff6 	bl	80048f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800590c:	e01f      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800590e:	4b2d      	ldr	r3, [pc, #180]	@ (80059c4 <UART_SetConfig+0xac0>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f003 0320 	and.w	r3, r3, #32
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800591a:	4b2a      	ldr	r3, [pc, #168]	@ (80059c4 <UART_SetConfig+0xac0>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	08db      	lsrs	r3, r3, #3
 8005920:	f003 0303 	and.w	r3, r3, #3
 8005924:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <UART_SetConfig+0xac4>)
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800592c:	e00f      	b.n	800594e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800592e:	4b26      	ldr	r3, [pc, #152]	@ (80059c8 <UART_SetConfig+0xac4>)
 8005930:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005932:	e00c      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005934:	4b25      	ldr	r3, [pc, #148]	@ (80059cc <UART_SetConfig+0xac8>)
 8005936:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005938:	e009      	b.n	800594e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800593a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005940:	e005      	b.n	800594e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005942:	2300      	movs	r3, #0
 8005944:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800594c:	bf00      	nop
    }

    if (pclk != 0U)
 800594e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005950:	2b00      	cmp	r3, #0
 8005952:	d021      	beq.n	8005998 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005958:	4a1d      	ldr	r2, [pc, #116]	@ (80059d0 <UART_SetConfig+0xacc>)
 800595a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800595e:	461a      	mov	r2, r3
 8005960:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005962:	fbb3 f2f2 	udiv	r2, r3, r2
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	085b      	lsrs	r3, r3, #1
 800596c:	441a      	add	r2, r3
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	fbb2 f3f3 	udiv	r3, r2, r3
 8005976:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597a:	2b0f      	cmp	r3, #15
 800597c:	d909      	bls.n	8005992 <UART_SetConfig+0xa8e>
 800597e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005980:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005984:	d205      	bcs.n	8005992 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	b29a      	uxth	r2, r3
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	60da      	str	r2, [r3, #12]
 8005990:	e002      	b.n	8005998 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2201      	movs	r2, #1
 80059a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	2200      	movs	r2, #0
 80059ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2200      	movs	r2, #0
 80059b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80059b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3748      	adds	r7, #72	@ 0x48
 80059bc:	46bd      	mov	sp, r7
 80059be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059c2:	bf00      	nop
 80059c4:	58024400 	.word	0x58024400
 80059c8:	03d09000 	.word	0x03d09000
 80059cc:	003d0900 	.word	0x003d0900
 80059d0:	080066ac 	.word	0x080066ac

080059d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a02:	f003 0301 	and.w	r3, r3, #1
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d00a      	beq.n	8005a42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a46:	f003 0304 	and.w	r3, r3, #4
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a68:	f003 0310 	and.w	r3, r3, #16
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00a      	beq.n	8005a86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a8a:	f003 0320 	and.w	r3, r3, #32
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	689b      	ldr	r3, [r3, #8]
 8005a98:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d01a      	beq.n	8005aea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	430a      	orrs	r2, r1
 8005ac8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ace:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ad2:	d10a      	bne.n	8005aea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d00a      	beq.n	8005b0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	605a      	str	r2, [r3, #4]
  }
}
 8005b0c:	bf00      	nop
 8005b0e:	370c      	adds	r7, #12
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b098      	sub	sp, #96	@ 0x60
 8005b1c:	af02      	add	r7, sp, #8
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b28:	f7fb fade 	bl	80010e8 <HAL_GetTick>
 8005b2c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d12f      	bne.n	8005b9c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b3c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b40:	9300      	str	r3, [sp, #0]
 8005b42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b44:	2200      	movs	r2, #0
 8005b46:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 f88e 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d022      	beq.n	8005b9c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5e:	e853 3f00 	ldrex	r3, [r3]
 8005b62:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	461a      	mov	r2, r3
 8005b72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b74:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b76:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e6      	bne.n	8005b56 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2200      	movs	r2, #0
 8005b94:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e063      	b.n	8005c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d149      	bne.n	8005c3e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005baa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005bae:	9300      	str	r3, [sp, #0]
 8005bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 f857 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d03c      	beq.n	8005c3e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	461a      	mov	r2, r3
 8005be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005be4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e6      	bne.n	8005bc4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	3308      	adds	r3, #8
 8005bfc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	e853 3f00 	ldrex	r3, [r3]
 8005c04:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0301 	bic.w	r3, r3, #1
 8005c0c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	3308      	adds	r3, #8
 8005c14:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c16:	61fa      	str	r2, [r7, #28]
 8005c18:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1a:	69b9      	ldr	r1, [r7, #24]
 8005c1c:	69fa      	ldr	r2, [r7, #28]
 8005c1e:	e841 2300 	strex	r3, r2, [r1]
 8005c22:	617b      	str	r3, [r7, #20]
   return(result);
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d1e5      	bne.n	8005bf6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2220      	movs	r2, #32
 8005c2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e012      	b.n	8005c64 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2200      	movs	r2, #0
 8005c58:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3758      	adds	r7, #88	@ 0x58
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	e04f      	b.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d04b      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c86:	f7fb fa2f 	bl	80010e8 <HAL_GetTick>
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	1ad3      	subs	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d302      	bcc.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c9c:	2303      	movs	r3, #3
 8005c9e:	e04e      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d037      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b80      	cmp	r3, #128	@ 0x80
 8005cb2:	d034      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	2b40      	cmp	r3, #64	@ 0x40
 8005cb8:	d031      	beq.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	69db      	ldr	r3, [r3, #28]
 8005cc0:	f003 0308 	and.w	r3, r3, #8
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d110      	bne.n	8005cea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2208      	movs	r2, #8
 8005cce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f839 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2208      	movs	r2, #8
 8005cda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e029      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69db      	ldr	r3, [r3, #28]
 8005cf0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cf8:	d111      	bne.n	8005d1e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005d02:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d04:	68f8      	ldr	r0, [r7, #12]
 8005d06:	f000 f81f 	bl	8005d48 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2220      	movs	r2, #32
 8005d0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e00f      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	69da      	ldr	r2, [r3, #28]
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	4013      	ands	r3, r2
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	79fb      	ldrb	r3, [r7, #7]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d0a0      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3710      	adds	r7, #16
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
	...

08005d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b095      	sub	sp, #84	@ 0x54
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d70:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d72:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d76:	e841 2300 	strex	r3, r2, [r1]
 8005d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d1e6      	bne.n	8005d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	3308      	adds	r3, #8
 8005d88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8a:	6a3b      	ldr	r3, [r7, #32]
 8005d8c:	e853 3f00 	ldrex	r3, [r3]
 8005d90:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	4b1e      	ldr	r3, [pc, #120]	@ (8005e10 <UART_EndRxTransfer+0xc8>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	3308      	adds	r3, #8
 8005da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005da2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005daa:	e841 2300 	strex	r3, r2, [r1]
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e5      	bne.n	8005d82 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d118      	bne.n	8005df0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	e853 3f00 	ldrex	r3, [r3]
 8005dca:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0310 	bic.w	r3, r3, #16
 8005dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	461a      	mov	r2, r3
 8005dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de0:	6979      	ldr	r1, [r7, #20]
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	e841 2300 	strex	r3, r2, [r1]
 8005de8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dea:	693b      	ldr	r3, [r7, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d1e6      	bne.n	8005dbe <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2220      	movs	r2, #32
 8005df4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005e04:	bf00      	nop
 8005e06:	3754      	adds	r7, #84	@ 0x54
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	effffffe 	.word	0xeffffffe

08005e14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e027      	b.n	8005e7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2224      	movs	r2, #36	@ 0x24
 8005e36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f022 0201 	bic.w	r2, r2, #1
 8005e50:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005e58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2220      	movs	r2, #32
 8005e6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b084      	sub	sp, #16
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
 8005e8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d101      	bne.n	8005e9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e9a:	2302      	movs	r3, #2
 8005e9c:	e02d      	b.n	8005efa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2224      	movs	r2, #36	@ 0x24
 8005eaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f022 0201 	bic.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	683a      	ldr	r2, [r7, #0]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f850 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3710      	adds	r7, #16
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b084      	sub	sp, #16
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	6078      	str	r0, [r7, #4]
 8005f0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d101      	bne.n	8005f1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005f16:	2302      	movs	r3, #2
 8005f18:	e02d      	b.n	8005f76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2224      	movs	r2, #36	@ 0x24
 8005f26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f812 	bl	8005f80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68fa      	ldr	r2, [r7, #12]
 8005f62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3710      	adds	r7, #16
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d108      	bne.n	8005fa2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005fa0:	e031      	b.n	8006006 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005fa2:	2310      	movs	r3, #16
 8005fa4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005fa6:	2310      	movs	r3, #16
 8005fa8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	0e5b      	lsrs	r3, r3, #25
 8005fb2:	b2db      	uxtb	r3, r3
 8005fb4:	f003 0307 	and.w	r3, r3, #7
 8005fb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	0f5b      	lsrs	r3, r3, #29
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f003 0307 	and.w	r3, r3, #7
 8005fc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fca:	7bbb      	ldrb	r3, [r7, #14]
 8005fcc:	7b3a      	ldrb	r2, [r7, #12]
 8005fce:	4911      	ldr	r1, [pc, #68]	@ (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fd0:	5c8a      	ldrb	r2, [r1, r2]
 8005fd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fd6:	7b3a      	ldrb	r2, [r7, #12]
 8005fd8:	490f      	ldr	r1, [pc, #60]	@ (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005fda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fe0:	b29a      	uxth	r2, r3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fe8:	7bfb      	ldrb	r3, [r7, #15]
 8005fea:	7b7a      	ldrb	r2, [r7, #13]
 8005fec:	4909      	ldr	r1, [pc, #36]	@ (8006014 <UARTEx_SetNbDataToProcess+0x94>)
 8005fee:	5c8a      	ldrb	r2, [r1, r2]
 8005ff0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ff4:	7b7a      	ldrb	r2, [r7, #13]
 8005ff6:	4908      	ldr	r1, [pc, #32]	@ (8006018 <UARTEx_SetNbDataToProcess+0x98>)
 8005ff8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ffa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006006:	bf00      	nop
 8006008:	3714      	adds	r7, #20
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
 8006012:	bf00      	nop
 8006014:	080066c4 	.word	0x080066c4
 8006018:	080066cc 	.word	0x080066cc

0800601c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800601c:	b084      	sub	sp, #16
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	f107 001c 	add.w	r0, r7, #28
 800602a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800602e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006032:	2b01      	cmp	r3, #1
 8006034:	d121      	bne.n	800607a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68da      	ldr	r2, [r3, #12]
 8006046:	4b2c      	ldr	r3, [pc, #176]	@ (80060f8 <USB_CoreInit+0xdc>)
 8006048:	4013      	ands	r3, r2
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800605a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800605e:	2b01      	cmp	r3, #1
 8006060:	d105      	bne.n	800606e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	68db      	ldr	r3, [r3, #12]
 8006066:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 faaa 	bl	80065c8 <USB_CoreReset>
 8006074:	4603      	mov	r3, r0
 8006076:	73fb      	strb	r3, [r7, #15]
 8006078:	e01b      	b.n	80060b2 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68db      	ldr	r3, [r3, #12]
 800607e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fa9e 	bl	80065c8 <USB_CoreReset>
 800608c:	4603      	mov	r3, r0
 800608e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006090:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80060a4:	e005      	b.n	80060b2 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80060b2:	7fbb      	ldrb	r3, [r7, #30]
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d116      	bne.n	80060e6 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80060bc:	b29a      	uxth	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060c6:	4b0d      	ldr	r3, [pc, #52]	@ (80060fc <USB_CoreInit+0xe0>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f043 0206 	orr.w	r2, r3, #6
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f043 0220 	orr.w	r2, r3, #32
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060f2:	b004      	add	sp, #16
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	ffbdffbf 	.word	0xffbdffbf
 80060fc:	03ee0000 	.word	0x03ee0000

08006100 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689b      	ldr	r3, [r3, #8]
 800610c:	f023 0201 	bic.w	r2, r3, #1
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	370c      	adds	r7, #12
 800611a:	46bd      	mov	sp, r7
 800611c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006120:	4770      	bx	lr

08006122 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	68db      	ldr	r3, [r3, #12]
 8006136:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800613e:	78fb      	ldrb	r3, [r7, #3]
 8006140:	2b01      	cmp	r3, #1
 8006142:	d115      	bne.n	8006170 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	68db      	ldr	r3, [r3, #12]
 8006148:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006150:	200a      	movs	r0, #10
 8006152:	f7fa ffd5 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	330a      	adds	r3, #10
 800615a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 fa25 	bl	80065ac <USB_GetMode>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d01e      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2bc7      	cmp	r3, #199	@ 0xc7
 800616c:	d9f0      	bls.n	8006150 <USB_SetCurrentMode+0x2e>
 800616e:	e01a      	b.n	80061a6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d115      	bne.n	80061a2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006182:	200a      	movs	r0, #10
 8006184:	f7fa ffbc 	bl	8001100 <HAL_Delay>
      ms += 10U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	330a      	adds	r3, #10
 800618c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa0c 	bl	80065ac <USB_GetMode>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <USB_SetCurrentMode+0x84>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2bc7      	cmp	r3, #199	@ 0xc7
 800619e:	d9f0      	bls.n	8006182 <USB_SetCurrentMode+0x60>
 80061a0:	e001      	b.n	80061a6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e005      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2bc8      	cmp	r3, #200	@ 0xc8
 80061aa:	d101      	bne.n	80061b0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
	...

080061bc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80061bc:	b084      	sub	sp, #16
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80061ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061ce:	2300      	movs	r3, #0
 80061d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061d6:	2300      	movs	r3, #0
 80061d8:	613b      	str	r3, [r7, #16]
 80061da:	e009      	b.n	80061f0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	3340      	adds	r3, #64	@ 0x40
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4413      	add	r3, r2
 80061e6:	2200      	movs	r2, #0
 80061e8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	3301      	adds	r3, #1
 80061ee:	613b      	str	r3, [r7, #16]
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	2b0e      	cmp	r3, #14
 80061f4:	d9f2      	bls.n	80061dc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061f6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d11c      	bne.n	8006238 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	68fa      	ldr	r2, [r7, #12]
 8006208:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800620c:	f043 0302 	orr.w	r3, r3, #2
 8006210:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006216:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e005      	b.n	8006244 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800623c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800624a:	461a      	mov	r2, r3
 800624c:	2300      	movs	r3, #0
 800624e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006250:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006254:	2b01      	cmp	r3, #1
 8006256:	d10d      	bne.n	8006274 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800625c:	2b00      	cmp	r3, #0
 800625e:	d104      	bne.n	800626a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f968 	bl	8006538 <USB_SetDevSpeed>
 8006268:	e008      	b.n	800627c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800626a:	2101      	movs	r1, #1
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f000 f963 	bl	8006538 <USB_SetDevSpeed>
 8006272:	e003      	b.n	800627c <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006274:	2103      	movs	r1, #3
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f95e 	bl	8006538 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800627c:	2110      	movs	r1, #16
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f8fa 	bl	8006478 <USB_FlushTxFifo>
 8006284:	4603      	mov	r3, r0
 8006286:	2b00      	cmp	r3, #0
 8006288:	d001      	beq.n	800628e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 f924 	bl	80064dc <USB_FlushRxFifo>
 8006294:	4603      	mov	r3, r0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d001      	beq.n	800629e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062a4:	461a      	mov	r2, r3
 80062a6:	2300      	movs	r3, #0
 80062a8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b0:	461a      	mov	r2, r3
 80062b2:	2300      	movs	r3, #0
 80062b4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062bc:	461a      	mov	r2, r3
 80062be:	2300      	movs	r3, #0
 80062c0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80062c2:	2300      	movs	r3, #0
 80062c4:	613b      	str	r3, [r7, #16]
 80062c6:	e043      	b.n	8006350 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	015a      	lsls	r2, r3, #5
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	4413      	add	r3, r2
 80062d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062de:	d118      	bne.n	8006312 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d10a      	bne.n	80062fc <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	461a      	mov	r2, r3
 80062f4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062f8:	6013      	str	r3, [r2, #0]
 80062fa:	e013      	b.n	8006324 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006308:	461a      	mov	r2, r3
 800630a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	e008      	b.n	8006324 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800631e:	461a      	mov	r2, r3
 8006320:	2300      	movs	r3, #0
 8006322:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	015a      	lsls	r2, r3, #5
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	4413      	add	r3, r2
 800632c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006330:	461a      	mov	r2, r3
 8006332:	2300      	movs	r3, #0
 8006334:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006342:	461a      	mov	r2, r3
 8006344:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006348:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	3301      	adds	r3, #1
 800634e:	613b      	str	r3, [r7, #16]
 8006350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006354:	461a      	mov	r2, r3
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	4293      	cmp	r3, r2
 800635a:	d3b5      	bcc.n	80062c8 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800635c:	2300      	movs	r3, #0
 800635e:	613b      	str	r3, [r7, #16]
 8006360:	e043      	b.n	80063ea <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	015a      	lsls	r2, r3, #5
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006378:	d118      	bne.n	80063ac <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10a      	bne.n	8006396 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	e013      	b.n	80063be <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	015a      	lsls	r2, r3, #5
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063a2:	461a      	mov	r2, r3
 80063a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	e008      	b.n	80063be <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b8:	461a      	mov	r2, r3
 80063ba:	2300      	movs	r3, #0
 80063bc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	2300      	movs	r3, #0
 80063ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	015a      	lsls	r2, r3, #5
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	4413      	add	r3, r2
 80063d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063dc:	461a      	mov	r2, r3
 80063de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063e2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	3301      	adds	r3, #1
 80063e8:	613b      	str	r3, [r7, #16]
 80063ea:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063ee:	461a      	mov	r2, r3
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d3b5      	bcc.n	8006362 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	68fa      	ldr	r2, [r7, #12]
 8006400:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006408:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2200      	movs	r2, #0
 800640e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006416:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006418:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800641c:	2b00      	cmp	r3, #0
 800641e:	d105      	bne.n	800642c <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	f043 0210 	orr.w	r2, r3, #16
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	699a      	ldr	r2, [r3, #24]
 8006430:	4b0f      	ldr	r3, [pc, #60]	@ (8006470 <USB_DevInit+0x2b4>)
 8006432:	4313      	orrs	r3, r2
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006438:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800643c:	2b00      	cmp	r3, #0
 800643e:	d005      	beq.n	800644c <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	f043 0208 	orr.w	r2, r3, #8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800644c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006450:	2b01      	cmp	r3, #1
 8006452:	d105      	bne.n	8006460 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	699a      	ldr	r2, [r3, #24]
 8006458:	4b06      	ldr	r3, [pc, #24]	@ (8006474 <USB_DevInit+0x2b8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	687a      	ldr	r2, [r7, #4]
 800645e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006460:	7dfb      	ldrb	r3, [r7, #23]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3718      	adds	r7, #24
 8006466:	46bd      	mov	sp, r7
 8006468:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800646c:	b004      	add	sp, #16
 800646e:	4770      	bx	lr
 8006470:	803c3800 	.word	0x803c3800
 8006474:	40000004 	.word	0x40000004

08006478 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006478:	b480      	push	{r7}
 800647a:	b085      	sub	sp, #20
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006482:	2300      	movs	r3, #0
 8006484:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006492:	d901      	bls.n	8006498 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006494:	2303      	movs	r3, #3
 8006496:	e01b      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	691b      	ldr	r3, [r3, #16]
 800649c:	2b00      	cmp	r3, #0
 800649e:	daf2      	bge.n	8006486 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064a0:	2300      	movs	r3, #0
 80064a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	019b      	lsls	r3, r3, #6
 80064a8:	f043 0220 	orr.w	r2, r3, #32
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3301      	adds	r3, #1
 80064b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064bc:	d901      	bls.n	80064c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e006      	b.n	80064d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0320 	and.w	r3, r3, #32
 80064ca:	2b20      	cmp	r3, #32
 80064cc:	d0f0      	beq.n	80064b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3714      	adds	r7, #20
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064e4:	2300      	movs	r3, #0
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064f4:	d901      	bls.n	80064fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e018      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	daf2      	bge.n	80064e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2210      	movs	r2, #16
 800650a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	3301      	adds	r3, #1
 8006510:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006518:	d901      	bls.n	800651e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e006      	b.n	800652c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f003 0310 	and.w	r3, r3, #16
 8006526:	2b10      	cmp	r3, #16
 8006528:	d0f0      	beq.n	800650c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800652a:	2300      	movs	r3, #0
}
 800652c:	4618      	mov	r0, r3
 800652e:	3714      	adds	r7, #20
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006538:	b480      	push	{r7}
 800653a:	b085      	sub	sp, #20
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	460b      	mov	r3, r1
 8006542:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	78fb      	ldrb	r3, [r7, #3]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006558:	4313      	orrs	r3, r2
 800655a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3714      	adds	r7, #20
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800656a:	b480      	push	{r7}
 800656c:	b085      	sub	sp, #20
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006584:	f023 0303 	bic.w	r3, r3, #3
 8006588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006598:	f043 0302 	orr.w	r3, r3, #2
 800659c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800659e:	2300      	movs	r3, #0
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3714      	adds	r7, #20
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr

080065ac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	695b      	ldr	r3, [r3, #20]
 80065b8:	f003 0301 	and.w	r3, r3, #1
}
 80065bc:	4618      	mov	r0, r3
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	3301      	adds	r3, #1
 80065d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80065e0:	d901      	bls.n	80065e6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065e2:	2303      	movs	r3, #3
 80065e4:	e01b      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	daf2      	bge.n	80065d4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	f043 0201 	orr.w	r2, r3, #1
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800660a:	d901      	bls.n	8006610 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e006      	b.n	800661e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	691b      	ldr	r3, [r3, #16]
 8006614:	f003 0301 	and.w	r3, r3, #1
 8006618:	2b01      	cmp	r3, #1
 800661a:	d0f0      	beq.n	80065fe <USB_CoreReset+0x36>

  return HAL_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3714      	adds	r7, #20
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <memset>:
 800662a:	4402      	add	r2, r0
 800662c:	4603      	mov	r3, r0
 800662e:	4293      	cmp	r3, r2
 8006630:	d100      	bne.n	8006634 <memset+0xa>
 8006632:	4770      	bx	lr
 8006634:	f803 1b01 	strb.w	r1, [r3], #1
 8006638:	e7f9      	b.n	800662e <memset+0x4>
	...

0800663c <__libc_init_array>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4d0d      	ldr	r5, [pc, #52]	@ (8006674 <__libc_init_array+0x38>)
 8006640:	4c0d      	ldr	r4, [pc, #52]	@ (8006678 <__libc_init_array+0x3c>)
 8006642:	1b64      	subs	r4, r4, r5
 8006644:	10a4      	asrs	r4, r4, #2
 8006646:	2600      	movs	r6, #0
 8006648:	42a6      	cmp	r6, r4
 800664a:	d109      	bne.n	8006660 <__libc_init_array+0x24>
 800664c:	4d0b      	ldr	r5, [pc, #44]	@ (800667c <__libc_init_array+0x40>)
 800664e:	4c0c      	ldr	r4, [pc, #48]	@ (8006680 <__libc_init_array+0x44>)
 8006650:	f000 f818 	bl	8006684 <_init>
 8006654:	1b64      	subs	r4, r4, r5
 8006656:	10a4      	asrs	r4, r4, #2
 8006658:	2600      	movs	r6, #0
 800665a:	42a6      	cmp	r6, r4
 800665c:	d105      	bne.n	800666a <__libc_init_array+0x2e>
 800665e:	bd70      	pop	{r4, r5, r6, pc}
 8006660:	f855 3b04 	ldr.w	r3, [r5], #4
 8006664:	4798      	blx	r3
 8006666:	3601      	adds	r6, #1
 8006668:	e7ee      	b.n	8006648 <__libc_init_array+0xc>
 800666a:	f855 3b04 	ldr.w	r3, [r5], #4
 800666e:	4798      	blx	r3
 8006670:	3601      	adds	r6, #1
 8006672:	e7f2      	b.n	800665a <__libc_init_array+0x1e>
 8006674:	080066dc 	.word	0x080066dc
 8006678:	080066dc 	.word	0x080066dc
 800667c:	080066dc 	.word	0x080066dc
 8006680:	080066e0 	.word	0x080066e0

08006684 <_init>:
 8006684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006686:	bf00      	nop
 8006688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800668a:	bc08      	pop	{r3}
 800668c:	469e      	mov	lr, r3
 800668e:	4770      	bx	lr

08006690 <_fini>:
 8006690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006692:	bf00      	nop
 8006694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006696:	bc08      	pop	{r3}
 8006698:	469e      	mov	lr, r3
 800669a:	4770      	bx	lr
